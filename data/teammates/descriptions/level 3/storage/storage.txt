
The `Storage` component performs CRUD (Create, Read, Update, Delete) operations on data entities individually.
It contains minimal logic beyond what is directly relevant to CRUD operations.
In particular, it is reponsible for:

- Validating data inside entities before creating/updating them, to ensure they are in a valid state.
- Hiding the complexities of the database from the `Logic` component.
- Hiding the persistable objects: Classes in the `storage::entity` package are not visible outside this component to hide information specific to data persistence.
  - Instead, a corresponding non-persistent [data transfer object](http://en.wikipedia.org/wiki/Data_transfer_object) named `*Attributes` (e.g., `CourseAttributes` is the data transfer object for `Course` entities) object is returned. These datatransfer classes are in `common::datatransfer` package, to be explained later.

The `Storage` component does not perform any cascade delete/create operations. Cascade logic is handled by the `Logic` component.

<puml src="diagrams/StorageComponent.puml"/>

Package overview:

+ **`storage.api`**: Provides the API of the component to be accessed by the logic component.
+ **`storage.entity`**: Classes that represent persistable entities.
+ **`storage.search`**: Classes for dealing with searching and indexing.

<puml src="diagrams/StorageClassDiagram.puml"/>

Note that the navigability of the association links between entity objects appear to be in the reverse direction of what we see in a normal OOP design.
This is because we want to keep the data schema flexible so that new entity types can be added later with minimal modifications to existing elements.

The storage layer of the application uses the persistence framework provided by **Google Cloud Datastore**, a NoSQL database.
Represented by the `*Db` classes. These classes act as the bridge to the database.

Policies

Add and Delete operations try to wait until data is persisted in the database before returning. This is not enough to compensate for eventual consistency involving multiple servers in the Google Cloud Datastore environment. However, it is expected to avoid test failures caused by eventual consistency in dev server and reduce such problems in the live server.
Note: 'Eventual consistency' here means it takes some time for a database operation to propagate across all replicas of the Google Cloud Datastore. As a result, the data may be in an inconsistent states for short periods of time although things should become consistent 'eventually'. For example, an object we deleted may appear to still exist for a short while.

Implementation of Transaction Control has been minimized due to limitations of Google Cloud Datastore environment and the nature of our data schema.

API for creating:

+ Attempt to create an entity that already exists: Throws `EntityAlreadyExistsException`.
+ Attempt to create an entity with invalid data: Throws `InvalidParametersException`.

API for retrieving:

+ Attempt to retrieve an entity that does not exist: Returns `null`.

API for updating:

+ Attempt to update an entity that does not exist: Throws `EntityDoesNotExistException`.
+ Attempt to update an entity with invalid data: Throws `InvalidParametersException`.

API for deleting:

+ Attempt to delete an entity that does not exist: Fails silently.

