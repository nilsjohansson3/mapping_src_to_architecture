Module,Text
appender,getConfiguration publicConfigurationgetConfiguration()
appender,getLayout publicLayout<? extends Serializable>getLayout()
appender,getName publicStringgetName()
appender,getOrCreateLayout publicLayout<? extends Serializable>getOrCreateLayout()
appender,getOrCreateLayout publicLayout<? extends Serializable>getOrCreateLayout(Charsetcharset)
appender,isIgnoreExceptions publicbooleanisIgnoreExceptions()
appender,setConfiguration publicBsetConfiguration(Configurationconfiguration)
appender,setIgnoreExceptions publicBsetIgnoreExceptions(booleanignoreExceptions)
appender,setLayout publicBsetLayout(Layout<? extends Serializable>layout)
appender,setName publicBsetName(Stringname)
appender,withConfiguration @Deprecated publicBwithConfiguration(Configurationconfiguration) Deprecated. Use setConfiguration(Configuration)
appender,withIgnoreExceptions @Deprecated publicBwithIgnoreExceptions(booleanignoreExceptions) Deprecated. use setIgnoreExceptions(boolean).
appender,withLayout @Deprecated publicBwithLayout(Layout<? extends Serializable>layout) Deprecated. use setLayout(Layout).
appender,withName @Deprecated publicBwithName(Stringname) Deprecated. use setName(String).
appender,getErrorPrefix publicStringgetErrorPrefix()
appender,"parseInt public staticintparseInt(Strings, intdefaultValue)"
appender,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
appender,error publicvoiderror(Stringmsg) Handle an error with a message using the ErrorHandler configured for this Appender. Parameters: msg - The message.
appender,"error publicvoiderror(Stringmsg, LogEventevent, Throwablet) Handle an error with a message, exception, and a logging event, using the ErrorHandler configured for this Appender. Parameters: msg - The message. event - The LogEvent. t - The Throwable."
appender,"error publicvoiderror(Stringmsg, Throwablet) Handle an error with a message and an exception using the ErrorHandler configured for this Appender. Parameters: msg - The message. t - The Throwable."
appender,"getHandler publicErrorHandlergetHandler() Returns the ErrorHandler, if any. Specified by: getHandlerin interfaceAppender Returns: The ErrorHandler."
appender,getLayout publicLayout<? extends Serializable>getLayout() Returns the Layout for the appender. Specified by: getLayoutin interfaceAppender Returns: The Layout used to format the event.
appender,getName publicStringgetName() Returns the name of the Appender. Specified by: getNamein interfaceAppender Returns: The name of the Appender.
appender,"ignoreExceptions publicbooleanignoreExceptions() Some appenders need to propagate exceptions back to the application. When ignoreExceptions is false the AppenderControl will allow the exception to percolate. Specified by: ignoreExceptionsin interfaceAppender Returns: true if exceptions will be logged but now thrown, false otherwise."
appender,setHandler publicvoidsetHandler(ErrorHandlerhandler) The handler must be set before the appender is started. Specified by: setHandlerin interfaceAppender Parameters: handler - The ErrorHandler to use.
appender,toSerializable protectedSerializabletoSerializable(LogEventevent) Serializes the given event using the appender's layout if present. Parameters: event - the event to serialize. Returns: the serialized event or null if no layout is present.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getAdvertiseUri publicStringgetAdvertiseUri()
appender,getFileName publicStringgetFileName()
appender,isAdvertise publicbooleanisAdvertise()
appender,isAppend publicbooleanisAppend()
appender,isCreateOnDemand publicbooleanisCreateOnDemand()
appender,isLocking publicbooleanisLocking()
appender,getFilePermissions publicStringgetFilePermissions()
appender,getFileOwner publicStringgetFileOwner()
appender,getFileGroup publicStringgetFileGroup()
appender,withAdvertise publicBwithAdvertise(booleanadvertise)
appender,withAdvertiseUri publicBwithAdvertiseUri(StringadvertiseUri)
appender,withAppend publicBwithAppend(booleanappend)
appender,withFileName publicBwithFileName(StringfileName)
appender,withCreateOnDemand publicBwithCreateOnDemand(booleancreateOnDemand)
appender,withLocking publicBwithLocking(booleanlocking)
appender,withFilePermissions publicBwithFilePermissions(StringfilePermissions)
appender,withFileOwner publicBwithFileOwner(StringfileOwner)
appender,withFileGroup publicBwithFileGroup(StringfileGroup)
appender,getFileName publicStringgetFileName() Returns the file name this appender is associated with. Returns: The File name.
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<M extends OutputStreamManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,getConfiguration publicConfigurationgetConfiguration() Gets my configuration. Returns: my configuration.
appender,close publicvoidclose() Called to signify that this Manager is no longer required by an Appender. Specified by: closein interfaceAutoCloseable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit)"
appender,"getManager public static<M extends AbstractManager, T>MgetManager(Stringname, ManagerFactory<M,T>factory, Tdata) Retrieves a Manager if it has been previously created or creates a new Manager. Type Parameters: M - The Type of the Manager to be created. T - The type of the Factory data. Parameters: name - The name of the Manager to retrieve. factory - The Factory to use to create the Manager. data - An Object that should be passed to the factory when creating the Manager. Returns: A Manager with the specified name and type."
appender,updateData publicvoidupdateData(Objectdata) Used by Log4j to update the Manager during reconfiguration. This method should be considered private. Implementations may not be thread safe. This method may be made protected in a future release. Parameters: data - The data to update.
appender,"hasManager public staticbooleanhasManager(Stringname) Determines if a Manager with the specified name exists. Parameters: name - The name of the Manager. Returns: True if the Manager exists, false otherwise."
appender,"narrow protected static<M extends AbstractManager>Mnarrow(Class<M>narrowClass, AbstractManagermanager) Returns the specified manager, cast to the specified narrow type. Type Parameters: M - the narrow type Parameters: narrowClass - the type to cast to manager - the manager object to return Returns: the specified manager, cast to the specified narrow type Throws: ConfigurationException - if the manager cannot be cast to the specified type, which only happens when the configuration has multiple incompatible appenders pointing to the same resource Since: 2.9 See Also: LOG4J2-1908"
appender,LOG4J2-1908
appender,logger protected staticStatusLoggerlogger()
appender,"releaseSub protectedbooleanreleaseSub(longtimeout, TimeUnittimeUnit) May be overridden by managers to perform processing while the manager is being released and the lock is held. A timeout is passed for implementors to use as they see fit. Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,getCount protectedintgetCount()
appender,getLoggerContext publicLoggerContextgetLoggerContext() Gets the logger context used to create this instance or null. The logger context is usually set when an appender creates a manager and that appender is given a Configuration. Not all appenders are given a Configuration by their factory method or builder. Returns: the logger context used to create this instance or null.
appender,"release @Deprecated publicvoidrelease() Deprecated. In 2.7, use close(). Called to signify that this Manager is no longer required by an Appender."
appender,getName publicStringgetName() Returns the name of the Manager. Returns: The name of the Manager.
appender,"getContentFormat publicMap<String,String>getContentFormat() Provide a description of the content format supported by this Manager. Default implementation returns an empty (unspecified) Map. Returns: a Map of key/value pairs describing the Manager-specific content format, or an empty Map if no content format descriptors are specified."
appender,getStrSubstitutor protectedStrSubstitutorgetStrSubstitutor() Gets my configuration's StrSubstitutor or null. Returns: my configuration's StrSubstitutor or null.
appender,"log protectedvoidlog(Levellevel, Stringmessage, Throwablethrowable)"
appender,"logDebug protectedvoidlogDebug(Stringmessage, Throwablethrowable)"
appender,"logError protectedvoidlogError(Stringmessage, Throwablethrowable)"
appender,"logWarn protectedvoidlogWarn(Stringmessage, Throwablethrowable)"
appender,getBufferSize publicintgetBufferSize()
appender,isBufferedIo publicbooleanisBufferedIo()
appender,isImmediateFlush publicbooleanisImmediateFlush()
appender,setImmediateFlush publicBsetImmediateFlush(booleanimmediateFlush)
appender,setBufferedIo publicBsetBufferedIo(booleanbufferedIo)
appender,setBufferSize publicBsetBufferSize(intbufferSize)
appender,withImmediateFlush @Deprecated publicBwithImmediateFlush(booleanimmediateFlush) Deprecated.
appender,withBufferedIo @Deprecated publicBwithBufferedIo(booleanbufferedIo) Deprecated.
appender,withBufferSize @Deprecated publicBwithBufferSize(intbufferSize) Deprecated.
appender,getImmediateFlush publicbooleangetImmediateFlush() Gets the immediate flush setting. Returns: immediate flush.
appender,getManager publicMgetManager() Gets the manager. Returns: the manager.
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,"stop protectedbooleanstop(longtimeout, TimeUnittimeUnit, booleanchangeLifeCycleState) Description copied from class:AbstractFilterable Cleanup the Filter. Overrides: stopin classAbstractFilterable"
appender,append publicvoidappend(LogEventevent) Actual writing occurs here. Most subclasses of AbstractOutputStreamAppender will need to override this method. Parameters: event - The LogEvent.
appender,directEncodeEvent protectedvoiddirectEncodeEvent(LogEventevent)
appender,writeByteArrayToManager protectedvoidwriteByteArrayToManager(LogEventevent)
appender,append publicvoidappend(LogEventevent) Actual writing occurs here. Most subclasses will need to override this method. Parameters: event - The LogEvent.
appender,getManager publicMgetManager() Gets the manager. Returns: the manager.
appender,getStringLayout publicStringLayoutgetStringLayout()
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,build publicAppenderSetbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<AppenderSet> Returns: the configured instance.
appender,getNode publicNodegetNode()
appender,getConfiguration publicConfigurationgetConfiguration()
appender,withNode publicAppenderSet.BuilderwithNode(Nodenode)
appender,withConfiguration publicAppenderSet.BuilderwithConfiguration(Configurationconfiguration)
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,newBuilder @PluginBuilderFactory public staticAppenderSet.BuildernewBuilder()
appender,"createAppender publicAppendercreateAppender(StringactualAppenderName, StringsourceAppenderName)"
appender,setAppenderRefs publicAsyncAppender.BuildersetAppenderRefs(AppenderRef[]appenderRefs)
appender,setErrorRef publicAsyncAppender.BuildersetErrorRef(StringerrorRef)
appender,setBlocking publicAsyncAppender.BuildersetBlocking(booleanblocking)
appender,setShutdownTimeout publicAsyncAppender.BuildersetShutdownTimeout(longshutdownTimeout)
appender,setBufferSize publicAsyncAppender.BuildersetBufferSize(intbufferSize)
appender,setName publicAsyncAppender.BuildersetName(Stringname)
appender,setIncludeLocation publicAsyncAppender.BuildersetIncludeLocation(booleanincludeLocation)
appender,setConfiguration publicAsyncAppender.BuildersetConfiguration(Configurationconfiguration)
appender,setIgnoreExceptions publicAsyncAppender.BuildersetIgnoreExceptions(booleanignoreExceptions)
appender,setBlockingQueueFactory publicAsyncAppender.BuildersetBlockingQueueFactory(BlockingQueueFactory<LogEvent>blockingQueueFactory)
appender,build publicAsyncAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends AsyncAppender.Builder<B>> Returns: the configured instance.
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,append publicvoidappend(LogEventlogEvent) Actual writing occurs here. Parameters: logEvent - The LogEvent.
appender,logMessageInCurrentThread publicvoidlogMessageInCurrentThread(LogEventlogEvent) FOR INTERNAL USE ONLY. Parameters: logEvent - the event to log
appender,logMessageInBackgroundThread publicvoidlogMessageInBackgroundThread(LogEventlogEvent) FOR INTERNAL USE ONLY. Parameters: logEvent - the event to log
appender,"createAppender @Deprecated public staticAsyncAppendercreateAppender(AppenderRef[]appenderRefs, StringerrorRef, booleanblocking, longshutdownTimeout, intsize, Stringname, booleanincludeLocation, Filterfilter, Configurationconfig, booleanignoreExceptions) Deprecated. use AsyncAppender.Builder instead Create an AsyncAppender. This method is retained for backwards compatibility. New code should use the AsyncAppender.Builder instead. This factory will use ArrayBlockingQueueFactory by default as was the behavior pre-2.7. Parameters: appenderRefs - The Appenders to reference. errorRef - An optional Appender to write to if the queue is full or other errors occur. blocking - True if the Appender should wait when the queue is full. The default is true. shutdownTimeout - How many milliseconds the Appender should wait to flush outstanding log events in the queue on shutdown. The default is zero which means to wait forever. size - The size of the event queue. The default is 128. name - The name of the Appender. includeLocation - whether to include location information. The default is false. filter - The Filter or null. config - The Configuration. ignoreExceptions - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. Returns: The AsyncAppender."
appender,newBuilder @PluginBuilderFactory public staticAsyncAppender.BuildernewBuilder()
appender,getAppenderRefStrings publicString[]getAppenderRefStrings() Returns the names of the appenders that this asyncAppender delegates to as an array of Strings. Returns: the names of the sink appenders
appender,"isIncludeLocation publicbooleanisIncludeLocation() Returns true if this AsyncAppender will take a snapshot of the stack with every log event to determine the class and method where the logging call was made. Returns: true if location is included with every event, false otherwise"
appender,"isBlocking publicbooleanisBlocking() Returns true if this AsyncAppender will block when the queue is full, or false if events are dropped when the queue is full. Returns: whether this AsyncAppender will block or drop events when the queue is full."
appender,getAppenders publicList<Appender>getAppenders() Gets all Appenders. Returns: a list of Appenders.
appender,getErrorRef publicStringgetErrorRef() Returns the name of the appender that any errors are logged to or null. Returns: the name of the appender that any errors are logged to or null
appender,getQueueCapacity publicintgetQueueCapacity()
appender,getQueueRemainingCapacity publicintgetQueueRemainingCapacity()
appender,getQueueSize publicintgetQueueSize() Returns the number of elements in the queue. Returns: the number of elements in the queue. Since: 2.11.1
appender,getConfiguration publicConfigurationgetConfiguration()
appender,getLoggerContext publicLoggerContextgetLoggerContext() Gets the LoggerContext from the Configuration or null. Returns: the LoggerContext from the Configuration or null.
appender,setTarget publicBsetTarget(ConsoleAppender.TargetaTarget)
appender,setFollow publicBsetFollow(booleanshouldFollow)
appender,setDirect publicBsetDirect(booleanshouldDirect)
appender,build publicConsoleAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends ConsoleAppender.Builder<B>> Returns: the configured instance.
appender,"createAppender @Deprecated public staticConsoleAppendercreateAppender(Layout<? extends Serializable>layout, Filterfilter, StringtargetStr, Stringname, Stringfollow, Stringignore) Deprecated. Deprecated in 2.7; use newBuilder(). Creates a Console Appender. Parameters: layout - The layout to use (required). filter - The Filter or null. targetStr - The target (""SYSTEM_OUT"" or ""SYSTEM_ERR""). The default is ""SYSTEM_OUT"". name - The name of the Appender (required). follow - If true will follow changes to the underlying output stream. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. Returns: The ConsoleAppender."
appender,"createAppender @Deprecated public staticConsoleAppendercreateAppender(Layout<? extends Serializable>layout, Filterfilter, ConsoleAppender.Targettarget, Stringname, booleanfollow, booleandirect, booleanignoreExceptions) Deprecated. Deprecated in 2.7; use newBuilder(). Creates a Console Appender. Parameters: layout - The layout to use (required). filter - The Filter or null. target - The target (SYSTEM_OUT or SYSTEM_ERR). The default is SYSTEM_OUT. name - The name of the Appender (required). follow - If true will follow changes to the underlying output stream. direct - If true will write directly to FileDescriptor and bypass System.out/System.err. ignoreExceptions - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. Returns: The ConsoleAppender."
appender,createDefaultAppenderForLayout public staticConsoleAppendercreateDefaultAppenderForLayout(Layout<? extends Serializable>layout)
appender,newBuilder @PluginBuilderFactory public static<B extends ConsoleAppender.Builder<B>> BnewBuilder()
appender,getTarget publicConsoleAppender.TargetgetTarget()
appender,"values public staticConsoleAppender.Target[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
appender,valueOf public staticConsoleAppender.TargetvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
appender,getDefaultCharset public abstractCharsetgetDefaultCharset()
appender,"getCharset protectedCharsetgetCharset(Stringproperty, CharsetdefaultCharset)"
appender,getCount publiclonggetCount()
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,"createAppender @PluginFactory public staticCountingNoOpAppendercreateAppender(@PluginAttribute(""name"") Stringname) Creates a CountingNoOp Appender."
appender,error publicvoiderror(Stringmsg) Handle an error with a message. Specified by: errorin interfaceErrorHandler Parameters: msg - a message
appender,"error publicvoiderror(Stringmsg, Throwableerror) Handle an error with a message and an exception. Specified by: errorin interfaceErrorHandler Parameters: msg - a message error - a Throwable"
appender,"error publicvoiderror(Stringmsg, LogEventevent, Throwableerror) Handle an error with a message, an exception, and a logging event. Specified by: errorin interfaceErrorHandler Parameters: msg - a message event - a LogEvent error - a Throwable"
appender,getAppender publicAppendergetAppender()
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,append publicvoidappend(LogEventevent) Handle the Log event. Parameters: event - The LogEvent.
appender,toString publicStringtoString() Overrides: toStringin classAbstractAppender
appender,"createAppender @PluginFactory public staticFailoverAppendercreateAppender(@PluginAttribute(""name"") Stringname, @PluginAttribute(""primary"") Stringprimary, @PluginElement(""Failovers"") String[]failovers, @PluginAliases(""retryInterval"") @PluginAttribute(""retryIntervalSeconds"") StringretryIntervalSeconds, @PluginConfiguration Configurationconfig, @PluginElement(""Filter"") Filterfilter, @PluginAttribute(""ignoreExceptions"") Stringignore) Create a Failover Appender. Parameters: name - The name of the Appender (required). primary - The name of the primary Appender (required). failovers - The name of one or more Appenders to fail over to (at least one is required). retryIntervalSeconds - The retry interval in seconds. config - The current Configuration (passed by the Configuration when the appender is created). filter - A Filter (optional). ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. Returns: The FailoverAppender that was created."
appender,"createFailovers @PluginFactory public staticString[]createFailovers(@PluginElement(""AppenderRef"") AppenderRef...refs) Returns the appender references. Parameters: refs - The references to return. Returns: The appender references."
appender,build publicFileAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends FileAppender.Builder<B>> Returns: the configured instance.
appender,getAdvertiseUri publicStringgetAdvertiseUri()
appender,getFileName publicStringgetFileName()
appender,isAdvertise publicbooleanisAdvertise()
appender,isAppend publicbooleanisAppend()
appender,isCreateOnDemand publicbooleanisCreateOnDemand()
appender,isLocking publicbooleanisLocking()
appender,getFilePermissions publicStringgetFilePermissions()
appender,getFileOwner publicStringgetFileOwner()
appender,getFileGroup publicStringgetFileGroup()
appender,withAdvertise publicBwithAdvertise(booleanadvertise)
appender,withAdvertiseUri publicBwithAdvertiseUri(StringadvertiseUri)
appender,withAppend publicBwithAppend(booleanappend)
appender,withFileName publicBwithFileName(StringfileName)
appender,withCreateOnDemand publicBwithCreateOnDemand(booleancreateOnDemand)
appender,withLocking publicBwithLocking(booleanlocking)
appender,withFilePermissions publicBwithFilePermissions(StringfilePermissions)
appender,withFileOwner publicBwithFileOwner(StringfileOwner)
appender,withFileGroup publicBwithFileGroup(StringfileGroup)
appender,"createAppender @Deprecated public static<B extends FileAppender.Builder<B>> FileAppendercreateAppender(StringfileName, Stringappend, Stringlocking, Stringname, StringimmediateFlush, StringignoreExceptions, StringbufferedIo, StringbufferSizeStr, Layout<? extends Serializable>layout, Filterfilter, Stringadvertise, StringadvertiseUri, Configurationconfig) Deprecated. Use newBuilder() Create a File Appender. Parameters: fileName - The name and path of the file. append - ""True"" if the file should be appended to, ""false"" if it should be overwritten. The default is ""true"". locking - ""True"" if the file should be locked. The default is ""false"". name - The name of the Appender. immediateFlush - ""true"" if the contents should be flushed on every write, ""false"" otherwise. The default is ""true"". ignoreExceptions - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. bufferedIo - ""true"" if I/O should be buffered, ""false"" otherwise. The default is ""true"". bufferSizeStr - buffer size for buffered IO (default is 8192). layout - The layout to use to format the event. If no layout is provided the default PatternLayout will be used. filter - The filter, if any, to use. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. advertiseUri - The advertised URI which can be used to retrieve the file contents. config - The Configuration Returns: The FileAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends FileAppender.Builder<B>>BnewBuilder()
appender,getFileName publicStringgetFileName() Returns the file name this appender is associated with. Returns: The File name.
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<FileManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,"getFileManager public staticFileManagergetFileManager(StringfileName, booleanappend, booleanlocking, booleanbufferedIo, booleancreateOnDemand, StringadvertiseUri, Layout<? extends Serializable>layout, intbufferSize, StringfilePermissions, StringfileOwner, StringfileGroup, Configurationconfiguration) Returns the FileManager. Parameters: fileName - The name of the file to manage. append - true if the file should be appended to, false if it should be overwritten. locking - true if the file should be locked while writing, false otherwise. bufferedIo - true if the contents should be buffered as they are written. createOnDemand - true if you want to lazy-create the file (a.k.a. on-demand.) advertiseUri - the URI to use when advertising the file layout - The layout bufferSize - buffer size for buffered IO filePermissions - File permissions fileOwner - File owner fileGroup - File group configuration - The configuration. Returns: A FileManager for the File."
appender,createOutputStream protectedOutputStreamcreateOutputStream() throws IOException Overrides: createOutputStreamin classOutputStreamManager Throws: IOException
appender,createParentDir protectedvoidcreateParentDir(Filefile)
appender,defineAttributeView protectedvoiddefineAttributeView(Pathpath)
appender,"write protectedvoidwrite(byte[]bytes, intoffset, intlength, booleanimmediateFlush) Description copied from class:OutputStreamManager Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Overrides: writein classOutputStreamManager Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. immediateFlush - flushes immediately after writing."
appender,"writeToDestination protectedvoidwriteToDestination(byte[]bytes, intoffset, intlength) Overrides OutputStreamManager.writeToDestination(byte[], int, int) to add support for file locking. Overrides: writeToDestinationin classOutputStreamManager Parameters: bytes - the array containing data offset - from where to write length - how many bytes to write Since: 2.8"
appender,getFileName publicStringgetFileName() Returns the name of the File being managed. Returns: The name of the File being managed.
appender,"isAppend publicbooleanisAppend() Returns the append status. Returns: true if the file will be appended to, false if it is overwritten."
appender,isCreateOnDemand publicbooleanisCreateOnDemand() Returns the lazy-create. Returns: true if the file will be lazy-created.
appender,"isLocking publicbooleanisLocking() Returns the lock status. Returns: true if the file will be locked when writing, false otherwise."
appender,"getBufferSize publicintgetBufferSize() Returns the buffer size to use if the appender was configured with BufferedIO=true, otherwise returns a negative number. Returns: the buffer size, or a negative number if the output stream is not buffered"
appender,"getFilePermissions publicSet<PosixFilePermission>getFilePermissions() Returns POSIX file permissions if defined and the OS supports POSIX file attribute, null otherwise. Returns: File POSIX permissions See Also: PosixFileAttributeView"
appender,PosixFileAttributeView
appender,"getFileOwner publicStringgetFileOwner() Returns file owner if defined and the OS supports owner file attribute view, null otherwise. Returns: File owner See Also: FileOwnerAttributeView"
appender,FileOwnerAttributeView
appender,"getFileGroup publicStringgetFileGroup() Returns file group if defined and the OS supports POSIX/group file attribute view, null otherwise. Returns: File group See Also: PosixFileAttributeView"
appender,PosixFileAttributeView
appender,isAttributeViewEnabled publicbooleanisAttributeViewEnabled() Returns true if file attribute view enabled for this file manager. Returns: True if POSIX or owner supported and defined false otherwise.
appender,"getContentFormat publicMap<String,String>getContentFormat() FileManager's content format is specified by: Key: ""fileURI"" Value: provided ""advertiseURI"" param. Overrides: getContentFormatin classAbstractManager Returns: Map of content format keys supporting FileManager"
appender,build publicHttpAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends HttpAppender.Builder<B>> Returns: the configured instance.
appender,getUrl publicURLgetUrl()
appender,getMethod publicStringgetMethod()
appender,getConnectTimeoutMillis publicintgetConnectTimeoutMillis()
appender,getReadTimeoutMillis publicintgetReadTimeoutMillis()
appender,getHeaders publicProperty[]getHeaders()
appender,getSslConfiguration publicSslConfigurationgetSslConfiguration()
appender,isVerifyHostname publicbooleanisVerifyHostname()
appender,setUrl publicBsetUrl(URLurl)
appender,setMethod publicBsetMethod(Stringmethod)
appender,setConnectTimeoutMillis publicBsetConnectTimeoutMillis(intconnectTimeoutMillis)
appender,setReadTimeoutMillis publicBsetReadTimeoutMillis(intreadTimeoutMillis)
appender,setHeaders publicBsetHeaders(Property[]headers)
appender,setSslConfiguration publicBsetSslConfiguration(SslConfigurationsslConfiguration)
appender,setVerifyHostname publicBsetVerifyHostname(booleanverifyHostname)
appender,newBuilder @PluginBuilderFactory public static<B extends HttpAppender.Builder<B>>BnewBuilder() Returns: a builder for a HttpAppender.
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,toString publicStringtoString() Overrides: toStringin classAbstractAppender
appender,getConfiguration publicConfigurationgetConfiguration()
appender,startup publicvoidstartup()
appender,"send public abstractvoidsend(Layout<?>layout, LogEventevent) throws Exception Throws: Exception"
appender,"send publicvoidsend(Layout<?>layout, LogEventevent) throws IOException Specified by: sendin classHttpManager Throws: IOException"
appender,"createManager McreateManager(Stringname, Tdata) Creates a Manager. Parameters: name - The name of the entity to manage. data - The data required to create the entity. Returns: A Manager for the entity."
appender,build publicMemoryMappedFileAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends MemoryMappedFileAppender.Builder<B>> Returns: the configured instance.
appender,setFileName publicBsetFileName(StringfileName)
appender,setAppend publicBsetAppend(booleanappend)
appender,setRegionLength publicBsetRegionLength(intregionLength)
appender,setAdvertise publicBsetAdvertise(booleanadvertise)
appender,setAdvertiseURI publicBsetAdvertiseURI(StringadvertiseURI)
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<MemoryMappedFileManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,getFileName publicStringgetFileName() Returns the file name this appender is associated with. Returns: The File name.
appender,getRegionLength publicintgetRegionLength() Returns the length of the memory mapped region. Returns: the length of the memory mapped region
appender,"createAppender @Deprecated public static<B extends MemoryMappedFileAppender.Builder<B>> MemoryMappedFileAppendercreateAppender(StringfileName, Stringappend, Stringname, StringimmediateFlush, StringregionLengthStr, Stringignore, Layout<? extends Serializable>layout, Filterfilter, Stringadvertise, StringadvertiseURI, Configurationconfig) Deprecated. Use newBuilder(). Create a Memory Mapped File Appender. Parameters: fileName - The name and path of the file. append - ""True"" if the file should be appended to, ""false"" if it should be overwritten. The default is ""true"". name - The name of the Appender. immediateFlush - ""true"" if the contents should be flushed on every write, ""false"" otherwise. The default is ""false"". regionLengthStr - The buffer size, defaults to 33554432. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. layout - The layout to use to format the event. If no layout is provided the default PatternLayout will be used. filter - The filter, if any, to use. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. advertiseURI - The advertised URI which can be used to retrieve the file contents. config - The Configuration. Returns: The FileAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends MemoryMappedFileAppender.Builder<B>> BnewBuilder()
appender,"getFileManager public staticMemoryMappedFileManagergetFileManager(StringfileName, booleanappend, booleanimmediateFlush, intregionLength, StringadvertiseURI, Layout<? extends Serializable>layout) Returns the MemoryMappedFileManager. Parameters: fileName - The name of the file to manage. append - true if the file should be appended to, false if it should be overwritten. immediateFlush - true if the contents should be flushed to disk on every write regionLength - The mapped region length. advertiseURI - the URI to use when advertising the file layout - The layout. Returns: A MemoryMappedFileManager for the File."
appender,"isEndOfBatch @Deprecated publicBooleanisEndOfBatch() Deprecated. end-of-batch on the event is used instead. No longer used, the LogEvent.isEndOfBatch() attribute is used instead. Returns: Boolean.FALSE."
appender,"setEndOfBatch @Deprecated publicvoidsetEndOfBatch(booleanendOfBatch) Deprecated. end-of-batch on the event is used instead. No longer used, the LogEvent.isEndOfBatch() attribute is used instead. This method is a no-op."
appender,"write protectedvoidwrite(byte[]bytes, intoffset, intlength, booleanimmediateFlush) Description copied from class:OutputStreamManager Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Overrides: writein classOutputStreamManager Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. immediateFlush - flushes immediately after writing."
appender,flush publicvoidflush() Description copied from class:OutputStreamManager Flushes any buffers. Overrides: flushin classOutputStreamManager
appender,closeOutputStream publicbooleancloseOutputStream() Overrides: closeOutputStreamin classOutputStreamManager
appender,"mmap public staticMappedByteBuffermmap(FileChannelfileChannel, StringfileName, longstart, intsize) throws IOException Throws: IOException"
appender,getFileName publicStringgetFileName() Returns the name of the File being managed. Returns: The name of the File being managed.
appender,getRegionLength publicintgetRegionLength() Returns the length of the memory mapped region. Returns: the length of the mapped region
appender,"isImmediateFlush publicbooleanisImmediateFlush() Returns true if the content of the buffer should be forced to the storage device on every write, false otherwise. Returns: whether each write should be force-sync'ed"
appender,"getContentFormat publicMap<String,String>getContentFormat() Gets this FileManager's content format specified by: Key: ""fileURI"" Value: provided ""advertiseURI"" param. Overrides: getContentFormatin classAbstractManager Returns: Map of content format keys supporting FileManager"
appender,"flushBuffer protectedvoidflushBuffer(ByteBufferbuffer) Description copied from class:OutputStreamManager Drains the ByteBufferDestination's buffer into the destination. By default this calls OutputStreamManager.write(byte[], int, int, boolean) with the buffer contents. The underlying stream is not flushed. Overrides: flushBufferin classOutputStreamManager See Also: OutputStreamManager.flushDestination()"
appender,OutputStreamManager.flushDestination()
appender,getByteBuffer publicByteBuffergetByteBuffer() Description copied from class:OutputStreamManager Returns this ByteBufferDestination's buffer. Specified by: getByteBufferin interfaceByteBufferDestination Overrides: getByteBufferin classOutputStreamManager Returns: the buffer
appender,"drain publicByteBufferdrain(ByteBufferbuf) Description copied from class:OutputStreamManager Drains the ByteBufferDestination's buffer into the destination. By default this calls OutputStreamManager.flushBuffer(ByteBuffer) with the specified buffer. Subclasses may override. Do not call this method lightly! For some subclasses this is a very expensive operation. For example, MemoryMappedFileManager will assume this method was called because the end of the mapped region was reached during a text encoding operation and will remap its buffer. To just flush the buffered contents to the underlying stream, call OutputStreamManager.flushBuffer(ByteBuffer) directly instead. Specified by: drainin interfaceByteBufferDestination Overrides: drainin classOutputStreamManager Parameters: buf - the buffer whose contents to write the destination Returns: the specified buffer"
appender,"createAppender @PluginFactory public staticNullAppendercreateAppender(@PluginAttribute(value=""name"",defaultString=""null"") Stringname)"
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,build publicOutputStreamAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends OutputStreamAppender.Builder<B>> Returns: the configured instance.
appender,setFollow publicBsetFollow(booleanshouldFollow)
appender,setTarget publicBsetTarget(OutputStreamaTarget)
appender,"createAppender @PluginFactory public staticOutputStreamAppendercreateAppender(Layout<? extends Serializable>layout, Filterfilter, OutputStreamtarget, Stringname, booleanfollow, booleanignore) Creates an OutputStream Appender. Parameters: layout - The layout to use or null to get the default layout. filter - The Filter or null. target - an output stream. follow - If true will follow changes to the underlying output stream. Use false as the default. name - The name of the Appender (required). ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. Use true as the default. Returns: The ConsoleAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends OutputStreamAppender.Builder<B>> BnewBuilder()
appender,"getManager public static<T>OutputStreamManagergetManager(Stringname, Tdata, ManagerFactory<? extends OutputStreamManager,T>factory) Creates a Manager. Type Parameters: T - The type of the OutputStreamManager. Parameters: name - The name of the stream to manage. data - The data to pass to the Manager. factory - The factory to use to create the Manager. Returns: An OutputStreamManager."
appender,createOutputStream protectedOutputStreamcreateOutputStream() throws IOException Throws: IOException
appender,skipFooter publicvoidskipFooter(booleanskipFooter) Indicate whether the footer should be skipped or not. Parameters: skipFooter - true if the footer should be skipped.
appender,"releaseSub publicbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Default hook to write footer during close. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,writeHeader protectedvoidwriteHeader(OutputStreamos)
appender,writeFooter protectedvoidwriteFooter() Writes the footer.
appender,"isOpen publicbooleanisOpen() Returns the status of the stream. Returns: true if the stream is open, false if it is not."
appender,hasOutputStream publicbooleanhasOutputStream()
appender,getOutputStream protectedOutputStreamgetOutputStream() throws IOException Throws: IOException
appender,setOutputStream protectedvoidsetOutputStream(OutputStreamos)
appender,write protectedvoidwrite(byte[]bytes) Some output streams synchronize writes while others do not. Parameters: bytes - The serialized Log event. Throws: AppenderLoggingException - if an error occurs.
appender,"write protectedvoidwrite(byte[]bytes, booleanimmediateFlush) Some output streams synchronize writes while others do not. Parameters: bytes - The serialized Log event. immediateFlush - If true, flushes after writing. Throws: AppenderLoggingException - if an error occurs."
appender,"writeBytes publicvoidwriteBytes(byte[]data, intoffset, intlength) Description copied from interface:ByteBufferDestination Writes the given data to this ByteBufferDestination. Call of this method should *not* be protected with synchronized on this ByteBufferDestination instance. ByteBufferDestination implementations should synchronize themselves inside this method, if needed. This method should behave identically to writeBytes(ByteBuffer.wrap(data, offset, length). It is provided to allow callers not to generate extra garbage. This method is called writeBytes() to avoid clashing with write(byte[], int, int), which might be overridden in user-defined subclasses as protected, hence adding it to interface and requiring the method to be public breaks source compatibility. Specified by: writeBytesin interfaceByteBufferDestination"
appender,"write protectedvoidwrite(byte[]bytes, intoffset, intlength) Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. Throws: AppenderLoggingException - if an error occurs."
appender,"write protectedvoidwrite(byte[]bytes, intoffset, intlength, booleanimmediateFlush) Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. immediateFlush - flushes immediately after writing. Throws: AppenderLoggingException - if an error occurs."
appender,"writeToDestination protectedvoidwriteToDestination(byte[]bytes, intoffset, intlength) Writes the specified section of the specified byte array to the stream. Parameters: bytes - the array containing data offset - from where to write length - how many bytes to write Since: 2.6"
appender,flushDestination protectedvoidflushDestination() Calls flush() on the underlying output stream. Since: 2.6
appender,"flushBuffer protectedvoidflushBuffer(ByteBufferbuf) Drains the ByteBufferDestination's buffer into the destination. By default this calls write(byte[], int, int, boolean) with the buffer contents. The underlying stream is not flushed. Since: 2.6 See Also: flushDestination()"
appender,flushDestination()
appender,flush publicvoidflush() Flushes any buffers.
appender,closeOutputStream protectedbooleancloseOutputStream()
appender,getByteBuffer publicByteBuffergetByteBuffer() Returns this ByteBufferDestination's buffer. Specified by: getByteBufferin interfaceByteBufferDestination Returns: the buffer Since: 2.6
appender,"drain publicByteBufferdrain(ByteBufferbuf) Drains the ByteBufferDestination's buffer into the destination. By default this calls flushBuffer(ByteBuffer) with the specified buffer. Subclasses may override. Do not call this method lightly! For some subclasses this is a very expensive operation. For example, MemoryMappedFileManager will assume this method was called because the end of the mapped region was reached during a text encoding operation and will remap its buffer. To just flush the buffered contents to the underlying stream, call flushBuffer(ByteBuffer) directly instead. Specified by: drainin interfaceByteBufferDestination Parameters: buf - the buffer whose contents to write the destination Returns: the specified buffer Since: 2.6"
appender,"writeBytes publicvoidwriteBytes(ByteBufferdata) Description copied from interface:ByteBufferDestination Writes the given data to this ByteBufferDestination entirely. Call of this method should *not* be protected with synchronized on this ByteBufferDestination instance. ByteBufferDestination implementations should synchronize themselves inside this method, if needed. Specified by: writeBytesin interfaceByteBufferDestination"
appender,build publicRandomAccessFileAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends RandomAccessFileAppender.Builder<B>> Returns: the configured instance.
appender,setFileName publicBsetFileName(StringfileName)
appender,setAppend publicBsetAppend(booleanappend)
appender,setAdvertise publicBsetAdvertise(booleanadvertise)
appender,setAdvertiseURI publicBsetAdvertiseURI(StringadvertiseURI)
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<RandomAccessFileManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,getFileName publicStringgetFileName() Returns the file name this appender is associated with. Returns: The File name.
appender,getBufferSize publicintgetBufferSize() Returns the size of the file manager's buffer. Returns: the buffer size
appender,"createAppender @Deprecated public static<B extends RandomAccessFileAppender.Builder<B>> RandomAccessFileAppendercreateAppender(StringfileName, Stringappend, Stringname, StringimmediateFlush, StringbufferSizeStr, Stringignore, Layout<? extends Serializable>layout, Filterfilter, Stringadvertise, StringadvertiseURI, Configurationconfiguration) Deprecated. Use newBuilder(). Create a File Appender. Parameters: fileName - The name and path of the file. append - ""True"" if the file should be appended to, ""false"" if it should be overwritten. The default is ""true"". name - The name of the Appender. immediateFlush - ""true"" if the contents should be flushed on every write, ""false"" otherwise. The default is ""true"". bufferSizeStr - The buffer size, defaults to 262144. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. layout - The layout to use to format the event. If no layout is provided the default PatternLayout will be used. filter - The filter, if any, to use. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. advertiseURI - The advertised URI which can be used to retrieve the file contents. configuration - The Configuration. Returns: The FileAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends RandomAccessFileAppender.Builder<B>> BnewBuilder() Creates a builder for a RandomAccessFileAppender. Returns: a builder for a RandomAccessFileAppender.
appender,"getFileManager public staticRandomAccessFileManagergetFileManager(StringfileName, booleanappend, booleanimmediateFlush, intbufferSize, StringadvertiseURI, Layout<? extends Serializable>layout, Configurationconfiguration) Returns the RandomAccessFileManager. Parameters: fileName - The name of the file to manage. append - true if the file should be appended to, false if it should be overwritten. immediateFlush - true if the contents should be flushed to disk on every write bufferSize - The buffer size. advertiseURI - the URI to use when advertising the file layout - The layout. configuration - The configuration. Returns: A RandomAccessFileManager for the File."
appender,"isEndOfBatch @Deprecated publicBooleanisEndOfBatch() Deprecated. end-of-batch on the event is used instead. No longer used, the LogEvent.isEndOfBatch() attribute is used instead. Returns: Boolean.FALSE."
appender,"setEndOfBatch @Deprecated publicvoidsetEndOfBatch(booleanendOfBatch) Deprecated. end-of-batch on the event is used instead. No longer used, the LogEvent.isEndOfBatch() attribute is used instead. This method is a no-op."
appender,"writeToDestination protectedvoidwriteToDestination(byte[]bytes, intoffset, intlength) Description copied from class:OutputStreamManager Writes the specified section of the specified byte array to the stream. Overrides: writeToDestinationin classOutputStreamManager Parameters: bytes - the array containing data offset - from where to write length - how many bytes to write"
appender,flush publicvoidflush() Description copied from class:OutputStreamManager Flushes any buffers. Overrides: flushin classOutputStreamManager
appender,closeOutputStream publicbooleancloseOutputStream() Overrides: closeOutputStreamin classOutputStreamManager
appender,getFileName publicStringgetFileName() Returns the name of the File being managed. Returns: The name of the File being managed.
appender,getBufferSize publicintgetBufferSize() Returns the buffer capacity. Returns: the buffer size
appender,"getContentFormat publicMap<String,String>getContentFormat() Gets this FileManager's content format specified by: Key: ""fileURI"" Value: provided ""advertiseURI"" param. Overrides: getContentFormatin classAbstractManager Returns: Map of content format keys supporting FileManager"
appender,build publicRollingFileAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends RollingFileAppender.Builder<B>> Returns: the configured instance.
appender,getAdvertiseUri publicStringgetAdvertiseUri()
appender,getFileName publicStringgetFileName()
appender,isAdvertise publicbooleanisAdvertise()
appender,isAppend publicbooleanisAppend()
appender,isCreateOnDemand publicbooleanisCreateOnDemand()
appender,isLocking publicbooleanisLocking()
appender,getFilePermissions publicStringgetFilePermissions()
appender,getFileOwner publicStringgetFileOwner()
appender,getFileGroup publicStringgetFileGroup()
appender,withAdvertise publicBwithAdvertise(booleanadvertise)
appender,withAdvertiseUri publicBwithAdvertiseUri(StringadvertiseUri)
appender,withAppend publicBwithAppend(booleanappend)
appender,withFileName publicBwithFileName(StringfileName)
appender,withCreateOnDemand publicBwithCreateOnDemand(booleancreateOnDemand)
appender,withLocking publicBwithLocking(booleanlocking)
appender,getFilePattern publicStringgetFilePattern()
appender,getPolicy publicTriggeringPolicygetPolicy()
appender,getStrategy publicRolloverStrategygetStrategy()
appender,withFilePattern publicBwithFilePattern(StringfilePattern)
appender,withPolicy publicBwithPolicy(TriggeringPolicypolicy)
appender,withStrategy publicBwithStrategy(RolloverStrategystrategy)
appender,withFilePermissions publicBwithFilePermissions(StringfilePermissions)
appender,withFileOwner publicBwithFileOwner(StringfileOwner)
appender,withFileGroup publicBwithFileGroup(StringfileGroup)
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<RollingFileManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,append publicvoidappend(LogEventevent) Writes the log entry rolling over the file when required. Specified by: appendin interfaceAppender Overrides: appendin classAbstractOutputStreamAppender<RollingFileManager> Parameters: event - The LogEvent.
appender,getFileName publicStringgetFileName() Returns the File name for the Appender. Returns: The file name.
appender,getFilePattern publicStringgetFilePattern() Returns the file pattern used when rolling over. Returns: The file pattern.
appender,getTriggeringPolicy public<T extends TriggeringPolicy>TgetTriggeringPolicy() Returns the triggering policy. Type Parameters: T - TriggeringPolicy type Returns: The TriggeringPolicy
appender,"createAppender @Deprecated public static<B extends RollingFileAppender.Builder<B>> RollingFileAppendercreateAppender(StringfileName, StringfilePattern, Stringappend, Stringname, StringbufferedIO, StringbufferSizeStr, StringimmediateFlush, TriggeringPolicypolicy, RolloverStrategystrategy, Layout<? extends Serializable>layout, Filterfilter, Stringignore, Stringadvertise, StringadvertiseUri, Configurationconfig) Deprecated. Use newBuilder(). Creates a RollingFileAppender. Parameters: fileName - The name of the file that is actively written to. (required). filePattern - The pattern of the file name to use on rollover. (required). append - If true, events are appended to the file. If false, the file is overwritten when opened. Defaults to ""true"" name - The name of the Appender (required). bufferedIO - When true, I/O will be buffered. Defaults to ""true"". bufferSizeStr - buffer size for buffered IO (default is 8192). immediateFlush - When true, events are immediately flushed. Defaults to ""true"". policy - The triggering policy. (required). strategy - The rollover strategy. Defaults to DefaultRolloverStrategy. layout - The layout to use (defaults to the default PatternLayout). filter - The Filter or null. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. advertiseUri - The advertised URI which can be used to retrieve the file contents. config - The Configuration. Returns: A RollingFileAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends RollingFileAppender.Builder<B>> BnewBuilder() Creates a new Builder. Returns: a new Builder. Since: 2.7
appender,build publicRollingRandomAccessFileAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends RollingRandomAccessFileAppender.Builder<B>> Returns: the configured instance.
appender,withFileName publicBwithFileName(StringfileName)
appender,withFilePattern publicBwithFilePattern(StringfilePattern)
appender,withAppend publicBwithAppend(booleanappend)
appender,withPolicy publicBwithPolicy(TriggeringPolicypolicy)
appender,withStrategy publicBwithStrategy(RolloverStrategystrategy)
appender,withAdvertise publicBwithAdvertise(booleanadvertise)
appender,withAdvertiseURI publicBwithAdvertiseURI(StringadvertiseURI)
appender,withFilePermissions publicBwithFilePermissions(StringfilePermissions)
appender,withFileOwner publicBwithFileOwner(StringfileOwner)
appender,withFileGroup publicBwithFileGroup(StringfileGroup)
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<RollingRandomAccessFileManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,append publicvoidappend(LogEventevent) Write the log entry rolling over the file when required. Specified by: appendin interfaceAppender Overrides: appendin classAbstractOutputStreamAppender<RollingRandomAccessFileManager> Parameters: event - The LogEvent.
appender,getFileName publicStringgetFileName() Returns the File name for the Appender. Returns: The file name.
appender,getFilePattern publicStringgetFilePattern() Returns the file pattern used when rolling over. Returns: The file pattern.
appender,getBufferSize publicintgetBufferSize() Returns the size of the file manager's buffer. Returns: the buffer size
appender,"createAppender @Deprecated public static<B extends RollingRandomAccessFileAppender.Builder<B>> RollingRandomAccessFileAppendercreateAppender(StringfileName, StringfilePattern, Stringappend, Stringname, StringimmediateFlush, StringbufferSizeStr, TriggeringPolicypolicy, RolloverStrategystrategy, Layout<? extends Serializable>layout, Filterfilter, StringignoreExceptions, Stringadvertise, StringadvertiseURI, Configurationconfiguration) Deprecated. Use newBuilder(). Create a RollingRandomAccessFileAppender. Parameters: fileName - The name of the file that is actively written to. (required). filePattern - The pattern of the file name to use on rollover. (required). append - If true, events are appended to the file. If false, the file is overwritten when opened. Defaults to ""true"" name - The name of the Appender (required). immediateFlush - When true, events are immediately flushed. Defaults to ""true"". bufferSizeStr - The buffer size, defaults to 262144. policy - The triggering policy. (required). strategy - The rollover strategy. Defaults to DefaultRolloverStrategy. layout - The layout to use (defaults to the default PatternLayout). filter - The Filter or null. ignoreExceptions - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. advertiseURI - The advertised URI which can be used to retrieve the file contents. configuration - The Configuration. Returns: A RollingRandomAccessFileAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends RollingRandomAccessFileAppender.Builder<B>> BnewBuilder()
appender,build publicAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<Appender> Returns: the configured instance.
appender,getAppenderSet publicAppenderSetgetAppenderSet()
appender,getConfiguration publicConfigurationgetConfiguration()
appender,getName publicStringgetName()
appender,getScript publicAbstractScriptgetScript()
appender,withAppenderNodeSet publicScriptAppenderSelector.BuilderwithAppenderNodeSet(AppenderSetappenderSet)
appender,withConfiguration publicScriptAppenderSelector.BuilderwithConfiguration(Configurationconfiguration)
appender,withName publicScriptAppenderSelector.BuilderwithName(Stringname)
appender,withScript publicScriptAppenderSelector.BuilderwithScript(AbstractScriptscript)
appender,newBuilder @PluginBuilderFactory public staticScriptAppenderSelector.BuildernewBuilder()
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,setTo publicSmtpAppender.BuildersetTo(Stringto) Comma-separated list of recipient email addresses.
appender,setCc publicSmtpAppender.BuildersetCc(Stringcc) Comma-separated list of CC email addresses.
appender,setBcc publicSmtpAppender.BuildersetBcc(Stringbcc) Comma-separated list of BCC email addresses.
appender,setFrom publicSmtpAppender.BuildersetFrom(Stringfrom) Email address of the sender.
appender,setReplyTo publicSmtpAppender.BuildersetReplyTo(StringreplyTo) Comma-separated list of Reply-To email addresses.
appender,setSubject publicSmtpAppender.BuildersetSubject(Stringsubject) Subject template for the email messages. See Also: PatternLayout
appender,PatternLayout
appender,"setSmtpProtocol publicSmtpAppender.BuildersetSmtpProtocol(StringsmtpProtocol) Transport protocol to use for SMTP such as ""smtp"" or ""smtps"". Defaults to ""smtp""."
appender,setSmtpHost publicSmtpAppender.BuildersetSmtpHost(StringsmtpHost) Host name of SMTP server to send messages through.
appender,setSmtpPort publicSmtpAppender.BuildersetSmtpPort(intsmtpPort) Port number of SMTP server to send messages through.
appender,setSmtpUsername publicSmtpAppender.BuildersetSmtpUsername(StringsmtpUsername) Username to authenticate with SMTP server.
appender,setSmtpPassword publicSmtpAppender.BuildersetSmtpPassword(StringsmtpPassword) Password to authenticate with SMTP server.
appender,setSmtpDebug publicSmtpAppender.BuildersetSmtpDebug(booleansmtpDebug) Enables or disables mail session debugging on STDOUT. Disabled by default.
appender,setBufferSize publicSmtpAppender.BuildersetBufferSize(intbufferSize) Number of log events to buffer before sending an email. Defaults to 512.
appender,setSslConfiguration publicSmtpAppender.BuildersetSslConfiguration(SslConfigurationsslConfiguration) Specifies an SSL configuration for smtps connections.
appender,"setLayout publicSmtpAppender.BuildersetLayout(Layout<? extends Serializable>layout) Specifies the layout used for the email message body. By default, this uses the default HTML layout. Overrides: setLayoutin classAbstractAppender.Builder<SmtpAppender.Builder>"
appender,"setFilter publicSmtpAppender.BuildersetFilter(Filterfilter) Specifies the filter used for this appender. By default, uses a ThresholdFilter with a level of ERROR. Overrides: setFilterin classAbstractFilterable.Builder<SmtpAppender.Builder>"
appender,build publicSmtpAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SmtpAppender> Returns: the configured instance.
appender,getManager publicMailManagergetManager()
appender,newBuilder @PluginBuilderFactory public staticSmtpAppender.BuildernewBuilder() Since: 2.13.2
appender,"createAppender @Deprecated public staticSmtpAppendercreateAppender(@PluginConfiguration Configurationconfig, @PluginAttribute(""name"") @Required Stringname, @PluginAttribute(""to"") Stringto, @PluginAttribute(""cc"") Stringcc, @PluginAttribute(""bcc"") Stringbcc, @PluginAttribute(""from"") Stringfrom, @PluginAttribute(""replyTo"") StringreplyTo, @PluginAttribute(""subject"") Stringsubject, @PluginAttribute(""smtpProtocol"") StringsmtpProtocol, @PluginAttribute(""smtpHost"") StringsmtpHost, @PluginAttribute(value=""smtpPort"",defaultString=""0"") @ValidPort StringsmtpPortStr, @PluginAttribute(""smtpUsername"") StringsmtpUsername, @PluginAttribute(value=""smtpPassword"",sensitive=true) StringsmtpPassword, @PluginAttribute(""smtpDebug"") StringsmtpDebug, @PluginAttribute(""bufferSize"") StringbufferSizeStr, @PluginElement(""Layout"") Layout<? extends Serializable>layout, @PluginElement(""Filter"") Filterfilter, @PluginAttribute(""ignoreExceptions"") Stringignore) Deprecated. Use newBuilder() to create and configure a SmtpAppender.Builder instance. Create a SmtpAppender. See Also: SmtpAppender.Builder"
appender,SmtpAppender.Builder
appender,isFiltered publicbooleanisFiltered(LogEventevent) Capture all events in CyclicBuffer. Specified by: isFilteredin interfaceFilterable Overrides: isFilteredin classAbstractFilterable Parameters: event - The Log event. Returns: true if the event should be filtered.
appender,"append publicvoidappend(LogEventevent) Perform SmtpAppender specific appending actions, mainly adding the event to a cyclic buffer and checking if the event triggers an e-mail to be sent. Parameters: event - The Log event."
appender,getAdvertise publicbooleangetAdvertise()
appender,getConnectTimeoutMillis publicintgetConnectTimeoutMillis()
appender,getHost publicStringgetHost()
appender,getPort publicintgetPort()
appender,getProtocol publicProtocolgetProtocol()
appender,getSslConfiguration publicSslConfigurationgetSslConfiguration()
appender,getImmediateFail publicbooleangetImmediateFail()
appender,setAdvertise publicBsetAdvertise(booleanadvertise)
appender,setConnectTimeoutMillis publicBsetConnectTimeoutMillis(intconnectTimeoutMillis)
appender,setHost publicBsetHost(Stringhost)
appender,setImmediateFail publicBsetImmediateFail(booleanimmediateFail)
appender,setPort publicBsetPort(intport)
appender,setProtocol publicBsetProtocol(Protocolprotocol)
appender,setReconnectDelayMillis publicBsetReconnectDelayMillis(intreconnectDelayMillis)
appender,setSocketOptions publicBsetSocketOptions(SocketOptionssocketOptions)
appender,setSslConfiguration publicBsetSslConfiguration(SslConfigurationsslConfiguration)
appender,withAdvertise @Deprecated publicBwithAdvertise(booleanadvertise) Deprecated.
appender,withConnectTimeoutMillis @Deprecated publicBwithConnectTimeoutMillis(intconnectTimeoutMillis) Deprecated.
appender,withHost @Deprecated publicBwithHost(Stringhost) Deprecated.
appender,withImmediateFail @Deprecated publicBwithImmediateFail(booleanimmediateFail) Deprecated.
appender,withPort @Deprecated publicBwithPort(intport) Deprecated.
appender,withProtocol @Deprecated publicBwithProtocol(Protocolprotocol) Deprecated.
appender,withReconnectDelayMillis @Deprecated publicBwithReconnectDelayMillis(intreconnectDelayMillis) Deprecated.
appender,withSocketOptions @Deprecated publicBwithSocketOptions(SocketOptionssocketOptions) Deprecated.
appender,withSslConfiguration @Deprecated publicBwithSslConfiguration(SslConfigurationsslConfiguration) Deprecated.
appender,getReconnectDelayMillis publicintgetReconnectDelayMillis()
appender,getSocketOptions publicSocketOptionsgetSocketOptions()
appender,build publicSocketAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SocketAppender> Returns: the configured instance.
appender,newBuilder @PluginBuilderFactory public staticSocketAppender.BuildernewBuilder()
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractOutputStreamAppender<AbstractSocketManager> Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,"createAppender @Deprecated @PluginFactory public staticSocketAppendercreateAppender(Stringhost, intport, Protocolprotocol, SslConfigurationsslConfig, intconnectTimeoutMillis, intreconnectDelayMillis, booleanimmediateFail, Stringname, booleanimmediateFlush, booleanignoreExceptions, Layout<? extends Serializable>layout, Filterfilter, booleanadvertise, Configurationconfiguration) Deprecated. Deprecated in 2.7; use newBuilder() Creates a socket appender. Parameters: host - The name of the host to connect to. port - The port to connect to on the target host. protocol - The Protocol to use. sslConfig - The SSL configuration file for TCP/SSL, ignored for UPD. connectTimeoutMillis - the connect timeout in milliseconds. reconnectDelayMillis - The interval in which failed writes should be retried. immediateFail - True if the write should fail if no socket is immediately available. name - The name of the Appender. immediateFlush - ""true"" if data should be flushed on each write. ignoreExceptions - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. layout - The layout to use. Required, there is no default. filter - The Filter or null. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. configuration - The Configuration Returns: A SocketAppender."
appender,"createAppender @Deprecated public staticSocketAppendercreateAppender(Stringhost, StringportNum, StringprotocolIn, SslConfigurationsslConfig, intconnectTimeoutMillis, StringdelayMillis, StringimmediateFail, Stringname, StringimmediateFlush, Stringignore, Layout<? extends Serializable>layout, Filterfilter, Stringadvertise, Configurationconfig) Deprecated. Deprecated in 2.5; use newBuilder() Creates a socket appender. Parameters: host - The name of the host to connect to. portNum - The port to connect to on the target host. protocolIn - The Protocol to use. sslConfig - The SSL configuration file for TCP/SSL, ignored for UPD. connectTimeoutMillis - the connect timeout in milliseconds. delayMillis - The interval in which failed writes should be retried. immediateFail - True if the write should fail if no socket is immediately available. name - The name of the Appender. immediateFlush - ""true"" if data should be flushed on each write. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. layout - The layout to use. Required, there is no default. filter - The Filter or null. advertise - ""true"" if the appender configuration should be advertised, ""false"" otherwise. config - The Configuration Returns: A SocketAppender."
appender,"createSocketManager @Deprecated protected staticAbstractSocketManagercreateSocketManager(Stringname, Protocolprotocol, Stringhost, intport, intconnectTimeoutMillis, SslConfigurationsslConfig, intreconnectDelayMillis, booleanimmediateFail, Layout<? extends Serializable>layout, intbufferSize) Deprecated. Use createSocketManager(String, Protocol, String, int, int, SslConfiguration, int, boolean, Layout, int, SocketOptions). Creates an AbstractSocketManager for TCP, UDP, and SSL. Throws: IllegalArgumentException - if the protocol cannot be handled."
appender,"createSocketManager protected staticAbstractSocketManagercreateSocketManager(Stringname, Protocolprotocol, Stringhost, intport, intconnectTimeoutMillis, SslConfigurationsslConfig, intreconnectDelayMillis, booleanimmediateFail, Layout<? extends Serializable>layout, intbufferSize, SocketOptionssocketOptions) Creates an AbstractSocketManager for TCP, UDP, and SSL. Throws: IllegalArgumentException - if the protocol cannot be handled."
appender,directEncodeEvent protectedvoiddirectEncodeEvent(LogEventevent) Overrides: directEncodeEventin classAbstractOutputStreamAppender<AbstractSocketManager>
appender,build publicSyslogAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends SyslogAppender.Builder<B>> Returns: the configured instance.
appender,getFacility publicFacilitygetFacility()
appender,getId publicStringgetId()
appender,getEnterpriseNumber publicStringgetEnterpriseNumber()
appender,isIncludeMdc publicbooleanisIncludeMdc()
appender,getMdcId publicStringgetMdcId()
appender,getMdcPrefix publicStringgetMdcPrefix()
appender,getEventPrefix publicStringgetEventPrefix()
appender,isNewLine publicbooleanisNewLine()
appender,getEscapeNL publicStringgetEscapeNL()
appender,getAppName publicStringgetAppName()
appender,getMsgId publicStringgetMsgId()
appender,getExcludes publicStringgetExcludes()
appender,getIncludes publicStringgetIncludes()
appender,getRequired publicStringgetRequired()
appender,getFormat publicStringgetFormat()
appender,getCharsetName publicCharsetgetCharsetName()
appender,getExceptionPattern publicStringgetExceptionPattern()
appender,getLoggerFields publicLoggerFields[]getLoggerFields()
appender,setFacility publicBsetFacility(Facilityfacility)
appender,setId publicBsetId(Stringid)
appender,setEnterpriseNumber publicBsetEnterpriseNumber(StringenterpriseNumber)
appender,setEnterpriseNumber publicBsetEnterpriseNumber(intenterpriseNumber) Deprecated. Use setEnterpriseNumber(String) instead
appender,setIncludeMdc publicBsetIncludeMdc(booleanincludeMdc)
appender,setMdcId publicBsetMdcId(StringmdcId)
appender,setMdcPrefix publicBsetMdcPrefix(StringmdcPrefix)
appender,setEventPrefix publicBsetEventPrefix(StringeventPrefix)
appender,setNewLine publicBsetNewLine(booleannewLine)
appender,setEscapeNL publicBsetEscapeNL(StringescapeNL)
appender,setAppName publicBsetAppName(StringappName)
appender,setMsgId publicBsetMsgId(StringmsgId)
appender,setExcludes publicBsetExcludes(Stringexcludes)
appender,setIncludes publicBsetIncludes(Stringincludes)
appender,setRequired publicBsetRequired(Stringrequired)
appender,setFormat publicBsetFormat(Stringformat)
appender,setCharsetName publicBsetCharsetName(Charsetcharset)
appender,setExceptionPattern publicBsetExceptionPattern(StringexceptionPattern)
appender,setLoggerFields publicBsetLoggerFields(LoggerFields[]loggerFields)
appender,"createAppender @Deprecated public static<B extends SyslogAppender.Builder<B>> SyslogAppendercreateAppender(Stringhost, intport, StringprotocolStr, SslConfigurationsslConfiguration, intconnectTimeoutMillis, intreconnectDelayMillis, booleanimmediateFail, Stringname, booleanimmediateFlush, booleanignoreExceptions, Facilityfacility, Stringid, intenterpriseNumber, booleanincludeMdc, StringmdcId, StringmdcPrefix, StringeventPrefix, booleannewLine, StringescapeNL, StringappName, StringmsgId, Stringexcludes, Stringincludes, Stringrequired, Stringformat, Filterfilter, Configurationconfiguration, Charsetcharset, StringexceptionPattern, LoggerFields[]loggerFields, booleanadvertise) Deprecated. Use newSyslogAppenderBuilder(). Creates a SyslogAppender. Parameters: host - The name of the host to connect to. port - The port to connect to on the target host. protocolStr - The Protocol to use. sslConfiguration - TODO connectTimeoutMillis - the connect timeout in milliseconds. reconnectDelayMillis - The interval in which failed writes should be retried. immediateFail - True if the write should fail if no socket is immediately available. name - The name of the Appender. immediateFlush - ""true"" if data should be flushed on each write. ignoreExceptions - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. facility - The Facility is used to try to classify the message. id - The default structured data id to use when formatting according to RFC 5424. enterpriseNumber - The IANA enterprise number. includeMdc - Indicates whether data from the ThreadContextMap will be included in the RFC 5424 Syslog record. Defaults to ""true:. mdcId - The id to use for the MDC Structured Data Element. mdcPrefix - The prefix to add to MDC key names. eventPrefix - The prefix to add to event key names. newLine - If true, a newline will be appended to the end of the syslog record. The default is false. escapeNL - String that should be used to replace newlines within the message text. appName - The value to use as the APP-NAME in the RFC 5424 syslog record. msgId - The default value to be used in the MSGID field of RFC 5424 syslog records. excludes - A comma separated list of mdc keys that should be excluded from the LogEvent. includes - A comma separated list of mdc keys that should be included in the FlumeEvent. required - A comma separated list of mdc keys that must be present in the MDC. format - If set to ""RFC5424"" the data will be formatted in accordance with RFC 5424. Otherwise, it will be formatted as a BSD Syslog record. filter - A Filter to determine if the event should be handled by this Appender. configuration - The Configuration. charset - The character set to use when converting the syslog String to a byte array. exceptionPattern - The converter pattern to use for formatting exceptions. loggerFields - The logger fields advertise - Whether to advertise Returns: A SyslogAppender."
appender,newSyslogAppenderBuilder @PluginBuilderFactory public static<B extends SyslogAppender.Builder<B>> BnewSyslogAppenderBuilder()
appender,getMessage publicStringgetMessage()
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,hashCode publicinthashCode() Overrides: hashCodein classObject
appender,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
appender,build publicWriterAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends WriterAppender.Builder<B>> Returns: the configured instance.
appender,setFollow publicBsetFollow(booleanshouldFollow)
appender,setTarget publicBsetTarget(WriteraTarget)
appender,"createAppender @PluginFactory public staticWriterAppendercreateAppender(StringLayoutlayout, Filterfilter, Writertarget, Stringname, booleanfollow, booleanignore) Creates a WriterAppender. Parameters: layout - The layout to use or null to get the default layout. filter - The Filter or null. target - The target Writer follow - If true will follow changes to the underlying output stream. Use false as the default. name - The name of the Appender (required). ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. Use true as the default. Returns: The ConsoleAppender."
appender,newBuilder @PluginBuilderFactory public static<B extends WriterAppender.Builder<B>> BnewBuilder()
appender,"getManager public static<T>WriterManagergetManager(Stringname, Tdata, ManagerFactory<? extends WriterManager,T>factory) Creates a Manager. Type Parameters: T - The type of the WriterManager. Parameters: name - The name of the stream to manage. data - The data to pass to the Manager. factory - The factory to use to create the Manager. Returns: A WriterManager."
appender,closeWriter protectedvoidcloseWriter()
appender,flush publicvoidflush() Flushes any buffers.
appender,getWriter protectedWritergetWriter()
appender,"isOpen publicbooleanisOpen() Returns the status of the stream. Returns: true if the stream is open, false if it is not."
appender,"releaseSub publicbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Default hook to write footer during close. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,setWriter protectedvoidsetWriter(Writerwriter)
appender,write protectedvoidwrite(Stringstr) Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Parameters: str - the string to write Throws: AppenderLoggingException - if an error occurs.
appender,writeFooter protectedvoidwriteFooter() Writes the footer.
appender,"append public finalvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,"getLayout public finalLayout<LogEvent>getLayout() This always returns null, as database appenders do not use a single layout. The JPA and NoSQL appenders do not use a layout at all. The JDBC appender has a layout-per-column pattern. Specified by: getLayoutin interfaceAppender Overrides: getLayoutin classAbstractAppender Returns: null."
appender,getManager public finalTgetManager() Returns the underlying manager in use within this appender. Returns: the manager.
appender,replaceManager protected finalvoidreplaceManager(Tmanager) Replaces the underlying manager in use within this appender. This can be useful for manually changing the way log events are written to the database without losing buffered or in-progress events. The existing manager is released only after the new manager has been installed. This method is thread-safe. Parameters: manager - The new manager to install.
appender,start public finalvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,getBufferSize publicintgetBufferSize() Gets the buffer size. Returns: the buffer size.
appender,getLayout publicLayout<? extends Serializable>getLayout() Gets the layout. Returns: the layout.
appender,"getManager protected static<M extends AbstractDatabaseManager, T extends AbstractDatabaseManager.AbstractFactoryData> MgetManager(Stringname, Tdata, ManagerFactory<M,T>factory) Implementations should define their own getManager method and call this method from that to create or get existing managers. Type Parameters: M - The concrete manager type. T - The concrete AbstractDatabaseManager.AbstractFactoryData type. Parameters: name - The manager name, which should include any configuration details that one might want to be able to reconfigure at runtime, such as database name, username, (hashed) password, etc. data - The concrete instance of AbstractDatabaseManager.AbstractFactoryData appropriate for the given manager. factory - A factory instance for creating the appropriate manager. Returns: a new or existing manager of the specified type and name."
appender,buffer protectedvoidbuffer(LogEventevent)
appender,"commitAndClose protected abstractbooleancommitAndClose() Commits any active transaction (if applicable) and disconnects from the database (returns the connection to the connection pool). With buffering enabled, this is called when flushing the buffer completes, after the last call to writeInternal(org.apache.logging.log4j.core.LogEvent). With buffering disabled, this is called immediately after every invocation of writeInternal(org.apache.logging.log4j.core.LogEvent). Returns: true if all resources were closed normally, false otherwise."
appender,"connectAndStart protected abstractvoidconnectAndStart() Connects to the database and starts a transaction (if applicable). With buffering enabled, this is called when flushing the buffer begins, before the first call to writeInternal(org.apache.logging.log4j.core.LogEvent). With buffering disabled, this is called immediately before every invocation of writeInternal(org.apache.logging.log4j.core.LogEvent)."
appender,flush public finalvoidflush() This method is called automatically when the buffer size reaches its maximum or at the beginning of a call to shutdown(). It can also be called manually to flush events to the database. Specified by: flushin interfaceFlushable
appender,isBuffered protectedbooleanisBuffered()
appender,isRunning public finalbooleanisRunning() Indicates whether the manager is currently connected startup() has been called and shutdown() has not been called). Returns: true if the manager is connected.
appender,"releaseSub public finalbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractManager May be overridden by managers to perform processing while the manager is being released and the lock is held. A timeout is passed for implementors to use as they see fit. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,"shutdown public finalbooleanshutdown() This method is called from the AbstractManager.close() method when the appender is stopped or the appender's manager is replaced. If it has not already been called, it calls shutdownInternal() and catches any exceptions it might throw. Returns: true if all resources were closed normally, false otherwise."
appender,"shutdownInternal protected abstractbooleanshutdownInternal() throws Exception Implementations should implement this method to perform any proprietary disconnection / shutdown operations. This method will never be called twice on the same instance, and it will only be called after startupInternal(). It is safe to throw any exceptions from this method. This method does not necessarily disconnect from the database for the same reasons outlined in startupInternal(). Returns: true if all resources were closed normally, false otherwise. Throws: Exception"
appender,"startup public finalvoidstartup() This method is called within the appender when the appender is started. If it has not already been called, it calls startupInternal() and catches any exceptions it might throw."
appender,"startupInternal protected abstractvoidstartupInternal() throws Exception Implementations should implement this method to perform any proprietary startup operations. This method will never be called twice on the same instance. It is safe to throw any exceptions from this method. This method does not necessarily connect to the database, as it is generally unreliable to connect once and use the same connection for hours. Throws: Exception"
appender,toString public finalStringtoString() Overrides: toStringin classObject
appender,"write @Deprecated public finalvoidwrite(LogEventevent) Deprecated. since 2.11.0 Use write(LogEvent, Serializable). This method manages buffering and writing of events. Parameters: event - The event to write to the database."
appender,"write public finalvoidwrite(LogEventevent, Serializableserializable) This method manages buffering and writing of events. Parameters: event - The event to write to the database. serializable - Serializable event"
appender,"writeInternal @Deprecated protectedvoidwriteInternal(LogEventevent) Deprecated. Use writeInternal(LogEvent, Serializable). Performs the actual writing of the event in an implementation-specific way. This method is called immediately from write(LogEvent, Serializable) if buffering is off, or from flush() if the buffer has reached its limit. Parameters: event - The event to write to the database."
appender,"writeInternal protected abstractvoidwriteInternal(LogEventevent, Serializableserializable) Performs the actual writing of the event in an implementation-specific way. This method is called immediately from write(LogEvent, Serializable) if buffering is off, or from flush() if the buffer has reached its limit. Parameters: event - The event to write to the database."
appender,"writeThrough protectedvoidwriteThrough(LogEventevent, Serializableserializable)"
appender,build publicColumnMappingbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<ColumnMapping> Returns: the configured instance.
appender,setConfiguration publicColumnMapping.BuildersetConfiguration(Configurationconfiguration)
appender,"setLayout publicColumnMapping.BuildersetLayout(StringLayoutlayout) Layout of value to write to database (before type conversion). Not applicable if setType(Class) is a ReadOnlyStringMap, ThreadContextMap, or ThreadContextStack. Returns: this."
appender,"setLiteral publicColumnMapping.BuildersetLiteral(Stringliteral) Literal value to use for populating a column. This is generally useful for functions, stored procedures, etc. No escaping will be done on this value. Returns: this."
appender,setName publicColumnMapping.BuildersetName(Stringname) Column name. Returns: this.
appender,"setParameter publicColumnMapping.BuildersetParameter(Stringparameter) Parameter value to use for populating a column, MUST contain a single parameter marker '?'. This is generally useful for functions, stored procedures, etc. No escaping will be done on this value. Returns: this."
appender,setPattern publicColumnMapping.BuildersetPattern(Stringpattern) Pattern to use as a PatternLayout. Convenient shorthand for setLayout(StringLayout) with a PatternLayout. Returns: this.
appender,setSource publicColumnMapping.BuildersetSource(Stringsource) Source name. Useful when combined with a MapMessage depending on the appender. Returns: this.
appender,"setColumnType publicColumnMapping.BuildersetColumnType(Class<?>columnType) Class to convert value to before storing in database. If the type is compatible with ThreadContextMap or ReadOnlyStringMap, then the MDC will be used. If the type is compatible with ThreadContextStack, then the NDC will be used. If the type is compatible with Date, then the event timestamp will be used. Returns: this."
appender,setType @Deprecated publicColumnMapping.BuildersetType(Class<?>type) Deprecated. See Also: setColumnType(Class)
appender,setColumnType(Class)
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,newBuilder @PluginBuilderFactory public staticColumnMapping.BuildernewBuilder()
appender,toKey public staticStringtoKey(Stringname)
appender,getLayout publicStringLayoutgetLayout()
appender,getLiteralValue publicStringgetLiteralValue()
appender,getName publicStringgetName()
appender,getNameKey publicStringgetNameKey()
appender,getParameter publicStringgetParameter()
appender,getSource publicStringgetSource()
appender,getType publicClass<?>getType()
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,equals publicbooleanequals(Objecto) Overrides: equalsin classObject
appender,hashCode publicinthashCode() Overrides: hashCodein classObject
appender,asBuilder protectedBasBuilder()
appender,getConnectionString publicStringgetConnectionString()
appender,getDriverClassName publicStringgetDriverClassName()
appender,getPassword publicchar[]getPassword()
appender,getProperties publicProperty[]getProperties()
appender,getUserName publicchar[]getUserName()
appender,setConnectionString publicBsetConnectionString(StringconnectionString)
appender,setDriverClassName publicBsetDriverClassName(StringdriverClassName)
appender,setPassword publicBsetPassword(char[]password)
appender,setProperties publicBsetProperties(Property[]properties)
appender,setUserName publicBsetUserName(char[]userName)
appender,getLogger public staticLoggergetLogger()
appender,getActualConnectionString publicStringgetActualConnectionString()
appender,getConnection publicConnectiongetConnection() throws SQLException Description copied from interface:ConnectionSource This should return a new connection every time it is called. Returns: the SQL connection object. Throws: SQLException - if a database error occurs.
appender,getConnectionString publicStringgetConnectionString()
appender,getDriverClassName publicStringgetDriverClassName()
appender,getPassword publicchar[]getPassword()
appender,getProperties publicProperty[]getProperties()
appender,getUserName publicchar[]getUserName()
appender,loadDriver protectedvoidloadDriver() throws SQLException Throws: SQLException
appender,loadDriver protectedvoidloadDriver(StringclassName) throws SQLException Loads a JDBC driver for the given class name Parameters: className - the fully-qualified class name for a JDBC Driver. Throws: SQLException - thrown when loading the driver throws an exception.
appender,toProperties protectedPropertiestoProperties(Property[]properties)
appender,toString publicStringtoString() Description copied from interface:ConnectionSource All implementations must override Object.toString() to provide information about the connection configuration (obscuring passwords with one-way hashes). Specified by: toStringin interfaceConnectionSource Overrides: toStringin classObject Returns: the string representation of this connection source.
appender,toString protectedStringtoString(char[]value)
appender,build publicColumnConfigbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<ColumnConfig> Returns: the configured instance.
appender,"setClob publicColumnConfig.BuildersetClob(booleanclob) If ""true"", indicates that the column is a character LOB (CLOB). Returns: this."
appender,setConfiguration publicColumnConfig.BuildersetConfiguration(Configurationconfiguration) The configuration object. Returns: this.
appender,"setEventTimestamp publicColumnConfig.BuildersetEventTimestamp(booleaneventTimestamp) If ""true"", indicates that this column is a date-time column in which the event timestamp should be inserted. Mutually exclusive with pattern!=null and literal!=null. Returns: this."
appender,setLiteral publicColumnConfig.BuildersetLiteral(Stringliteral) The literal value to insert into the column as-is without any quoting or escaping. Mutually exclusive with pattern!=null and eventTimestamp=true. Returns: this.
appender,setName publicColumnConfig.BuildersetName(Stringname) The name of the database column as it exists within the database table. Returns: this.
appender,setPattern publicColumnConfig.BuildersetPattern(Stringpattern) The PatternLayout pattern to insert in this column. Mutually exclusive with literal!=null and eventTimestamp=true Returns: this.
appender,"setUnicode publicColumnConfig.BuildersetUnicode(booleanunicode) If ""true"", indicates that the column is a Unicode String. Returns: this."
appender,"createColumnConfig @Deprecated public staticColumnConfigcreateColumnConfig(Configurationconfig, Stringname, Stringpattern, StringliteralValue, StringeventTimestamp, Stringunicode, Stringclob) Deprecated. use newBuilder() Factory method for creating a column config within the plugin manager. See Also: ColumnConfig.Builder"
appender,ColumnConfig.Builder
appender,newBuilder @PluginBuilderFactory public staticColumnConfig.BuildernewBuilder()
appender,getColumnName publicStringgetColumnName()
appender,getColumnNameKey publicStringgetColumnNameKey()
appender,getLayout publicPatternLayoutgetLayout()
appender,getLiteralValue publicStringgetLiteralValue()
appender,isClob publicbooleanisClob()
appender,isEventTimestamp publicbooleanisEventTimestamp()
appender,isUnicode publicbooleanisUnicode()
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getConnection ConnectiongetConnection() throws SQLException This should return a new connection every time it is called. Returns: the SQL connection object. Throws: SQLException - if a database error occurs.
appender,toString StringtoString() All implementations must override Object.toString() to provide information about the connection configuration (obscuring passwords with one-way hashes). Overrides: toStringin classObject Returns: the string representation of this connection source.
appender,getConnection publicConnectiongetConnection() throws SQLException Description copied from interface:ConnectionSource This should return a new connection every time it is called. Returns: the SQL connection object. Throws: SQLException - if a database error occurs.
appender,toString publicStringtoString() Description copied from interface:ConnectionSource All implementations must override Object.toString() to provide information about the connection configuration (obscuring passwords with one-way hashes). Specified by: toStringin interfaceConnectionSource Overrides: toStringin classObject Returns: the string representation of this connection source.
appender,"createConnectionSource @PluginFactory public staticDataSourceConnectionSourcecreateConnectionSource(@PluginAttribute(""jndiName"") StringjndiName) Factory method for creating a connection source within the plugin manager. Parameters: jndiName - The full JNDI path where the data source is bound. Must start with java:/comp/env or environment-equivalent. Returns: the created connection source."
appender,build publicDriverManagerConnectionSourcebuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends DriverManagerConnectionSource.Builder<B>> Returns: the configured instance.
appender,newBuilder @PluginBuilderFactory public static<B extends DriverManagerConnectionSource.Builder<B>> BnewBuilder()
appender,getConnection publicConnectiongetConnection() throws SQLException Description copied from interface:ConnectionSource This should return a new connection every time it is called. Returns: the SQL connection object. Throws: SQLException - if a database error occurs.
appender,toString publicStringtoString() Description copied from interface:ConnectionSource All implementations must override Object.toString() to provide information about the connection configuration (obscuring passwords with one-way hashes). Specified by: toStringin interfaceConnectionSource Overrides: toStringin classObject Returns: the string representation of this connection source.
appender,"createConnectionSource @PluginFactory public staticFactoryMethodConnectionSourcecreateConnectionSource(@PluginAttribute(""class"") StringclassName, @PluginAttribute(""method"") StringmethodName) Factory method for creating a connection source within the plugin manager. Parameters: className - The name of a public class that contains a static method capable of returning either a DataSource or a Connection. methodName - The name of the public static method on the aforementioned class that returns the data source or connection. If this method returns a Connection, it should return a new connection every call. Returns: the created connection source."
appender,build publicJdbcAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends JdbcAppender.Builder<B>> Returns: the configured instance.
appender,getReconnectIntervalMillis publiclonggetReconnectIntervalMillis()
appender,isImmediateFail publicbooleanisImmediateFail()
appender,"setBufferSize publicBsetBufferSize(intbufferSize) If an integer greater than 0, this causes the appender to buffer log events and flush whenever the buffer reaches this size. Parameters: bufferSize - buffer size. Returns: this"
appender,setColumnConfigs publicBsetColumnConfigs(ColumnConfig...columnConfigs) Information about the columns that log event data should be inserted into and how to insert that data. Parameters: columnConfigs - Column configurations. Returns: this
appender,setColumnMappings publicBsetColumnMappings(ColumnMapping...columnMappings)
appender,setConnectionSource publicBsetConnectionSource(ConnectionSourceconnectionSource) The connections source from which database connections should be retrieved. Parameters: connectionSource - The connections source. Returns: this
appender,setImmediateFail publicvoidsetImmediateFail(booleanimmediateFail)
appender,setReconnectIntervalMillis publicvoidsetReconnectIntervalMillis(longreconnectIntervalMillis)
appender,setTableName publicBsetTableName(StringtableName) The name of the database table to insert log events into. Parameters: tableName - The database table name. Returns: this
appender,setTruncateStrings publicBsetTruncateStrings(booleantruncateStrings)
appender,"createAppender @Deprecated public static<B extends JdbcAppender.Builder<B>> JdbcAppendercreateAppender(Stringname, Stringignore, Filterfilter, ConnectionSourceconnectionSource, StringbufferSize, StringtableName, ColumnConfig[]columnConfigs) Deprecated. use newBuilder() Factory method for creating a JDBC appender within the plugin manager. See Also: JdbcAppender.Builder"
appender,JdbcAppender.Builder
appender,newBuilder @PluginBuilderFactory public static<B extends JdbcAppender.Builder<B>>BnewBuilder()
appender,toString publicStringtoString() Overrides: toStringin classAbstractAppender
appender,"getJDBCDatabaseManager @Deprecated public staticJdbcDatabaseManagergetJDBCDatabaseManager(Stringname, intbufferSize, ConnectionSourceconnectionSource, StringtableName, ColumnConfig[]columnConfigs) Deprecated. use getManager(String, int, Layout, ConnectionSource, String, ColumnConfig[], ColumnMapping[], boolean, long) Creates a JDBC manager for use within the JdbcAppender, or returns a suitable one if it already exists. Parameters: name - The name of the manager, which should include connection details and hashed passwords where possible. bufferSize - The size of the log event buffer. connectionSource - The source for connections to the database. tableName - The name of the database table to insert log events into. columnConfigs - Configuration information about the log table columns. Returns: a new or existing JDBC manager as applicable."
appender,"getManager @Deprecated public staticJdbcDatabaseManagergetManager(Stringname, intbufferSize, Layout<? extends Serializable>layout, ConnectionSourceconnectionSource, StringtableName, ColumnConfig[]columnConfigs, ColumnMapping[]columnMappings) Deprecated. Creates a JDBC manager for use within the JdbcAppender, or returns a suitable one if it already exists. Parameters: name - The name of the manager, which should include connection details and hashed passwords where possible. bufferSize - The size of the log event buffer. layout - The Appender-level layout connectionSource - The source for connections to the database. tableName - The name of the database table to insert log events into. columnConfigs - Configuration information about the log table columns. columnMappings - column mapping configuration (including type conversion). Returns: a new or existing JDBC manager as applicable."
appender,"getManager @Deprecated public staticJdbcDatabaseManagergetManager(Stringname, intbufferSize, Layout<? extends Serializable>layout, ConnectionSourceconnectionSource, StringtableName, ColumnConfig[]columnConfigs, ColumnMapping[]columnMappings, booleanimmediateFail, longreconnectIntervalMillis) Deprecated. use getManager(String, int, Layout, ConnectionSource, String, ColumnConfig[], ColumnMapping[], boolean, long) Creates a JDBC manager for use within the JdbcAppender, or returns a suitable one if it already exists. Parameters: name - The name of the manager, which should include connection details and hashed passwords where possible. bufferSize - The size of the log event buffer. layout - the Appender-level layout connectionSource - The source for connections to the database. tableName - The name of the database table to insert log events into. columnConfigs - Configuration information about the log table columns. columnMappings - column mapping configuration (including type conversion). reconnectIntervalMillis - How often to reconnect to the database when a SQL exception is detected. immediateFail - Whether to fail immediately with a AppenderLoggingException when connecting to JDBC fails. Returns: a new or existing JDBC manager as applicable."
appender,"getManager public staticJdbcDatabaseManagergetManager(Stringname, intbufferSize, Layout<? extends Serializable>layout, ConnectionSourceconnectionSource, StringtableName, ColumnConfig[]columnConfigs, ColumnMapping[]columnMappings, booleanimmediateFail, longreconnectIntervalMillis, booleantruncateStrings) Creates a JDBC manager for use within the JdbcAppender, or returns a suitable one if it already exists. Parameters: name - The name of the manager, which should include connection details and hashed passwords where possible. bufferSize - The size of the log event buffer. layout - The Appender-level layout connectionSource - The source for connections to the database. tableName - The name of the database table to insert log events into. columnConfigs - Configuration information about the log table columns. columnMappings - column mapping configuration (including type conversion). immediateFail - Whether or not to fail immediately with a AppenderLoggingException when connecting to JDBC fails. reconnectIntervalMillis - How often to reconnect to the database when a SQL exception is detected. truncateStrings - Whether or not to truncate strings to match column metadata. Returns: a new or existing JDBC manager as applicable."
appender,closeResources protectedvoidcloseResources(booleanlogExceptions)
appender,"commitAndClose protectedbooleancommitAndClose() Description copied from class:AbstractDatabaseManager Commits any active transaction (if applicable) and disconnects from the database (returns the connection to the connection pool). With buffering enabled, this is called when flushing the buffer completes, after the last call to AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). With buffering disabled, this is called immediately after every invocation of AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). Specified by: commitAndClosein classAbstractDatabaseManager Returns: true if all resources were closed normally, false otherwise."
appender,"connectAndStart protectedvoidconnectAndStart() Description copied from class:AbstractDatabaseManager Connects to the database and starts a transaction (if applicable). With buffering enabled, this is called when flushing the buffer begins, before the first call to AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). With buffering disabled, this is called immediately before every invocation of AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). Specified by: connectAndStartin classAbstractDatabaseManager"
appender,getConnectionSource publicConnectionSourcegetConnectionSource()
appender,getSqlStatement publicStringgetSqlStatement()
appender,getTableName publicStringgetTableName()
appender,"shutdownInternal protectedbooleanshutdownInternal() Description copied from class:AbstractDatabaseManager Implementations should implement this method to perform any proprietary disconnection / shutdown operations. This method will never be called twice on the same instance, and it will only be called after AbstractDatabaseManager.startupInternal(). It is safe to throw any exceptions from this method. This method does not necessarily disconnect from the database for the same reasons outlined in AbstractDatabaseManager.startupInternal(). Specified by: shutdownInternalin classAbstractDatabaseManager Returns: true if all resources were closed normally, false otherwise."
appender,"startupInternal protectedvoidstartupInternal() throws Exception Description copied from class:AbstractDatabaseManager Implementations should implement this method to perform any proprietary startup operations. This method will never be called twice on the same instance. It is safe to throw any exceptions from this method. This method does not necessarily connect to the database, as it is generally unreliable to connect once and use the same connection for hours. Specified by: startupInternalin classAbstractDatabaseManager Throws: Exception"
appender,"writeInternal protectedvoidwriteInternal(LogEventevent, Serializableserializable) Description copied from class:AbstractDatabaseManager Performs the actual writing of the event in an implementation-specific way. This method is called immediately from AbstractDatabaseManager.write(LogEvent, Serializable) if buffering is off, or from AbstractDatabaseManager.flush() if the buffer has reached its limit. Specified by: writeInternalin classAbstractDatabaseManager Parameters: event - The event to write to the database."
appender,"writeThrough protectedvoidwriteThrough(LogEventevent, Serializableserializable) Overrides: writeThroughin classAbstractDatabaseManager"
appender,build publicJmsAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends JmsAppender.Builder<B>> Returns: the configured instance.
appender,setDestinationBindingName publicJmsAppender.BuildersetDestinationBindingName(StringdestinationBindingName)
appender,setFactoryBindingName publicJmsAppender.BuildersetFactoryBindingName(StringfactoryBindingName)
appender,setFactoryName publicJmsAppender.BuildersetFactoryName(StringfactoryName)
appender,setImmediateFail publicJmsAppender.BuildersetImmediateFail(booleanimmediateFail)
appender,setJmsManager publicJmsAppender.BuildersetJmsManager(JmsManagerjmsManager)
appender,setPassword publicJmsAppender.BuildersetPassword(char[]password)
appender,setPassword @Deprecated publicJmsAppender.BuildersetPassword(Stringpassword) Deprecated. Use setPassword(char[])
appender,setProviderUrl publicJmsAppender.BuildersetProviderUrl(StringproviderUrl)
appender,setReconnectIntervalMillis publicJmsAppender.BuildersetReconnectIntervalMillis(longreconnectIntervalMillis)
appender,setSecurityCredentials publicJmsAppender.BuildersetSecurityCredentials(StringsecurityCredentials)
appender,setSecurityPrincipalName publicJmsAppender.BuildersetSecurityPrincipalName(StringsecurityPrincipalName)
appender,setUrlPkgPrefixes publicJmsAppender.BuildersetUrlPkgPrefixes(StringurlPkgPrefixes)
appender,setUsername @Deprecated publicJmsAppender.BuildersetUsername(Stringusername) Deprecated. Use setUserName(String).
appender,setUserName publicJmsAppender.BuildersetUserName(StringuserName)
appender,toString publicStringtoString() Does not include the password. Overrides: toStringin classObject
appender,newBuilder @PluginBuilderFactory public staticJmsAppender.BuildernewBuilder()
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,getManager publicJmsManagergetManager()
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,getConnectionFactoryName publicStringgetConnectionFactoryName()
appender,getDestinationName publicStringgetDestinationName()
appender,getJndiManager publicJndiManagergetJndiManager()
appender,getJndiProperties publicPropertiesgetJndiProperties()
appender,getPassword publicchar[]getPassword()
appender,getReconnectIntervalMillis publiclonggetReconnectIntervalMillis()
appender,getUserName publicStringgetUserName()
appender,isImmediateFail publicbooleanisImmediateFail()
appender,isRetry publicbooleanisRetry()
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"getJmsManager public staticJmsManagergetJmsManager(Stringname, PropertiesjndiProperties, StringconnectionFactoryName, StringdestinationName, StringuserName, char[]password, booleanimmediateFail, longreconnectIntervalMillis) Gets a JmsManager using the specified configuration parameters. Parameters: name - The name to use for this JmsManager. connectionFactoryName - The binding name for the ConnectionFactory. destinationName - The binding name for the Destination. userName - The userName to connect with or null for no authentication. password - The password to use with the given userName or null for no authentication. immediateFail - Whether or not to fail immediately with a AppenderLoggingException when connecting to JMS fails. reconnectIntervalMillis - How to log sleep in milliseconds before trying to reconnect to JMS. jndiProperties - JNDI properties. Returns: The JmsManager as configured."
appender,"createMessage publicjavax.jms.MessagecreateMessage(Serializableobject) throws javax.jms.JMSException Creates a TextMessage, MapMessage, or ObjectMessage from a Serializable object. For instance, when using a text-based Layout such as PatternLayout, the LogEvent message will be serialized to a String. When using a layout such as SerializedLayout, the LogEvent message will be serialized as a Java object. When using a layout such as MessageLayout and the LogEvent message is a Log4j MapMessage, the message will be serialized as a JMS MapMessage. Parameters: object - The LogEvent or String message to wrap. Returns: A new JMS message containing the provided object. Throws: javax.jms.JMSException - if the JMS provider fails to create this message due to some internal error."
appender,createMessageConsumer publicjavax.jms.MessageConsumercreateMessageConsumer() throws javax.jms.JMSException Creates a MessageConsumer on this Destination using the current Session. Returns: A MessageConsumer on this Destination. Throws: javax.jms.JMSException - if the session fails to create a consumer due to some internal error.
appender,"createMessageProducer publicjavax.jms.MessageProducercreateMessageProducer(javax.jms.Sessionsession, javax.jms.Destinationdestination) throws javax.jms.JMSException Creates a MessageProducer on this Destination using the current Session. Parameters: session - The JMS Session to use to create the MessageProducer destination - The JMS Destination for the MessageProducer Returns: A MessageProducer on this Destination. Throws: javax.jms.JMSException - if the session fails to create a MessageProducer due to some internal error."
appender,getJmsManagerConfiguration publicJmsManager.JmsManagerConfigurationgetJmsManagerConfiguration()
appender,"releaseSub protectedbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractManager May be overridden by managers to perform processing while the manager is being released and the lock is held. A timeout is passed for implementors to use as they see fit. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,"createAppender @PluginFactory public staticJeroMqAppendercreateAppender(@Required(message=""No name provided for JeroMqAppender"") @PluginAttribute(""name"") Stringname, @PluginElement(""Layout"") Layout<?>layout, @PluginElement(""Filter"") Filterfilter, @PluginElement(""Properties"") Property[]properties, @PluginAttribute(""ignoreExceptions"") booleanignoreExceptions, @PluginAttribute(value=""affinity"",defaultLong=0L) longaffinity, @PluginAttribute(value=""backlog"",defaultLong=100L) longbacklog, @PluginAttribute(""delayAttachOnConnect"") booleandelayAttachOnConnect, @PluginAttribute(""identity"") byte[]identity, @PluginAttribute(value=""ipv4Only"",defaultBoolean=true) booleanipv4Only, @PluginAttribute(value=""linger"",defaultLong=-1L) longlinger, @PluginAttribute(value=""maxMsgSize"",defaultLong=-1L) longmaxMsgSize, @PluginAttribute(value=""rcvHwm"",defaultLong=1000L) longrcvHwm, @PluginAttribute(value=""receiveBufferSize"",defaultLong=0L) longreceiveBufferSize, @PluginAttribute(value=""receiveTimeOut"",defaultLong=-1L) intreceiveTimeOut, @PluginAttribute(value=""reconnectIVL"",defaultLong=100L) longreconnectIVL, @PluginAttribute(value=""reconnectIVLMax"",defaultLong=0L) longreconnectIVLMax, @PluginAttribute(value=""sendBufferSize"",defaultLong=0L) longsendBufferSize, @PluginAttribute(value=""sendTimeOut"",defaultLong=-1L) intsendTimeOut, @PluginAttribute(value=""sndHwm"",defaultLong=1000L) longsndHwm, @PluginAttribute(value=""tcpKeepAlive"",defaultInt=-1) inttcpKeepAlive, @PluginAttribute(value=""tcpKeepAliveCount"",defaultLong=-1L) longtcpKeepAliveCount, @PluginAttribute(value=""tcpKeepAliveIdle"",defaultLong=-1L) longtcpKeepAliveIdle, @PluginAttribute(value=""tcpKeepAliveInterval"",defaultLong=-1L) longtcpKeepAliveInterval, @PluginAttribute(""xpubVerbose"") booleanxpubVerbose)"
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,toString publicStringtoString() Overrides: toStringin classAbstractAppender
appender,send publicbooleansend(byte[]data)
appender,"releaseSub protectedbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractManager May be overridden by managers to perform processing while the manager is being released and the lock is held. A timeout is passed for implementors to use as they see fit. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,getEndpoints publicList<String>getEndpoints()
appender,"getJeroMqManager public staticJeroMqManagergetJeroMqManager(Stringname, longaffinity, longbacklog, booleandelayAttachOnConnect, byte[]identity, booleanipv4Only, longlinger, longmaxMsgSize, longrcvHwm, longreceiveBufferSize, intreceiveTimeOut, longreconnectIVL, longreconnectIVLMax, longsendBufferSize, intsendTimeOut, longsndHwm, inttcpKeepAlive, longtcpKeepAliveCount, longtcpKeepAliveIdle, longtcpKeepAliveInterval, booleanxpubVerbose, List<String>endpoints)"
appender,getContext public staticorg.zeromq.ZMQ.ContextgetContext()
appender,getZContext public staticorg.zeromq.ZContextgetZContext()
appender,"newKafkaProducer publicorg.apache.kafka.clients.producer.Producer<byte[],byte[]>newKafkaProducer(Propertiesconfig) Creates a new Kafka Producer from the given configuration properties. Specified by: newKafkaProducerin interfaceKafkaProducerFactory Parameters: config - Kafka Producer configuration properties. Returns: a new Kafka Producer."
appender,build publicKafkaAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends KafkaAppender.Builder<B>> Returns: the configured instance.
appender,getRetryCount publicIntegergetRetryCount()
appender,getTopic publicStringgetTopic()
appender,isSendEventTimestamp publicbooleanisSendEventTimestamp()
appender,isSyncSend publicbooleanisSyncSend()
appender,setKey publicBsetKey(Stringkey)
appender,setRetryCount @Deprecated publicBsetRetryCount(StringretryCount) Deprecated.
appender,setRetryCount publicBsetRetryCount(intretryCount)
appender,setSendEventTimestamp publicBsetSendEventTimestamp(booleansendEventTimestamp)
appender,setSyncSend publicBsetSyncSend(booleansyncSend)
appender,setTopic publicBsetTopic(Stringtopic)
appender,"createAppender @Deprecated public staticKafkaAppendercreateAppender(Layout<? extends Serializable>layout, Filterfilter, Stringname, booleanignoreExceptions, Stringtopic, Property[]properties, Configurationconfiguration, Stringkey) Deprecated."
appender,newBuilder @PluginBuilderFactory public static<B extends KafkaAppender.Builder<B>> BnewBuilder() Creates a builder for a KafkaAppender. Returns: a builder for a KafkaAppender.
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,toString publicStringtoString() Overrides: toStringin classAbstractAppender
appender,"releaseSub publicbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractManager May be overridden by managers to perform processing while the manager is being released and the lock is held. A timeout is passed for implementors to use as they see fit. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,"send @Deprecated publicvoidsend(byte[]msg) throws ExecutionException, InterruptedException, TimeoutException Deprecated. Throws: ExecutionException InterruptedException TimeoutException"
appender,"send publicvoidsend(byte[]msg, LongeventTimestamp) throws ExecutionException, InterruptedException, TimeoutException Throws: ExecutionException InterruptedException TimeoutException"
appender,startup publicvoidstartup()
appender,getTopic publicStringgetTopic()
appender,"getManager @Deprecated public staticKafkaManagergetManager(LoggerContextloggerContext, Stringname, Stringtopic, booleansyncSend, Property[]properties, Stringkey) Deprecated."
appender,"newKafkaProducer org.apache.kafka.clients.producer.Producer<byte[],byte[]>newKafkaProducer(Propertiesconfig) Creates a new Kafka Producer from the given configuration properties. Parameters: config - Kafka Producer configuration properties. Returns: a new Kafka Producer."
appender,"close publicvoidclose() Description copied from interface:NoSqlConnection Closes the underlying connection. This method call should be idempotent. Only the first call should have any effect; all further calls should be ignored. It's possible the underlying connection is stateless (such as an HTTP web service), in which case this method would be a no-op. This method should also commit any open transactions, if applicable and if not already committed. If this connection is part of a connection pool, executing this method should commit the transaction and return the connection to the pool, but it should not actually close the underlying connection. Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable Specified by: closein interfaceNoSqlConnection<W,T extends NoSqlObject<W>>"
appender,closeImpl protected abstractvoidcloseImpl()
appender,"isClosed publicbooleanisClosed() Description copied from interface:NoSqlConnection Indicates whether the underlying connection is closed. If the underlying connection is stateless (such as an HTTP web service), this method would likely always return true. Essentially, this method should only return true if a call to NoSqlConnection.insertObject(NoSqlObject) will fail due to the state of this object. Specified by: isClosedin interfaceNoSqlConnection<W,T extends NoSqlObject<W>> Returns: true if this object is considered closed."
appender,"set publicvoidset(Stringfield, Objectvalue) Description copied from interface:NoSqlObject Sets the value of a property on this object to a String or primitive. Specified by: setin interfaceNoSqlObject<Map<String,Object>> Parameters: field - The name of the property value - The value of the property"
appender,"set publicvoidset(Stringfield, NoSqlObject<Map<String,Object>>value) Description copied from interface:NoSqlObject Sets the value of a property on this object to a nested complex object. Specified by: setin interfaceNoSqlObject<Map<String,Object>> Parameters: field - The name of the property value - The value of the property"
appender,"set publicvoidset(Stringfield, Object[]values) Description copied from interface:NoSqlObject Sets the value of a property on this object to an array of Strings or primitives. Specified by: setin interfaceNoSqlObject<Map<String,Object>> Parameters: field - The name of the property values - The values for the property"
appender,"set publicvoidset(Stringfield, NoSqlObject<Map<String,Object>>[]values) Description copied from interface:NoSqlObject Sets the value of a property on this object to an array of nested complex objects. Specified by: setin interfaceNoSqlObject<Map<String,Object>> Parameters: field - The name of the property values - The values for the property"
appender,"unwrap publicMap<String,Object>unwrap() Description copied from interface:NoSqlObject Obtains the underlying NoSQL library-specific object that this object wraps. Specified by: unwrapin interfaceNoSqlObject<Map<String,Object>> Returns: the wrapped object."
appender,build publicNoSqlAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends NoSqlAppender.Builder<B>> Returns: the configured instance.
appender,"setBufferSize publicBsetBufferSize(intbufferSize) Sets the buffer size. Parameters: bufferSize - If an integer greater than 0, this causes the appender to buffer log events and flush whenever the buffer reaches this size. Returns: this"
appender,setProvider publicBsetProvider(NoSqlProvider<?>provider) Sets the provider. Parameters: provider - The NoSQL provider that provides connections to the chosen NoSQL database. Returns: this
appender,"createAppender @Deprecated public staticNoSqlAppendercreateAppender(Stringname, Stringignore, Filterfilter, StringbufferSize, NoSqlProvider<?>provider) Deprecated. since 2.11.0; use NoSqlAppender.Builder. Factory method for creating a NoSQL appender within the plugin manager. Parameters: name - The name of the appender. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. filter - The filter, if any, to use. bufferSize - If an integer greater than 0, this causes the appender to buffer log events and flush whenever the buffer reaches this size. provider - The NoSQL provider that provides connections to the chosen NoSQL database. Returns: a new NoSQL appender."
appender,newBuilder @PluginBuilderFactory public static<B extends NoSqlAppender.Builder<B>> BnewBuilder()
appender,toString publicStringtoString() Overrides: toStringin classAbstractAppender
appender,createObject TcreateObject() Instantiates and returns a NoSqlObject instance whose properties can be configured before ultimate insertion via insertObject(NoSqlObject). Returns: a new object. See Also: NoSqlObject
appender,NoSqlObject
appender,createList T[]createList(intlength) Creates an array of the specified length typed to match the NoSqlObject implementation appropriate for this provider. Parameters: length - the length of the array to create. Returns: a new array. See Also: NoSqlObject
appender,NoSqlObject
appender,insertObject voidinsertObject(NoSqlObject<W>object) Inserts the given object into the underlying NoSQL database. Parameters: object - The object to insert.
appender,"close voidclose() Closes the underlying connection. This method call should be idempotent. Only the first call should have any effect; all further calls should be ignored. It's possible the underlying connection is stateless (such as an HTTP web service), in which case this method would be a no-op. This method should also commit any open transactions, if applicable and if not already committed. If this connection is part of a connection pool, executing this method should commit the transaction and return the connection to the pool, but it should not actually close the underlying connection. Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable"
appender,"isClosed booleanisClosed() Indicates whether the underlying connection is closed. If the underlying connection is stateless (such as an HTTP web service), this method would likely always return true. Essentially, this method should only return true if a call to insertObject(NoSqlObject) will fail due to the state of this object. Returns: true if this object is considered closed."
appender,"getNoSqlDatabaseManager @Deprecated public staticNoSqlDatabaseManager<?>getNoSqlDatabaseManager(Stringname, intbufferSize, NoSqlProvider<?>provider) Deprecated. Use getNoSqlDatabaseManager(String, int, NoSqlProvider, KeyValuePair[], Configuration). Creates a NoSQL manager for use within the NoSqlAppender, or returns a suitable one if it already exists. Parameters: name - The name of the manager, which should include connection details and hashed passwords where possible. bufferSize - The size of the log event buffer. provider - A provider instance which will be used to obtain connections to the chosen NoSQL database. Returns: a new or existing NoSQL manager as applicable."
appender,"getNoSqlDatabaseManager public staticNoSqlDatabaseManager<?>getNoSqlDatabaseManager(Stringname, intbufferSize, NoSqlProvider<?>provider, KeyValuePair[]additionalFields, Configurationconfiguration) Creates a NoSQL manager for use within the NoSqlAppender, or returns a suitable one if it already exists. Parameters: name - The name of the manager, which should include connection details and hashed passwords where possible. bufferSize - The size of the log event buffer. provider - A provider instance which will be used to obtain connections to the chosen NoSQL database. additionalFields - Additional fields. configuration - TODO Returns: a new or existing NoSQL manager as applicable."
appender,"commitAndClose protectedbooleancommitAndClose() Description copied from class:AbstractDatabaseManager Commits any active transaction (if applicable) and disconnects from the database (returns the connection to the connection pool). With buffering enabled, this is called when flushing the buffer completes, after the last call to AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). With buffering disabled, this is called immediately after every invocation of AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). Specified by: commitAndClosein classAbstractDatabaseManager Returns: true if all resources were closed normally, false otherwise."
appender,"connectAndStart protectedvoidconnectAndStart() Description copied from class:AbstractDatabaseManager Connects to the database and starts a transaction (if applicable). With buffering enabled, this is called when flushing the buffer begins, before the first call to AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). With buffering disabled, this is called immediately before every invocation of AbstractDatabaseManager.writeInternal(org.apache.logging.log4j.core.LogEvent). Specified by: connectAndStartin classAbstractDatabaseManager"
appender,"shutdownInternal protectedbooleanshutdownInternal() Description copied from class:AbstractDatabaseManager Implementations should implement this method to perform any proprietary disconnection / shutdown operations. This method will never be called twice on the same instance, and it will only be called after AbstractDatabaseManager.startupInternal(). It is safe to throw any exceptions from this method. This method does not necessarily disconnect from the database for the same reasons outlined in AbstractDatabaseManager.startupInternal(). Specified by: shutdownInternalin classAbstractDatabaseManager Returns: true if all resources were closed normally, false otherwise."
appender,"startupInternal protectedvoidstartupInternal() Description copied from class:AbstractDatabaseManager Implementations should implement this method to perform any proprietary startup operations. This method will never be called twice on the same instance. It is safe to throw any exceptions from this method. This method does not necessarily connect to the database, as it is generally unreliable to connect once and use the same connection for hours. Specified by: startupInternalin classAbstractDatabaseManager"
appender,"writeInternal protectedvoidwriteInternal(LogEventevent, Serializableserializable) Description copied from class:AbstractDatabaseManager Performs the actual writing of the event in an implementation-specific way. This method is called immediately from AbstractDatabaseManager.write(LogEvent, Serializable) if buffering is off, or from AbstractDatabaseManager.flush() if the buffer has reached its limit. Specified by: writeInternalin classAbstractDatabaseManager Parameters: event - The event to write to the database."
appender,"set voidset(Stringfield, Objectvalue) Sets the value of a property on this object to a String or primitive. Parameters: field - The name of the property value - The value of the property"
appender,"set voidset(Stringfield, NoSqlObject<W>value) Sets the value of a property on this object to a nested complex object. Parameters: field - The name of the property value - The value of the property"
appender,"set voidset(Stringfield, Object[]values) Sets the value of a property on this object to an array of Strings or primitives. Parameters: field - The name of the property values - The values for the property"
appender,"set voidset(Stringfield, NoSqlObject<W>[]values) Sets the value of a property on this object to an array of nested complex objects. Parameters: field - The name of the property values - The values for the property"
appender,unwrap Wunwrap() Obtains the underlying NoSQL library-specific object that this object wraps. Returns: the wrapped object.
appender,"getConnection CgetConnection() Obtains a connection from this provider. The concept of a connection in this case is not strictly an active duplex UDP or TCP connection to the underlying database. It can be thought of more as a gateway, a path for inserting objects that may use a persistent connection or may use HTTP web service calls, etc. Where applicable, this method should return a connection from the connection pool as opposed to opening a brand new connection every time. Returns: a connection that can be used to create and persist objects to this database. See Also: NoSqlConnection"
appender,NoSqlConnection
appender,toString StringtoString() All implementations must override Object.toString() to provide information about the provider configuration (obscuring passwords with one-way hashes). Overrides: toStringin classObject Returns: the string representation of this NoSQL provider.
appender,"createPolicy @PluginFactory public staticLoggerNameLevelRewritePolicycreatePolicy(@PluginAttribute(""logger"") StringloggerNamePrefix, @PluginElement(""KeyValuePair"") KeyValuePair[]levelPairs) Creates a policy to rewrite levels for a given logger name. Parameters: loggerNamePrefix - The logger name prefix for events to rewrite; all event logger names that start with this string will be rewritten. levelPairs - The levels to rewrite, the key is the source level, the value the target level. Returns: a new LoggerNameLevelRewritePolicy"
appender,rewrite publicLogEventrewrite(LogEventevent) Description copied from interface:RewritePolicy Rewrite a logging event. Specified by: rewritein interfaceRewritePolicy Parameters: event - a logging event that may be returned or used to create a new logging event. Returns: a logging event or null to suppress processing.
appender,rewrite publicLogEventrewrite(LogEventsource) Rewrite the event. Specified by: rewritein interfaceRewritePolicy Parameters: source - a logging event that may be returned or used to create a new logging event. Returns: The LogEvent after rewriting.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"createPolicy @PluginFactory public staticMapRewritePolicycreatePolicy(@PluginAttribute(""mode"") Stringmode, @PluginElement(""KeyValuePair"") KeyValuePair[]pairs) The factory method to create the MapRewritePolicy. Parameters: mode - The string representation of the Mode. pairs - key/value pairs for the new Map keys and values. Returns: The MapRewritePolicy."
appender,"values public staticMapRewritePolicy.Mode[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
appender,valueOf public staticMapRewritePolicy.ModevalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
appender,rewrite publicLogEventrewrite(LogEventsource) Rewrites the event. Specified by: rewritein interfaceRewritePolicy Parameters: source - a logging event that may be returned or used to create a new logging event. Returns: The LogEvent after rewriting.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"createPolicy @PluginFactory public staticPropertiesRewritePolicycreatePolicy(@PluginConfiguration Configurationconfig, @PluginElement(""Properties"") Property[]props) Creates a PropertiesRewritePolicy. Parameters: config - The Configuration. props - key/value pairs for the new keys and values. Returns: The PropertiesRewritePolicy."
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,append publicvoidappend(LogEventevent) Modifies the event and pass to the subordinate Appenders. Parameters: event - The LogEvent.
appender,"createAppender @PluginFactory public staticRewriteAppendercreateAppender(@PluginAttribute(""name"") Stringname, @PluginAttribute(""ignoreExceptions"") Stringignore, @PluginElement(""AppenderRef"") AppenderRef[]appenderRefs, @PluginConfiguration Configurationconfig, @PluginElement(""RewritePolicy"") RewritePolicyrewritePolicy, @PluginElement(""Filter"") Filterfilter) Creates a RewriteAppender. Parameters: name - The name of the Appender. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. appenderRefs - An array of Appender names to call. config - The Configuration. rewritePolicy - The policy to use to modify the event. filter - A Filter to filter events. Returns: The created RewriteAppender."
appender,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware Overrides: requiresLocationin classAbstractAppender
appender,rewrite LogEventrewrite(LogEventsource) Rewrite a logging event. Parameters: source - a logging event that may be returned or used to create a new logging event. Returns: a logging event or null to suppress processing.
appender,getStrSubstitutor publicStrSubstitutorgetStrSubstitutor()
appender,"merge protectedActionmerge(ActioncompressAction, List<Action>custom, booleanstopOnError)"
appender,suffixLength protectedintsuffixLength(StringlowFilename)
appender,"getEligibleFiles protectedSortedMap<Integer,Path>getEligibleFiles(RollingFileManagermanager)"
appender,"getEligibleFiles protectedSortedMap<Integer,Path>getEligibleFiles(RollingFileManagermanager, booleanisAscending)"
appender,"getEligibleFiles protectedSortedMap<Integer,Path>getEligibleFiles(Stringpath, Stringpattern)"
appender,"getEligibleFiles @Deprecated protectedSortedMap<Integer,Path>getEligibleFiles(Stringpath, StringlogfilePattern, booleanisAscending) Deprecated."
appender,"getEligibleFiles protectedSortedMap<Integer,Path>getEligibleFiles(StringcurrentFile, Stringpath, StringlogfilePattern, booleanisAscending)"
appender,getTriggeringPolicies publicTriggeringPolicy[]getTriggeringPolicies()
appender,initialize publicvoidinitialize(RollingFileManagermanager) Initializes the policy. Parameters: manager - The RollingFileManager.
appender,"isTriggeringEvent publicbooleanisTriggeringEvent(LogEventevent) Determines if a rollover should occur. Parameters: event - A reference to the currently event. Returns: true if a rollover should occur, false otherwise."
appender,"createPolicy @PluginFactory public staticCompositeTriggeringPolicycreatePolicy(@PluginElement(""Policies"") TriggeringPolicy...triggeringPolicy) Creates a CompositeTriggeringPolicy. Parameters: triggeringPolicy - The triggering policies. Returns: A CompositeTriggeringPolicy."
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,initialize publicvoidinitialize(RollingFileManageraManager) Initializes the policy. Parameters: aManager - The RollingFileManager.
appender,isTriggeringEvent publicbooleanisTriggeringEvent(LogEventevent) Determines whether a rollover should occur. Parameters: event - A reference to the currently event. Returns: true if a rollover should occur.
appender,getCronExpression publicCronExpressiongetCronExpression()
appender,"createPolicy @PluginFactory public staticCronTriggeringPolicycreatePolicy(@PluginConfiguration Configurationconfiguration, @PluginAttribute(""evaluateOnStartup"") StringevaluateOnStartup, @PluginAttribute(""schedule"") Stringschedule) Creates a ScheduledTriggeringPolicy. Parameters: configuration - the Configuration. evaluateOnStartup - check if the file should be rolled over immediately. schedule - the cron expression. Returns: a ScheduledTriggeringPolicy."
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,build publicDefaultRolloverStrategybuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<DefaultRolloverStrategy> Returns: the configured instance.
appender,getMax publicStringgetMax()
appender,withMax publicDefaultRolloverStrategy.BuilderwithMax(Stringmax) Defines the maximum number of files to keep. Parameters: max - The maximum number of files to keep. Returns: This builder for chaining convenience
appender,getMin publicStringgetMin()
appender,withMin publicDefaultRolloverStrategy.BuilderwithMin(Stringmin) Defines the minimum number of files to keep. Parameters: min - The minimum number of files to keep. Returns: This builder for chaining convenience
appender,getFileIndex publicStringgetFileIndex()
appender,"withFileIndex publicDefaultRolloverStrategy.BuilderwithFileIndex(StringfileIndex) Defines the file index for rolling strategy. Parameters: fileIndex - If set to ""max"" (the default), files with a higher index will be newer than files with a smaller index. If set to ""min"", file renaming and the counter will follow the Fixed Window strategy. Returns: This builder for chaining convenience"
appender,getCompressionLevelStr publicStringgetCompressionLevelStr()
appender,"withCompressionLevelStr publicDefaultRolloverStrategy.BuilderwithCompressionLevelStr(StringcompressionLevelStr) Defines compression level. Parameters: compressionLevelStr - The compression level, 0 (less) through 9 (more); applies only to ZIP files. Returns: This builder for chaining convenience"
appender,getCustomActions publicAction[]getCustomActions()
appender,withCustomActions publicDefaultRolloverStrategy.BuilderwithCustomActions(Action[]customActions) Defines custom actions. Parameters: customActions - custom actions to perform asynchronously after rollover Returns: This builder for chaining convenience
appender,isStopCustomActionsOnError publicbooleanisStopCustomActionsOnError()
appender,withStopCustomActionsOnError publicDefaultRolloverStrategy.BuilderwithStopCustomActionsOnError(booleanstopCustomActionsOnError) Defines whether to stop executing asynchronous actions if an error occurs. Parameters: stopCustomActionsOnError - whether to stop executing asynchronous actions if an error occurs Returns: This builder for chaining convenience
appender,getTempCompressedFilePattern publicStringgetTempCompressedFilePattern()
appender,"withTempCompressedFilePattern publicDefaultRolloverStrategy.BuilderwithTempCompressedFilePattern(StringtempCompressedFilePattern) Defines temporary compression file pattern. Parameters: tempCompressedFilePattern - File pattern of the working file pattern used during compression, if null no temporary file are used Returns: This builder for chaining convenience"
appender,getConfig publicConfigurationgetConfig()
appender,withConfig publicDefaultRolloverStrategy.BuilderwithConfig(Configurationconfig) Defines configuration. Parameters: config - The Configuration. Returns: This builder for chaining convenience
appender,newBuilder @PluginBuilderFactory public staticDefaultRolloverStrategy.BuildernewBuilder()
appender,"createStrategy @PluginFactory @Deprecated public staticDefaultRolloverStrategycreateStrategy(@PluginAttribute(""max"") Stringmax, @PluginAttribute(""min"") Stringmin, @PluginAttribute(""fileIndex"") StringfileIndex, @PluginAttribute(""compressionLevel"") StringcompressionLevelStr, @PluginElement(""Actions"") Action[]customActions, @PluginAttribute(value=""stopCustomActionsOnError"",defaultBoolean=true) booleanstopCustomActionsOnError, @PluginConfiguration Configurationconfig) Deprecated. Since 2.9 Usage of Builder API is preferable Creates the DefaultRolloverStrategy. Parameters: max - The maximum number of files to keep. min - The minimum number of files to keep. fileIndex - If set to ""max"" (the default), files with a higher index will be newer than files with a smaller index. If set to ""min"", file renaming and the counter will follow the Fixed Window strategy. compressionLevelStr - The compression level, 0 (less) through 9 (more); applies only to ZIP files. customActions - custom actions to perform asynchronously after rollover stopCustomActionsOnError - whether to stop executing asynchronous actions if an error occurs config - The Configuration. Returns: A DefaultRolloverStrategy."
appender,getCompressionLevel publicintgetCompressionLevel()
appender,getCustomActions publicList<Action>getCustomActions()
appender,getMaxIndex publicintgetMaxIndex()
appender,getMinIndex publicintgetMinIndex()
appender,isStopCustomActionsOnError publicbooleanisStopCustomActionsOnError()
appender,isUseMax publicbooleanisUseMax()
appender,getTempCompressedFilePattern publicPatternProcessorgetTempCompressedFilePattern()
appender,rollover publicRolloverDescriptionrollover(RollingFileManagermanager) throws SecurityException Performs the rollover. Parameters: manager - The RollingFileManager name for current active log file. Returns: A RolloverDescription. Throws: SecurityException - if an error occurs.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getCurrentFileName StringgetCurrentFileName(RollingFileManagermanager)
appender,clearCurrentFileName voidclearCurrentFileName()
appender,build publicDirectWriteRolloverStrategybuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<DirectWriteRolloverStrategy> Returns: the configured instance.
appender,getMaxFiles publicStringgetMaxFiles()
appender,withMaxFiles publicDirectWriteRolloverStrategy.BuilderwithMaxFiles(StringmaxFiles) Defines the maximum number of files to keep. Parameters: maxFiles - The maximum number of files that match the date portion of the pattern to keep. Returns: This builder for chaining convenience
appender,getCompressionLevelStr publicStringgetCompressionLevelStr()
appender,"withCompressionLevelStr publicDirectWriteRolloverStrategy.BuilderwithCompressionLevelStr(StringcompressionLevelStr) Defines compression level. Parameters: compressionLevelStr - The compression level, 0 (less) through 9 (more); applies only to ZIP files. Returns: This builder for chaining convenience"
appender,getCustomActions publicAction[]getCustomActions()
appender,withCustomActions publicDirectWriteRolloverStrategy.BuilderwithCustomActions(Action[]customActions) Defines custom actions. Parameters: customActions - custom actions to perform asynchronously after rollover Returns: This builder for chaining convenience
appender,isStopCustomActionsOnError publicbooleanisStopCustomActionsOnError()
appender,withStopCustomActionsOnError publicDirectWriteRolloverStrategy.BuilderwithStopCustomActionsOnError(booleanstopCustomActionsOnError) Defines whether to stop executing asynchronous actions if an error occurs. Parameters: stopCustomActionsOnError - whether to stop executing asynchronous actions if an error occurs Returns: This builder for chaining convenience
appender,getTempCompressedFilePattern publicStringgetTempCompressedFilePattern()
appender,"withTempCompressedFilePattern publicDirectWriteRolloverStrategy.BuilderwithTempCompressedFilePattern(StringtempCompressedFilePattern) Defines temporary compression file pattern. Parameters: tempCompressedFilePattern - File pattern of the working file pattern used during compression, if null no temporary file are used Returns: This builder for chaining convenience"
appender,getConfig publicConfigurationgetConfig()
appender,withConfig publicDirectWriteRolloverStrategy.BuilderwithConfig(Configurationconfig) Defines configuration. Parameters: config - The Configuration. Returns: This builder for chaining convenience
appender,newBuilder @PluginBuilderFactory public staticDirectWriteRolloverStrategy.BuildernewBuilder()
appender,"createStrategy @Deprecated @PluginFactory public staticDirectWriteRolloverStrategycreateStrategy(@PluginAttribute(""maxFiles"") StringmaxFiles, @PluginAttribute(""compressionLevel"") StringcompressionLevelStr, @PluginElement(""Actions"") Action[]customActions, @PluginAttribute(value=""stopCustomActionsOnError"",defaultBoolean=true) booleanstopCustomActionsOnError, @PluginConfiguration Configurationconfig) Deprecated. Since 2.9 Usage of Builder API is preferable Creates the DirectWriteRolloverStrategy. Parameters: maxFiles - The maximum number of files that match the date portion of the pattern to keep. compressionLevelStr - The compression level, 0 (less) through 9 (more); applies only to ZIP files. customActions - custom actions to perform asynchronously after rollover stopCustomActionsOnError - whether to stop executing asynchronous actions if an error occurs config - The Configuration. Returns: A DirectWriteRolloverStrategy."
appender,getCompressionLevel publicintgetCompressionLevel()
appender,getCustomActions publicList<Action>getCustomActions()
appender,getMaxFiles publicintgetMaxFiles()
appender,isStopCustomActionsOnError publicbooleanisStopCustomActionsOnError()
appender,getTempCompressedFilePattern publicPatternProcessorgetTempCompressedFilePattern()
appender,getCurrentFileName publicStringgetCurrentFileName(RollingFileManagermanager) Specified by: getCurrentFileNamein interfaceDirectFileRolloverStrategy
appender,clearCurrentFileName publicvoidclearCurrentFileName() Specified by: clearCurrentFileNamein interfaceDirectFileRolloverStrategy
appender,rollover publicRolloverDescriptionrollover(RollingFileManagermanager) throws SecurityException Performs the rollover. Specified by: rolloverin interfaceRolloverStrategy Parameters: manager - The RollingFileManager name for current active log file. Returns: A RolloverDescription. Throws: SecurityException - if an error occurs.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"values public staticFileExtension[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
appender,valueOf public staticFileExtensionvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
appender,lookup public staticFileExtensionlookup(StringfileExtension)
appender,lookupForFile public staticFileExtensionlookupForFile(StringfileName)
appender,"createCompressAction public abstractActioncreateCompressAction(StringrenameTo, StringcompressedName, booleandeleteSource, intcompressionLevel)"
appender,getExtension publicStringgetExtension()
appender,"parse public staticlongparse(Stringstring, longdefaultValue) Converts a string to a number of bytes. Strings consist of a floating point value followed by K, M, or G for kilobytes, megabytes, gigabytes, respectively. The abbreviations KB, MB, and GB are also accepted. Matching is case insensitive. Parameters: string - The string to convert defaultValue - The default value if a problem is detected parsing. Returns: The Bytes value for the string"
appender,createPolicy @PluginFactory public staticNoOpTriggeringPolicycreatePolicy()
appender,initialize publicvoidinitialize(RollingFileManagermanager) Description copied from interface:TriggeringPolicy Initializes this triggering policy. Parameters: manager - The RollingFileManager.
appender,"isTriggeringEvent publicbooleanisTriggeringEvent(LogEventlogEvent) Description copied from interface:TriggeringPolicy Determines if a rollover may be appropriate at this time. If true is returned, RolloverPolicy.rollover will be called but it can determine that a rollover is not warranted. Parameters: logEvent - A reference to the current log event. Returns: true if a rollover should occur."
appender,initialize publicvoidinitialize(RollingFileManagermanager) Provide the RollingFileManager to the policy. Parameters: manager - The RollingFileManager.
appender,isTriggeringEvent publicbooleanisTriggeringEvent(LogEventevent) Determine if a rollover should be triggered. Parameters: event - A reference to the current event. Returns: true if the target file's timestamp is older than the JVM start time.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"createPolicy @PluginFactory public staticOnStartupTriggeringPolicycreatePolicy(@PluginAttribute(value=""minSize"",defaultLong=1L) longminSize)"
appender,getPattern publicStringgetPattern()
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getPatternFields publicFormattingInfo[]getPatternFields()
appender,getPatternConverters publicArrayPatternConverter[]getPatternConverters()
appender,setTimeBased publicvoidsetTimeBased(booleanisTimeBased)
appender,getCurrentFileTime publiclonggetCurrentFileTime()
appender,setCurrentFileTime publicvoidsetCurrentFileTime(longcurrentFileTime)
appender,getPrevFileTime publiclonggetPrevFileTime()
appender,setPrevFileTime publicvoidsetPrevFileTime(longprevFileTime)
appender,getFileExtension publicFileExtensiongetFileExtension()
appender,"getNextTime publiclonggetNextTime(longcurrentMillis, intincrement, booleanmodulus) Returns the next potential rollover time. Parameters: currentMillis - The current time. increment - The increment to the next time. modulus - If true the time will be rounded to occur on a boundary aligned with the increment. Returns: the next potential rollover time and the timestamp for the target file."
appender,updateTime publicvoidupdateTime()
appender,"formatFileName public finalvoidformatFileName(StringBuilderbuf, booleanuseCurrentTime, Objectobj) Format file name. Parameters: buf - string buffer to which formatted file name is appended, may not be null. obj - object to be evaluated in formatting, may not be null."
appender,"formatFileName public finalvoidformatFileName(StrSubstitutorsubst, StringBuilderbuf, Objectobj) Formats file name. Parameters: subst - The StrSubstitutor. buf - string buffer to which formatted file name is appended, may not be null. obj - object to be evaluated in formatting, may not be null."
appender,"formatFileName public finalvoidformatFileName(StrSubstitutorsubst, StringBuilderbuf, booleanuseCurrentTime, Objectobj) Formats file name. Parameters: subst - The StrSubstitutor. buf - string buffer to which formatted file name is appended, may not be null. obj - object to be evaluated in formatting, may not be null."
appender,"formatFileName protected finalvoidformatFileName(StringBuilderbuf, Object...objects) Formats file name. Parameters: buf - string buffer to which formatted file name is appended, may not be null. objects - objects to be evaluated in formatting, may not be null."
appender,getFrequency publicRolloverFrequencygetFrequency()
appender,getNextFileTime publiclonggetNextFileTime()
appender,initialize publicvoidinitialize()
appender,"getFileManager public staticRollingFileManagergetFileManager(StringfileName, Stringpattern, booleanappend, booleanbufferedIO, TriggeringPolicypolicy, RolloverStrategystrategy, StringadvertiseURI, Layout<? extends Serializable>layout, intbufferSize, booleanimmediateFlush, booleancreateOnDemand, StringfilePermissions, StringfileOwner, StringfileGroup, Configurationconfiguration) Returns a RollingFileManager. Parameters: fileName - The file name. pattern - The pattern for rolling file. append - true if the file should be appended to. bufferedIO - true if data should be buffered. policy - The TriggeringPolicy. strategy - The RolloverStrategy. advertiseURI - the URI to use when advertising the file layout - The Layout. bufferSize - buffer size to use if bufferedIO is true immediateFlush - flush on every write or not createOnDemand - true if you want to lazy-create the file (a.k.a. on-demand.) filePermissions - File permissions fileOwner - File owner fileGroup - File group configuration - The configuration. Returns: A RollingFileManager."
appender,addRolloverListener publicvoidaddRolloverListener(RolloverListenerlistener) Add a RolloverListener. Parameters: listener - The RolloverListener.
appender,removeRolloverListener publicvoidremoveRolloverListener(RolloverListenerlistener) Remove a RolloverListener. Parameters: listener - The RolloverListener.
appender,getFileName publicStringgetFileName() Returns the name of the File being managed. Overrides: getFileNamein classFileManager Returns: The name of the File being managed.
appender,createParentDir protectedvoidcreateParentDir(Filefile) Overrides: createParentDirin classFileManager
appender,isDirectWrite publicbooleanisDirectWrite()
appender,getFileExtension publicFileExtensiongetFileExtension()
appender,"write protectedvoidwrite(byte[]bytes, intoffset, intlength, booleanimmediateFlush) Description copied from class:OutputStreamManager Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Overrides: writein classFileManager Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. immediateFlush - flushes immediately after writing."
appender,"writeToDestination protectedvoidwriteToDestination(byte[]bytes, intoffset, intlength) Description copied from class:FileManager Overrides OutputStreamManager.writeToDestination(byte[], int, int) to add support for file locking. Overrides: writeToDestinationin classFileManager Parameters: bytes - the array containing data offset - from where to write length - how many bytes to write"
appender,isRenameEmptyFiles publicbooleanisRenameEmptyFiles()
appender,setRenameEmptyFiles publicvoidsetRenameEmptyFiles(booleanrenameEmptyFiles)
appender,getFileSize publiclonggetFileSize() Returns the current size of the file. Returns: The size of the file in bytes.
appender,getFileTime publiclonggetFileTime() Returns the time the file was created. Returns: The time the file was created.
appender,checkRollover publicvoidcheckRollover(LogEventevent) Determines if a rollover should occur. Parameters: event - The LogEvent.
appender,"releaseSub publicbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Description copied from class:OutputStreamManager Default hook to write footer during close. Overrides: releaseSubin classOutputStreamManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
appender,"rollover publicvoidrollover(DateprevFileTime, DateprevRollTime)"
appender,rollover publicvoidrollover()
appender,createFileAfterRollover protectedvoidcreateFileAfterRollover() throws IOException Throws: IOException
appender,getPatternProcessor publicPatternProcessorgetPatternProcessor() Returns the pattern processor. Returns: The PatternProcessor.
appender,setTriggeringPolicy publicvoidsetTriggeringPolicy(TriggeringPolicytriggeringPolicy)
appender,setRolloverStrategy publicvoidsetRolloverStrategy(RolloverStrategyrolloverStrategy)
appender,setPatternProcessor publicvoidsetPatternProcessor(PatternProcessorpatternProcessor)
appender,getTriggeringPolicy public<T extends TriggeringPolicy>TgetTriggeringPolicy() Returns the triggering policy. Type Parameters: T - TriggeringPolicy type Returns: The TriggeringPolicy
appender,getRolloverStrategy publicRolloverStrategygetRolloverStrategy() Returns the rollover strategy. Returns: The RolloverStrategy
appender,updateData publicvoidupdateData(Objectdata) Updates the RollingFileManager's data during a reconfiguration. This method should be considered private. It is not thread safe and calling it outside of a reconfiguration may lead to errors. This method may be made protected in a future release. Overrides: updateDatain classAbstractManager Parameters: data - The data to update.
appender,"getRollingRandomAccessFileManager public staticRollingRandomAccessFileManagergetRollingRandomAccessFileManager(StringfileName, StringfilePattern, booleanisAppend, booleanimmediateFlush, intbufferSize, TriggeringPolicypolicy, RolloverStrategystrategy, StringadvertiseURI, Layout<? extends Serializable>layout, StringfilePermissions, StringfileOwner, StringfileGroup, Configurationconfiguration)"
appender,"isEndOfBatch @Deprecated publicBooleanisEndOfBatch() Deprecated. end-of-batch on the event is used instead. No longer used, the LogEvent.isEndOfBatch() attribute is used instead. Returns: Boolean.FALSE."
appender,"setEndOfBatch @Deprecated publicvoidsetEndOfBatch(booleanendOfBatch) Deprecated. end-of-batch on the event is used instead. No longer used, the LogEvent.isEndOfBatch() attribute is used instead. This method is a no-op."
appender,"write protectedvoidwrite(byte[]bytes, intoffset, intlength, booleanimmediateFlush) Description copied from class:OutputStreamManager Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Overrides: writein classRollingFileManager Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. immediateFlush - flushes immediately after writing."
appender,"writeToDestination protectedvoidwriteToDestination(byte[]bytes, intoffset, intlength) Description copied from class:FileManager Overrides OutputStreamManager.writeToDestination(byte[], int, int) to add support for file locking. Overrides: writeToDestinationin classRollingFileManager Parameters: bytes - the array containing data offset - from where to write length - how many bytes to write"
appender,createFileAfterRollover protectedvoidcreateFileAfterRollover() throws IOException Overrides: createFileAfterRolloverin classRollingFileManager Throws: IOException
appender,flush publicvoidflush() Description copied from class:OutputStreamManager Flushes any buffers. Overrides: flushin classOutputStreamManager
appender,closeOutputStream publicbooleancloseOutputStream() Overrides: closeOutputStreamin classOutputStreamManager
appender,getBufferSize publicintgetBufferSize() Returns the buffer capacity. Overrides: getBufferSizein classFileManager Returns: the buffer size
appender,updateData publicvoidupdateData(Objectdata) Updates the RollingFileManager's data during a reconfiguration. This method should be considered private. It is not thread safe and calling it outside of a reconfiguration may lead to errors. This method may be made protected in a future release. Overrides: updateDatain classRollingFileManager Parameters: data - The data to update.
appender,getActiveFileName StringgetActiveFileName() Active log file name after rollover. Returns: active log file name after rollover.
appender,"getAppend booleangetAppend() Specifies if active file should be opened for appending. Returns: if true, active file should be opened for appending."
appender,"getSynchronous ActiongetSynchronous() Action to be completed after close of current active log file before returning control to caller. Returns: action, may be null."
appender,"getAsynchronous ActiongetAsynchronous() Action to be completed after close of current active log file and before next rollover attempt, may be executed asynchronously. Returns: action, may be null."
appender,getActiveFileName publicStringgetActiveFileName() Active log file name after rollover. Specified by: getActiveFileNamein interfaceRolloverDescription Returns: active log file name after rollover.
appender,"getAppend publicbooleangetAppend() Specifies if active file should be opened for appending. Specified by: getAppendin interfaceRolloverDescription Returns: if true, active file should be opened for appending."
appender,"getSynchronous publicActiongetSynchronous() Action to be completed after close of current active log file before returning control to caller. Specified by: getSynchronousin interfaceRolloverDescription Returns: action, may be null."
appender,"getAsynchronous publicActiongetAsynchronous() Action to be completed after close of current active log file and before next rollover attempt, may be executed asynchronously. Specified by: getAsynchronousin interfaceRolloverDescription Returns: action, may be null."
appender,"values public staticRolloverFrequency[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
appender,valueOf public staticRolloverFrequencyvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
appender,rolloverTriggered voidrolloverTriggered(StringfileName) Called before rollover. Parameters: fileName - The name of the file rolling over.
appender,rolloverComplete voidrolloverComplete(StringfileName) Called after rollover. Parameters: fileName - The name of the file rolling over.
appender,"rollover RolloverDescriptionrollover(RollingFileManagermanager) throws SecurityException Prepare for a rollover. This method is called prior to closing the active log file, performs any necessary preliminary actions and describes actions needed after close of current log file. Parameters: manager - The RollingFileManager name for current active log file. Returns: Description of pending rollover, may be null to indicate no rollover at this time. Throws: SecurityException - if denied access to log files."
appender,getMaxFileSize publiclonggetMaxFileSize()
appender,initialize publicvoidinitialize(RollingFileManageraManager) Initialize the TriggeringPolicy. Parameters: aManager - The RollingFileManager.
appender,"isTriggeringEvent publicbooleanisTriggeringEvent(LogEventevent) Returns true if a rollover should occur. Parameters: event - A reference to the currently event. Returns: true if a rollover should take place, false otherwise."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"createPolicy @PluginFactory public staticSizeBasedTriggeringPolicycreatePolicy(@PluginAttribute(""size"") Stringsize) Create a SizeBasedTriggeringPolicy. Parameters: size - The size of the file before rollover is required. Returns: A SizeBasedTriggeringPolicy."
appender,build publicTimeBasedTriggeringPolicybuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<TimeBasedTriggeringPolicy> Returns: the configured instance.
appender,getInterval publicintgetInterval()
appender,isModulate publicbooleanisModulate()
appender,getMaxRandomDelay publicintgetMaxRandomDelay()
appender,withInterval publicTimeBasedTriggeringPolicy.BuilderwithInterval(intinterval)
appender,withModulate publicTimeBasedTriggeringPolicy.BuilderwithModulate(booleanmodulate)
appender,withMaxRandomDelay publicTimeBasedTriggeringPolicy.BuilderwithMaxRandomDelay(intmaxRandomDelay)
appender,getInterval publicintgetInterval()
appender,getNextRolloverMillis publiclonggetNextRolloverMillis()
appender,initialize publicvoidinitialize(RollingFileManageraManager) Initializes the policy. Parameters: aManager - The RollingFileManager.
appender,isTriggeringEvent publicbooleanisTriggeringEvent(LogEventevent) Determines whether a rollover should occur. Parameters: event - A reference to the currently event. Returns: true if a rollover should occur.
appender,"createPolicy @Deprecated public staticTimeBasedTriggeringPolicycreatePolicy(@PluginAttribute(""interval"") Stringinterval, @PluginAttribute(""modulate"") Stringmodulate) Deprecated. Use newBuilder(). Creates a TimeBasedTriggeringPolicy. Parameters: interval - The interval between rollovers. modulate - If true the time will be rounded to occur on a boundary aligned with the increment. Returns: a TimeBasedTriggeringPolicy."
appender,newBuilder @PluginBuilderFactory public staticTimeBasedTriggeringPolicy.BuildernewBuilder()
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,initialize voidinitialize(RollingFileManagermanager) Initializes this triggering policy. Parameters: manager - The RollingFileManager.
appender,"isTriggeringEvent booleanisTriggeringEvent(LogEventlogEvent) Determines if a rollover may be appropriate at this time. If true is returned, RolloverPolicy.rollover will be called but it can determine that a rollover is not warranted. Parameters: logEvent - A reference to the current log event. Returns: true if a rollover should occur."
appender,execute public abstractbooleanexecute() throws IOException Performs action. Specified by: executein interfaceAction Returns: true if successful. Throws: IOException - if IO error.
appender,run publicvoidrun() Specified by: runin interfaceRunnable
appender,close publicvoidclose() Cancels the action if not already initialized or waits till completion. Specified by: closein interfaceAction
appender,isComplete publicbooleanisComplete() Tests if the action is complete. Specified by: isCompletein interfaceAction Returns: true if action is complete.
appender,isInterrupted publicbooleanisInterrupted()
appender,reportException protectedvoidreportException(Exceptionex) Captures exception. Parameters: ex - exception.
appender,execute publicbooleanexecute() throws IOException Description copied from class:AbstractAction Performs action. Specified by: executein interfaceAction Specified by: executein classAbstractAction Returns: true if successful. Throws: IOException - if IO error.
appender,execute publicbooleanexecute(FileVisitor<Path>visitor) throws IOException Throws: IOException
appender,"createFileVisitor protected abstractFileVisitor<Path>createFileVisitor(PathvisitorBaseDir, List<PathCondition>conditions) Creates a new FileVisitor<Path> to pass to the Files.walkFileTree(Path, Set, int, FileVisitor) method when the execute() method is invoked. The visitor is responsible for processing the files it encounters that are accepted by all filters. Parameters: visitorBaseDir - base dir from where to start scanning for files to process conditions - filters that determine if a file should be processed Returns: a new FileVisitor<Path>"
appender,"getBasePath publicPathgetBasePath() Returns the base path from where to start scanning for files to delete. Lookups are resolved, so if the configuration was <Delete basePath=""${sys:user.home}/abc"" /> then this method returns a path to the ""abc"" file or directory in the user's home directory. Returns: the base path (all lookups resolved)"
appender,getBasePathString publicStringgetBasePathString() Returns the base path as it was specified in the configuration. Lookups are not resolved. Returns: the base path as it was specified in the configuration
appender,getStrSubstitutor publicStrSubstitutorgetStrSubstitutor()
appender,getOptions publicSet<FileVisitOption>getOptions() Returns whether to follow symbolic links or not. Returns: the options
appender,isFollowSymbolicLinks publicbooleanisFollowSymbolicLinks() Returns whether to follow symbolic links or not. Returns: whether to follow symbolic links or not
appender,getMaxDepth publicintgetMaxDepth() Returns the maximum number of directory levels to visit. Returns: the maxDepth
appender,getPathConditions publicList<PathCondition>getPathConditions() Returns the list of PathCondition objects. Returns: the pathFilters
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"execute booleanexecute() throws IOException Perform an action. Returns: true if action was successful. A return value of false will cause the rollover to be aborted if possible. Throws: IOException - if IO error, a thrown exception will cause the rollover to be aborted if possible."
appender,close voidclose() Cancels the action if not already initialized or waits till completion.
appender,isComplete booleanisComplete() Determines if action has been completed. Returns: true if action is complete.
appender,execute publicbooleanexecute() throws IOException Compresses. Specified by: executein interfaceAction Specified by: executein classAbstractAction Returns: true if successfully compressed. Throws: IOException - on IO exception.
appender,"execute public staticbooleanexecute(Stringname, Filesource, Filedestination, booleandeleteSource) throws IOException Compresses a file. Parameters: name - the compressor name, i.e. ""gz"", ""bzip2"", ""xz"", ""zstd"", ""pack200"", or ""deflate"". source - file to compress, may not be null. destination - compressed file, may not be null. deleteSource - if true, attempt to delete file on completion. Failure to delete does not cause an exception to be thrown or affect return value. Returns: true if source file compressed. Throws: IOException - on IO exception."
appender,reportException protectedvoidreportException(Exceptionex) Reports exception. Overrides: reportExceptionin classAbstractAction Parameters: ex - exception.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getName publicStringgetName()
appender,getSource publicFilegetSource()
appender,getDestination publicFilegetDestination()
appender,isDeleteSource publicbooleanisDeleteSource()
appender,run publicvoidrun() Specified by: runin interfaceRunnable Overrides: runin classAbstractAction
appender,execute publicbooleanexecute() throws IOException Execute sequence of actions. Specified by: executein interfaceAction Specified by: executein classAbstractAction Returns: true if all actions were successful. Throws: IOException - on IO error.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getActions publicAction[]getActions()
appender,isStopOnError publicbooleanisStopOnError()
appender,execute publicbooleanexecute() throws IOException Description copied from class:AbstractAction Performs action. Specified by: executein interfaceAction Overrides: executein classAbstractPathAction Returns: true if successful. Throws: IOException - if IO error.
appender,delete protectedvoiddelete(Pathpath) throws IOException Deletes the specified file. Parameters: path - the file to delete Throws: IOException - if a problem occurred deleting the file
appender,execute publicbooleanexecute(FileVisitor<Path>visitor) throws IOException Overrides: executein classAbstractPathAction Throws: IOException
appender,"isTestMode publicbooleanisTestMode() Returns true if files are not deleted even when all conditions accept a path, false otherwise. Returns: true if files are not deleted even when all conditions accept a path, false otherwise"
appender,"createFileVisitor protectedFileVisitor<Path>createFileVisitor(PathvisitorBaseDir, List<PathCondition>conditions) Description copied from class:AbstractPathAction Creates a new FileVisitor<Path> to pass to the Files.walkFileTree(Path, Set, int, FileVisitor) method when the AbstractPathAction.execute() method is invoked. The visitor is responsible for processing the files it encounters that are accepted by all filters. Specified by: createFileVisitorin classAbstractPathAction Parameters: visitorBaseDir - base dir from where to start scanning for files to process conditions - filters that determine if a file should be processed Returns: a new FileVisitor<Path>"
appender,"createDeleteAction @PluginFactory public staticDeleteActioncreateDeleteAction(@PluginAttribute(""basePath"") StringbasePath, @PluginAttribute(""followLinks"") booleanfollowLinks, @PluginAttribute(value=""maxDepth"",defaultInt=1) intmaxDepth, @PluginAttribute(""testMode"") booleantestMode, @PluginElement(""PathSorter"") PathSortersorterParameter, @PluginElement(""PathConditions"") PathCondition[]pathConditions, @PluginElement(""ScriptCondition"") ScriptConditionscriptCondition, @PluginConfiguration Configurationconfig) Create a DeleteAction. Parameters: basePath - base path from where to start scanning for files to delete. followLinks - whether to follow symbolic links. Default is false. maxDepth - The maxDepth parameter is the maximum number of levels of directories to visit. A value of 0 means that only the starting file is visited, unless denied by the security manager. A value of MAX_VALUE may be used to indicate that all levels should be visited. testMode - if true, files are not deleted but instead a message is printed to the status logger at INFO level. Users can use this to do a dry run to test if their configuration works as expected. Default is false. sorterParameter - a plugin implementing the PathSorter interface pathConditions - an array of path conditions (if more than one, they all need to accept a path before it is deleted). config - The Configuration. Returns: A DeleteAction."
appender,"visitFile publicFileVisitResultvisitFile(Pathfile, BasicFileAttributesattrs) throws IOException Specified by: visitFilein interfaceFileVisitor<Path> Overrides: visitFilein classSimpleFileVisitor<Path> Throws: IOException"
appender,"visitFileFailed publicFileVisitResultvisitFileFailed(Pathfile, IOExceptionioException) throws IOException Specified by: visitFileFailedin interfaceFileVisitor<Path> Overrides: visitFileFailedin classSimpleFileVisitor<Path> Throws: IOException"
appender,delete protectedvoiddelete(Pathfile) throws IOException Deletes the specified file. Parameters: file - the file to delete Throws: IOException - if a problem occurred deleting the file
appender,"isTestMode publicbooleanisTestMode() Returns true if files are not deleted even when all conditions accept a path, false otherwise. Returns: true if files are not deleted even when all conditions accept a path, false otherwise"
appender,ofMillis public staticDurationofMillis(longmillis) Deprecated. Since: 2.24.0
appender,"parse public staticDurationparse(CharSequencetext) Deprecated. Obtains a Duration from a text string such as PnDTnHnMnS. This will parse a textual representation of a duration, including the string produced by toString(). The formats accepted are based on the ISO-8601 duration format PnDTnHnMnS with days considered to be exactly 24 hours. This implementation does not support negative numbers or fractions (so the smallest non-zero value a Duration can have is one second). The string optionally starts with the ASCII letter ""P"" in upper or lower case. There are then four sections, each consisting of a number and a suffix. The sections have suffixes in ASCII of ""D"", ""H"", ""M"" and ""S"" for days, hours, minutes and seconds, accepted in upper or lower case. The suffixes must occur in order. The ASCII letter ""T"" may occur before the first occurrence, if any, of an hour, minute or second section. At least one of the four sections must be present, and if ""T"" is present there must be at least one section after the ""T"". The number part of each section must consist of one or more ASCII digits. The number may not be prefixed by the ASCII negative or positive symbol. The number of days, hours, minutes and seconds must parse to a long. Examples: ""PT20S"" -- parses as ""20 seconds"" ""PT15M"" -- parses as ""15 minutes"" (where a minute is 60 seconds) ""PT10H"" -- parses as ""10 hours"" (where an hour is 3600 seconds) ""P2D"" -- parses as ""2 days"" (where a day is 24 hours or 86400 seconds) ""P2DT3H4M"" -- parses as ""2 days, 3 hours and 4 minutes"" Parameters: text - the text to parse, not null Returns: the parsed duration, not null Throws: IllegalArgumentException - if the text cannot be parsed to a duration"
appender,toMillis publiclongtoMillis() Deprecated. Converts this duration to the total length in milliseconds. Returns: the total length of the duration in milliseconds
appender,equals publicbooleanequals(Objectobj) Deprecated. Overrides: equalsin classObject
appender,hashCode publicinthashCode() Deprecated. Overrides: hashCodein classObject
appender,"toString publicStringtoString() Deprecated. A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12S. The format of the returned string will be PnDTnHnMnS, where n is the relevant days, hours, minutes or seconds part of the duration. If a section has a zero value, it is omitted. The hours, minutes and seconds are all positive. Examples: ""20 seconds"" -- ""PT20S ""15 minutes"" (15 * 60 seconds) -- ""PT15M"" ""10 hours"" (10 * 3600 seconds) -- ""PT10H"" ""2 days"" (2 * 86400 seconds) -- ""P2D"" Overrides: toStringin classObject Returns: an ISO-8601 representation of this duration, not null"
appender,compareTo publicintcompareTo(Durationother) Deprecated. Specified by: compareToin interfaceComparable<Duration>
appender,execute publicbooleanexecute() Rename file. Specified by: executein interfaceAction Specified by: executein classAbstractAction Returns: true if successfully renamed.
appender,getDestination publicFilegetDestination() Gets the destination. Returns: the destination.
appender,getSource publicFilegetSource() Gets the source. Returns: the source.
appender,"isRenameEmptyFiles publicbooleanisRenameEmptyFiles() Whether to rename empty files. If true, rename empty files, otherwise delete empty files. Returns: Whether to rename empty files."
appender,"execute public staticbooleanexecute(Filesource, Filedestination, booleanrenameEmptyFiles) Rename file. Parameters: source - current file name. destination - new file name. renameEmptyFiles - if true, rename file even if empty, otherwise delete empty files. Returns: true if successfully renamed."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,execute publicbooleanexecute() throws IOException Compress. Specified by: executein interfaceAction Specified by: executein classAbstractAction Returns: true if successfully compressed. Throws: IOException - on IO exception.
appender,"execute @Deprecated public staticbooleanexecute(Filesource, Filedestination, booleandeleteSource) throws IOException Deprecated. In favor of execute(File, File, boolean, int). Compress a file. Parameters: source - file to compress, may not be null. destination - compressed file, may not be null. deleteSource - if true, attempt to delete file on completion. Failure to delete does not cause an exception to be thrown or affect return value. Returns: true if source file compressed. Throws: IOException - on IO exception."
appender,"execute public staticbooleanexecute(Filesource, Filedestination, booleandeleteSource, intcompressionLevel) throws IOException Compress a file. Parameters: source - file to compress, may not be null. destination - compressed file, may not be null. deleteSource - if true, attempt to delete file on completion. Failure to delete does not cause an exception to be thrown or affect return value. compressionLevel - Gzip deflater compression level. Returns: true if source file compressed. Throws: IOException - on IO exception."
appender,reportException protectedvoidreportException(Exceptionex) Capture exception. Overrides: reportExceptionin classAbstractAction Parameters: ex - exception.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getSource publicFilegetSource()
appender,getDestination publicFilegetDestination()
appender,isDeleteSource publicbooleanisDeleteSource()
appender,getThresholdCount publicintgetThresholdCount()
appender,getNestedConditions publicList<PathCondition>getNestedConditions()
appender,"accept publicbooleanaccept(PathbasePath, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: basePath - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,"createFileCountCondition @PluginFactory public staticIfAccumulatedFileCountcreateFileCountCondition(@PluginAttribute(value=""exceeds"",defaultInt=2147483647) intthreshold, @PluginElement(""PathConditions"") PathCondition...nestedConditions) Create an IfAccumulatedFileCount condition. Parameters: threshold - The threshold count from which files will be deleted. Returns: An IfAccumulatedFileCount condition."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getThresholdBytes publiclonggetThresholdBytes()
appender,getNestedConditions publicList<PathCondition>getNestedConditions()
appender,"accept publicbooleanaccept(PathbasePath, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: basePath - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,"createFileSizeCondition @PluginFactory public staticIfAccumulatedFileSizecreateFileSizeCondition(@PluginAttribute(""exceeds"") Stringsize, @PluginElement(""PathConditions"") PathCondition...nestedConditions) Create an IfAccumulatedFileSize condition. Parameters: size - The threshold accumulated file size from which files will be deleted. Returns: An IfAccumulatedFileSize condition."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getDeleteFilters publicPathCondition[]getDeleteFilters()
appender,"accept publicbooleanaccept(PathbaseDir, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: baseDir - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,"accept public staticbooleanaccept(PathCondition[]list, PathbaseDir, PathrelativePath, BasicFileAttributesattrs) Returns true if all the specified conditions accept the specified path, false otherwise. Parameters: list - the array of conditions to evaluate baseDir - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: true if all the specified conditions accept the specified path, false otherwise Throws: NullPointerException - if any of the parameters is null"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,beforeFileTreeWalk public staticvoidbeforeFileTreeWalk(PathCondition[]nestedConditions) Calls beforeFileTreeWalk() on all of the specified nested conditions. Parameters: nestedConditions - the conditions to call beforeFileTreeWalk() on
appender,"createAndCondition @PluginFactory public staticIfAllcreateAndCondition(@PluginElement(""PathConditions"") @Required(message=""No components provided for IfAll"") PathCondition...components) Create a Composite PathCondition whose components all need to accept before this condition accepts. Parameters: components - The component filters. Returns: A Composite PathCondition."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getDeleteFilters publicPathCondition[]getDeleteFilters()
appender,"accept publicbooleanaccept(PathbaseDir, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: baseDir - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,"createOrCondition @PluginFactory public staticIfAnycreateOrCondition(@PluginElement(""PathConditions"") @Required(message=""No components provided for IfAny"") PathCondition...components) Create a Composite PathCondition: accepts if any of the nested conditions accepts. Parameters: components - The component conditions. Returns: A Composite PathCondition."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"getSyntaxAndPattern publicStringgetSyntaxAndPattern() Returns the baseDir-relative path pattern of the files to delete. The returned string takes the form syntax:pattern where syntax is one of ""glob"" or ""regex"" and the pattern is either a regular expression or a simplified pattern expression described under ""glob"" in FileSystem.getPathMatcher(String). Returns: relative path of the file(s) to delete (may contain regular expression or wildcarts)"
appender,getNestedConditions publicList<PathCondition>getNestedConditions()
appender,"accept publicbooleanaccept(PathbasePath, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: basePath - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,"createNameCondition @PluginFactory public staticIfFileNamecreateNameCondition(@PluginAttribute(""glob"") Stringglob, @PluginAttribute(""regex"") Stringregex, @PluginElement(""PathConditions"") PathCondition...nestedConditions) Creates a IfFileName condition that returns true if either the specified glob pattern or the regular expression matches the relative path. If both a regular expression and a glob pattern are specified the glob pattern is used and the regular expression is ignored. Parameters: glob - the baseDir-relative path pattern of the files to delete (may contain '*' and '?' wildcarts) regex - the regular expression that matches the baseDir-relative path of the file(s) to delete nestedConditions - nested conditions to evaluate if this condition accepts a path Returns: A IfFileName condition. See Also: FileSystem.getPathMatcher(String)"
appender,FileSystem.getPathMatcher(String)
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,setAge publicIfLastModified.BuildersetAge(Durationage)
appender,setNestedConditions publicIfLastModified.BuildersetNestedConditions(PathCondition...nestedConditions)
appender,build publicIfLastModifiedbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<IfLastModified> Returns: the configured instance.
appender,getAge @Deprecated publicDurationgetAge() Deprecated. since 2.24.0. In 3.0.0 the signature will change.
appender,getNestedConditions publicList<PathCondition>getNestedConditions()
appender,"accept publicbooleanaccept(PathbasePath, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: basePath - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,"createAgeCondition @Deprecated public staticIfLastModifiedcreateAgeCondition(Durationage, PathCondition...pathConditions) Deprecated. since 2.24.0 use newBuilder() instead."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,newBuilder @PluginBuilderFactory public staticIfLastModified.BuildernewBuilder() Since: 2.24.0
appender,getWrappedFilter publicPathConditiongetWrappedFilter()
appender,"accept publicbooleanaccept(PathbaseDir, PathrelativePath, BasicFileAttributesattrs) Description copied from interface:PathCondition Returns true if the specified candidate path should be deleted, false otherwise. Specified by: acceptin interfacePathCondition Parameters: baseDir - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,beforeFileTreeWalk publicvoidbeforeFileTreeWalk() Description copied from interface:PathCondition Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called. Specified by: beforeFileTreeWalkin interfacePathCondition
appender,"createNotCondition @PluginFactory public staticIfNotcreateNotCondition(@PluginElement(""PathConditions"") @Required(message=""No condition provided for IfNot"") PathConditioncondition) Create an IfNot PathCondition. Parameters: condition - The condition to negate. Returns: An IfNot PathCondition."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"copy staticPathCondition[]copy(PathCondition...source) Copies the given input. Parameters: source - What to copy Returns: a copy, never null."
appender,beforeFileTreeWalk voidbeforeFileTreeWalk() Invoked before a new file tree walk is started. Stateful PathConditions can reset their state when this method is called.
appender,"accept booleanaccept(PathbaseDir, PathrelativePath, BasicFileAttributesattrs) Returns true if the specified candidate path should be deleted, false otherwise. Parameters: baseDir - the directory from where to start scanning for deletion candidate files relativePath - the candidate for deletion. This path is relative to the baseDir. attrs - attributes of the candidate path Returns: whether the candidate path should be deleted"
appender,"createSorter @PluginFactory public staticPathSortercreateSorter(@PluginAttribute(value=""recentFirst"",defaultBoolean=true) booleanrecentFirst) Create a PathSorter that sorts by lastModified time. Parameters: recentFirst - if true, most recently modified paths should come first. Returns: A PathSorter."
appender,isRecentFirst publicbooleanisRecentFirst() Returns whether this sorter sorts recent files first. Returns: whether this sorter sorts recent files first
appender,"compare publicintcompare(PathWithAttributespath1, PathWithAttributespath2) Specified by: comparein interfaceComparator<PathWithAttributes>"
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getPath publicPathgetPath() Returns the path. Returns: the path
appender,getAttributes publicBasicFileAttributesgetAttributes() Returns the attributes. Returns: the attributes
appender,build publicPosixViewAttributeActionbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<PosixViewAttributeAction> Returns: the configured instance.
appender,"withConfiguration publicPosixViewAttributeAction.BuilderwithConfiguration(Configurationconfiguration) Define required configuration, used to retrieve string substituter. Parameters: configuration - AbstractPathAction.getStrSubstitutor() Returns: This builder"
appender,withSubst publicPosixViewAttributeAction.BuilderwithSubst(StrSubstitutorsubst) Define string substituter. Parameters: subst - AbstractPathAction.getStrSubstitutor() Returns: This builder
appender,withBasePath publicPosixViewAttributeAction.BuilderwithBasePath(StringbasePath) Define base path to apply condition before execute POSIX file attribute action. Parameters: basePath - AbstractPathAction.getBasePath() Returns: This builder
appender,withFollowLinks publicPosixViewAttributeAction.BuilderwithFollowLinks(booleanfollowLinks) True to allow synonyms links during search of eligible files. Parameters: followLinks - Follow synonyms links Returns: This builder
appender,withMaxDepth publicPosixViewAttributeAction.BuilderwithMaxDepth(intmaxDepth) Define max folder depth to search for eligible files to apply POSIX attribute view. Parameters: maxDepth - Max search depth Returns: This builder
appender,withPathConditions publicPosixViewAttributeAction.BuilderwithPathConditions(PathCondition[]pathConditions) Define path conditions to filter files in AbstractPathAction.getBasePath(). Parameters: pathConditions - AbstractPathAction.getPathConditions() Returns: This builder
appender,withFilePermissionsString publicPosixViewAttributeAction.BuilderwithFilePermissionsString(StringfilePermissionsString) Define file permissions in POSIX format to apply during action execution eligible files. Example: rw-rw-rw r--r--r-- Parameters: filePermissionsString - Permissions to apply Returns: This builder
appender,withFilePermissions publicPosixViewAttributeAction.BuilderwithFilePermissions(Set<PosixFilePermission>filePermissions) Define file permissions to apply during action execution eligible files. Parameters: filePermissions - Permissions to apply Returns: This builder
appender,withFileOwner publicPosixViewAttributeAction.BuilderwithFileOwner(StringfileOwner) Define file owner to apply during action execution eligible files. Parameters: fileOwner - File owner Returns: This builder
appender,withFileGroup publicPosixViewAttributeAction.BuilderwithFileGroup(StringfileGroup) Define file group to apply during action execution eligible files. Parameters: fileGroup - File group Returns: This builder
appender,newBuilder @PluginBuilderFactory public staticPosixViewAttributeAction.BuildernewBuilder()
appender,"createFileVisitor protectedFileVisitor<Path>createFileVisitor(PathbasePath, List<PathCondition>conditions) Description copied from class:AbstractPathAction Creates a new FileVisitor<Path> to pass to the Files.walkFileTree(Path, Set, int, FileVisitor) method when the AbstractPathAction.execute() method is invoked. The visitor is responsible for processing the files it encounters that are accepted by all filters. Specified by: createFileVisitorin classAbstractPathAction Parameters: basePath - base dir from where to start scanning for files to process conditions - filters that determine if a file should be processed Returns: a new FileVisitor<Path>"
appender,"getFilePermissions publicSet<PosixFilePermission>getFilePermissions() Returns POSIX file permissions if defined and the OS supports POSIX file attribute, null otherwise. Returns: File POSIX permissions See Also: PosixFileAttributeView"
appender,PosixFileAttributeView
appender,"getFileOwner publicStringgetFileOwner() Returns file owner if defined and the OS supports owner file attribute view, null otherwise. Returns: File owner See Also: FileOwnerAttributeView"
appender,FileOwnerAttributeView
appender,"getFileGroup publicStringgetFileGroup() Returns file group if defined and the OS supports POSIX/group file attribute view, null otherwise. Returns: File group See Also: PosixFileAttributeView"
appender,PosixFileAttributeView
appender,toString publicStringtoString() Overrides: toStringin classAbstractPathAction
appender,"selectFilesToDelete publicList<PathWithAttributes>selectFilesToDelete(PathbasePath, List<PathWithAttributes>candidates) Executes the script Parameters: basePath - base directory for files to delete candidates - a list of paths, that can be deleted by the script Returns: a list of paths selected to delete by the script execution"
appender,"createCondition @PluginFactory public staticScriptConditioncreateCondition(@PluginElement(""Script"") AbstractScriptscript, @PluginConfiguration Configurationconfiguration) Creates the ScriptCondition. Parameters: script - The script to run. This may be a Script, a ScriptFile or a ScriptRef. The script must return a List<PathWithAttributes>. When the script is executed, it is provided the following bindings: basePath - the directory from where the Delete action started scanning for files to delete. Can be used to relativize the paths in the pathList. pathList - a java.util.List containing PathWithAttributes objects. (The script is free to modify and return this list.) substitutor - a StrSubstitutor that can be used to look up variables embedded in the base dir or other properties statusLogger - the StatusLogger that can be used to log events during script execution any properties declared in the configuration configuration - the configuration Returns: A ScriptCondition."
appender,basePath - the directory from where the Delete action started scanning for files to delete. Can be used to relativize the paths in the pathList.
appender,pathList - a java.util.List containing PathWithAttributes objects. (The script is free to modify and return this list.)
appender,substitutor - a StrSubstitutor that can be used to look up variables embedded in the base dir or other properties
appender,statusLogger - the StatusLogger that can be used to log events during script execution
appender,any properties declared in the configuration
appender,"visitFile publicFileVisitResultvisitFile(Pathpath, BasicFileAttributesattrs) throws IOException Specified by: visitFilein interfaceFileVisitor<Path> Overrides: visitFilein classSimpleFileVisitor<Path> Throws: IOException"
appender,"visitFileFailed publicFileVisitResultvisitFileFailed(Pathfile, IOExceptionioException) throws IOException Specified by: visitFileFailedin interfaceFileVisitor<Path> Overrides: visitFileFailedin classSimpleFileVisitor<Path> Throws: IOException"
appender,getSortedPaths publicList<PathWithAttributes>getSortedPaths()
appender,execute publicbooleanexecute() throws IOException Compresses. Specified by: executein interfaceAction Specified by: executein classAbstractAction Returns: true if successfully compressed. Throws: IOException - on IO exception.
appender,"execute public staticbooleanexecute(Filesource, Filedestination, booleandeleteSource, intlevel) throws IOException Compresses a file. Parameters: source - file to compress, may not be null. destination - compressed file, may not be null. deleteSource - if true, attempt to delete file on completion. Failure to delete does not cause an exception to be thrown or affect return value. level - the compression level Returns: true if source file compressed. Throws: IOException - on IO exception."
appender,reportException protectedvoidreportException(Exceptionex) Captures exception. Overrides: reportExceptionin classAbstractAction Parameters: ex - exception.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,getSource publicFilegetSource()
appender,getDestination publicFilegetDestination()
appender,isDeleteSource publicbooleanisDeleteSource()
appender,getLevel publicintgetLevel()
appender,initialize publicvoidinitialize(RoutingAppenderroutingAppender) Description copied from interface:PurgePolicy Initializes with routing appender Specified by: initializein interfacePurgePolicy Parameters: routingAppender - the routed appender for purging
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,purge publicvoidpurge() Purging appenders that were not in use specified time Specified by: purgein interfacePurgePolicy
appender,"update publicvoidupdate(Stringkey, LogEventevent) Specified by: updatein interfacePurgePolicy Parameters: key - routed appender key event - Provides contextual information about a logged message."
appender,run publicvoidrun() Specified by: runin interfaceRunnable
appender,"createPurgePolicy @PluginFactory public staticPurgePolicycreatePurgePolicy(@PluginAttribute(""timeToLive"") StringtimeToLive, @PluginAttribute(""checkInterval"") StringcheckInterval, @PluginAttribute(""timeUnit"") StringtimeUnit, @PluginConfiguration Configurationconfiguration) Create the PurgePolicy Parameters: timeToLive - the number of increments of timeUnit before the Appender should be purged. checkInterval - when all appenders purged, the number of increments of timeUnit to check if any appenders appeared timeUnit - the unit of time the timeToLive and the checkInterval is expressed in. Returns: The Routes container."
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,purge voidpurge() Activates purging appenders. Note that PurgePolicy implementations are responsible for invoking this method themselves.
appender,"update voidupdate(Stringkey, LogEventevent) Parameters: key - routed appender key event - Provides contextual information about a logged message."
appender,initialize voidinitialize(RoutingAppenderroutingAppender) Initializes with routing appender Parameters: routingAppender - the routed appender for purging
appender,getNode publicNodegetNode() Returns the Dynamic Appender Node. Returns: The Node.
appender,getAppenderRef publicStringgetAppenderRef() Returns the appender reference. Returns: The Appender reference.
appender,getKey publicStringgetKey() Returns the key for this Route. Returns: the key for this Route.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,"createRoute @PluginFactory public staticRoutecreateRoute(@PluginAttribute(""ref"") StringappenderRef, @PluginAttribute(""key"") Stringkey, @PluginNode Nodenode) Create the Route. Parameters: appenderRef - The Appender reference. key - The key. node - The Node. Returns: A Route."
appender,build publicRoutesbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<Routes> Returns: the configured instance.
appender,getConfiguration publicConfigurationgetConfiguration()
appender,getPattern publicStringgetPattern()
appender,getPatternScript publicAbstractScriptgetPatternScript()
appender,getRoutes publicRoute[]getRoutes()
appender,withConfiguration publicRoutes.BuilderwithConfiguration(Configurationconfiguration)
appender,withPattern publicRoutes.BuilderwithPattern(Stringpattern)
appender,withPatternScript publicRoutes.BuilderwithPatternScript(AbstractScriptpatternScript)
appender,withRoutes publicRoutes.BuilderwithRoutes(Route[]routes)
appender,"createRoutes @Deprecated public staticRoutescreateRoutes(Stringpattern, Route...routes) Deprecated. since 2.7; use newBuilder(). Creates the Routes. Parameters: pattern - The pattern. routes - An array of Route elements. Returns: The Routes container."
appender,newBuilder @PluginBuilderFactory public staticRoutes.BuildernewBuilder()
appender,"getPattern publicStringgetPattern(LogEventevent, ConcurrentMap<Object,Object>scriptStaticVariables) Returns the pattern. Parameters: event - The log event passed to the script (if there is a script.) scriptStaticVariables - The script's static variables. Returns: the pattern."
appender,getPatternScript publicAbstractScriptgetPatternScript() Gets the optional script that decides which route to pick. Returns: the optional script that decides which route to pick. May be null.
appender,getRoute publicRoutegetRoute(Stringkey)
appender,getRoutes publicRoute[]getRoutes() Returns the array of Route elements. Returns: an array of Route elements.
appender,toString publicStringtoString() Overrides: toStringin classObject
appender,build publicRoutingAppenderbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends RoutingAppender.Builder<B>> Returns: the configured instance.
appender,getRoutes publicRoutesgetRoutes()
appender,getDefaultRouteScript publicAbstractScriptgetDefaultRouteScript()
appender,getRewritePolicy publicRewritePolicygetRewritePolicy()
appender,getPurgePolicy publicPurgePolicygetPurgePolicy()
appender,withRoutes publicBwithRoutes(Routesroutes)
appender,withDefaultRouteScript publicBwithDefaultRouteScript(AbstractScriptdefaultRouteScript)
appender,withRewritePolicy publicBwithRewritePolicy(RewritePolicyrewritePolicy)
appender,withPurgePolicy publicvoidwithPurgePolicy(PurgePolicypurgePolicy)
appender,newBuilder @PluginBuilderFactory public static<B extends RoutingAppender.Builder<B>> BnewBuilder()
appender,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
appender,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
appender,"append publicvoidappend(LogEventevent) Description copied from interface:Appender Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking. Parameters: event - The LogEvent."
appender,"getAppenders publicMap<String,AppenderControl>getAppenders() Returns an unmodifiable view of the appenders created by this RoutingAppender. Note that this map does not contain appenders that are routed by reference."
appender,deleteAppender publicvoiddeleteAppender(Stringkey) Deletes the specified appender. Parameters: key - The appender's key
appender,"createAppender @Deprecated public staticRoutingAppendercreateAppender(Stringname, Stringignore, Routesroutes, Configurationconfig, RewritePolicyrewritePolicy, PurgePolicypurgePolicy, Filterfilter) Deprecated. Since 2.7; use newBuilder() Creates a RoutingAppender. Parameters: name - The name of the Appender. ignore - If ""true"" (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller. routes - The routing definitions. config - The Configuration (automatically added by the Configuration). rewritePolicy - A RewritePolicy, if any. filter - A Filter to restrict events processed by the Appender or null. Returns: The RoutingAppender"
appender,getDefaultRoute publicRoutegetDefaultRoute()
appender,getDefaultRouteScript publicAbstractScriptgetDefaultRouteScript()
appender,getPurgePolicy publicPurgePolicygetPurgePolicy()
appender,getRewritePolicy publicRewritePolicygetRewritePolicy()
appender,getRoutes publicRoutesgetRoutes()
appender,getConfiguration publicConfigurationgetConfiguration()
appender,"getScriptStaticVariables publicConcurrentMap<Object,Object>getScriptStaticVariables()"
async,create publicBlockingQueue<E>create(intcapacity) Description copied from interface:BlockingQueueFactory Creates a new BlockingQueue with the specified maximum capacity. Note that not all implementations of BlockingQueue support a bounded capacity in which case the value is ignored. Specified by: createin interfaceBlockingQueueFactory<E> Parameters: capacity - maximum size of the queue if supported Returns: a new BlockingQueue
async,createFactory @PluginFactory public static<E>ArrayBlockingQueueFactory<E>createFactory()
async,updateConfiguration protectedvoidupdateConfiguration(ConfigurationnewConfig) Description copied from class:Logger Associates this Logger with a new Configuration. This method is not exposed through the public API. There are two ways this could be used to guarantee all threads are aware of changes to config. Synchronize this method. Accessors don't need to be synchronized as Java will treat all variables within a synchronized block as volatile. Declare the variable volatile. Option 2 is used here as the performance cost is very low and it does a better job at documenting how it is used. Overrides: updateConfigurationin classLogger Parameters: newConfig - The new Configuration.
async,Synchronize this method. Accessors don't need to be synchronized as Java will treat all variables within a synchronized block as volatile.
async,Declare the variable volatile. Option 2 is used here as the performance cost is very low and it does a better job at documenting how it is used.
async,"logMessage publicvoidlogMessage(Stringfqcn, Levellevel, Markermarker, Messagemessage, Throwablethrown) Specified by: logMessagein interfaceExtendedLogger Overrides: logMessagein classLogger"
async,"log publicvoidlog(Levellevel, Markermarker, Stringfqcn, StackTraceElementlocation, Messagemessage, Throwablethrowable) Overrides: login classLogger"
async,"translateTo publicvoidtranslateTo(RingBufferLogEventevent, longsequence, Object...args) Specified by: translateToin interfacecom.lmax.disruptor.EventTranslatorVararg<RingBufferLogEvent>"
async,"actualAsyncLog publicvoidactualAsyncLog(RingBufferLogEventevent) This method is called by the EventHandler that processes the RingBufferLogEvent in a separate thread. Merges the contents of the configuration map into the contextData, after replacing any variables in the property values with the StrSubstitutor-supplied actual values. Parameters: event - the event to log"
async,build publicLoggerConfigbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends AsyncLoggerConfig.Builder<B>> Overrides: buildin classLoggerConfig.Builder<B extends AsyncLoggerConfig.Builder<B>> Returns: the configured instance.
async,newAsyncBuilder @PluginBuilderFactory public static<B extends AsyncLoggerConfig.Builder<B>> BnewAsyncBuilder()
async,"log protectedvoidlog(LogEventevent, LoggerConfig.LoggerConfigPredicatepredicate) Description copied from class:LoggerConfig Logs an event. Overrides: login classLoggerConfig Parameters: event - The log event. predicate - predicate for which LoggerConfig instances to append to. A null value is equivalent to a true predicate."
async,callAppenders protectedvoidcallAppenders(LogEventevent) Overrides: callAppendersin classLoggerConfig
async,start publicvoidstart() Description copied from class:AbstractFilterable Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
async,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractFilterable Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
async,createRingBufferAdmin publicRingBufferAdmincreateRingBufferAdmin(StringcontextName) Creates and returns a new RingBufferAdmin that instruments the ringbuffer of this AsyncLoggerConfig. Parameters: contextName - name of the LoggerContext Returns: a new RingBufferAdmin that instruments the ringbuffer
async,"createLogger @Deprecated public staticLoggerConfigcreateLogger(Stringadditivity, StringlevelName, StringloggerName, StringincludeLocation, AppenderRef[]refs, Property[]properties, Configurationconfig, Filterfilter) Deprecated. use createLogger(boolean, Level, String, String, AppenderRef[], Property[], Configuration, Filter) Factory method to create a LoggerConfig. Parameters: additivity - True if additive, false otherwise. levelName - The Level to be associated with the Logger. loggerName - The name of the Logger. includeLocation - ""true"" if location should be passed downstream refs - An array of Appender names. properties - Properties to pass to the Logger. config - The Configuration. filter - A Filter. Returns: A new LoggerConfig."
async,"createLogger @Deprecated public staticLoggerConfigcreateLogger(@PluginAttribute(value=""additivity"",defaultBoolean=true) booleanadditivity, @PluginAttribute(""level"") Levellevel, @Required(message=""Loggers cannot be configured without a name"") @PluginAttribute(""name"") StringloggerName, @PluginAttribute(""includeLocation"") StringincludeLocation, @PluginElement(""AppenderRef"") AppenderRef[]refs, @PluginElement(""Properties"") Property[]properties, @PluginConfiguration Configurationconfig, @PluginElement(""Filter"") Filterfilter) Deprecated. Factory method to create a LoggerConfig. Parameters: additivity - True if additive, false otherwise. level - The Level to be associated with the Logger. loggerName - The name of the Logger. includeLocation - ""true"" if location should be passed downstream refs - An array of Appender names. properties - Properties to pass to the Logger. config - The Configuration. filter - A Filter. Returns: A new LoggerConfig. Since: 3.0"
async,includeLocation protected staticbooleanincludeLocation(StringincludeLocationConfigValue)
async,build publicLoggerConfigbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends AsyncLoggerConfig.RootLogger.Builder<B>> Overrides: buildin classLoggerConfig.RootLogger.Builder<B extends AsyncLoggerConfig.RootLogger.Builder<B>> Returns: the configured instance.
async,newAsyncRootBuilder @PluginBuilderFactory public static<B extends AsyncLoggerConfig.RootLogger.Builder<B>> BnewAsyncRootBuilder()
async,"createLogger @Deprecated public staticLoggerConfigcreateLogger(Stringadditivity, StringlevelName, StringincludeLocation, AppenderRef[]refs, Property[]properties, Configurationconfig, Filterfilter) Deprecated. use createLogger(String, Level, String, AppenderRef[], Property[], Configuration, Filter)"
async,"createLogger @Deprecated public staticLoggerConfigcreateLogger(@PluginAttribute(""additivity"") Stringadditivity, @PluginAttribute(""level"") Levellevel, @PluginAttribute(""includeLocation"") StringincludeLocation, @PluginElement(""AppenderRef"") AppenderRef[]refs, @PluginElement(""Properties"") Property[]properties, @PluginConfiguration Configurationconfig, @PluginElement(""Filter"") Filterfilter) Deprecated."
async,"handleEventException publicvoidhandleEventException(Throwablethrowable, longsequence, AsyncLoggerConfigDisruptor.Log4jEventWrapperevent) Specified by: handleEventExceptionin interfacecom.lmax.disruptor.ExceptionHandler<T>"
async,handleOnStartException publicvoidhandleOnStartException(Throwablethrowable) Specified by: handleOnStartExceptionin interfacecom.lmax.disruptor.ExceptionHandler<T>
async,handleOnShutdownException publicvoidhandleOnShutdownException(Throwablethrowable) Specified by: handleOnShutdownExceptionin interfacecom.lmax.disruptor.ExceptionHandler<T>
async,"createRingBufferAdmin RingBufferAdmincreateRingBufferAdmin(StringcontextName, StringloggerConfigName) Creates and returns a new RingBufferAdmin that instruments the ringbuffer of this AsyncLoggerConfig. Parameters: contextName - name of the LoggerContext loggerConfigName - name of the logger config Returns: the RingBufferAdmin that instruments the ringbuffer"
async,getEventRoute EventRoutegetEventRoute(Levellevel) Returns the EventRoute for the event with the specified level. Parameters: level - the level of the event to log Returns: the EventRoute
async,"enqueueEvent voidenqueueEvent(LogEventevent, AsyncLoggerConfigasyncLoggerConfig) Enqueues the LogEvent on the mixed configuration ringbuffer. This method must only be used after tryEnqueue(LogEvent, AsyncLoggerConfig) returns false indicating that the ringbuffer is full, otherwise it may incur unnecessary synchronization."
async,"tryEnqueue booleantryEnqueue(LogEventevent, AsyncLoggerConfigasyncLoggerConfig)"
async,"setLogEventFactory voidsetLogEventFactory(LogEventFactorylogEventFactory) Notifies the delegate what LogEventFactory an AsyncLoggerConfig is using, so the delegate can determine whether to populate the ring buffer with mutable log events or not. This method may be invoked multiple times for all AsyncLoggerConfigs that use this delegate. Parameters: logEventFactory - the factory used"
async,"setLogEventFactory publicvoidsetLogEventFactory(LogEventFactorylogEventFactory) Description copied from interface:AsyncLoggerConfigDelegate Notifies the delegate what LogEventFactory an AsyncLoggerConfig is using, so the delegate can determine whether to populate the ring buffer with mutable log events or not. This method may be invoked multiple times for all AsyncLoggerConfigs that use this delegate. Specified by: setLogEventFactoryin interfaceAsyncLoggerConfigDelegate Parameters: logEventFactory - the factory used"
async,start publicvoidstart() Increases the reference count and creates and starts a new Disruptor and associated thread if none currently exists. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractLifeCycle See Also: AbstractLifeCycle.stop()
async,AbstractLifeCycle.stop()
async,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Decreases the reference count. If the reference count reached zero, the Disruptor and its associated thread are shut down and their references set to null. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
async,getEventRoute publicEventRoutegetEventRoute(LevellogLevel) Description copied from interface:AsyncLoggerConfigDelegate Returns the EventRoute for the event with the specified level. Specified by: getEventRoutein interfaceAsyncLoggerConfigDelegate Parameters: logLevel - the level of the event to log Returns: the EventRoute
async,"enqueueEvent publicvoidenqueueEvent(LogEventevent, AsyncLoggerConfigasyncLoggerConfig) Description copied from interface:AsyncLoggerConfigDelegate Enqueues the LogEvent on the mixed configuration ringbuffer. This method must only be used after AsyncLoggerConfigDelegate.tryEnqueue(LogEvent, AsyncLoggerConfig) returns false indicating that the ringbuffer is full, otherwise it may incur unnecessary synchronization. Specified by: enqueueEventin interfaceAsyncLoggerConfigDelegate"
async,"tryEnqueue publicbooleantryEnqueue(LogEventevent, AsyncLoggerConfigasyncLoggerConfig) Specified by: tryEnqueuein interfaceAsyncLoggerConfigDelegate"
async,"createRingBufferAdmin publicRingBufferAdmincreateRingBufferAdmin(StringcontextName, StringloggerConfigName) Description copied from interface:AsyncLoggerConfigDelegate Creates and returns a new RingBufferAdmin that instruments the ringbuffer of this AsyncLoggerConfig. Specified by: createRingBufferAdminin interfaceAsyncLoggerConfigDelegate Parameters: contextName - name of the LoggerContext loggerConfigName - name of the logger config Returns: the RingBufferAdmin that instruments the ringbuffer"
async,clear publicvoidclear() Release references held by ring buffer to allow objects to be garbage-collected.
async,toString publicStringtoString() Overrides: toStringin classObject
async,"newInstance protectedLoggernewInstance(LoggerContextctx, Stringname, MessageFactorymessageFactory) Overrides: newInstancein classLoggerContext"
async,setName publicvoidsetName(Stringname) Description copied from class:LoggerContext Sets the name. Overrides: setNamein classLoggerContext Parameters: name - the new LoggerContext name
async,start publicvoidstart() Specified by: startin interfaceLifeCycle Overrides: startin classLoggerContext
async,start publicvoidstart(Configurationconfig) Description copied from class:LoggerContext Starts with a specific configuration. Overrides: startin classLoggerContext Parameters: config - The new Configuration.
async,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from class:LoggerContext Blocks until all Log4j tasks have completed execution after a shutdown request and all appenders have shut down, or the timeout occurs, or the current thread is interrupted, whichever happens first. Not all appenders will honor this, it is a hint and not an absolute guarantee that the this method not block longer. Setting timeout too low increase the risk of losing outstanding log events not yet written to the final destination. Log4j can start threads to perform certain actions like file rollovers, calling this method with a positive timeout will block until the rollover thread is done. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classLoggerContext Parameters: timeout - the maximum time to wait, or 0 which mean that each apppender uses its default timeout, and don't wait for background tasks timeUnit - the time unit of the timeout argument Returns: true if the logger context terminated and false if the timeout elapsed before termination."
async,createRingBufferAdmin publicRingBufferAdmincreateRingBufferAdmin() Creates and returns a new RingBufferAdmin that instruments the ringbuffer of the AsyncLogger objects in this LoggerContext. Returns: a new RingBufferAdmin that instruments the ringbuffer
async,setUseThreadLocals publicvoidsetUseThreadLocals(booleanuseThreadLocals) Signals this context whether it is allowed to use ThreadLocal objects for efficiency. Parameters: useThreadLocals - whether this context is allowed to use ThreadLocal objects
async,"isSelected public staticbooleanisSelected() Returns true if the user specified this selector as the Log4jContextSelector, to make all loggers asynchronous. Returns: true if all loggers are asynchronous, false otherwise."
async,"createContext protectedLoggerContextcreateContext(Stringname, URIconfigLocation) Overrides: createContextin classClassLoaderContextSelector"
async,toContextMapKey protectedStringtoContextMapKey(ClassLoaderloader) Overrides: toContextMapKeyin classClassLoaderContextSelector
async,defaultContextName protectedStringdefaultContextName() Overrides: defaultContextNamein classClassLoaderContextSelector
async,"handleEventException publicvoidhandleEventException(Throwablethrowable, longsequence, RingBufferLogEventevent) Specified by: handleEventExceptionin interfacecom.lmax.disruptor.ExceptionHandler<T>"
async,handleOnStartException publicvoidhandleOnStartException(Throwablethrowable) Specified by: handleOnStartExceptionin interfacecom.lmax.disruptor.ExceptionHandler<T>
async,handleOnShutdownException publicvoidhandleOnShutdownException(Throwablethrowable) Specified by: handleOnShutdownExceptionin interfacecom.lmax.disruptor.ExceptionHandler<T>
async,logWarningToStatusLogger public staticvoidlogWarningToStatusLogger() Logs a warning to the StatusLogger explaining why a message appears out of order in the appender.
async,"getRoute EventRoutegetRoute(longbackgroundThreadId, Levellevel) Returns the appropriate route for the current log event, given the specified parameters. Parameters: backgroundThreadId - the thread ID of the background thread. Can be compared with the current thread's ID. level - the level of the log event Returns: the appropriate route for the current event"
async,"create public staticAsyncQueueFullPolicycreate() Creates and returns AsyncQueueFullPolicy instances based on user-specified system properties. Property ""log4j2.AsyncQueueFullPolicy"" controls the routing behaviour. If this property is not specified or has value ""Default"", this method returns DefaultAsyncQueueFullPolicy objects. If this property has value ""Discard"", this method returns DiscardingAsyncQueueFullPolicy objects. For any other value, this method interprets the value as the fully qualified name of a class implementing the AsyncQueueFullPolicy interface. The class must have a default constructor. Returns: a new AsyncQueueFullPolicy"
async,createWaitStrategy com.lmax.disruptor.WaitStrategycreateWaitStrategy() Creates and returns a non-null implementation of the LMAX Disruptor's WaitStrategy interface. This WaitStrategy will be used by Log4j Async Loggers and Async LoggerConfigs. Returns: the WaitStrategy instance to be used by Async Loggers and Async LoggerConfigs
async,getFactoryClassName publicStringgetFactoryClassName()
async,withFactoryClassName publicBwithFactoryClassName(StringclassName)
async,build publicAsyncWaitStrategyFactoryConfigbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends AsyncWaitStrategyFactoryConfig.Builder<B>> Returns: the configured instance.
async,asBuilder publicBasBuilder()
async,newBuilder @PluginBuilderFactory public static<B extends AsyncWaitStrategyFactoryConfig.Builder<B>> BnewBuilder()
async,createWaitStrategyFactory publicAsyncWaitStrategyFactorycreateWaitStrategyFactory()
async,"shutdown publicvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Description copied from interface:ContextSelector Shuts down the LoggerContext. Specified by: shutdownin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate allContexts - if true all LoggerContexts that can be located will be shutdown."
async,"hasContext publicbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Checks to see if a LoggerContext is installed. The default implementation returns false. Specified by: hasContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise."
async,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: The LoggerContext."
async,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext, URIconfigLocation) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
async,removeContext publicvoidremoveContext(LoggerContextcontext) Description copied from interface:ContextSelector Remove any references to the LoggerContext. Specified by: removeContextin interfaceContextSelector Parameters: context - The context to remove.
async,"isClassLoaderDependent publicbooleanisClassLoaderDependent() Description copied from interface:ContextSelector Determines whether or not this ContextSelector depends on the callers classloader. This method should be overridden by implementations, however a default method is provided which always returns true to preserve the old behavior. Specified by: isClassLoaderDependentin interfaceContextSelector Returns: true if the class loader is required."
async,getLoggerContexts publicList<LoggerContext>getLoggerContexts() Description copied from interface:ContextSelector Returns a List of all the available LoggerContexts. Specified by: getLoggerContextsin interfaceContextSelector Returns: The List of LoggerContexts.
async,create BlockingQueue<E>create(intcapacity) Creates a new BlockingQueue with the specified maximum capacity. Note that not all implementations of BlockingQueue support a bounded capacity in which case the value is ignored. Parameters: capacity - maximum size of the queue if supported Returns: a new BlockingQueue
async,"getRoute publicEventRoutegetRoute(longbackgroundThreadId, Levellevel) Description copied from interface:AsyncQueueFullPolicy Returns the appropriate route for the current log event, given the specified parameters. Specified by: getRoutein interfaceAsyncQueueFullPolicy Parameters: backgroundThreadId - the thread ID of the background thread. Can be compared with the current thread's ID. level - the level of the log event Returns: the appropriate route for the current event"
async,"getRoute publicEventRoutegetRoute(longbackgroundThreadId, Levellevel) Description copied from interface:AsyncQueueFullPolicy Returns the appropriate route for the current log event, given the specified parameters. Specified by: getRoutein interfaceAsyncQueueFullPolicy Overrides: getRoutein classDefaultAsyncQueueFullPolicy Parameters: backgroundThreadId - the thread ID of the background thread. Can be compared with the current thread's ID. level - the level of the log event Returns: the appropriate route for the current event"
async,getDiscardCount public staticlonggetDiscardCount(AsyncQueueFullPolicyrouter)
async,getThresholdLevel publicLevelgetThresholdLevel()
async,create publicBlockingQueue<E>create(intcapacity) Description copied from interface:BlockingQueueFactory Creates a new BlockingQueue with the specified maximum capacity. Note that not all implementations of BlockingQueue support a bounded capacity in which case the value is ignored. Specified by: createin interfaceBlockingQueueFactory<E> Parameters: capacity - maximum size of the queue if supported Returns: a new BlockingQueue
async,"createFactory @PluginFactory public static<E>DisruptorBlockingQueueFactory<E>createFactory(@PluginAttribute(value=""SpinPolicy"",defaultString=""WAITING"") com.conversantmedia.util.concurrent.SpinPolicyspinPolicy)"
async,"values public staticEventRoute[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
async,valueOf public staticEventRoutevalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
async,"logMessage public abstractvoidlogMessage(AsyncLoggerasyncLogger, Stringfqcn, Levellevel, Markermarker, Messagemessage, Throwablethrown)"
async,"logMessage public abstractvoidlogMessage(AsyncLoggerConfigasyncLoggerConfig, LogEventevent)"
async,"logMessage public abstractvoidlogMessage(AsyncAppenderasyncAppender, LogEventcoreEvent)"
async,"makeMessageImmutable public staticMessagemakeMessageImmutable(Messagemsg) Returns the specified message, with its content frozen unless system property log4j.format.msg.async is true or the message class is annotated with AsynchronouslyFormattable. Parameters: msg - the message object to inspect, modify and return Returns: Returns the specified message, with its content frozen"
async,create publicBlockingQueue<E>create(intcapacity) Description copied from interface:BlockingQueueFactory Creates a new BlockingQueue with the specified maximum capacity. Note that not all implementations of BlockingQueue support a bounded capacity in which case the value is ignored. Specified by: createin interfaceBlockingQueueFactory<E> Parameters: capacity - maximum size of the queue if supported Returns: a new BlockingQueue
async,"createFactory @PluginFactory public static<E>JCToolsBlockingQueueFactory<E>createFactory(@PluginAttribute(value=""WaitStrategy"",defaultString=""PARK"") JCToolsBlockingQueueFactory.WaitStrategywaitStrategy)"
async,"values public staticJCToolsBlockingQueueFactory.WaitStrategy[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
async,valueOf public staticJCToolsBlockingQueueFactory.WaitStrategyvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
async,create publicBlockingQueue<E>create(intcapacity) Description copied from interface:BlockingQueueFactory Creates a new BlockingQueue with the specified maximum capacity. Note that not all implementations of BlockingQueue support a bounded capacity in which case the value is ignored. Specified by: createin interfaceBlockingQueueFactory<E> Parameters: capacity - maximum size of the queue if supported Returns: a new BlockingQueue
async,createFactory @PluginFactory public static<E>LinkedTransferQueueFactory<E>createFactory()
async,"setValues publicvoidsetValues(AsyncLoggeranAsyncLogger, StringaLoggerName, MarkeraMarker, StringtheFqcn, LevelaLevel, Messagemsg, ThrowableaThrowable, StringMapmutableContextData, ThreadContext.ContextStackaContextStack, longthreadId, StringthreadName, intthreadPriority, StackTraceElementaLocation, Clockclock, NanoClocknanoClock)"
async,"toImmutable publicLogEventtoImmutable() Description copied from interface:LogEvent Returns an immutable version of this log event, which MAY BE a copy of this event. Specified by: toImmutablein interfaceLogEvent Returns: an immutable version of this log event"
async,execute publicvoidexecute(booleanendOfBatch) Event processor that reads the event from the ringbuffer can call this method. Parameters: endOfBatch - flag to indicate if this is the last event in a batch from the RingBuffer
async,"isPopulated publicbooleanisPopulated() Returns: true if this event is populated with data, false otherwise"
async,"isEndOfBatch publicbooleanisEndOfBatch() Returns true if this event is the end of a batch, false otherwise. Specified by: isEndOfBatchin interfaceLogEvent Returns: true if this event is the end of a batch, false otherwise"
async,"setEndOfBatch publicvoidsetEndOfBatch(booleanendOfBatch) Description copied from interface:LogEvent Sets whether this event is the last one in a batch. Used by asynchronous Loggers and Appenders to signal to buffered downstream components when to flush to disk, as a more efficient alternative to the immediateFlush=true configuration. Specified by: setEndOfBatchin interfaceLogEvent Parameters: endOfBatch - true if this event is the last one in a batch, false otherwise."
async,"isIncludeLocation publicbooleanisIncludeLocation() Description copied from interface:LogEvent Returns whether the source of the logging request is required downstream. Asynchronous Loggers and Appenders use this flag to determine whether to take a StackTrace snapshot or not before handing off this event to another thread. Specified by: isIncludeLocationin interfaceLogEvent Returns: true if the source of the logging request is required downstream, false otherwise. See Also: LogEvent.getSource()"
async,LogEvent.getSource()
async,"setIncludeLocation publicvoidsetIncludeLocation(booleanincludeLocation) Description copied from interface:LogEvent Sets whether the source of the logging request is required downstream. Asynchronous Loggers and Appenders use this flag to determine whether to take a StackTrace snapshot or not before handing off this event to another thread. Specified by: setIncludeLocationin interfaceLogEvent Parameters: includeLocation - true if the source of the logging request is required downstream, false otherwise. See Also: LogEvent.getSource()"
async,LogEvent.getSource()
async,"getLoggerName publicStringgetLoggerName() Description copied from interface:LogEvent Gets the logger name. Specified by: getLoggerNamein interfaceLogEvent Returns: logger name, may be null."
async,getMarker publicMarkergetMarker() Description copied from interface:LogEvent Gets the Marker associated with the event. Specified by: getMarkerin interfaceLogEvent Returns: Marker or null if no Marker was defined on this LogEvent
async,getLoggerFqcn publicStringgetLoggerFqcn() Description copied from interface:LogEvent Returns the fully qualified class name of the caller of the logging API. Specified by: getLoggerFqcnin interfaceLogEvent Returns: The fully qualified class name of the caller.
async,getLevel publicLevelgetLevel() Description copied from interface:LogEvent Gets the level. Specified by: getLevelin interfaceLogEvent Returns: level.
async,getMessage publicMessagegetMessage() Description copied from interface:LogEvent Gets the message associated with the event. Specified by: getMessagein interfaceLogEvent Returns: message.
async,getFormattedMessage publicStringgetFormattedMessage() Specified by: getFormattedMessagein interfaceMessage See Also: Message.getFormattedMessage()
async,Message.getFormattedMessage()
async,getFormat publicStringgetFormat() Specified by: getFormatin interfaceMessage See Also: Message.getFormat()
async,Message.getFormat()
async,getParameters publicObject[]getParameters() Specified by: getParametersin interfaceMessage See Also: Message.getParameters()
async,Message.getParameters()
async,getThrowable publicThrowablegetThrowable() Specified by: getThrowablein interfaceMessage See Also: Message.getThrowable()
async,Message.getThrowable()
async,formatTo publicvoidformatTo(StringBuilderbuffer) Specified by: formatToin interfaceStringBuilderFormattable See Also: StringBuilderFormattable.formatTo(StringBuilder)
async,StringBuilderFormattable.formatTo(StringBuilder)
async,swapParameters publicObject[]swapParameters(Object[]emptyReplacement) Replaces this ReusableMessage's parameter array with the specified value and return the original array Specified by: swapParametersin interfaceReusableMessage Parameters: emptyReplacement - the parameter array that can be used for subsequent uses of this reusable message Returns: the original parameter array See Also: ReusableMessage.swapParameters(Object[])
async,ReusableMessage.swapParameters(Object[])
async,getParameterCount publicshortgetParameterCount() Specified by: getParameterCountin interfaceReusableMessage
async,"forEachParameter public<S>voidforEachParameter(ParameterConsumer<S>action, Sstate) Specified by: forEachParameterin interfaceParameterVisitable"
async,memento publicMessagememento() Specified by: mementoin interfaceReusableMessage
async,length publicintlength() Specified by: lengthin interfaceCharSequence
async,charAt publiccharcharAt(intindex) Specified by: charAtin interfaceCharSequence
async,"subSequence publicCharSequencesubSequence(intstart, intend) Specified by: subSequencein interfaceCharSequence"
async,"getThrown publicThrowablegetThrown() Description copied from interface:LogEvent Gets throwable associated with logging request. Convenience method for ThrowableProxy.getThrowable(); Specified by: getThrownin interfaceLogEvent Returns: throwable, may be null."
async,"getThrownProxy publicThrowableProxygetThrownProxy() Description copied from interface:LogEvent Gets throwable proxy associated with logging request. Specified by: getThrownProxyin interfaceLogEvent Returns: throwable, may be null."
async,"getContextData publicReadOnlyStringMapgetContextData() Description copied from interface:LogEvent Returns the ReadOnlyStringMap object holding context data key-value pairs. Context data (also known as Mapped Diagnostic Context or MDC) is data that is set by the application to be included in all subsequent log events. The default source for context data is the ThreadContext (and properties configured on the Logger that logged the event), but users can configure a custom ContextDataInjector to inject key-value pairs from any arbitrary source. Specified by: getContextDatain interfaceLogEvent Returns: the ReadOnlyStringMap object holding context data key-value pairs See Also: ContextDataInjector ThreadContext"
async,ContextDataInjector
async,ThreadContext
async,"getContextMap publicMap<String,String>getContextMap() Description copied from interface:LogEvent Gets the context map (also know as Mapped Diagnostic Context or MDC). Specified by: getContextMapin interfaceLogEvent Returns: The context map, never null."
async,"getContextStack publicThreadContext.ContextStackgetContextStack() Description copied from interface:LogEvent Gets the context stack (also known as Nested Diagnostic Context or NDC). Specified by: getContextStackin interfaceLogEvent Returns: The context stack, never null."
async,getThreadId publiclonggetThreadId() Description copied from interface:LogEvent Gets the thread ID. Specified by: getThreadIdin interfaceLogEvent Returns: thread ID.
async,"getThreadName publicStringgetThreadName() Description copied from interface:LogEvent Gets the thread name. Specified by: getThreadNamein interfaceLogEvent Returns: thread name, may be null. TODO guess this could go into a thread context object too. (RG) Why?"
async,getThreadPriority publicintgetThreadPriority() Description copied from interface:LogEvent Gets the thread priority. Specified by: getThreadPriorityin interfaceLogEvent Returns: thread priority.
async,"getSource publicStackTraceElementgetSource() Description copied from interface:LogEvent Gets the source of logging request. Specified by: getSourcein interfaceLogEvent Returns: source of logging request, may be null."
async,"getTimeMillis publiclonggetTimeMillis() Description copied from interface:LogEvent Gets event time in milliseconds since midnight, January 1, 1970 UTC. Use LogEvent.getInstant() to get higher precision timestamp information if available on this platform. Specified by: getTimeMillisin interfaceLogEvent Returns: the milliseconds component of this log event's timestamp See Also: System.currentTimeMillis()"
async,System.currentTimeMillis()
async,"getInstant publicInstantgetInstant() Description copied from interface:LogEvent Returns the Instant when the message was logged. Caution: if this LogEvent implementation is mutable and reused for multiple consecutive log messages, then the Instant object returned by this method is also mutable and reused. Client code should not keep a reference to the returned object but make a copy instead. Specified by: getInstantin interfaceLogEvent Returns: the Instant holding Instant details for this log event"
async,"getNanoTime publiclonggetNanoTime() Description copied from interface:LogEvent Returns the value of the running Java Virtual Machine's high-resolution time source when this event was created, or a dummy value if it is known that this value will not be used downstream. Specified by: getNanoTimein interfaceLogEvent Returns: The value of the running Java Virtual Machine's high-resolution time source when this event was created."
async,clear publicvoidclear() Release references held by ring buffer to allow objects to be garbage-collected.
async,createMemento publicLogEventcreateMemento() Creates and returns a new immutable copy of this RingBufferLogEvent. Returns: a new immutable copy of the data in this RingBufferLogEvent
async,initializeBuilder publicvoidinitializeBuilder(Log4jLogEvent.Builderbuilder) Initializes the specified Log4jLogEvent.Builder from this RingBufferLogEvent. Parameters: builder - the builder whose fields to populate
async,setSequenceCallback publicvoidsetSequenceCallback(com.lmax.disruptor.SequencesequenceCallback)
async,"onEvent publicvoidonEvent(RingBufferLogEventevent, longsequence, booleanendOfBatch) throws Exception Specified by: onEventin interfacecom.lmax.disruptor.EventHandler<RingBufferLogEvent> Throws: Exception"
async,"getThreadId publiclonggetThreadId() Returns the thread ID of the background consumer thread, or -1 if the background thread has not started yet. Returns: the thread ID of the background consumer thread, or -1"
async,onStart publicvoidonStart()
async,onShutdown publicvoidonShutdown()
async,"translateTo publicvoidtranslateTo(RingBufferLogEventevent, longsequence) Specified by: translateToin interfacecom.lmax.disruptor.EventTranslator<RingBufferLogEvent>"
async,"setBasicValues publicvoidsetBasicValues(AsyncLoggeranAsyncLogger, StringaLoggerName, MarkeraMarker, StringtheFqcn, LevelaLevel, Messagemsg, ThrowableaThrowable, ThreadContext.ContextStackaContextStack, StackTraceElementaLocation, ClockaClock, NanoClockaNanoClock)"
async,updateThreadValues publicvoidupdateThreadValues()
async,"values public staticThreadNameCachingStrategy[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
async,valueOf public staticThreadNameCachingStrategyvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
async,create public staticThreadNameCachingStrategycreate()
config,"getConfigurationSource publicConfigurationSourcegetConfigurationSource() Description copied from interface:Configuration Returns the source of this configuration. Specified by: getConfigurationSourcein interfaceConfiguration Returns: the source of this configuration, never null, but may be ConfigurationSource.NULL_SOURCE or ConfigurationSource.COMPOSITE_SOURCE"
config,getPluginPackages publicList<String>getPluginPackages() Description copied from interface:Configuration Returns the list of packages to scan for plugins for this Configuration. Specified by: getPluginPackagesin interfaceConfiguration Returns: the list of plugin packages.
config,"getProperties publicMap<String,String>getProperties() Specified by: getPropertiesin interfaceConfiguration"
config,getScriptManager publicScriptManagergetScriptManager() Specified by: getScriptManagerin interfaceConfiguration
config,setScriptManager publicvoidsetScriptManager(ScriptManagerscriptManager)
config,getPluginManager publicPluginManagergetPluginManager()
config,setPluginManager publicvoidsetPluginManager(PluginManagerpluginManager)
config,getWatchManager publicWatchManagergetWatchManager() Description copied from interface:Configuration Return the WatchManager. Specified by: getWatchManagerin interfaceConfiguration Returns: the WatchManager.
config,getScheduler publicConfigurationSchedulergetScheduler() Specified by: getSchedulerin interfaceConfiguration
config,getRootNode publicNodegetRootNode()
config,getAsyncLoggerConfigDelegate publicAsyncLoggerConfigDelegategetAsyncLoggerConfigDelegate() Description copied from interface:Configuration Returns the AsyncLoggerConfigDelegate shared by all AsyncLoggerConfig instances defined in this Configuration. Specified by: getAsyncLoggerConfigDelegatein interfaceConfiguration Returns: the AsyncLoggerConfigDelegate
config,getAsyncWaitStrategyFactory publicAsyncWaitStrategyFactorygetAsyncWaitStrategyFactory() Description copied from interface:Configuration Returns the AsyncWaitStrategyFactory defined in this Configuration; this factory is used to create the LMAX disruptor WaitStrategy used by the disruptor ringbuffer for Async Loggers. Specified by: getAsyncWaitStrategyFactoryin interfaceConfiguration Returns: the AsyncWaitStrategyFactory
config,initialize publicvoidinitialize() Initialize the configuration. Specified by: initializein interfaceLifeCycle Overrides: initializein classAbstractLifeCycle
config,"initializeWatchers protectedvoidinitializeWatchers(Reconfigurablereconfigurable, ConfigurationSourceconfigSource, intmonitorIntervalSeconds)"
config,start publicvoidstart() Start the configuration. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractFilterable
config,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Tear down the configuration. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractFilterable Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
config,isShutdownHookEnabled publicbooleanisShutdownHookEnabled() Specified by: isShutdownHookEnabledin interfaceConfiguration
config,getShutdownTimeoutMillis publiclonggetShutdownTimeoutMillis() Specified by: getShutdownTimeoutMillisin interfaceConfiguration
config,setup publicvoidsetup()
config,getDefaultStatus protectedLevelgetDefaultStatus()
config,"createAdvertiser protectedvoidcreateAdvertiser(StringadvertiserString, ConfigurationSourceconfigSource, byte[]buffer, StringcontentType)"
config,getComponent public<T>TgetComponent(StringcomponentName) Specified by: getComponentin interfaceConfiguration
config,"addComponent publicvoidaddComponent(StringcomponentName, Objectobj) Specified by: addComponentin interfaceConfiguration"
config,preConfigure protectedvoidpreConfigure(Nodenode)
config,processConditionals protectedvoidprocessConditionals(Nodenode) Process conditions by evaluating them and including the children of conditions that are true and discarding those that are not. Parameters: node - The node to evaluate.
config,"processSelect protectedList<Node>processSelect(NodeselectNode, PluginType<?>type) Handle Select nodes. This finds the first child condition that returns true and attaches its children to the parent of the Select Node. Other Nodes are discarded. Parameters: selectNode - The Select Node. type - The PluginType of the Select Node. Returns: The list of Nodes to be added to the parent."
config,doConfigure protectedvoiddoConfigure()
config,getDefaultLevel public staticLevelgetDefaultLevel()
config,setToDefault protectedvoidsetToDefault()
config,setName publicvoidsetName(Stringname) Set the name of the configuration. Parameters: name - The name.
config,getName publicStringgetName() Returns the name of the configuration. Specified by: getNamein interfaceConfiguration Returns: the name of the configuration.
config,addListener publicvoidaddListener(ConfigurationListenerlistener) Add a listener for changes on the configuration. Specified by: addListenerin interfaceConfiguration Parameters: listener - The ConfigurationListener to add.
config,removeListener publicvoidremoveListener(ConfigurationListenerlistener) Remove a ConfigurationListener. Specified by: removeListenerin interfaceConfiguration Parameters: listener - The ConfigurationListener to remove.
config,getAppender public<T extends Appender>TgetAppender(StringappenderName) Returns the Appender with the specified name. Specified by: getAppenderin interfaceConfiguration Type Parameters: T - The expected Appender type. Parameters: appenderName - The name of the Appender. Returns: the Appender with the specified name or null if the Appender cannot be located.
config,"getAppenders publicMap<String,Appender>getAppenders() Returns a Map containing all the Appenders and their name. Specified by: getAppendersin interfaceConfiguration Returns: A Map containing each Appender's name and the Appender object."
config,addAppender publicvoidaddAppender(Appenderappender) Adds an Appender to the configuration. Specified by: addAppenderin interfaceConfiguration Parameters: appender - The Appender to add.
config,getStrSubstitutor publicStrSubstitutorgetStrSubstitutor() Specified by: getStrSubstitutorin interfaceConfiguration
config,getConfigurationStrSubstitutor publicStrSubstitutorgetConfigurationStrSubstitutor() Specified by: getConfigurationStrSubstitutorin interfaceConfiguration
config,setAdvertiser publicvoidsetAdvertiser(Advertiseradvertiser) Specified by: setAdvertiserin interfaceConfiguration
config,getAdvertiser publicAdvertisergetAdvertiser() Specified by: getAdvertiserin interfaceConfiguration
config,getReliabilityStrategy publicReliabilityStrategygetReliabilityStrategy(LoggerConfigloggerConfig) Specified by: getReliabilityStrategyin interfaceConfiguration
config,"addLoggerAppender publicvoidaddLoggerAppender(Loggerlogger, Appenderappender) Associates an Appender with a LoggerConfig. This method is synchronized in case a Logger with the same name is being updated at the same time. Note: This method is not used when configuring via configuration. It is primarily used by unit tests. Specified by: addLoggerAppenderin interfaceConfiguration Parameters: logger - The Logger the Appender will be associated with. appender - The Appender."
config,"addLoggerFilter publicvoidaddLoggerFilter(Loggerlogger, Filterfilter) Associates a Filter with a LoggerConfig. This method is synchronized in case a Logger with the same name is being updated at the same time. Note: This method is not used when configuring via configuration. It is primarily used by unit tests. Specified by: addLoggerFilterin interfaceConfiguration Parameters: logger - The Logger the Footer will be associated with. filter - The Filter."
config,"setLoggerAdditive publicvoidsetLoggerAdditive(Loggerlogger, booleanadditive) Marks a LoggerConfig as additive. This method is synchronized in case a Logger with the same name is being updated at the same time. Note: This method is not used when configuring via configuration. It is primarily used by unit tests. Specified by: setLoggerAdditivein interfaceConfiguration Parameters: logger - The Logger the Appender will be associated with. additive - True if the LoggerConfig should be additive, false otherwise."
config,"removeAppender publicvoidremoveAppender(StringappenderName) Remove an Appender. First removes any associations between LoggerConfigs and the Appender, removes the Appender from this appender list and then stops the appender. This method is synchronized in case an Appender with the same name is being added during the removal. Parameters: appenderName - the name of the appender to remove."
config,"getCustomLevels publicList<CustomLevelConfig>getCustomLevels() Description copied from interface:Configuration Returns a list of descriptors of the custom levels defined in the current configuration. The returned list does not include custom levels that are defined in code with direct calls to Level.forName(String, int). Note that the list does not include levels of previous configurations. For example, suppose a configuration contains custom levels A, B and C. The configuration is then modified to contain custom levels B, C and D. For the new configuration, this method will return only {B, C, D}, that is, only the custom levels defined in this configuration. The previously defined level A still exists (and can be obtained with Level.getLevel(String)), it is just not in the current configuration. Level.values() will return {A, B, C, D and the built-in levels}. Specified by: getCustomLevelsin interfaceConfiguration Returns: the custom levels defined in the current configuration"
config,getLoggerConfig publicLoggerConfiggetLoggerConfig(StringloggerName) Locates the appropriate LoggerConfig for a Logger name. This will remove tokens from the package name as necessary or return the root LoggerConfig if no other matches were found. Specified by: getLoggerConfigin interfaceConfiguration Parameters: loggerName - The Logger name. Returns: The located LoggerConfig.
config,getLoggerContext publicLoggerContextgetLoggerContext() Description copied from interface:Configuration Gets the logger context. Specified by: getLoggerContextin interfaceConfiguration Returns: the logger context.
config,getRootLogger publicLoggerConfiggetRootLogger() Returns the root Logger. Specified by: getRootLoggerin interfaceConfiguration Returns: the root Logger.
config,"getLoggers publicMap<String,LoggerConfig>getLoggers() Returns a Map of all the LoggerConfigs. Specified by: getLoggersin interfaceConfiguration Returns: a Map with each entry containing the name of the Logger and the LoggerConfig."
config,getLogger publicLoggerConfiggetLogger(StringloggerName) Returns the LoggerConfig with the specified name. Parameters: loggerName - The Logger name. Returns: The LoggerConfig or null if no match was found.
config,"addLogger publicvoidaddLogger(StringloggerName, LoggerConfigloggerConfig) Add a loggerConfig. The LoggerConfig must already be configured with Appenders, Filters, etc. After addLogger is called LoggerContext.updateLoggers must be called. Specified by: addLoggerin interfaceConfiguration Parameters: loggerName - The name of the Logger. loggerConfig - The LoggerConfig."
config,removeLogger publicvoidremoveLogger(StringloggerName) Remove a LoggerConfig. Specified by: removeLoggerin interfaceConfiguration Parameters: loggerName - The name of the Logger.
config,"createConfiguration publicvoidcreateConfiguration(Nodenode, LogEventevent) Specified by: createConfigurationin interfaceConfiguration"
config,"createPluginObject publicObjectcreatePluginObject(PluginType<?>type, Nodenode) This method is used by Arbiters to create specific children. Parameters: type - The PluginType. node - The Node. Returns: The created object or null;"
config,toByteArray protected staticbyte[]toByteArray(InputStreamis) throws IOException Reads an InputStream using buffered reads into a byte array buffer. The given InputStream will remain open after invocation of this method. Parameters: is - the InputStream to read into a byte array buffer. Returns: a byte array of the InputStream contents. Throws: IOException - if the read method of the provided InputStream throws this exception.
config,getNanoClock publicNanoClockgetNanoClock() Description copied from interface:Configuration Returns the NanoClock instance for this configuration. Specified by: getNanoClockin interfaceConfiguration Returns: the nano clock
config,setNanoClock publicvoidsetNanoClock(NanoClocknanoClock) Description copied from interface:Configuration Sets the NanoClock instance for this configuration. Specified by: setNanoClockin interfaceConfiguration Parameters: nanoClock - the new nano clock for this configuration. Must be non-null.
config,getAppenderName publicStringgetAppenderName() Returns the name the appender had when this AppenderControl was constructed. Returns: the appender name
config,getAppender publicAppendergetAppender() Returns the Appender. Returns: the Appender.
config,callAppender publicvoidcallAppender(LogEventevent) Call the appender. Parameters: event - The event to process.
config,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
config,hashCode publicinthashCode() Overrides: hashCodein classObject
config,toString publicStringtoString() Overrides: toStringin classObject
config,"add publicbooleanadd(AppenderControlcontrol) Adds an AppenderControl to this set. If this set already contains the element, the call leaves the set unchanged and returns false. Parameters: control - The AppenderControl to add. Returns: true if this set did not already contain the specified element"
config,remove publicAppenderControlremove(Stringname) Removes the AppenderControl with the specific name and returns it (or null if no such appender existed). Parameters: name - The name of the AppenderControl to remove Returns: the removed AppenderControl or null
config,"asMap publicMap<String,Appender>asMap() Returns all Appenders as a Map. Returns: a Map with the Appender name as the key and the Appender as the value."
config,clear publicAppenderControl[]clear() Atomically sets the values to an empty array and returns the old array. Returns: the contents before this collection was cleared.
config,isEmpty publicbooleanisEmpty()
config,get publicAppenderControl[]get() Returns the underlying array. Returns: the array supporting this collection
config,toString publicStringtoString() Overrides: toStringin classObject
config,getRef publicStringgetRef()
config,getLevel publicLevelgetLevel()
config,getFilter publicFiltergetFilter()
config,toString publicStringtoString() Overrides: toStringin classObject
config,"createAppenderRef @PluginFactory public staticAppenderRefcreateAppenderRef(@PluginAttribute(""ref"") Stringref, @PluginAttribute(""level"") Levellevel, @PluginElement(""Filter"") Filterfilter) Create an Appender reference. Parameters: ref - The name of the Appender. level - The Level to filter against. filter - The filter(s) to use. Returns: The name of the Appender."
config,"createAppenders @PluginFactory public staticConcurrentMap<String,Appender>createAppenders(@PluginElement(""Appenders"") Appender[]appenders) Creates a Map of the Appenders. Parameters: appenders - An array of Appenders. Returns: The Appender Map."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, StackTraceElementlocation, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:LocationAwareReliabilityStrategy Logs an event. Specified by: login interfaceLocationAwareReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. location - The location of the caller or null. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, LogEventevent) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active event - The log event."
config,getActiveLoggerConfig publicLoggerConfiggetActiveLoggerConfig(Supplier<LoggerConfig>next) Description copied from interface:ReliabilityStrategy For internal use by the ReliabilityStrategy; returns the LoggerConfig to use. Specified by: getActiveLoggerConfigin interfaceReliabilityStrategy Parameters: next - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active Returns: the currently active LoggerConfig
config,afterLogEvent publicvoidafterLogEvent() Description copied from interface:ReliabilityStrategy Called after a log event was logged. Specified by: afterLogEventin interfaceReliabilityStrategy
config,beforeStopAppenders publicvoidbeforeStopAppenders() Description copied from interface:ReliabilityStrategy Called before all appenders are stopped. Specified by: beforeStopAppendersin interfaceReliabilityStrategy
config,beforeStopConfiguration publicvoidbeforeStopConfiguration(Configurationconfiguration) Description copied from interface:ReliabilityStrategy Called before the configuration is stopped. Specified by: beforeStopConfigurationin interfaceReliabilityStrategy Parameters: configuration - the configuration that will be stopped
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, StackTraceElementlocation, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:LocationAwareReliabilityStrategy Logs an event. Specified by: login interfaceLocationAwareReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. location - The location of the caller or null. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, LogEventevent) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active event - The log event."
config,getActiveLoggerConfig publicLoggerConfiggetActiveLoggerConfig(Supplier<LoggerConfig>next) Description copied from interface:ReliabilityStrategy For internal use by the ReliabilityStrategy; returns the LoggerConfig to use. Specified by: getActiveLoggerConfigin interfaceReliabilityStrategy Parameters: next - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active Returns: the currently active LoggerConfig
config,afterLogEvent publicvoidafterLogEvent() Description copied from interface:ReliabilityStrategy Called after a log event was logged. Specified by: afterLogEventin interfaceReliabilityStrategy
config,beforeStopAppenders publicvoidbeforeStopAppenders() Description copied from interface:ReliabilityStrategy Called before all appenders are stopped. Specified by: beforeStopAppendersin interfaceReliabilityStrategy
config,beforeStopConfiguration publicvoidbeforeStopConfiguration(Configurationconfiguration) Description copied from interface:ReliabilityStrategy Called before the configuration is stopped. Specified by: beforeStopConfigurationin interfaceReliabilityStrategy Parameters: configuration - the configuration that will be stopped
config,getName StringgetName() Returns the configuration name. Returns: the name of the configuration.
config,getLoggerConfig LoggerConfiggetLoggerConfig(Stringname) Locates the appropriate LoggerConfig for a Logger name. This will remove tokens from the package name as necessary or return the root LoggerConfig if no other matches were found. Parameters: name - The Logger name. Returns: The located LoggerConfig.
config,getAppender <T extends Appender>TgetAppender(Stringname) Returns the Appender with the specified name. Type Parameters: T - The expected Appender type. Parameters: name - The name of the Appender. Returns: the Appender with the specified name or null if the Appender cannot be located.
config,"getAppenders Map<String,Appender>getAppenders() Returns a Map containing all the Appenders and their name. Returns: A Map containing each Appender's name and the Appender object."
config,addAppender voidaddAppender(Appenderappender)
config,"getLoggers Map<String,LoggerConfig>getLoggers()"
config,"addLoggerAppender voidaddLoggerAppender(Loggerlogger, Appenderappender)"
config,"addLoggerFilter voidaddLoggerFilter(Loggerlogger, Filterfilter)"
config,"setLoggerAdditive voidsetLoggerAdditive(Loggerlogger, booleanadditive)"
config,"addLogger voidaddLogger(Stringname, LoggerConfigloggerConfig)"
config,removeLogger voidremoveLogger(Stringname)
config,getPluginPackages List<String>getPluginPackages() Returns the list of packages to scan for plugins for this Configuration. Returns: the list of plugin packages. Since: 2.1
config,"getProperties Map<String,String>getProperties()"
config,getRootLogger LoggerConfiggetRootLogger() Returns the root Logger. Returns: the root Logger.
config,addListener voidaddListener(ConfigurationListenerlistener)
config,removeListener voidremoveListener(ConfigurationListenerlistener)
config,getStrSubstitutor StrSubstitutorgetStrSubstitutor()
config,getConfigurationStrSubstitutor defaultStrSubstitutorgetConfigurationStrSubstitutor()
config,"createConfiguration voidcreateConfiguration(Nodenode, LogEventevent)"
config,getComponent <T>TgetComponent(Stringname)
config,"addComponent voidaddComponent(Stringname, Objectobject)"
config,setAdvertiser voidsetAdvertiser(Advertiseradvertiser)
config,getAdvertiser AdvertisergetAdvertiser()
config,isShutdownHookEnabled booleanisShutdownHookEnabled()
config,getShutdownTimeoutMillis longgetShutdownTimeoutMillis()
config,getScheduler ConfigurationSchedulergetScheduler()
config,"getConfigurationSource ConfigurationSourcegetConfigurationSource() Returns the source of this configuration. Returns: the source of this configuration, never null, but may be ConfigurationSource.NULL_SOURCE or ConfigurationSource.COMPOSITE_SOURCE"
config,"getCustomLevels List<CustomLevelConfig>getCustomLevels() Returns a list of descriptors of the custom levels defined in the current configuration. The returned list does not include custom levels that are defined in code with direct calls to Level.forName(String, int). Note that the list does not include levels of previous configurations. For example, suppose a configuration contains custom levels A, B and C. The configuration is then modified to contain custom levels B, C and D. For the new configuration, this method will return only {B, C, D}, that is, only the custom levels defined in this configuration. The previously defined level A still exists (and can be obtained with Level.getLevel(String)), it is just not in the current configuration. Level.values() will return {A, B, C, D and the built-in levels}. Returns: the custom levels defined in the current configuration"
config,getScriptManager ScriptManagergetScriptManager()
config,getAsyncLoggerConfigDelegate AsyncLoggerConfigDelegategetAsyncLoggerConfigDelegate() Returns the AsyncLoggerConfigDelegate shared by all AsyncLoggerConfig instances defined in this Configuration. Returns: the AsyncLoggerConfigDelegate
config,getAsyncWaitStrategyFactory AsyncWaitStrategyFactorygetAsyncWaitStrategyFactory() Returns the AsyncWaitStrategyFactory defined in this Configuration; this factory is used to create the LMAX disruptor WaitStrategy used by the disruptor ringbuffer for Async Loggers. Returns: the AsyncWaitStrategyFactory Since: 2.17.3
config,getWatchManager WatchManagergetWatchManager() Return the WatchManager. Returns: the WatchManager.
config,getReliabilityStrategy ReliabilityStrategygetReliabilityStrategy(LoggerConfigloggerConfig)
config,getNanoClock NanoClockgetNanoClock() Returns the NanoClock instance for this configuration. Returns: the nano clock
config,setNanoClock voidsetNanoClock(NanoClocknanoClock) Sets the NanoClock instance for this configuration. Parameters: nanoClock - the new nano clock for this configuration. Must be non-null.
config,getLoggerContext LoggerContextgetLoggerContext() Gets the logger context. Returns: the logger context.
config,setConfiguration voidsetConfiguration(Configurationconfiguration) Injects the current Configuration into this object. Parameters: configuration - the current Configuration
config,getInstance public staticConfigurationFactorygetInstance() Returns the ConfigurationFactory. Returns: the ConfigurationFactory.
config,authorizationProvider public staticAuthorizationProviderauthorizationProvider(PropertiesUtilprops)
config,getAuthorizationProvider public staticAuthorizationProvidergetAuthorizationProvider()
config,setConfigurationFactory public staticvoidsetConfigurationFactory(ConfigurationFactoryfactory) Sets the configuration factory. This method is not intended for general use and may not be thread safe. Parameters: factory - the ConfigurationFactory.
config,resetConfigurationFactory public staticvoidresetConfigurationFactory() Resets the ConfigurationFactory to the default. This method is not intended for general use and may not be thread safe.
config,removeConfigurationFactory public staticvoidremoveConfigurationFactory(ConfigurationFactoryfactory) Removes the ConfigurationFactory. This method is not intended for general use and may not be thread safe. Parameters: factory - The factory to remove.
config,getSupportedTypes protected abstractString[]getSupportedTypes()
config,getTestPrefix protectedStringgetTestPrefix()
config,getDefaultPrefix protectedStringgetDefaultPrefix()
config,getVersion protectedStringgetVersion()
config,isActive protectedbooleanisActive()
config,"getConfiguration public abstractConfigurationgetConfiguration(LoggerContextloggerContext, ConfigurationSourcesource)"
config,"getConfiguration publicConfigurationgetConfiguration(LoggerContextloggerContext, Stringname, URIconfigLocation) Returns the Configuration. Parameters: loggerContext - The logger context name - The configuration name. configLocation - The configuration location. Returns: The Configuration."
config,"getConfiguration publicConfigurationgetConfiguration(LoggerContextloggerContext, Stringname, URIconfigLocation, ClassLoaderloader) Returns the Configuration obtained using a given ClassLoader. Parameters: loggerContext - The logger context name - The configuration name. configLocation - A URI representing the location of the configuration. loader - The default ClassLoader to use. If this is null, then the default ClassLoader will be used. Returns: The Configuration."
config,"getInputFromString @Deprecated protectedConfigurationSourcegetInputFromString(Stringconfig, ClassLoaderloader) Deprecated. Loads the configuration from the location represented by the String. Parameters: config - The configuration location. loader - The default ClassLoader to use. Returns: The InputSource to use to read the configuration."
config,getLastModified publiclonggetLastModified() Description copied from interface:Watcher Returns the time the source was last modified or 0 if it is not available. Specified by: getLastModifiedin interfaceWatcher Specified by: getLastModifiedin classAbstractWatcher Returns: the time the source was last modified.
config,fileModified publicvoidfileModified(Filefile) Description copied from interface:FileWatcher Called when a WatchManager detects that the given File changed. Specified by: fileModifiedin interfaceFileWatcher Parameters: file - the file that changed. See Also: WatchManager
config,WatchManager
config,watching publicvoidwatching(Sourcesource) Description copied from interface:Watcher Called when the Watcher is registered. Specified by: watchingin interfaceWatcher Overrides: watchingin classAbstractWatcher Parameters: source - the Source that is being watched.
config,"isModified publicbooleanisModified() Description copied from interface:Watcher Periodically called to determine if the configuration has been modified. Specified by: isModifiedin interfaceWatcher Specified by: isModifiedin classAbstractWatcher Returns: true if the configuration was modified, false otherwise."
config,"newWatcher publicWatchernewWatcher(Reconfigurablereconfigurable, List<ConfigurationListener>listeners, longlastModifiedMillis) Description copied from interface:Watcher Creates a new Watcher by copying the original and using the new Reconfigurable and listeners. Specified by: newWatcherin interfaceWatcher Parameters: reconfigurable - The Reconfigurable. listeners - the listeners. lastModifiedMillis - The time the resource was last modified in milliseconds. Returns: A new Watcher."
config,onChange voidonChange(Reconfigurablereconfigurable)
config,setScheduledFuture publicvoidsetScheduledFuture(CronScheduledFuture<?>future)
config,run publicvoidrun() Specified by: runin interfaceRunnable
config,toString publicStringtoString() Overrides: toStringin classObject
config,start publicvoidstart() Specified by: startin interfaceLifeCycle Overrides: startin classAbstractLifeCycle
config,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
config,isExecutorServiceSet publicbooleanisExecutorServiceSet()
config,incrementScheduledItems publicvoidincrementScheduledItems() Increment the number of threads in the pool.
config,decrementScheduledItems publicvoiddecrementScheduledItems() Decrement the number of threads in the pool
config,"schedule public<V>ScheduledFuture<V>schedule(Callable<V>callable, longdelay, TimeUnitunit) Creates and executes a ScheduledFuture that becomes enabled after the given delay. Type Parameters: V - The result type returned by this Future Parameters: callable - the function to execute. delay - the time from now to delay execution. unit - the time unit of the delay parameter. Returns: a ScheduledFuture that can be used to extract result or cancel."
config,"schedule publicScheduledFuture<?>schedule(Runnablecommand, longdelay, TimeUnitunit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters: command - the task to execute. delay - the time from now to delay execution. unit - the time unit of the delay parameter. Returns: a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion."
config,"scheduleWithCron publicCronScheduledFuture<?>scheduleWithCron(CronExpressioncronExpression, Runnablecommand) Creates and executes an action that first based on a cron expression. Parameters: cronExpression - the cron expression describing the schedule. command - The Runnable to run, Returns: a ScheduledFuture representing the next time the command will run."
config,"scheduleWithCron publicCronScheduledFuture<?>scheduleWithCron(CronExpressioncronExpression, DatestartDate, Runnablecommand) Creates and executes an action that first based on a cron expression. Parameters: cronExpression - the cron expression describing the schedule. startDate - The time to use as the time to begin the cron expression. Defaults to the current date and time. command - The Runnable to run, Returns: a ScheduledFuture representing the next time the command will run."
config,"scheduleAtFixedRate publicScheduledFuture<?>scheduleAtFixedRate(Runnablecommand, longinitialDelay, longperiod, TimeUnitunit) Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on. Parameters: command - the task to execute. initialDelay - the time to delay first execution. period - the period between successive executions. unit - the time unit of the initialDelay and period parameters. Returns: a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation"
config,"scheduleWithFixedDelay publicScheduledFuture<?>scheduleWithFixedDelay(Runnablecommand, longinitialDelay, longdelay, TimeUnitunit) Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. Parameters: command - the task to execute. initialDelay - the time to delay first execution. delay - the delay between the termination of one execution and the commencement of the next. unit - the time unit of the initialDelay and delay parameters Returns: a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation"
config,nextFireInterval publiclongnextFireInterval(DatefireDate)
config,toString publicStringtoString() Overrides: toStringin classObject
config,"getFile publicFilegetFile() Returns the file configuration source, or null if this configuration source is based on an URL or has neither a file nor an URL. Returns: the configuration source file, or null"
config,"getURL publicURLgetURL() Returns the configuration source URL, or null if this configuration source is based on a file or has neither a file nor an URL. Returns: the configuration source URL, or null"
config,"setSource @Deprecated publicvoidsetSource(Sourceignored) Deprecated. Not used internally, no replacement."
config,setData publicvoidsetData(byte[]data)
config,setModifiedMillis publicvoidsetModifiedMillis(longcurrentLastModified) Updates the last known modification time of the resource. Parameters: currentLastModified - The modification time of the resource in millis.
config,getURI publicURIgetURI() Returns a URI representing the configuration resource or null if it cannot be determined. Returns: The URI.
config,getLastModified publiclonggetLastModified() Returns the last modification time known when the ConfigurationSource was created. Returns: the last modified time of the resource.
config,"getLocation publicStringgetLocation() Returns a string describing the configuration source file or URL, or null if this configuration source has neither a file nor an URL. Returns: a string describing the configuration source file or URL, or null"
config,getInputStream publicInputStreamgetInputStream() Returns the input stream that this configuration source was constructed with. Returns: the input stream that this configuration source was constructed with.
config,resetInputStream publicConfigurationSourceresetInputStream() throws IOException Returns a new ConfigurationSource whose input stream is reset to the beginning. Returns: a new ConfigurationSource Throws: IOException - if a problem occurred while opening the new input stream
config,toString publicStringtoString() Overrides: toStringin classObject
config,fromUri public staticConfigurationSourcefromUri(URIconfigLocation) Loads the configuration from a URI. Parameters: configLocation - A URI representing the location of the configuration. Returns: The ConfigurationSource for the configuration.
config,"fromResource public staticConfigurationSourcefromResource(Stringresource, ClassLoaderloader) Retrieves the configuration via the ClassLoader. Parameters: resource - The resource to load. loader - The default ClassLoader to use. Returns: The ConfigurationSource for the configuration."
config,"initialize public staticLoggerContextinitialize(ClassLoaderloader, ConfigurationSourcesource) Initializes the Logging Context. Parameters: loader - The ClassLoader for the Context (or null). source - The InputSource for the configuration. Returns: The LoggerContext."
config,"initialize public staticLoggerContextinitialize(ClassLoaderloader, ConfigurationSourcesource, ObjectexternalContext) Initializes the Logging Context. Parameters: loader - The ClassLoader for the Context (or null). source - The InputSource for the configuration. externalContext - The external context to be attached to the LoggerContext. Returns: The LoggerContext."
config,"initialize public staticLoggerContextinitialize(Stringname, ClassLoaderloader, StringconfigLocation) Initializes the Logging Context. Parameters: name - The Context name. loader - The ClassLoader for the Context (or null). configLocation - The configuration for the logging context. Returns: The LoggerContext or null if an error occurred (check the status logger)."
config,"initialize public staticLoggerContextinitialize(Stringname, ClassLoaderloader, StringconfigLocation, ObjectexternalContext) Initializes the Logging Context. Parameters: name - The Context name. loader - The ClassLoader for the Context (or null). configLocation - The configuration for the logging context (or null, or blank). externalContext - The external context to be attached to the LoggerContext Returns: The LoggerContext or null if an error occurred (check the status logger)."
config,"initialize public staticLoggerContextinitialize(Stringname, ClassLoaderloader, URIconfigLocation) Initializes the Logging Context. Parameters: name - The Context name. loader - The ClassLoader for the Context (or null). configLocation - The configuration for the logging context. Returns: The LoggerContext."
config,"initialize public staticLoggerContextinitialize(Stringname, ClassLoaderloader, URIconfigLocation, ObjectexternalContext) Initializes the Logging Context. Parameters: name - The Context name. loader - The ClassLoader for the Context (or null). configLocation - The configuration for the logging context (or null). externalContext - The external context to be attached to the LoggerContext Returns: The LoggerContext."
config,"initialize public staticLoggerContextinitialize(Stringname, ClassLoaderloader, URIconfigLocation, Map.Entry<String,Object>entry) Initializes the Logging Context. Parameters: name - The Context name. loader - The ClassLoader for the Context (or null). configLocation - The configuration for the logging context (or null). entry - The external context entry to be attached to the LoggerContext Returns: The LoggerContext."
config,"initialize public staticLoggerContextinitialize(Stringname, ClassLoaderloader, List<URI>configLocations, ObjectexternalContext)"
config,"initialize public staticLoggerContextinitialize(Stringname, StringconfigLocation) Initializes the Logging Context. Parameters: name - The Context name. configLocation - The configuration for the logging context. Returns: The LoggerContext or null if an error occurred (check the status logger)."
config,initialize public staticLoggerContextinitialize(Configurationconfiguration) Initializes the Logging Context. Parameters: configuration - The Configuration. Returns: The LoggerContext.
config,"initialize public staticLoggerContextinitialize(ClassLoaderloader, Configurationconfiguration) Initializes the Logging Context. Parameters: loader - The ClassLoader. configuration - The Configuration. Returns: The LoggerContext."
config,"initialize public staticLoggerContextinitialize(ClassLoaderloader, Configurationconfiguration, ObjectexternalContext) Initializes the Logging Context. Parameters: loader - The ClassLoader. configuration - The Configuration. externalContext - - The external context to be attached to the LoggerContext. Returns: The LoggerContext."
config,reconfigure public staticvoidreconfigure(Configurationconfiguration) Reconfigure using an already constructed Configuration. Parameters: configuration - The configuration. Since: 2.13.0
config,reconfigure public staticvoidreconfigure() Reload the existing reconfiguration. Since: 2.12.0
config,reconfigure public staticvoidreconfigure(URIuri) Reconfigure with a potentially new configuration. Parameters: uri - The location of the configuration. Since: 2.12.0
config,"setAllLevels public staticvoidsetAllLevels(StringparentLogger, Levellevel) Sets the levels of parentLogger and all 'child' loggers to the given level. Parameters: parentLogger - the parent logger level - the new level"
config,"setLevel public staticLoggersetLevel(Loggerlogger, Levellevel) Sets a logger's level. Parameters: logger - the logger level - the new level Returns: the given logger"
config,"setLevel public staticvoidsetLevel(Class<?>clazz, Levellevel) Sets a logger's level. Parameters: clazz - the logger level - the new level"
config,"setLevel public staticvoidsetLevel(Map<String,Level>levelMap) Sets logger levels. Parameters: levelMap - a levelMap where keys are level names and values are new Levels."
config,"setLevel public staticvoidsetLevel(StringloggerName, Levellevel) Sets a logger's level. Parameters: loggerName - the logger name level - the new level"
config,"setLevel public staticvoidsetLevel(StringloggerName, Stringlevel) Sets a logger's level. Parameters: loggerName - the logger name level - the new level"
config,setRootLevel public staticvoidsetRootLevel(Levellevel) Sets the root logger's level. Parameters: level - the new level
config,"shutdown public staticvoidshutdown(LoggerContextctx) Shuts down the given logger context. This request does not wait for Log4j tasks to complete. Log4j starts threads to perform certain actions like file rollovers; calling this method will not wait until the rollover thread is done. When this method returns, these tasks' status are undefined, the tasks may be done or not. Parameters: ctx - the logger context to shut down, may be null."
config,"shutdown public staticbooleanshutdown(LoggerContextctx, longtimeout, TimeUnittimeUnit) Shuts down the given logger context. Log4j can start threads to perform certain actions like file rollovers; calling this method with a positive timeout will block until the rollover thread is done. Parameters: ctx - the logger context to shut down, may be null. timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the logger context terminated and false if the timeout elapsed before termination. Since: 2.7 See Also: LoggerContext.stop(long, TimeUnit)"
config,"LoggerContext.stop(long, TimeUnit)"
config,getFireTime publicDategetFireTime()
config,getDelay publiclonggetDelay(TimeUnitunit) Specified by: getDelayin interfaceDelayed
config,compareTo publicintcompareTo(Delayeddelayed) Specified by: compareToin interfaceComparable<V>
config,cancel publicbooleancancel(booleanmayInterruptIfRunning) Specified by: cancelin interfaceFuture<V>
config,isCancelled publicbooleanisCancelled() Specified by: isCancelledin interfaceFuture<V>
config,isDone publicbooleanisDone() Specified by: isDonein interfaceFuture<V>
config,"get publicVget() throws InterruptedException, ExecutionException Specified by: getin interfaceFuture<V> Throws: InterruptedException ExecutionException"
config,"get publicVget(longtimeout, TimeUnitunit) throws InterruptedException, ExecutionException, TimeoutException Specified by: getin interfaceFuture<V> Throws: InterruptedException ExecutionException TimeoutException"
config,"createLevel @PluginFactory public staticCustomLevelConfigcreateLevel(@PluginAttribute(""name"") StringlevelName, @PluginAttribute(""intLevel"") intintLevel) Creates a CustomLevelConfig object. This also defines the Level object with a call to Level.forName(String, int). Parameters: levelName - name of the custom level. intLevel - the intLevel that determines where this level resides relative to the built-in levels Returns: A CustomLevelConfig object."
config,getLevelName publicStringgetLevelName() Returns the custom level name. Returns: the custom level name
config,getIntLevel publicintgetIntLevel() Returns the custom level intLevel that determines the strength of the custom level relative to the built-in levels. Returns: the custom level intLevel
config,hashCode publicinthashCode() Overrides: hashCodein classObject
config,equals publicbooleanequals(Objectobject) Overrides: equalsin classObject
config,toString publicStringtoString() Overrides: toStringin classObject
config,"createCustomLevels @PluginFactory public staticCustomLevelscreateCustomLevels(@PluginElement(""CustomLevels"") CustomLevelConfig[]customLevels) Create a CustomLevels object to contain all the CustomLevelConfigs. Parameters: customLevels - An array of CustomLevelConfigs. Returns: A CustomLevels object."
config,getCustomLevels publicList<CustomLevelConfig>getCustomLevels() Returns a list of the CustomLevelConfig objects created during configuration. Returns: the configured custom levels
config,"advertise publicObjectadvertise(Map<String,String>properties) Does nothing. Specified by: advertisein interfaceAdvertiser Returns: null"
config,unadvertise publicvoidunadvertise(ObjectadvertisedObject) Does nothing. Specified by: unadvertisein interfaceAdvertiser Parameters: advertisedObject - the advertised object
config,doConfigure protectedvoiddoConfigure() Overrides: doConfigurein classAbstractConfiguration
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, StackTraceElementlocation, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:LocationAwareReliabilityStrategy Logs an event. Specified by: login interfaceLocationAwareReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. location - The location of the caller or null. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, LogEventevent) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active event - The log event."
config,getActiveLoggerConfig publicLoggerConfiggetActiveLoggerConfig(Supplier<LoggerConfig>next) Description copied from interface:ReliabilityStrategy For internal use by the ReliabilityStrategy; returns the LoggerConfig to use. Specified by: getActiveLoggerConfigin interfaceReliabilityStrategy Parameters: next - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active Returns: the currently active LoggerConfig
config,afterLogEvent publicvoidafterLogEvent() Description copied from interface:ReliabilityStrategy Called after a log event was logged. Specified by: afterLogEventin interfaceReliabilityStrategy
config,beforeStopAppenders publicvoidbeforeStopAppenders() Description copied from interface:ReliabilityStrategy Called before all appenders are stopped. Specified by: beforeStopAppendersin interfaceReliabilityStrategy
config,beforeStopConfiguration publicvoidbeforeStopConfiguration(Configurationconfiguration) Description copied from interface:ReliabilityStrategy Called before the configuration is stopped. Specified by: beforeStopConfigurationin interfaceReliabilityStrategy Parameters: configuration - the configuration that will be stopped
config,getLastModified publiclonggetLastModified() Description copied from interface:Watcher Returns the time the source was last modified or 0 if it is not available. Specified by: getLastModifiedin interfaceWatcher Specified by: getLastModifiedin classAbstractWatcher Returns: the time the source was last modified.
config,"isModified publicbooleanisModified() Description copied from interface:Watcher Periodically called to determine if the configuration has been modified. Specified by: isModifiedin interfaceWatcher Specified by: isModifiedin classAbstractWatcher Returns: true if the configuration was modified, false otherwise."
config,watching publicvoidwatching(Sourcesource) Description copied from interface:Watcher Called when the Watcher is registered. Specified by: watchingin interfaceWatcher Overrides: watchingin classAbstractWatcher Parameters: source - the Source that is being watched.
config,"newWatcher publicWatchernewWatcher(Reconfigurablereconfigurable, List<ConfigurationListener>listeners, longlastModifiedMillis) Description copied from interface:Watcher Creates a new Watcher by copying the original and using the new Reconfigurable and listeners. Parameters: reconfigurable - The Reconfigurable. listeners - the listeners. lastModifiedMillis - The time the resource was last modified in milliseconds. Returns: A new Watcher."
config,"log voidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, StackTraceElementlocation, Markermarker, Levellevel, Messagedata, Throwablet) Logs an event. Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. location - The location of the caller or null. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null. Since: 3.0"
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, StackTraceElementlocation, Markermarker, Levellevel, Messagedata, Throwablet) Description copied from interface:LocationAwareReliabilityStrategy Logs an event. Specified by: login interfaceLocationAwareReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. location - The location of the caller or null. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(Supplier<LoggerConfig>reconfigured, LogEventevent) Description copied from interface:ReliabilityStrategy Logs an event. Specified by: login interfaceReliabilityStrategy Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active event - The log event."
config,getActiveLoggerConfig publicLoggerConfiggetActiveLoggerConfig(Supplier<LoggerConfig>next) Description copied from interface:ReliabilityStrategy For internal use by the ReliabilityStrategy; returns the LoggerConfig to use. Specified by: getActiveLoggerConfigin interfaceReliabilityStrategy Parameters: next - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active Returns: the currently active LoggerConfig
config,afterLogEvent publicvoidafterLogEvent() Description copied from interface:ReliabilityStrategy Called after a log event was logged. Specified by: afterLogEventin interfaceReliabilityStrategy
config,beforeStopAppenders publicvoidbeforeStopAppenders() Description copied from interface:ReliabilityStrategy Called before all appenders are stopped. Specified by: beforeStopAppendersin interfaceReliabilityStrategy
config,beforeStopConfiguration publicvoidbeforeStopConfiguration(Configurationconfiguration) Description copied from interface:ReliabilityStrategy Called before the configuration is stopped. Specified by: beforeStopConfigurationin interfaceReliabilityStrategy Parameters: configuration - the configuration that will be stopped
config,isAdditivity publicbooleanisAdditivity()
config,withAdditivity publicBwithAdditivity(booleanadditivity)
config,getLevel publicLevelgetLevel()
config,withLevel publicBwithLevel(Levellevel)
config,getLevelAndRefs publicStringgetLevelAndRefs()
config,withLevelAndRefs publicBwithLevelAndRefs(StringlevelAndRefs)
config,getLoggerName publicStringgetLoggerName()
config,withLoggerName publicBwithLoggerName(StringloggerName)
config,getIncludeLocation publicStringgetIncludeLocation()
config,withIncludeLocation publicBwithIncludeLocation(StringincludeLocation)
config,getRefs publicAppenderRef[]getRefs()
config,withRefs publicBwithRefs(AppenderRef[]refs)
config,getProperties publicProperty[]getProperties()
config,withProperties publicBwithProperties(Property[]properties)
config,getConfig publicConfigurationgetConfig()
config,withConfig publicBwithConfig(Configurationconfig)
config,getFilter publicFiltergetFilter()
config,withtFilter @Deprecated publicBwithtFilter(Filterfilter) Deprecated. Use withFilter(Filter) instead
config,withFilter publicBwithFilter(Filterfilter)
config,build publicLoggerConfigbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends LoggerConfig.Builder<B>> Returns: the configured instance.
config,asBuilder publicBasBuilder()
config,newBuilder @PluginBuilderFactory public static<B extends LoggerConfig.Builder<B>>BnewBuilder()
config,getFilter publicFiltergetFilter() Description copied from class:AbstractFilterable Returns the Filter. Specified by: getFilterin interfaceFilterable Overrides: getFilterin classAbstractFilterable Returns: the Filter or null.
config,getName publicStringgetName() Returns the name of the LoggerConfig. Returns: the name of the LoggerConfig.
config,setParent publicvoidsetParent(LoggerConfigparent) Sets the parent of this LoggerConfig. Parameters: parent - the parent LoggerConfig.
config,getParent publicLoggerConfiggetParent() Returns the parent of this LoggerConfig. Returns: the LoggerConfig that is the parent of this one.
config,"addAppender publicvoidaddAppender(Appenderappender, Levellevel, Filterfilter) Adds an Appender to the LoggerConfig. Parameters: appender - The Appender to add. level - The Level to use. filter - A Filter for the Appender reference."
config,removeAppender publicvoidremoveAppender(Stringname) Removes the Appender with the specific name. Parameters: name - The name of the Appender.
config,"getAppenders publicMap<String,Appender>getAppenders() Returns all Appenders as a Map. Returns: a Map with the Appender name as the key and the Appender as the value."
config,clearAppenders protectedvoidclearAppenders() Removes all Appenders.
config,getAppenderRefs publicList<AppenderRef>getAppenderRefs() Returns the Appender references. Returns: a List of all the Appender names attached to this LoggerConfig.
config,setLevel publicvoidsetLevel(Levellevel) Sets the logging Level. Parameters: level - The logging Level.
config,getLevel publicLevelgetLevel() Returns the logging Level. Returns: the logging Level.
config,getExplicitLevel publicLevelgetExplicitLevel() Allows callers to determine the Level assigned to this LoggerConfig. Returns: the Level associated with this LoggerConfig or null if none is set.
config,getLogEventFactory publicLogEventFactorygetLogEventFactory() Returns the LogEventFactory. Returns: the LogEventFactory.
config,setLogEventFactory publicvoidsetLogEventFactory(LogEventFactorylogEventFactory) Sets the LogEventFactory. Usually the LogEventFactory will be this LoggerConfig. Parameters: logEventFactory - the LogEventFactory.
config,"isAdditive publicbooleanisAdditive() Returns the valid of the additive flag. Returns: true if the LoggerConfig is additive, false otherwise."
config,"setAdditive publicvoidsetAdditive(booleanadditive) Sets the additive setting. Parameters: additive - true if the LoggerConfig should be additive, false otherwise."
config,"isIncludeLocation publicbooleanisIncludeLocation() Returns the value of logger configuration attribute includeLocation, or, if no such attribute was configured, true if logging is synchronous or false if logging is asynchronous. Returns: whether location should be passed downstream"
config,"getProperties @Deprecated publicMap<Property,Boolean>getProperties() Deprecated. use getPropertyList() instead Returns an unmodifiable map with the configuration properties, or null if this LoggerConfig does not have any configuration properties. For each Property key in the map, the value is true if the property value has a variable that needs to be substituted. Returns: an unmodifiable map with the configuration properties, or null See Also: Configuration.getStrSubstitutor() StrSubstitutor"
config,Configuration.getStrSubstitutor()
config,StrSubstitutor
config,"getPropertyList publicList<Property>getPropertyList() Returns an unmodifiable list with the configuration properties, or null if this LoggerConfig does not have any configuration properties. Each Property in the list has an attribute valueNeedsLookup that is true if the property value has a variable that needs to be substituted. Returns: an unmodifiable list with the configuration properties, or null Since: 2.7 See Also: Configuration.getStrSubstitutor() StrSubstitutor"
config,Configuration.getStrSubstitutor()
config,StrSubstitutor
config,isPropertiesRequireLookup publicbooleanisPropertiesRequireLookup()
config,"log publicvoidlog(StringloggerName, Stringfqcn, Markermarker, Levellevel, Messagedata, Throwablet) Logs an event. Parameters: loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log publicvoidlog(StringloggerName, Stringfqcn, StackTraceElementlocation, Markermarker, Levellevel, Messagedata, Throwablet) Logs an event. Parameters: loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. location - the location of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,log publicvoidlog(LogEventevent) Logs an event. Parameters: event - The log event.
config,"log protectedvoidlog(LogEventevent, LoggerConfig.LoggerConfigPredicatepredicate) Logs an event. Parameters: event - The log event. predicate - predicate for which LoggerConfig instances to append to. A null value is equivalent to a true predicate."
config,"getReliabilityStrategy publicReliabilityStrategygetReliabilityStrategy() Returns the object responsible for ensuring log events are delivered to a working appender, even during or after a reconfiguration. Returns: the object responsible for delivery of log events to the appender"
config,"processLogEvent protectedvoidprocessLogEvent(LogEventevent, LoggerConfig.LoggerConfigPredicatepredicate) Logs an event, bypassing filters. Parameters: event - The log event. predicate - predicate for which LoggerConfig instances to append to. A null value is equivalent to a true predicate."
config,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
config,callAppenders protectedvoidcallAppenders(LogEventevent)
config,toString publicStringtoString() Overrides: toStringin classObject
config,"createLogger @Deprecated public staticLoggerConfigcreateLogger(Stringadditivity, Levellevel, @PluginAttribute(""name"") StringloggerName, StringincludeLocation, AppenderRef[]refs, Property[]properties, @PluginConfiguration Configurationconfig, Filterfilter) Deprecated. Deprecated in 2.7; use createLogger(boolean, Level, String, String, AppenderRef[], Property[], Configuration, Filter) Factory method to create a LoggerConfig. Parameters: additivity - True if additive, false otherwise. level - The Level to be associated with the Logger. loggerName - The name of the Logger. includeLocation - whether location should be passed downstream refs - An array of Appender names. properties - Properties to pass to the Logger. config - The Configuration. filter - A Filter. Returns: A new LoggerConfig."
config,"createLogger @Deprecated public staticLoggerConfigcreateLogger(@PluginAttribute(value=""additivity"",defaultBoolean=true) booleanadditivity, @PluginAttribute(""level"") Levellevel, @Required(message=""Loggers cannot be configured without a name"") @PluginAttribute(""name"") StringloggerName, @PluginAttribute(""includeLocation"") StringincludeLocation, @PluginElement(""AppenderRef"") AppenderRef[]refs, @PluginElement(""Properties"") Property[]properties, @PluginConfiguration Configurationconfig, @PluginElement(""Filter"") Filterfilter) Deprecated. Factory method to create a LoggerConfig. Parameters: additivity - true if additive, false otherwise. level - The Level to be associated with the Logger. loggerName - The name of the Logger. includeLocation - whether location should be passed downstream refs - An array of Appender names. properties - Properties to pass to the Logger. config - The Configuration. filter - A Filter. Returns: A new LoggerConfig. Since: 2.6"
config,includeLocation protected staticbooleanincludeLocation(StringincludeLocationConfigValue)
config,"includeLocation protected staticbooleanincludeLocation(StringincludeLocationConfigValue, Configurationconfiguration)"
config,hasAppenders protected finalbooleanhasAppenders()
config,"getLevelAndRefs protected staticLoggerConfig.LevelAndRefsgetLevelAndRefs(Levellevel, AppenderRef[]refs, StringlevelAndRefs, Configurationconfig)"
config,"values public staticLoggerConfig.LoggerConfigPredicate[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
config,valueOf public staticLoggerConfig.LoggerConfigPredicatevalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
config,isAdditivity publicbooleanisAdditivity()
config,withAdditivity publicBwithAdditivity(booleanadditivity)
config,getLevel publicLevelgetLevel()
config,withLevel publicBwithLevel(Levellevel)
config,getLevelAndRefs publicStringgetLevelAndRefs()
config,withLevelAndRefs publicBwithLevelAndRefs(StringlevelAndRefs)
config,getIncludeLocation publicStringgetIncludeLocation()
config,withIncludeLocation publicBwithIncludeLocation(StringincludeLocation)
config,getRefs publicAppenderRef[]getRefs()
config,withRefs publicBwithRefs(AppenderRef[]refs)
config,getProperties publicProperty[]getProperties()
config,withProperties publicBwithProperties(Property[]properties)
config,getConfig publicConfigurationgetConfig()
config,withConfig publicBwithConfig(Configurationconfig)
config,getFilter publicFiltergetFilter()
config,withtFilter publicBwithtFilter(Filterfilter)
config,build publicLoggerConfigbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends LoggerConfig.RootLogger.Builder<B>> Returns: the configured instance.
config,asBuilder publicBasBuilder()
config,newRootBuilder @PluginBuilderFactory public static<B extends LoggerConfig.RootLogger.Builder<B>> BnewRootBuilder()
config,"createLogger @Deprecated public staticLoggerConfigcreateLogger(@PluginAttribute(""additivity"") Stringadditivity, @PluginAttribute(""level"") Levellevel, @PluginAttribute(""includeLocation"") StringincludeLocation, @PluginElement(""AppenderRef"") AppenderRef[]refs, @PluginElement(""Properties"") Property[]properties, @PluginConfiguration Configurationconfig, @PluginElement(""Filter"") Filterfilter) Deprecated."
config,setLoggerContext voidsetLoggerContext(LoggerContextloggerContext) Injects the current LoggerContext into this object. Parameters: loggerContext - the current LoggerContext
config,"getMap publicConcurrentMap<String,LoggerConfig>getMap()"
config,getRoot publicLoggerConfiggetRoot()
config,"createLoggers @PluginFactory public staticLoggerscreateLoggers(@PluginElement(""Loggers"") LoggerConfig[]loggers) Create a Loggers object to contain all the Loggers. Parameters: loggers - An array of Loggers. Returns: A Loggers object."
config,setParent publicvoidsetParent(Nodeparent)
config,"getAttributes publicMap<String,String>getAttributes()"
config,getChildren publicList<Node>getChildren()
config,hasChildren publicbooleanhasChildren()
config,getValue publicStringgetValue()
config,setValue publicvoidsetValue(Stringvalue)
config,getParent publicNodegetParent()
config,getName publicStringgetName()
config,isRoot publicbooleanisRoot()
config,setObject publicvoidsetObject(Objectobj)
config,getObject public<T>TgetObject()
config,getObject public<T>TgetObject(Class<T>clazz) Returns this node's object cast to the given class. Type Parameters: T - the type to cast to. Parameters: clazz - the class to cast this node's object to. Returns: this node's object. Since: 2.1
config,isInstanceOf publicbooleanisInstanceOf(Class<?>clazz) Determines if this node's object is an instance of the given class. Parameters: clazz - the class to check. Returns: true if this node's object is an instance of the given class. Since: 2.1
config,getType publicPluginType<?>getType()
config,toString publicStringtoString() Overrides: toStringin classObject
config,getInstance public staticComparator<Class<?>>getInstance() Returns a singleton instance of this class. Returns: the singleton for this class.
config,"compare publicintcompare(Class<?>lhs, Class<?>rhs) Specified by: comparein interfaceComparator<Class<?>>"
config,"configureSubstitutor @PluginFactory public staticStrLookupconfigureSubstitutor(@PluginElement(""Properties"") Property[]properties, @PluginConfiguration Configurationconfig) Creates the Properties component. Parameters: properties - An array of Property elements. config - The Configuration. Returns: An Interpolator that includes the configuration properties."
config,getName publicStringgetName() Returns the property name. Returns: the property name.
config,"getRawValue publicStringgetRawValue() Returns the original raw property value without substitution. Returns: the raw value of the property, or empty string if it is not set."
config,getValue publicStringgetValue() Returns the property value. Returns: the value of the property.
config,"isValueNeedsLookup publicbooleanisValueNeedsLookup() Returns true if the value contains a substitutable property that requires a lookup to be resolved. Returns: true if the value contains ""${}"", false otherwise"
config,"evaluate publicStringevaluate(StrSubstitutorsubstitutor) Evaluate this property with the provided substitutor. If isValueNeedsLookup() is false, the value is returned, otherwise the raw value is evaluated with the given substitutor."
config,"createProperty public staticPropertycreateProperty(Stringname, Stringvalue) Creates a Property. Parameters: name - The key. value - The value. Returns: A Property."
config,"createProperty public staticPropertycreateProperty(Stringname, StringrawValue, Stringvalue) Creates a Property. Parameters: name - The key. rawValue - The value without any substitution applied. value - The value. Returns: A Property."
config,"createProperty @PluginFactory public staticPropertycreateProperty(@PluginAttribute(""name"") Stringname, @PluginValue(value=""value"",substitute=false) StringrawValue, @PluginConfiguration Configurationconfiguration) Creates a Property. Parameters: name - The key. rawValue - The value without any substitution applied. configuration - configuration used to resolve the property value from the rawValue Returns: A Property."
config,toString publicStringtoString() Overrides: toStringin classObject
config,reconfigure Configurationreconfigure()
config,"log voidlog(Supplier<LoggerConfig>reconfigured, StringloggerName, Stringfqcn, Markermarker, Levellevel, Messagedata, Throwablet) Logs an event. Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active loggerName - The name of the Logger. fqcn - The fully qualified class name of the caller. marker - A Marker or null if none is present. level - The event Level. data - The Message. t - A Throwable or null."
config,"log voidlog(Supplier<LoggerConfig>reconfigured, LogEventevent) Logs an event. Parameters: reconfigured - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active event - The log event."
config,getActiveLoggerConfig LoggerConfiggetActiveLoggerConfig(Supplier<LoggerConfig>next) For internal use by the ReliabilityStrategy; returns the LoggerConfig to use. Parameters: next - supplies the next LoggerConfig if the strategy's LoggerConfig is no longer active Returns: the currently active LoggerConfig
config,afterLogEvent voidafterLogEvent() Called after a log event was logged.
config,beforeStopAppenders voidbeforeStopAppenders() Called before all appenders are stopped.
config,beforeStopConfiguration voidbeforeStopConfiguration(Configurationconfiguration) Called before the configuration is stopped. Parameters: configuration - the configuration that will be stopped
config,"getReliabilityStrategy public staticReliabilityStrategygetReliabilityStrategy(LoggerConfigloggerConfig) Returns a new ReliabilityStrategy instance based on the value of system property log4j.ReliabilityStrategy. If not value was specified this method returns a new AwaitUnconditionallyReliabilityStrategy. Valid values for this system property are ""AwaitUnconditionally"" (use AwaitUnconditionallyReliabilityStrategy), ""Locking"" (use LockingReliabilityStrategy) and ""AwaitCompletion"" (use the default AwaitCompletionReliabilityStrategy). Users may also use this system property to specify the fully qualified class name of a class that implements the ReliabilityStrategy and has a constructor that accepts a single LoggerConfig argument. Parameters: loggerConfig - the LoggerConfig the resulting ReliabilityStrategy is associated with Returns: a ReliabilityStrategy that helps the specified LoggerConfig to log events reliably during or after a configuration change"
config,"createScripts @PluginFactory public staticAbstractScript[]createScripts(@PluginElement(""Scripts"") AbstractScript[]scripts) Return the array of scripts Parameters: scripts - An array of Scripts. Returns: The array of AbstractScripts."
config,isCondition booleanisCondition()
config,setClassName publicClassArbiter.BuildersetClassName(StringclassName) Sets the Class name. Parameters: className - the class name. Returns: this
config,asBuilder publicClassArbiter.BuilderasBuilder()
config,build publicClassArbiterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<ClassArbiter> Returns: the configured instance.
config,isCondition publicbooleanisCondition() Specified by: isConditionin interfaceArbiter
config,newBuilder @PluginBuilderFactory public staticClassArbiter.BuildernewBuilder()
config,asBuilder publicDefaultArbiter.BuilderasBuilder()
config,build publicDefaultArbiterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<DefaultArbiter> Returns: the configured instance.
config,isCondition publicbooleanisCondition() Always returns true since it is the default. Specified by: isConditionin interfaceArbiter
config,newBuilder @PluginBuilderFactory public staticDefaultArbiter.BuildernewBuilder()
config,setPropertyName publicEnvironmentArbiter.BuildersetPropertyName(StringpropertyName) Sets the Property Name. Parameters: propertyName - the property name. Returns: this
config,setPropertyValue publicEnvironmentArbiter.BuildersetPropertyValue(StringpropertyValue) Sets the Property Value. Parameters: propertyValue - the property value. Returns: this
config,asBuilder publicEnvironmentArbiter.BuilderasBuilder()
config,build publicEnvironmentArbiterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<EnvironmentArbiter> Returns: the configured instance.
config,isCondition publicbooleanisCondition() Returns true if either the environment variable is defined (it has any value) or the property value matches the requested value. Specified by: isConditionin interfaceArbiter
config,newBuilder @PluginBuilderFactory public staticEnvironmentArbiter.BuildernewBuilder()
config,setConfiguration publicScriptArbiter.BuildersetConfiguration(AbstractConfigurationconfiguration)
config,setNode publicScriptArbiter.BuildersetNode(Nodenode)
config,asBuilder publicScriptArbiter.BuilderasBuilder()
config,build publicScriptArbiterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<ScriptArbiter> Returns: the configured instance.
config,isCondition publicbooleanisCondition() Returns the boolean result of the Script. Specified by: isConditionin interfaceArbiter
config,newBuilder @PluginBuilderFactory public staticScriptArbiter.BuildernewBuilder()
config,asBuilder publicSelectArbiter.BuilderasBuilder()
config,build publicSelectArbiterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SelectArbiter> Returns: the configured instance.
config,evaluateConditions publicArbiterevaluateConditions(List<Arbiter>conditions)
config,newBuilder @PluginBuilderFactory public staticSelectArbiter.BuildernewBuilder()
config,setPropertyName publicSystemPropertyArbiter.BuildersetPropertyName(StringpropertyName) Sets the Property Name. Parameters: propertyName - the property name. Returns: this
config,setPropertyValue publicSystemPropertyArbiter.BuildersetPropertyValue(StringpropertyValue) Sets the Property Value. Parameters: propertyValue - the property value. Returns: this
config,asBuilder publicSystemPropertyArbiter.BuilderasBuilder()
config,build publicSystemPropertyArbiterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SystemPropertyArbiter> Returns: the configured instance.
config,isCondition publicbooleanisCondition() Returns true if either the property name is defined (it has any value) or the property value matches the requested value. Specified by: isConditionin interfaceArbiter
config,newBuilder @PluginBuilderFactory public staticSystemPropertyArbiter.BuildernewBuilder()
config,add AppenderComponentBuilderadd(LayoutComponentBuilderbuilder) Adds a Layout to the Appender component. Parameters: builder - The LayoutComponentBuilder with all of its attributes set. Returns: this builder.
config,getName StringgetName() Returns the name of the Appender. Specified by: getNamein interfaceComponentBuilder<AppenderComponentBuilder> Returns: the name of the Appender.
config,"addAttribute publicStringaddAttribute(Stringkey, StringnewValue)"
config,addComponent publicvoidaddComponent(Componentcomponent)
config,"getAttributes publicMap<String,String>getAttributes()"
config,getComponents publicList<Component>getComponents()
config,getPluginType publicStringgetPluginType()
config,getValue publicStringgetValue()
config,"addAttribute TaddAttribute(Stringkey, Stringvalue) Adds a String attribute. Parameters: key - The attribute key. value - The value of the attribute. Returns: This ComponentBuilder."
config,"addAttribute TaddAttribute(Stringkey, Levellevel) Adds a logging Level attribute. Parameters: key - The attribute key. level - The logging Level. Returns: This ComponentBuilder."
config,"addAttribute TaddAttribute(Stringkey, Enum<?>value) Adds an enumeration attribute. Parameters: key - The attribute key. value - The enumeration. Returns: This ComponentBuilder."
config,"addAttribute TaddAttribute(Stringkey, intvalue) Adds an integer attribute. Parameters: key - The attribute key. value - The integer value. Returns: This ComponentBuilder."
config,"addAttribute TaddAttribute(Stringkey, booleanvalue) Adds a boolean attribute. Parameters: key - The attribute key. value - The boolean value. Returns: This ComponentBuilder."
config,"addAttribute TaddAttribute(Stringkey, Objectvalue) Adds an Object attribute. Parameters: key - The attribute key. value - The object value. Returns: This ComponentBuilder."
config,addComponent TaddComponent(ComponentBuilder<?>builder) Adds a sub component. Parameters: builder - The Assembler for the subcomponent with all of its attributes and sub-components set. Returns: This ComponentBuilder (not the argument).
config,"getName StringgetName() Returns the name of the component, if any. Returns: The component's name or null if it doesn't have one."
config,getBuilder ConfigurationBuilder<? extends Configuration>getBuilder() Retrieves the ConfigurationBuilder. Returns: The ConfigurationBuilder.
config,add ConfigurationBuilder<T>add(ScriptComponentBuilderbuilder) Adds a ScriptComponent. Parameters: builder - The ScriptComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add ConfigurationBuilder<T>add(ScriptFileComponentBuilderbuilder) Adds a ScriptFileComponent. Parameters: builder - The ScriptFileComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add ConfigurationBuilder<T>add(AppenderComponentBuilderbuilder) Adds an AppenderComponent. Parameters: builder - The AppenderComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add ConfigurationBuilder<T>add(CustomLevelComponentBuilderbuilder) Adds a CustomLevel component. Parameters: builder - The CustomLevelComponentBuilder with all of its attributes set. Returns: this builder instance.
config,add ConfigurationBuilder<T>add(FilterComponentBuilderbuilder) Adds a Filter component. Parameters: builder - the FilterComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add ConfigurationBuilder<T>add(LoggerComponentBuilderbuilder) Adds a Logger component. Parameters: builder - The LoggerComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add ConfigurationBuilder<T>add(RootLoggerComponentBuilderbuilder) Adds the root Logger component. Parameters: builder - The RootLoggerComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,"addProperty ConfigurationBuilder<T>addProperty(Stringkey, Stringvalue) Adds a Property key and value. Parameters: key - The property key. value - The property value. Returns: this builder instance."
config,"newScript ScriptComponentBuildernewScript(Stringname, Stringlanguage, Stringtext) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. language - The script language text - The script to execute. Returns: A new ScriptComponentBuilder."
config,newScriptFile ScriptFileComponentBuildernewScriptFile(Stringpath) Returns a builder for creating Async Loggers. Parameters: path - The location of the script file. Returns: A new ScriptFileComponentBuilder.
config,"newScriptFile ScriptFileComponentBuildernewScriptFile(Stringname, Stringpath) Returns a builder for creating Async Loggers. Parameters: name - The name of the script file. path - The location of the script file. Returns: A new ScriptFileComponentBuilder."
config,"newAppender AppenderComponentBuildernewAppender(Stringname, StringpluginName) Returns a builder for creating Appenders. Parameters: name - The name of the Appender. pluginName - The Plugin type of the Appender. Returns: A new AppenderComponentBuilder."
config,newAppenderRef AppenderRefComponentBuildernewAppenderRef(Stringref) Returns a builder for creating AppenderRefs. Parameters: ref - The name of the Appender being referenced. Returns: A new AppenderRefComponentBuilder.
config,newAsyncLogger LoggerComponentBuildernewAsyncLogger(Stringname) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. Returns: A new LoggerComponentBuilder.
config,"newAsyncLogger LoggerComponentBuildernewAsyncLogger(Stringname, booleanincludeLocation) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger LoggerComponentBuildernewAsyncLogger(Stringname, Levellevel) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger LoggerComponentBuildernewAsyncLogger(Stringname, Levellevel, booleanincludeLocation) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger LoggerComponentBuildernewAsyncLogger(Stringname, Stringlevel) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger LoggerComponentBuildernewAsyncLogger(Stringname, Stringlevel, booleanincludeLocation) Returns a builder for creating Async Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,newAsyncRootLogger RootLoggerComponentBuildernewAsyncRootLogger() Returns a builder for creating the async root Logger. Returns: A new RootLoggerComponentBuilder.
config,newAsyncRootLogger RootLoggerComponentBuildernewAsyncRootLogger(booleanincludeLocation) Returns a builder for creating the async root Logger. Parameters: includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder.
config,newAsyncRootLogger RootLoggerComponentBuildernewAsyncRootLogger(Levellevel) Returns a builder for creating the async root Logger. Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newAsyncRootLogger RootLoggerComponentBuildernewAsyncRootLogger(Levellevel, booleanincludeLocation) Returns a builder for creating the async root Logger. Parameters: level - The logging Level to be assigned to the root Logger. includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder."
config,newAsyncRootLogger RootLoggerComponentBuildernewAsyncRootLogger(Stringlevel) Returns a builder for creating the async root Logger. Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newAsyncRootLogger RootLoggerComponentBuildernewAsyncRootLogger(Stringlevel, booleanincludeLocation) Returns a builder for creating the async root Logger. Parameters: level - The logging Level to be assigned to the root Logger. includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder."
config,newComponent <B extends ComponentBuilder<B>>ComponentBuilder<B>newComponent(StringpluginName) Returns a builder for creating generic components. Type Parameters: B - ComponentBuilder target type Parameters: pluginName - The Plugin type of the component. Returns: A new ComponentBuilder.
config,"newComponent <B extends ComponentBuilder<B>>ComponentBuilder<B>newComponent(Stringname, StringpluginName) Returns a builder for creating generic components. Type Parameters: B - ComponentBuilder target type Parameters: name - The name of the component (may be null). pluginName - The Plugin type of the component. Returns: A new ComponentBuilder."
config,"newComponent <B extends ComponentBuilder<B>>ComponentBuilder<B>newComponent(Stringname, StringpluginName, Stringvalue) Returns a builder for creating generic components. Type Parameters: B - ComponentBuilder target type Parameters: name - The name of the component (may be null). pluginName - The Plugin type of the component. value - The value of the component. Returns: A new ComponentBuilder."
config,"newProperty PropertyComponentBuildernewProperty(Stringname, Stringvalue) Returns a builder for creating Property:s Parameters: name - The name of the property. value - The value of the component. Returns: A new PropertyComponentBuilder."
config,"newKeyValuePair KeyValuePairComponentBuildernewKeyValuePair(Stringkey, Stringvalue) Returns a builder for creating KeyValuePair:s Parameters: key - The name value - The value Returns: A new KeyValuePairComponentBuilder."
config,"newCustomLevel CustomLevelComponentBuildernewCustomLevel(Stringname, intlevel) Returns a builder for creating CustomLevels Parameters: name - The name of the custom level. level - The integer value to be assigned to the level. Returns: A new CustomLevelComponentBuilder."
config,"newFilter FilterComponentBuildernewFilter(StringpluginName, Filter.ResultonMatch, Filter.ResultonMismatch) Returns a builder for creating Filters. Parameters: pluginName - The Plugin type of the Filter. onMatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" onMismatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" Returns: A new FilterComponentBuilder."
config,"newFilter FilterComponentBuildernewFilter(StringpluginName, StringonMatch, StringonMismatch) Returns a builder for creating Filters. Parameters: pluginName - The Plugin type of the Filter. onMatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" onMismatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" Returns: A new FilterComponentBuilder."
config,newLayout LayoutComponentBuildernewLayout(StringpluginName) Returns a builder for creating Layouts. Parameters: pluginName - The Plugin type of the Layout. Returns: A new LayoutComponentBuilder.
config,newLogger LoggerComponentBuildernewLogger(Stringname) Returns a builder for creating Loggers. Parameters: name - The name of the Logger. Returns: A new LoggerComponentBuilder.
config,"newLogger LoggerComponentBuildernewLogger(Stringname, booleanincludeLocation) Returns a builder for creating Loggers. Parameters: name - The name of the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newLogger LoggerComponentBuildernewLogger(Stringname, Levellevel) Returns a builder for creating Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newLogger LoggerComponentBuildernewLogger(Stringname, Levellevel, booleanincludeLocation) Returns a builder for creating Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newLogger LoggerComponentBuildernewLogger(Stringname, Stringlevel) Returns a builder for creating Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newLogger LoggerComponentBuildernewLogger(Stringname, Stringlevel, booleanincludeLocation) Returns a builder for creating Loggers. Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,newRootLogger RootLoggerComponentBuildernewRootLogger() Returns a builder for creating the root Logger. Returns: A new RootLoggerComponentBuilder.
config,newRootLogger RootLoggerComponentBuildernewRootLogger(booleanincludeLocation) Returns a builder for creating the root Logger. Parameters: includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder.
config,newRootLogger RootLoggerComponentBuildernewRootLogger(Levellevel) Returns a builder for creating the root Logger. Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newRootLogger RootLoggerComponentBuildernewRootLogger(Levellevel, booleanincludeLocation) Returns a builder for creating the root Logger. Parameters: level - The logging Level to be assigned to the root Logger. includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder."
config,newRootLogger RootLoggerComponentBuildernewRootLogger(Stringlevel) Returns a builder for creating the root Logger. Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newRootLogger RootLoggerComponentBuildernewRootLogger(Stringlevel, booleanincludeLocation) Returns a builder for creating the root Logger. Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder."
config,setAdvertiser ConfigurationBuilder<T>setAdvertiser(Stringadvertiser) Set the Advertiser Plugin name. Parameters: advertiser - The Advertiser Plugin name. Returns: this builder instance.
config,"setConfigurationName ConfigurationBuilder<T>setConfigurationName(Stringname) Sets the name of the configuration. Parameters: name - the name of the Configuration. By default is ""Constructed"". Returns: this builder instance."
config,"setConfigurationSource ConfigurationBuilder<T>setConfigurationSource(ConfigurationSourceconfigurationSource) Sets the configuration source, if one exists. Parameters: configurationSource - the ConfigurationSource. Returns: this builder instance."
config,setMonitorInterval ConfigurationBuilder<T>setMonitorInterval(StringintervalSeconds) Sets the interval at which the configuration file should be checked for changes. Parameters: intervalSeconds - The number of seconds that should pass between checks of the configuration file. Returns: this builder instance.
config,setPackages ConfigurationBuilder<T>setPackages(Stringpackages) Sets the list of packages to search for plugins. Parameters: packages - The comma separated list of packages. Returns: this builder instance.
config,"setShutdownHook ConfigurationBuilder<T>setShutdownHook(Stringflag) Sets whether the shutdown hook should be disabled. Parameters: flag - ""disable"" will prevent the shutdown hook from being set. Returns: this builder instance."
config,"setShutdownTimeout ConfigurationBuilder<T>setShutdownTimeout(longtimeout, TimeUnittimeUnit) How long appenders and background tasks will get to shutdown when the JVM shuts down. Default is zero which mean that each appender uses its default timeout, and don't wait for background tasks. Not all appenders will honor this, it is a hint and not an absolute guarantee that the shutdown procedure will not take longer. Setting this too low increase the risk of losing outstanding log events not yet written to the final destination. (Not used if setShutdownHook(String) is set to ""disable"".) Returns: this builder instance. See Also: LoggerContext.stop(long, TimeUnit)"
config,"LoggerContext.stop(long, TimeUnit)"
config,setStatusLevel ConfigurationBuilder<T>setStatusLevel(Levellevel) Sets the level of the StatusLogger. Parameters: level - The logging level. Returns: this builder instance.
config,"setVerbosity ConfigurationBuilder<T>setVerbosity(Stringverbosity) Sets whether the logging should include constructing Plugins. Parameters: verbosity - ""disable"" will hide messages from plugin construction. Returns: this builder instance."
config,"setDestination ConfigurationBuilder<T>setDestination(Stringdestination) Specifies the destination for StatusLogger events. This can be out (default) for using standard out, err for using standard error, or a file URI to which log events will be written. If the provided URI is invalid, then the default destination of standard out will be used. Parameters: destination - where status log messages should be output. Returns: this builder instance."
config,setLoggerContext voidsetLoggerContext(LoggerContextloggerContext) Sets the logger context. Parameters: loggerContext - the logger context.
config,"addRootProperty ConfigurationBuilder<T>addRootProperty(Stringkey, Stringvalue) Add the properties for the root node. Parameters: key - The property key. value - The property value. Returns: this builder instance."
config,"build Tbuild(booleaninitialize) Build the configuration and optionally initialize it. Parameters: initialize - true if the configuration should be initialized, false otherwise. Generally, Configurations should not be initialized when they are constructed. Returns: The constructed Configuration."
config,"writeXmlConfiguration voidwriteXmlConfiguration(OutputStreamoutput) throws IOException Constructs an XML configuration from this builder. Parameters: output - OutputStream to write to, will not be closed Throws: IOException Since: 2.7"
config,toXmlConfiguration StringtoXmlConfiguration() Constructs an XML configuration from this builder. Returns: XML configuration Since: 2.7
config,newConfigurationBuilder public staticConfigurationBuilder<BuiltConfiguration>newConfigurationBuilder() Returns a new default ConfigurationBuilder to construct Log4j configurations. Returns: A new ConfigurationBuilder.
config,newConfigurationBuilder public static<T extends BuiltConfiguration> ConfigurationBuilder<T>newConfigurationBuilder(Class<T>clazz)
config,add Tadd(FilterComponentBuilderassembler) Adds a Filter to the component. Parameters: assembler - The FilterComponentBuilder with all of its attributes and sub components set. Returns: this Assembler.
config,add Tadd(AppenderRefComponentBuilderassembler) Add an Appender reference to the Logger component. Parameters: assembler - The AppenderRefComponentBuilder with all of its attributes and sub-components set. Returns: this Assembler.
config,addLanguage ScriptFileComponentBuilderaddLanguage(Stringlanguage)
config,addIsWatched ScriptFileComponentBuilderaddIsWatched(booleanisWatched)
config,addIsWatched ScriptFileComponentBuilderaddIsWatched(StringisWatched)
config,addCharset ScriptFileComponentBuilderaddCharset(Stringcharset)
config,setup publicvoidsetup() Overrides: setupin classAbstractConfiguration
config,getContentType publicStringgetContentType()
config,setContentType publicvoidsetContentType(StringcontentType)
config,"createAdvertiser publicvoidcreateAdvertiser(StringadvertiserString, ConfigurationSourceconfigSource)"
config,getStatusConfiguration publicStatusConfigurationgetStatusConfiguration()
config,setPluginPackages publicvoidsetPluginPackages(Stringpackages)
config,setShutdownHook publicvoidsetShutdownHook(Stringflag)
config,setShutdownTimeoutMillis publicvoidsetShutdownTimeoutMillis(longshutdownTimeoutMillis)
config,setMonitorInterval publicvoidsetMonitorInterval(intintervalSeconds)
config,getPluginManager publicPluginManagergetPluginManager() Overrides: getPluginManagerin classAbstractConfiguration
config,"convertToNode protectedNodeconvertToNode(Nodeparent, Componentcomponent)"
config,"formatXml public staticvoidformatXml(Sourcesource, Resultresult) throws TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException Throws: TransformerConfigurationException TransformerFactoryConfigurationError TransformerException"
config,"add protectedConfigurationBuilder<T>add(Componentparent, ComponentBuilder<?>builder)"
config,add publicConfigurationBuilder<T>add(AppenderComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds an AppenderComponent. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - The AppenderComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add publicConfigurationBuilder<T>add(CustomLevelComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds a CustomLevel component. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - The CustomLevelComponentBuilder with all of its attributes set. Returns: this builder instance.
config,add publicConfigurationBuilder<T>add(FilterComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds a Filter component. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - the FilterComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add publicConfigurationBuilder<T>add(ScriptComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds a ScriptComponent. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - The ScriptComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add publicConfigurationBuilder<T>add(ScriptFileComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds a ScriptFileComponent. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - The ScriptFileComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add publicConfigurationBuilder<T>add(LoggerComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds a Logger component. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - The LoggerComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,add publicConfigurationBuilder<T>add(RootLoggerComponentBuilderbuilder) Description copied from interface:ConfigurationBuilder Adds the root Logger component. Specified by: addin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: builder - The RootLoggerComponentBuilder with all of its attributes and sub components set. Returns: this builder instance.
config,"addProperty publicConfigurationBuilder<T>addProperty(Stringkey, Stringvalue) Description copied from interface:ConfigurationBuilder Adds a Property key and value. Specified by: addPropertyin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: key - The property key. value - The property value. Returns: this builder instance."
config,build publicTbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<T extends BuiltConfiguration> Returns: the configured instance.
config,"build publicTbuild(booleaninitialize) Description copied from interface:ConfigurationBuilder Build the configuration and optionally initialize it. Specified by: buildin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: initialize - true if the configuration should be initialized, false otherwise. Generally, Configurations should not be initialized when they are constructed. Returns: The constructed Configuration."
config,"writeXmlConfiguration publicvoidwriteXmlConfiguration(OutputStreamoutput) throws IOException Description copied from interface:ConfigurationBuilder Constructs an XML configuration from this builder. Specified by: writeXmlConfigurationin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: output - OutputStream to write to, will not be closed Throws: IOException"
config,toXmlConfiguration publicStringtoXmlConfiguration() Description copied from interface:ConfigurationBuilder Constructs an XML configuration from this builder. Specified by: toXmlConfigurationin interfaceConfigurationBuilder<T extends BuiltConfiguration> Returns: XML configuration
config,"newScript publicScriptComponentBuildernewScript(Stringname, Stringlanguage, Stringtext) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newScriptin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. language - The script language text - The script to execute. Returns: A new ScriptComponentBuilder."
config,newScriptFile publicScriptFileComponentBuildernewScriptFile(Stringpath) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newScriptFilein interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: path - The location of the script file. Returns: A new ScriptFileComponentBuilder.
config,"newScriptFile publicScriptFileComponentBuildernewScriptFile(Stringname, Stringpath) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newScriptFilein interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the script file. path - The location of the script file. Returns: A new ScriptFileComponentBuilder."
config,"newAppender publicAppenderComponentBuildernewAppender(Stringname, Stringtype) Description copied from interface:ConfigurationBuilder Returns a builder for creating Appenders. Specified by: newAppenderin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Appender. type - The Plugin type of the Appender. Returns: A new AppenderComponentBuilder."
config,newAppenderRef publicAppenderRefComponentBuildernewAppenderRef(Stringref) Description copied from interface:ConfigurationBuilder Returns a builder for creating AppenderRefs. Specified by: newAppenderRefin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: ref - The name of the Appender being referenced. Returns: A new AppenderRefComponentBuilder.
config,newAsyncLogger publicLoggerComponentBuildernewAsyncLogger(Stringname) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newAsyncLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. Returns: A new LoggerComponentBuilder.
config,"newAsyncLogger publicLoggerComponentBuildernewAsyncLogger(Stringname, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newAsyncLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger publicLoggerComponentBuildernewAsyncLogger(Stringname, Levellevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newAsyncLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger publicLoggerComponentBuildernewAsyncLogger(Stringname, Levellevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newAsyncLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger publicLoggerComponentBuildernewAsyncLogger(Stringname, Stringlevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newAsyncLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newAsyncLogger publicLoggerComponentBuildernewAsyncLogger(Stringname, Stringlevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating Async Loggers. Specified by: newAsyncLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,newAsyncRootLogger publicRootLoggerComponentBuildernewAsyncRootLogger() Description copied from interface:ConfigurationBuilder Returns a builder for creating the async root Logger. Specified by: newAsyncRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Returns: A new RootLoggerComponentBuilder.
config,newAsyncRootLogger publicRootLoggerComponentBuildernewAsyncRootLogger(booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating the async root Logger. Specified by: newAsyncRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder.
config,newAsyncRootLogger publicRootLoggerComponentBuildernewAsyncRootLogger(Levellevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating the async root Logger. Specified by: newAsyncRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newAsyncRootLogger publicRootLoggerComponentBuildernewAsyncRootLogger(Levellevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating the async root Logger. Specified by: newAsyncRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder."
config,newAsyncRootLogger publicRootLoggerComponentBuildernewAsyncRootLogger(Stringlevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating the async root Logger. Specified by: newAsyncRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newAsyncRootLogger publicRootLoggerComponentBuildernewAsyncRootLogger(Stringlevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating the async root Logger. Specified by: newAsyncRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder."
config,newComponent public<B extends ComponentBuilder<B>> ComponentBuilder<B>newComponent(Stringtype) Description copied from interface:ConfigurationBuilder Returns a builder for creating generic components. Specified by: newComponentin interfaceConfigurationBuilder<T extends BuiltConfiguration> Type Parameters: B - ComponentBuilder target type Parameters: type - The Plugin type of the component. Returns: A new ComponentBuilder.
config,"newComponent public<B extends ComponentBuilder<B>> ComponentBuilder<B>newComponent(Stringname, Stringtype) Description copied from interface:ConfigurationBuilder Returns a builder for creating generic components. Specified by: newComponentin interfaceConfigurationBuilder<T extends BuiltConfiguration> Type Parameters: B - ComponentBuilder target type Parameters: name - The name of the component (may be null). type - The Plugin type of the component. Returns: A new ComponentBuilder."
config,"newComponent public<B extends ComponentBuilder<B>> ComponentBuilder<B>newComponent(Stringname, Stringtype, Stringvalue) Description copied from interface:ConfigurationBuilder Returns a builder for creating generic components. Specified by: newComponentin interfaceConfigurationBuilder<T extends BuiltConfiguration> Type Parameters: B - ComponentBuilder target type Parameters: name - The name of the component (may be null). type - The Plugin type of the component. value - The value of the component. Returns: A new ComponentBuilder."
config,"newProperty publicPropertyComponentBuildernewProperty(Stringname, Stringvalue) Description copied from interface:ConfigurationBuilder Returns a builder for creating Property:s Specified by: newPropertyin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the property. value - The value of the component. Returns: A new PropertyComponentBuilder."
config,"newKeyValuePair publicKeyValuePairComponentBuildernewKeyValuePair(Stringkey, Stringvalue) Description copied from interface:ConfigurationBuilder Returns a builder for creating KeyValuePair:s Specified by: newKeyValuePairin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: key - The name value - The value Returns: A new KeyValuePairComponentBuilder."
config,"newCustomLevel publicCustomLevelComponentBuildernewCustomLevel(Stringname, intlevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating CustomLevels Specified by: newCustomLevelin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the custom level. level - The integer value to be assigned to the level. Returns: A new CustomLevelComponentBuilder."
config,"newFilter publicFilterComponentBuildernewFilter(Stringtype, Filter.ResultonMatch, Filter.ResultonMismatch) Description copied from interface:ConfigurationBuilder Returns a builder for creating Filters. Specified by: newFilterin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: type - The Plugin type of the Filter. onMatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" onMismatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" Returns: A new FilterComponentBuilder."
config,"newFilter publicFilterComponentBuildernewFilter(Stringtype, StringonMatch, StringonMismatch) Description copied from interface:ConfigurationBuilder Returns a builder for creating Filters. Specified by: newFilterin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: type - The Plugin type of the Filter. onMatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" onMismatch - ""ACCEPT"", ""DENY"", or ""NEUTRAL"" Returns: A new FilterComponentBuilder."
config,newLayout publicLayoutComponentBuildernewLayout(Stringtype) Description copied from interface:ConfigurationBuilder Returns a builder for creating Layouts. Specified by: newLayoutin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: type - The Plugin type of the Layout. Returns: A new LayoutComponentBuilder.
config,newLogger publicLoggerComponentBuildernewLogger(Stringname) Description copied from interface:ConfigurationBuilder Returns a builder for creating Loggers. Specified by: newLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. Returns: A new LoggerComponentBuilder.
config,"newLogger publicLoggerComponentBuildernewLogger(Stringname, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating Loggers. Specified by: newLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newLogger publicLoggerComponentBuildernewLogger(Stringname, Levellevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating Loggers. Specified by: newLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newLogger publicLoggerComponentBuildernewLogger(Stringname, Levellevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating Loggers. Specified by: newLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,"newLogger publicLoggerComponentBuildernewLogger(Stringname, Stringlevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating Loggers. Specified by: newLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. Returns: A new LoggerComponentBuilder."
config,"newLogger publicLoggerComponentBuildernewLogger(Stringname, Stringlevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating Loggers. Specified by: newLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - The name of the Logger. level - The logging Level to be assigned to the Logger. includeLocation - If true include location information. Returns: A new LoggerComponentBuilder."
config,newRootLogger publicRootLoggerComponentBuildernewRootLogger() Description copied from interface:ConfigurationBuilder Returns a builder for creating the root Logger. Specified by: newRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Returns: A new RootLoggerComponentBuilder.
config,newRootLogger publicRootLoggerComponentBuildernewRootLogger(booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating the root Logger. Specified by: newRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder.
config,newRootLogger publicRootLoggerComponentBuildernewRootLogger(Levellevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating the root Logger. Specified by: newRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newRootLogger publicRootLoggerComponentBuildernewRootLogger(Levellevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating the root Logger. Specified by: newRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. includeLocation - If true include location information. Returns: A new RootLoggerComponentBuilder."
config,newRootLogger publicRootLoggerComponentBuildernewRootLogger(Stringlevel) Description copied from interface:ConfigurationBuilder Returns a builder for creating the root Logger. Specified by: newRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder.
config,"newRootLogger publicRootLoggerComponentBuildernewRootLogger(Stringlevel, booleanincludeLocation) Description copied from interface:ConfigurationBuilder Returns a builder for creating the root Logger. Specified by: newRootLoggerin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging Level to be assigned to the root Logger. Returns: A new RootLoggerComponentBuilder."
config,setAdvertiser publicConfigurationBuilder<T>setAdvertiser(Stringadvertiser) Description copied from interface:ConfigurationBuilder Set the Advertiser Plugin name. Specified by: setAdvertiserin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: advertiser - The Advertiser Plugin name. Returns: this builder instance.
config,"setConfigurationName publicConfigurationBuilder<T>setConfigurationName(Stringname) Set the name of the configuration. Specified by: setConfigurationNamein interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: name - the name of the Configuration. By default is ""Assembled"". Returns: this builder instance"
config,setConfigurationSource publicConfigurationBuilder<T>setConfigurationSource(ConfigurationSourceconfigurationSource) Set the ConfigurationSource. Specified by: setConfigurationSourcein interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: configurationSource - the ConfigurationSource Returns: this builder instance
config,setMonitorInterval publicConfigurationBuilder<T>setMonitorInterval(StringintervalSeconds) Description copied from interface:ConfigurationBuilder Sets the interval at which the configuration file should be checked for changes. Specified by: setMonitorIntervalin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: intervalSeconds - The number of seconds that should pass between checks of the configuration file. Returns: this builder instance.
config,setPackages publicConfigurationBuilder<T>setPackages(Stringpackages) Description copied from interface:ConfigurationBuilder Sets the list of packages to search for plugins. Specified by: setPackagesin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: packages - The comma separated list of packages. Returns: this builder instance.
config,"setShutdownHook publicConfigurationBuilder<T>setShutdownHook(Stringflag) Description copied from interface:ConfigurationBuilder Sets whether the shutdown hook should be disabled. Specified by: setShutdownHookin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: flag - ""disable"" will prevent the shutdown hook from being set. Returns: this builder instance."
config,"setShutdownTimeout publicConfigurationBuilder<T>setShutdownTimeout(longtimeout, TimeUnittimeUnit) Description copied from interface:ConfigurationBuilder How long appenders and background tasks will get to shutdown when the JVM shuts down. Default is zero which mean that each appender uses its default timeout, and don't wait for background tasks. Not all appenders will honor this, it is a hint and not an absolute guarantee that the shutdown procedure will not take longer. Setting this too low increase the risk of losing outstanding log events not yet written to the final destination. (Not used if ConfigurationBuilder.setShutdownHook(String) is set to ""disable"".) Specified by: setShutdownTimeoutin interfaceConfigurationBuilder<T extends BuiltConfiguration> Returns: this builder instance. See Also: LoggerContext.stop(long, TimeUnit)"
config,"LoggerContext.stop(long, TimeUnit)"
config,setStatusLevel publicConfigurationBuilder<T>setStatusLevel(Levellevel) Description copied from interface:ConfigurationBuilder Sets the level of the StatusLogger. Specified by: setStatusLevelin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: level - The logging level. Returns: this builder instance.
config,"setVerbosity @Deprecated publicConfigurationBuilder<T>setVerbosity(Stringverbosity) Deprecated. This method is ineffective and only kept for binary backward compatibility. Description copied from interface:ConfigurationBuilder Sets whether the logging should include constructing Plugins. Specified by: setVerbosityin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: verbosity - ""disable"" will hide messages from plugin construction. Returns: this builder instance."
config,"setDestination publicConfigurationBuilder<T>setDestination(Stringdestination) Description copied from interface:ConfigurationBuilder Specifies the destination for StatusLogger events. This can be out (default) for using standard out, err for using standard error, or a file URI to which log events will be written. If the provided URI is invalid, then the default destination of standard out will be used. Specified by: setDestinationin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: destination - where status log messages should be output. Returns: this builder instance."
config,setLoggerContext publicvoidsetLoggerContext(LoggerContextloggerContext) Description copied from interface:ConfigurationBuilder Sets the logger context. Specified by: setLoggerContextin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: loggerContext - the logger context.
config,"addRootProperty publicConfigurationBuilder<T>addRootProperty(Stringkey, Stringvalue) Description copied from interface:ConfigurationBuilder Add the properties for the root node. Specified by: addRootPropertyin interfaceConfigurationBuilder<T extends BuiltConfiguration> Parameters: key - The property key. value - The property value. Returns: this builder instance."
config,setup publicvoidsetup() Overrides: setupin classAbstractConfiguration
config,reconfigure publicConfigurationreconfigure() Specified by: reconfigurein interfaceReconfigurable
config,toString publicStringtoString() Overrides: toStringin classObject
config,"mergeRootProperties publicvoidmergeRootProperties(NoderootNode, AbstractConfigurationconfiguration) Merge the root properties. Specified by: mergeRootPropertiesin interfaceMergeStrategy Parameters: rootNode - The composite root node. configuration - The configuration to merge."
config,"mergConfigurations publicvoidmergConfigurations(Nodetarget, Nodesource, PluginManagerpluginManager) Merge the source Configuration into the target Configuration. Specified by: mergConfigurationsin interfaceMergeStrategy Parameters: target - The target node to merge into. source - The source node. pluginManager - The PluginManager."
config,"mergeRootProperties voidmergeRootProperties(NoderootNode, AbstractConfigurationconfiguration) Merge the root node properties into the configuration. Parameters: rootNode - The composite root node. configuration - The configuration to merge."
config,"mergConfigurations voidmergConfigurations(Nodetarget, Nodesource, PluginManagerpluginManager) Merge the soure node tree into the target node tree. Parameters: target - The target Node tree. source - The source Node tree."
config,getObjectMapper protectedcom.fasterxml.jackson.databind.ObjectMappergetObjectMapper()
config,setup publicvoidsetup() Overrides: setupin classAbstractConfiguration
config,reconfigure publicConfigurationreconfigure() Specified by: reconfigurein interfaceReconfigurable
config,toString publicStringtoString() Overrides: toStringin classObject
config,isActive protectedbooleanisActive() Overrides: isActivein classConfigurationFactory
config,"getConfiguration publicConfigurationgetConfiguration(LoggerContextloggerContext, ConfigurationSourcesource) Specified by: getConfigurationin classConfigurationFactory"
config,getSupportedTypes publicString[]getSupportedTypes() Specified by: getSupportedTypesin classConfigurationFactory
config,parseBase64Binary public staticbyte[]parseBase64Binary(Stringencoded)
config,"fromMillis public static<D extends Date>DfromMillis(longmillis, Class<D>type) Create a Date-related object from a timestamp in millis. Type Parameters: D - date class to use Parameters: millis - timestamp in millis type - date type to use Returns: new instance of D or null if there was an error"
config,convert publicEconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<E extends Enum<E>> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,parseHexBinary public staticbyte[]parseHexBinary(Strings)
config,convert Tconvert(Strings) throws Exception Converts a String to a given type. Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: Exception - thrown when a conversion error occurs
config,getInstance public staticTypeConverterRegistrygetInstance() Gets the singleton instance of the TypeConverterRegistry. Returns: the singleton instance.
config,"findCompatibleConverter publicTypeConverter<?>findCompatibleConverter(Typetype) Finds a TypeConverter for the given Type, falling back to an assignment-compatible TypeConverter if none exist for the given type. That is, if the given Type does not have a TypeConverter, but another Type which can be assigned to the given Type does have a TypeConverter, then that TypeConverter will be used and registered. Parameters: type - the Type to find a TypeConverter for (must not be null). Returns: a TypeConverter for the given Type. Throws: UnknownFormatConversionException - if no TypeConverter can be found for the given type."
config,convert publicBigDecimalconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<BigDecimal> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicBigIntegerconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<BigInteger> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicBooleanconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Boolean> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicbyte[]convert(Stringvalue) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<byte[]> Parameters: value - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicByteconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Byte> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicCharacterconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Character> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicchar[]convert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<char[]> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicCharsetconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Charset> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicClass<?>convert(Strings) throws ClassNotFoundException Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Class<?>> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: ClassNotFoundException
config,convert publicCronExpressionconvert(Strings) throws Exception Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<CronExpression> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: Exception - thrown when a conversion error occurs
config,convert publicDoubleconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Double> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicDurationconvert(Strings) Deprecated. Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Duration> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicFileconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<File> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicFloatconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Float> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicInetAddressconvert(Strings) throws Exception Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<InetAddress> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: Exception - thrown when a conversion error occurs
config,convert publicIntegerconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Integer> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,"convert public static<T>Tconvert(Strings, Class<? extends T>clazz, ObjectdefaultValue) Converts a String to a given class if a TypeConverter is available for that class. Falls back to the provided default value if the conversion is unsuccessful. However, if the default value is also invalid, then null is returned (along with a nasty status log message). Parameters: s - the string to convert clazz - the class to try to convert the string to defaultValue - the fallback object to use if the conversion is unsuccessful Returns: the converted object which may be null if the string is invalid for the given type Throws: NullPointerException - if clazz is null IllegalArgumentException - if no TypeConverter exists for the given class"
config,convert publicLevelconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Level> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicLongconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Long> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicPathconvert(Strings) throws Exception Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Path> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: Exception - thrown when a conversion error occurs
config,convert publicPatternconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Pattern> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicProviderconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Provider> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicShortconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<Short> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicStringconvert(Strings) Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<String> Parameters: s - the String to convert. Cannot be null. Returns: the converted object.
config,convert publicURIconvert(Strings) throws URISyntaxException Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<URI> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: URISyntaxException
config,convert publicURLconvert(Strings) throws MalformedURLException Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<URL> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: MalformedURLException
config,convert publicUUIDconvert(Strings) throws Exception Description copied from interface:TypeConverter Converts a String to a given type. Specified by: convertin interfaceTypeConverter<UUID> Parameters: s - the String to convert. Cannot be null. Returns: the converted object. Throws: Exception - thrown when a conversion error occurs
config,"getAllCategories publicMap<String,Map<String,PluginEntry>>getAllCategories() Returns all categories of plugins in this cache. Returns: all categories of plugins in this cache. Since: 2.1"
config,"getCategory publicMap<String,PluginEntry>getCategory(Stringcategory) Gets or creates a category of plugins. Parameters: category - name of category to look up. Returns: plugin mapping of names to plugin entries."
config,writeCache publicvoidwriteCache(OutputStreamos) throws IOException Stores the plugin cache to a given OutputStream. Parameters: os - destination to save cache to. Throws: IOException - if an I/O exception occurs.
config,"loadCacheFiles publicvoidloadCacheFiles(Enumeration<URL>resources) throws IOException Loads and merges all the Log4j plugin cache files specified. Usually, this is obtained via a ClassLoader. Parameters: resources - URLs to all the desired plugin cache files to load. Throws: IOException - if an I/O exception occurs."
config,size publicintsize() Gets the number of plugin categories registered. Returns: number of plugin categories in cache.
config,getKey publicStringgetKey()
config,setKey publicvoidsetKey(Stringkey)
config,getClassName publicStringgetClassName()
config,setClassName publicvoidsetClassName(StringclassName)
config,getName publicStringgetName()
config,setName publicvoidsetName(Stringname)
config,isPrintable publicbooleanisPrintable()
config,setPrintable publicvoidsetPrintable(booleanprintable)
config,isDefer publicbooleanisDefer()
config,setDefer publicvoidsetDefer(booleandefer)
config,getCategory publicStringgetCategory()
config,setCategory publicvoidsetCategory(Stringcategory)
config,toString publicStringtoString() Overrides: toStringin classObject
config,getSupportedSourceVersion publicSourceVersiongetSupportedSourceVersion() Specified by: getSupportedSourceVersionin interfaceProcessor Overrides: getSupportedSourceVersionin classAbstractProcessor
config,"process publicbooleanprocess(Set<? extends TypeElement>annotations, RoundEnvironmentroundEnv) Specified by: processin interfaceProcessor Specified by: processin classAbstractProcessor"
config,withConfiguration publicPluginBuilderwithConfiguration(Configurationconfiguration) Specifies the Configuration to use for constructing the plugin instance. Parameters: configuration - the configuration to use. Returns: this
config,withConfigurationNode publicPluginBuilderwithConfigurationNode(Nodenode) Specifies the Node corresponding to the plugin object that will be created. Parameters: node - the plugin configuration node to use. Returns: this
config,forLogEvent publicPluginBuilderforLogEvent(LogEventevent) Specifies the LogEvent that may be used to provide extra context for string substitutions. Parameters: event - the event to use for extra information. Returns: this
config,build publicObjectbuild() Builds the plugin object. Specified by: buildin interfaceBuilder<Object> Returns: the plugin object or null if there was a problem creating it.
config,"validateFields public staticbooleanvalidateFields(Builder<?>builder, StringerrorPrefix)"
config,"main @Deprecated public staticvoidmain(String[]args) Deprecated. Use PluginProcessor instead. To do so, simply include log4j-core in your dependencies and make sure annotation processing is not disabled. By default, supported Java compilers will automatically use that plugin processor provided log4j-core is on the classpath. Process annotated plugins."
config,addPackage @Deprecated public staticvoidaddPackage(Stringp) Deprecated. Adds a package name to be scanned for plugins. Must be invoked prior to plugins being collected. Parameters: p - The package name. Ignored if null or empty.
config,addPackages @Deprecated public staticvoidaddPackages(Collection<String>packages) Deprecated. Adds a list of package names to be scanned for plugins. Convenience method for addPackage(String). Parameters: packages - collection of package names to add. Empty and null package names are ignored.
config,getPluginType publicPluginType<?>getPluginType(Stringname) Returns the type of a specified plugin. Parameters: name - The name of the plugin. Returns: The plugin's type.
config,"getPlugins publicMap<String,PluginType<?>>getPlugins() Returns all the matching plugins. Returns: A Map containing the name of the plugin and its type."
config,collectPlugins publicvoidcollectPlugins() Locates all the plugins.
config,collectPlugins publicvoidcollectPlugins(List<String>packages) Locates all the plugins including search of specific packages. Warns about name collisions. Parameters: packages - the list of packages to scan for plugins Since: 2.1
config,getInstance public staticPluginRegistrygetInstance() Returns the global PluginRegistry instance. Returns: the global PluginRegistry instance. Since: 2.1
config,clear publicvoidclear() Resets the registry to an empty state.
config,"getPluginsByCategoryByBundleId publicMap<Long,Map<String,List<PluginType<?>>>>getPluginsByCategoryByBundleId() Since: 2.1"
config,"loadFromMainClassLoader publicMap<String,List<PluginType<?>>>loadFromMainClassLoader() Since: 2.1"
config,clearBundlePlugins publicvoidclearBundlePlugins(longbundleId) Since: 2.1
config,"loadFromBundle publicMap<String,List<PluginType<?>>>loadFromBundle(longbundleId, ClassLoaderloader) Since: 2.1"
config,"loadFromPackage publicMap<String,List<PluginType<?>>>loadFromPackage(Stringpkg) Since: 2.1"
config,"matches publicbooleanmatches(Class<?>type) Description copied from interface:ResolverUtil.Test Will be called repeatedly with candidate classes. Must return True if a class is to be included in the results, false otherwise. Specified by: matchesin interfaceResolverUtil.Test Parameters: type - The Class to match against. Returns: true if the Class matches."
config,toString publicStringtoString() Overrides: toStringin classObject
config,matches publicbooleanmatches(URIresource) Description copied from interface:ResolverUtil.Test Test for a resource. Specified by: matchesin interfaceResolverUtil.Test Parameters: resource - The URI to the resource. Returns: true if the resource matches.
config,doesMatchClass publicbooleandoesMatchClass() Specified by: doesMatchClassin interfaceResolverUtil.Test
config,doesMatchResource publicbooleandoesMatchResource() Specified by: doesMatchResourcein interfaceResolverUtil.Test
config,getPluginClass publicClass<T>getPluginClass()
config,getElementName publicStringgetElementName()
config,getKey publicStringgetKey() Since: 2.1
config,isObjectPrintable publicbooleanisObjectPrintable()
config,isDeferChildren publicbooleanisDeferChildren()
config,getCategory publicStringgetCategory() Since: 2.1
config,toString publicStringtoString() Overrides: toStringin classObject
config,"collectPluginsByCategory public staticMap<String,PluginType<?>>collectPluginsByCategory(Stringcategory) Shortcut for collecting plugins matching with the given category."
config,"collectPluginsByCategoryAndPackage public staticMap<String,PluginType<?>>collectPluginsByCategoryAndPackage(Stringcategory, List<String>packages) Short for collecting plugins matching with the given category in provided packages."
config,instantiatePlugin public static<V>VinstantiatePlugin(Class<V>pluginClass) Instantiates the given plugin using its no-arg PluginFactory-annotated static method. Throws: IllegalStateException - if instantiation fails
config,findPluginFactoryMethod public staticMethodfindPluginFactoryMethod(Class<?>pluginClass) Finds the PluginFactory-annotated static method of the given class. Throws: IllegalStateException - if no such method could be found
config,"getClasses publicSet<Class<?>>getClasses() Provides access to the classes discovered so far. If no calls have been made to any of the find() methods, this set will be empty. Returns: the set of classes that have been discovered."
config,getResources publicSet<URI>getResources() Returns the matching resources. Returns: A Set of URIs that match the criteria.
config,"getClassLoader publicClassLoadergetClassLoader() Returns the ClassLoader that will be used for scanning for classes. If no explicit ClassLoader has been set by the calling, the context class loader will be used. Returns: the ClassLoader that will be used to scan for classes"
config,setClassLoader publicvoidsetClassLoader(ClassLoaderaClassloader) Sets an explicit ClassLoader that should be used when scanning for classes. If none is set then the context ClassLoader will be used. Parameters: aClassloader - a ClassLoader to use when scanning for classes
config,"find publicvoidfind(ResolverUtil.Testtest, String...packageNames) Attempts to discover classes that pass the test. Accumulated classes can be accessed by calling getClasses(). Parameters: test - the test to determine matching classes packageNames - one or more package names to scan (including subpackages) for classes"
config,"findInPackage publicvoidfindInPackage(ResolverUtil.Testtest, StringpackageName) Scans for classes starting at the package provided and descending into subpackages. Each class is offered up to the Test as it is discovered, and if the Test returns true the class is retained. Accumulated classes can be fetched by calling getClasses(). Parameters: test - an instance of ResolverUtil.Test that will be used to filter classes packageName - the name of the package from which to start scanning for classes, e.g. net.sourceforge.stripes"
config,"addIfMatching protectedvoidaddIfMatching(ResolverUtil.Testtest, Stringfqn) Add the class designated by the fully qualified class name provided to the set of resolved classes if and only if it is approved by the Test supplied. Parameters: test - the test used to determine if the class matches fqn - the fully qualified name of a class"
config,"matches booleanmatches(Class<?>type) Will be called repeatedly with candidate classes. Must return True if a class is to be included in the results, false otherwise. Parameters: type - The Class to match against. Returns: true if the Class matches."
config,matches booleanmatches(URIresource) Test for a resource. Parameters: resource - The URI to the resource. Returns: true if the resource matches.
config,doesMatchClass booleandoesMatchClass()
config,doesMatchResource booleandoesMatchResource()
config,initialize voidinitialize(Aannotation) Called before this validator is used with the constraint annotation value. Parameters: annotation - the annotation value this validator will be validating.
config,"isValid booleanisValid(Stringname, Objectvalue) Indicates if the given value is valid. Parameters: name - the name to use for error reporting value - the value to validate. Returns: true if the given value is valid."
config,findValidators public staticCollection<ConstraintValidator<?>>findValidators(Annotation...annotations) Finds all relevant ConstraintValidator objects from an array of annotations. All validators will be initialized before being returned. Parameters: annotations - the annotations to find constraint validators for Returns: a collection of ConstraintValidators for the given annotations
config,initialize publicvoidinitialize(NotBlankanAnnotation) Description copied from interface:ConstraintValidator Called before this validator is used with the constraint annotation value. Specified by: initializein interfaceConstraintValidator<NotBlank> Parameters: anAnnotation - the annotation value this validator will be validating.
config,"isValid publicbooleanisValid(Stringname, Objectvalue) Description copied from interface:ConstraintValidator Indicates if the given value is valid. Specified by: isValidin interfaceConstraintValidator<NotBlank> Parameters: name - the name to use for error reporting value - the value to validate. Returns: true if the given value is valid."
config,initialize publicvoidinitialize(RequiredanAnnotation) Description copied from interface:ConstraintValidator Called before this validator is used with the constraint annotation value. Specified by: initializein interfaceConstraintValidator<Required> Parameters: anAnnotation - the annotation value this validator will be validating.
config,"isValid publicbooleanisValid(Stringname, Objectvalue) Description copied from interface:ConstraintValidator Indicates if the given value is valid. Specified by: isValidin interfaceConstraintValidator<Required> Parameters: name - the name to use for error reporting value - the value to validate. Returns: true if the given value is valid."
config,initialize publicvoidinitialize(ValidHostannotation) Description copied from interface:ConstraintValidator Called before this validator is used with the constraint annotation value. Specified by: initializein interfaceConstraintValidator<ValidHost> Parameters: annotation - the annotation value this validator will be validating.
config,"isValid publicbooleanisValid(Stringname, Objectvalue) Description copied from interface:ConstraintValidator Indicates if the given value is valid. Specified by: isValidin interfaceConstraintValidator<ValidHost> Parameters: name - the name to use for error reporting value - the value to validate. Returns: true if the given value is valid."
config,initialize publicvoidinitialize(ValidPortannotation) Description copied from interface:ConstraintValidator Called before this validator is used with the constraint annotation value. Specified by: initializein interfaceConstraintValidator<ValidPort> Parameters: annotation - the annotation value this validator will be validating.
config,"isValid publicbooleanisValid(Stringname, Objectvalue) Description copied from interface:ConstraintValidator Indicates if the given value is valid. Specified by: isValidin interfaceConstraintValidator<ValidPort> Parameters: name - the name to use for error reporting value - the value to validate. Returns: true if the given value is valid."
config,"setAnnotation publicPluginVisitor<A>setAnnotation(AnnotationanAnnotation) Description copied from interface:PluginVisitor Sets the Annotation to be used for this. If the given Annotation is not compatible with this class's type, then it is ignored. Specified by: setAnnotationin interfacePluginVisitor<A extends Annotation> Parameters: anAnnotation - the Annotation instance. Returns: this."
config,"setAliases publicPluginVisitor<A>setAliases(String...someAliases) Description copied from interface:PluginVisitor Sets the list of aliases to use for this visit. No aliases are required, however. Specified by: setAliasesin interfacePluginVisitor<A extends Annotation> Parameters: someAliases - the list of aliases to use. Returns: this."
config,setConversionType publicPluginVisitor<A>setConversionType(Class<?>aConversionType) Description copied from interface:PluginVisitor Sets the class to convert the plugin value to on this visit. This should correspond with a class obtained from a factory method or builder class field. Not all PluginVisitor implementations may need this value. Specified by: setConversionTypein interfacePluginVisitor<A extends Annotation> Parameters: aConversionType - the type to convert the plugin string to (if applicable). Returns: this.
config,setStrSubstitutor publicPluginVisitor<A>setStrSubstitutor(StrSubstitutoraSubstitutor) Description copied from interface:PluginVisitor Sets the StrSubstitutor to use for converting raw strings before type conversion. Generally obtained from a Configuration. Specified by: setStrSubstitutorin interfacePluginVisitor<A extends Annotation> Parameters: aSubstitutor - the StrSubstitutor to use on plugin values. Returns: this.
config,"setMember publicPluginVisitor<A>setMember(MemberaMember) Description copied from interface:PluginVisitor Sets the Member that this visitor is being used for injection upon. For instance, this could be the Field that is being used for injecting a value, or it could be the factory method being used to inject parameters into. Specified by: setMemberin interfacePluginVisitor<A extends Annotation> Parameters: aMember - the member this visitor is parsing a value for. Returns: this."
config,"removeAttributeValue protected staticStringremoveAttributeValue(Map<String,String>attributes, Stringname, String...aliases) Removes an Entry from a given Map using a key name and aliases for that key. Keys are case-insensitive. Parameters: attributes - the Map to remove an Entry from. name - the key name to look up. aliases - optional aliases of the key name to look up. Returns: the value corresponding to the given key or null if nonexistent."
config,"convert protectedObjectconvert(Stringvalue, ObjectdefaultValue) Converts the given value into the configured type falling back to the provided default value. Parameters: value - the value to convert. defaultValue - the fallback value to use in case of no value or an error. Returns: the converted value whether that be based on the given value or the default value."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"visit publicObjectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Description copied from interface:PluginVisitor Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"setAnnotation PluginVisitor<A>setAnnotation(Annotationannotation) Sets the Annotation to be used for this. If the given Annotation is not compatible with this class's type, then it is ignored. Parameters: annotation - the Annotation instance. Returns: this. Throws: NullPointerException - if the argument is null."
config,"setAliases PluginVisitor<A>setAliases(String...aliases) Sets the list of aliases to use for this visit. No aliases are required, however. Parameters: aliases - the list of aliases to use. Returns: this."
config,setConversionType PluginVisitor<A>setConversionType(Class<?>conversionType) Sets the class to convert the plugin value to on this visit. This should correspond with a class obtained from a factory method or builder class field. Not all PluginVisitor implementations may need this value. Parameters: conversionType - the type to convert the plugin string to (if applicable). Returns: this. Throws: NullPointerException - if the argument is null.
config,setStrSubstitutor PluginVisitor<A>setStrSubstitutor(StrSubstitutorsubstitutor) Sets the StrSubstitutor to use for converting raw strings before type conversion. Generally obtained from a Configuration. Parameters: substitutor - the StrSubstitutor to use on plugin values. Returns: this. Throws: NullPointerException - if the argument is null.
config,"setMember PluginVisitor<A>setMember(Membermember) Sets the Member that this visitor is being used for injection upon. For instance, this could be the Field that is being used for injecting a value, or it could be the factory method being used to inject parameters into. Parameters: member - the member this visitor is parsing a value for. Returns: this."
config,"visit Objectvisit(Configurationconfiguration, Nodenode, LogEventevent, StringBuilderlog) Visits a Node to obtain a value for constructing a Plugin object. Parameters: configuration - the current Configuration. node - the current Node corresponding to the Plugin object being created. event - the current LogEvent that caused this Plugin object to be made (optional). log - the StringBuilder being used to build a debug message. Returns: the converted value to be used for Plugin creation."
config,"findVisitor public staticPluginVisitor<? extends Annotation>findVisitor(Class<? extends Annotation>annotation) Creates a PluginVisitor instance for the given annotation class using metadata provided by the annotation's PluginVisitorStrategy annotation. This instance must be further populated with data to be useful. Such data is passed through both the setters and the visit method. Parameters: annotation - the Plugin annotation class to find a PluginVisitor for. Returns: a PluginVisitor instance if one could be created, or null otherwise."
config,reconfigure publicConfigurationreconfigure() Specified by: reconfigurein interfaceReconfigurable
config,setRootProperties publicPropertiesConfigurationBuildersetRootProperties(PropertiesrootProperties)
config,setConfigurationSource publicPropertiesConfigurationBuildersetConfigurationSource(ConfigurationSourcesource)
config,build publicPropertiesConfigurationbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<PropertiesConfiguration> Returns: the configured instance.
config,setLoggerContext publicPropertiesConfigurationBuildersetLoggerContext(LoggerContextloggerContext)
config,getLoggerContext publicLoggerContextgetLoggerContext()
config,getSupportedTypes protectedString[]getSupportedTypes() Specified by: getSupportedTypesin classConfigurationFactory
config,"getConfiguration publicPropertiesConfigurationgetConfiguration(LoggerContextloggerContext, ConfigurationSourcesource) Specified by: getConfigurationin classConfigurationFactory"
config,error @Deprecated publicvoiderror(Stringmessage) Deprecated. Use StatusLogger.getLogger() and then AbstractLogger.error(String) instead. Logs an error message to the StatusLogger. Parameters: message - error message to log
config,"withDestination publicStatusConfigurationwithDestination(@Nullable Stringdestination) Sets the output of the StatusLogger fallback listener. Accepted values are as follows: out (i.e., System.out) err (i.e., System.err) a URI (e.g., file:///path/to/log4j-status-logs.txt) Invalid values will be ignored. Parameters: destination - destination where StatusLogger messages should be output Returns: this"
config,"out (i.e., System.out)"
config,"err (i.e., System.err)"
config,"a URI (e.g., file:///path/to/log4j-status-logs.txt)"
config,withStatus publicStatusConfigurationwithStatus(@Nullable Stringlevel) Sets the level of the StatusLogger fallback listener. Parameters: level - a level name Returns: this
config,withStatus publicStatusConfigurationwithStatus(@Nullable Levellevel) Sets the level of the StatusLogger fallback listener. Parameters: level - a level Returns: this
config,withVerbosity @Deprecated publicStatusConfigurationwithVerbosity(Stringverbosity) Deprecated. This method is ineffective and only kept for binary backward compatibility. Specifies the verbosity level to log at. This only applies to classes configured by verboseClasses. Parameters: verbosity - basic filter for status logger messages. Returns: this
config,withVerboseClasses @Deprecated publicStatusConfigurationwithVerboseClasses(String...verboseClasses) Deprecated. This method is ineffective and only kept for binary backward compatibility. Specifies which class names to filter if the configured verbosity level is QUIET. Parameters: verboseClasses - names of classes to filter if not using VERBOSE. Returns: this
config,initialize publicvoidinitialize() Configures and initializes the StatusLogger using the configured options in this instance.
config,"values public staticStatusConfiguration.Verbosity[]values() Deprecated. Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
config,valueOf public staticStatusConfiguration.VerbosityvalueOf(Stringname) Deprecated. Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
config,"toVerbosity @Deprecated public staticStatusConfiguration.VerbositytoVerbosity(Stringvalue) Deprecated. This class is not used anymore and only kept for binary backward compatibility. Parses the verbosity property into an enum. Parameters: value - property value to parse. Returns: enum corresponding to value, or QUIET by default."
config,setup publicvoidsetup() Overrides: setupin classAbstractConfiguration
config,reconfigure publicConfigurationreconfigure() Specified by: reconfigurein interfaceReconfigurable
config,toString publicStringtoString() Overrides: toStringin classObject
config,"getConfiguration publicConfigurationgetConfiguration(LoggerContextloggerContext, ConfigurationSourcesource) Returns the Configuration. Specified by: getConfigurationin classConfigurationFactory Parameters: loggerContext - The logger context. source - The InputSource. Returns: The Configuration."
config,getSupportedTypes publicString[]getSupportedTypes() Returns the file suffixes for XML files. Specified by: getSupportedTypesin classConfigurationFactory Returns: An array of File extensions.
config,getObjectMapper protectedcom.fasterxml.jackson.databind.ObjectMappergetObjectMapper() Overrides: getObjectMapperin classJsonConfiguration
config,reconfigure publicConfigurationreconfigure() Specified by: reconfigurein interfaceReconfigurable Overrides: reconfigurein classJsonConfiguration
config,isActive protectedbooleanisActive() Overrides: isActivein classConfigurationFactory
config,"getConfiguration publicConfigurationgetConfiguration(LoggerContextloggerContext, ConfigurationSourcesource) Specified by: getConfigurationin classConfigurationFactory"
config,getSupportedTypes publicString[]getSupportedTypes() Specified by: getSupportedTypesin classConfigurationFactory
filter,getOnMatch publicFilter.ResultgetOnMatch()
filter,getOnMismatch publicFilter.ResultgetOnMismatch()
filter,setOnMatch publicBsetOnMatch(Filter.ResultonMatch) Sets the Result to return when the filter matches. Defaults to Result.NEUTRAL. Parameters: onMatch - the Result to return when the filter matches. Returns: this
filter,setOnMismatch publicBsetOnMismatch(Filter.ResultonMismatch) Sets the Result to return when the filter does not match. The default is Result.DENY. Parameters: onMismatch - the Result to return when the filter does not match. Returns: this
filter,asBuilder publicBasBuilder()
filter,equalsImpl protectedbooleanequalsImpl(Objectobj) Overrides: equalsImplin classAbstractLifeCycle
filter,filter publicFilter.Resultfilter(LogEventevent) Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering. Since: 2.7"
filter,getOnMatch public finalFilter.ResultgetOnMatch() Returns the Result to be returned when a match occurs. Specified by: getOnMatchin interfaceFilter Returns: the onMatch Result.
filter,getOnMismatch public finalFilter.ResultgetOnMismatch() Returns the Result to be returned when a match does not occur. Specified by: getOnMismatchin interfaceFilter Returns: the onMismatch Result.
filter,hashCodeImpl protectedinthashCodeImpl() Overrides: hashCodeImplin classAbstractLifeCycle
filter,toString publicStringtoString() Overrides: toStringin classObject
filter,asBuilder publicBasBuilder()
filter,getFilter publicFiltergetFilter()
filter,getPropertyArray publicProperty[]getPropertyArray()
filter,setFilter publicBsetFilter(Filterfilter)
filter,setPropertyArray publicBsetPropertyArray(Property[]properties)
filter,withFilter @Deprecated publicBwithFilter(Filterfilter) Deprecated. Use setFilter(Filter). Sets the filter. Parameters: filter - The filter Returns: this
filter,addFilter publicvoidaddFilter(Filterfilter) Adds a filter. Specified by: addFilterin interfaceFilterable Parameters: filter - The Filter to add.
filter,getFilter publicFiltergetFilter() Returns the Filter. Specified by: getFilterin interfaceFilterable Returns: the Filter or null.
filter,hasFilter publicbooleanhasFilter() Determines if a Filter is present. Specified by: hasFilterin interfaceFilterable Returns: false if no Filter is present.
filter,isFiltered publicbooleanisFiltered(LogEventevent) Determine if the LogEvent should be processed or ignored. Specified by: isFilteredin interfaceFilterable Parameters: event - The LogEvent. Returns: true if the LogEvent should be processed.
filter,removeFilter publicvoidremoveFilter(Filterfilter) Removes a Filter. Specified by: removeFilterin interfaceFilterable Parameters: filter - The Filter to remove.
filter,start publicvoidstart() Make the Filter available for use. Specified by: startin interfaceLifeCycle Overrides: startin classAbstractLifeCycle
filter,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Cleanup the Filter. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
filter,"stop protectedbooleanstop(longtimeout, TimeUnittimeUnit, booleanchangeLifeCycleState) Cleanup the Filter."
filter,getPropertyArray publicProperty[]getPropertyArray()
filter,setLevel publicBurstFilter.BuildersetLevel(Levellevel) Sets the logging level to use. Parameters: level - the logging level to use. Returns: this
filter,setRate publicBurstFilter.BuildersetRate(floatrate) Sets the average number of events per second to allow. Parameters: rate - the average number of events per second to allow. This must be a positive number. Returns: this
filter,setMaxBurst publicBurstFilter.BuildersetMaxBurst(longmaxBurst) Sets the maximum number of events that can occur before events are filtered for exceeding the average rate. Parameters: maxBurst - Sets the maximum number of events that can occur before events are filtered for exceeding the average rate. The default is 10 times the rate. Returns: this
filter,build publicBurstFilterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<BurstFilter> Returns: the configured instance.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,getAvailable publicintgetAvailable() Returns the number of available slots. Used for unit testing. Returns: The number of available slots.
filter,clear publicvoidclear() Clear the history. Used for unit testing.
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,newBuilder @PluginBuilderFactory public staticBurstFilter.BuildernewBuilder()
filter,addFilter publicCompositeFilteraddFilter(Filterfilter)
filter,removeFilter publicCompositeFilterremoveFilter(Filterfilter)
filter,iterator publicIterator<Filter>iterator() Specified by: iteratorin interfaceIterable<Filter>
filter,getFilters @Deprecated publicList<Filter>getFilters() Deprecated. Use getFiltersArray() Gets a new list over the internal filter array. Returns: a new list over the internal filter array
filter,getFiltersArray publicFilter[]getFiltersArray()
filter,isEmpty publicbooleanisEmpty() Returns whether this composite contains any filters. Returns: whether this composite contains any filters.
filter,size publicintsize()
filter,start publicvoidstart() Specified by: startin interfaceLifeCycle Overrides: startin classAbstractLifeCycle
filter,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
filter,getOnMismatch publicFilter.ResultgetOnMismatch() Returns the result that should be returned when the filter does not match the event. Specified by: getOnMismatchin interfaceFilter Returns: the Result that should be returned when the filter does not match the event.
filter,getOnMatch publicFilter.ResultgetOnMatch() Returns the result that should be returned when the filter matches the event. Specified by: getOnMatchin interfaceFilter Returns: the Result that should be returned when the filter matches the event.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. params - An array of parameters or null. Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - String text to filter on. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - Any Object. t - A Throwable or null. Returns: the Result."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Filter an event. Specified by: filterin interfaceFilter Parameters: logger - The Logger. level - The event logging Level. marker - The Marker for the event or null. msg - The Message t - A Throwable or null. Returns: the Result."
filter,filter publicFilter.Resultfilter(LogEventevent) Filter an event. Specified by: filterin interfaceFilter Parameters: event - The Event to filter on. Returns: the Result.
filter,toString publicStringtoString() Overrides: toStringin classObject
filter,"createFilters @PluginFactory public staticCompositeFiltercreateFilters(@PluginElement(""Filters"") Filter[]filters) Creates a CompositeFilter. Parameters: filters - An array of Filters to call. Returns: The CompositeFilter."
filter,build publicDenyAllFilterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<DenyAllFilter> Returns: the configured instance.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,newBuilder @PluginBuilderFactory public staticDenyAllFilter.BuildernewBuilder()
filter,"createFilter @PluginFactory public staticDynamicThresholdFiltercreateFilter(@PluginAttribute(""key"") Stringkey, @PluginElement(""Pairs"") KeyValuePair[]pairs, @PluginAttribute(""defaultThreshold"") LeveldefaultThreshold, @PluginAttribute(""onMatch"") Filter.ResultonMatch, @PluginAttribute(""onMismatch"") Filter.ResultonMismatch) Creates a DynamicThresholdFilter. Parameters: key - The name of the key to compare. pairs - An array of value and Level pairs. defaultThreshold - The default Level. onMatch - The action to perform if a match occurs. onMismatch - The action to perform if no match occurs. Returns: The DynamicThresholdFilter."
filter,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,getKey publicStringgetKey()
filter,"getLevelMap publicMap<String,Level>getLevelMap()"
filter,hashCode publicinthashCode() Overrides: hashCodein classObject
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,addFilter voidaddFilter(Filterfilter) Adds a new Filter. If a Filter already exists it is converted to a CompositeFilter. Parameters: filter - The Filter to add.
filter,removeFilter voidremoveFilter(Filterfilter) Removes a Filter. Parameters: filter - The Filter to remove.
filter,getFilter FiltergetFilter() Returns an Iterator for all the Filters. Returns: an Iterator for all the Filters.
filter,"hasFilter booleanhasFilter() Determine if a Filter is present. Returns: true if a Filter is present, false otherwise."
filter,"isFiltered booleanisFiltered(LogEventevent) Determines if the event should be filtered. Parameters: event - The LogEvent. Returns: true if the event should be filtered, false otherwise."
filter,setLevel publicLevelMatchFilter.BuildersetLevel(Levellevel) Sets the logging level to use. Parameters: level - the logging level to use. Returns: this
filter,build publicLevelMatchFilterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<LevelMatchFilter> Returns: the configured instance.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,newBuilder @PluginBuilderFactory public staticLevelMatchFilter.BuildernewBuilder()
filter,"createFilter @PluginFactory public staticLevelRangeFiltercreateFilter(@PluginAttribute(""minLevel"") LevelminLevel, @PluginAttribute(""maxLevel"") LevelmaxLevel, @PluginAttribute(""onMatch"") Filter.ResultonMatch, @PluginAttribute(""onMismatch"") Filter.ResultonMismatch) Creates an instance with the provided properties. Parameters: minLevel - the minimum level threshold maxLevel - the maximum level threshold onMatch - the result to return on a match onMismatch - the result to return on a mismatch Returns: a new instance"
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,getMinLevel publicLevelgetMinLevel() Returns: the minimum level threshold
filter,getMaxLevel publicLevelgetMaxLevel() Returns: the maximum level threshold
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter protectedbooleanfilter(MapMessage<?,?>mapMessage)"
filter,"filter protectedbooleanfilter(Map<String,String>data)"
filter,filter protectedbooleanfilter(ReadOnlyStringMapdata)
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,isAnd protectedbooleanisAnd()
filter,"getMap @Deprecated protectedMap<String,List<String>>getMap() Deprecated. use getStringMap() instead"
filter,getStringMap protectedIndexedReadOnlyStringMapgetStringMap() Returns the IndexedStringMap with List<String> values that this MapFilter was constructed with. Returns: the IndexedStringMap with List<String> values to match against Since: 2.8
filter,"createFilter @PluginFactory public staticMapFiltercreateFilter(@PluginElement(""Pairs"") KeyValuePair[]pairs, @PluginAttribute(""operator"") Stringoper, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch)"
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,"createFilter @PluginFactory public staticMarkerFiltercreateFilter(@PluginAttribute(""marker"") Stringmarker, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch) Creates the MarkerFilter. Parameters: marker - The Marker name to match. match - The action to take if a match occurs. mismatch - The action to take if no match occurs. Returns: A MarkerFilter."
filter,setConfiguration publicMutableThreadContextMapFilter.BuildersetConfiguration(Configurationconfiguration) Sets the Configuration. Parameters: configuration - The Configuration. Returns: this.
filter,setPollInterval publicMutableThreadContextMapFilter.BuildersetPollInterval(longpollInterval) Set the frequency in seconds that changes to the list a ThreadContext valudes should be checked. Parameters: pollInterval - interval in seconds to check the file for changes. Returns: this.
filter,setConfigLocation publicMutableThreadContextMapFilter.BuildersetConfigLocation(StringconfigLocation) Sets the configuration to use. Parameters: configLocation - the location of the configuration. Returns: this
filter,build publicMutableThreadContextMapFilterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<MutableThreadContextMapFilter> Returns: the configured instance.
filter,onEvent voidonEvent()
filter,start publicvoidstart() Specified by: startin interfaceLifeCycle Overrides: startin classAbstractLifeCycle
filter,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
filter,registerListener publicvoidregisterListener(MutableThreadContextMapFilter.FilterConfigUpdateListenerlistener)
filter,newBuilder @PluginBuilderFactory public staticMutableThreadContextMapFilter.BuildernewBuilder()
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,build publicNoMarkerFilterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<NoMarkerFilter> Returns: the configured instance.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,newBuilder @PluginBuilderFactory public staticNoMarkerFilter.BuildernewBuilder()
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,"createFilter @PluginFactory public staticRegexFiltercreateFilter(@PluginAttribute(""regex"") Stringregex, @PluginElement(""PatternFlags"") String[]patternFlags, @PluginAttribute(""useRawMsg"") BooleanuseRawMsg, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch) throws IllegalArgumentException, IllegalAccessException Creates a Filter that matches a regular expression. Parameters: regex - The regular expression to match. patternFlags - An array of Strings where each String is a Pattern.compile(String, int) compilation flag. useRawMsg - If true, for ParameterizedMessage, StringFormattedMessage, and MessageFormatMessage, the message format pattern; for StructuredDataMessage, the message field will be used as the match target. match - The action to perform when a match occurs. mismatch - The action to perform when a mismatch occurs. Returns: The RegexFilter. Throws: IllegalAccessException - When there is no access to the definition of the specified member. IllegalArgumentException - When passed an illegal or inappropriate argument."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,"createFilter @PluginFactory public staticScriptFiltercreateFilter(@PluginElement(""Script"") AbstractScriptscript, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch, @PluginConfiguration Configurationconfiguration) Creates the ScriptFilter. Parameters: script - The script to run. The script must return a boolean value. Either script or scriptFile must be provided. match - The action to take if a match occurs. mismatch - The action to take if no match occurs. configuration - the configuration Returns: A ScriptFilter."
filter,setMatchString publicStringMatchFilter.BuildersetMatchString(Stringtext) Sets the logging level to use. Parameters: text - the logging level to use Returns: this
filter,build publicStringMatchFilterbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<StringMatchFilter> Returns: the configured instance.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,newBuilder @PluginBuilderFactory public staticStringMatchFilter.BuildernewBuilder()
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,filter protectedFilter.Resultfilter(StructuredDataMessagemessage)
filter,"createFilter @PluginFactory public staticStructuredDataFiltercreateFilter(@PluginElement(""Pairs"") KeyValuePair[]pairs, @PluginAttribute(""operator"") Stringoper, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch) Creates the StructuredDataFilter. Parameters: pairs - Key and value pairs. oper - The operator to perform. If not ""or"" the operation will be an ""and"". match - The action to perform on a match. mismatch - The action to perform on a mismatch. Returns: The StructuredDataFilter."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classMapFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,"createFilter @PluginFactory public staticThreadContextMapFiltercreateFilter(@PluginElement(""Pairs"") KeyValuePair[]pairs, @PluginAttribute(""operator"") Stringoper, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch)"
filter,"filter publicFilter.Resultfilter(Loggerlogger, LeveltestLevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. testLevel - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, LeveltestLevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. testLevel - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, LeveltestLevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. testLevel - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,getLevel publicLevelgetLevel()
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,"createFilter @PluginFactory public staticThresholdFiltercreateFilter(@PluginAttribute(""level"") Levellevel, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch) Creates a ThresholdFilter. Parameters: level - The log Level. match - The action to take on a match. mismatch - The action to take on a mismatch. Returns: The created ThresholdFilter."
filter,filter publicFilter.Resultfilter(LogEventevent) Description copied from class:AbstractFilter Context Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: event - The LogEvent. Returns: The Result of filtering.
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Messagemsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Objectmsg, Throwablet) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. t - A throwable or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Object...params) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. params - An array of parameters or null. Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters Returns: The Result of filtering."
filter,"filter publicFilter.Resultfilter(Loggerlogger, Levellevel, Markermarker, Stringmsg, Objectp0, Objectp1, Objectp2, Objectp3, Objectp4, Objectp5, Objectp6, Objectp7, Objectp8, Objectp9) Description copied from class:AbstractFilter Appender Filter method. The default returns NEUTRAL. Specified by: filterin interfaceFilter Overrides: filterin classAbstractFilter Parameters: logger - the Logger. level - The logging Level. marker - The Marker, if any. msg - The message, if present. p0 - the message parameters p1 - the message parameters p2 - the message parameters p3 - the message parameters p4 - the message parameters p5 - the message parameters p6 - the message parameters p7 - the message parameters p8 - the message parameters p9 - the message parameters Returns: The Result of filtering."
filter,toString publicStringtoString() Overrides: toStringin classAbstractFilter
filter,"createFilter @PluginFactory public staticTimeFiltercreateFilter(@PluginAttribute(""start"") Stringstart, @PluginAttribute(""end"") Stringend, @PluginAttribute(""timezone"") Stringtz, @PluginAttribute(""onMatch"") Filter.Resultmatch, @PluginAttribute(""onMismatch"") Filter.Resultmismatch) Creates a TimeFilter. Parameters: start - The start time. end - The end time. tz - timezone. match - Action to perform if the time matches. mismatch - Action to perform if the action does not match. Returns: A TimeFilter."
filter,"getConfigs publicMap<String,String[]>getConfigs()"
filter,"setConfig publicvoidsetConfig(Map<String,String[]>configs)"
impl,createContextData public staticStringMapcreateContextData()
impl,createContextData public staticStringMapcreateContextData(intinitialCapacity)
impl,"createContextData public staticStringMapcreateContextData(Map<String,String>context)"
impl,createContextData public staticStringMapcreateContextData(ReadOnlyStringMapreadOnlyStringMap)
impl,emptyFrozenContextData public staticStringMapemptyFrozenContextData() An empty pre-frozen IndexedStringMap. The returned object may be shared. Returns: an empty pre-frozen IndexedStringMap
impl,"createInjector public staticContextDataInjectorcreateInjector() Returns a new ContextDataInjector instance based on the value of system property log4j2.ContextDataInjector. If no value was specified this factory method returns one of the ContextDataInjector classes defined in ThreadContextDataInjector which is most appropriate for the ThreadContext implementation. Note: It is no longer recommended that users provide a custom implementation of the ContextDataInjector. Instead, provide a ContextDataProvider. Users may use this system property to specify the fully qualified class name of a class that implements the ContextDataInjector interface. When providing a custom ContextDataInjector, be aware that this method may be invoked multiple times by the various components in Log4j that need access to context data. This includes the object(s) that populate log events, but also various lookups and filters that look at context data to determine whether an event should be logged. Returns: a ContextDataInjector that populates the ReadOnlyStringMap of all LogEvent objects See Also: LogEvent.getContextData() ContextDataInjector"
impl,LogEvent.getContextData()
impl,ContextDataInjector
impl,getInstance public staticDefaultLogEventFactorygetInstance()
impl,"createEvent publicLogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, Levellevel, Messagedata, List<Property>properties, Throwablet) Creates a log event. Specified by: createEventin interfaceLogEventFactory Parameters: loggerName - The name of the Logger. marker - An optional Marker. fqcn - The fully qualified class name of the caller. level - The event Level. data - The Message. properties - Properties to be added to the log event. t - An optional Throwable. Returns: The LogEvent."
impl,"createEvent publicLogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, StackTraceElementlocation, Levellevel, Messagedata, List<Property>properties, Throwablet) Creates a log event. Specified by: createEventin interfaceLocationAwareLogEventFactory Specified by: createEventin interfaceLogEventFactory Parameters: loggerName - The name of the Logger. marker - An optional Marker. fqcn - The fully qualified class name of the caller. location - The location of the caller level - The event Level. data - The Message. properties - Properties to be added to the log event. t - An optional Throwable. Returns: The LogEvent."
impl,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
impl,getExact publicbooleangetExact()
impl,getLocation publicStringgetLocation()
impl,getVersion publicStringgetVersion()
impl,hashCode publicinthashCode() Overrides: hashCodein classObject
impl,"renderOn publicvoidrenderOn(StringBuilderoutput, TextRenderertextRenderer)"
impl,toString publicStringtoString() Overrides: toStringin classObject
impl,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
impl,getClassName publicStringgetClassName()
impl,getExact publicbooleangetExact()
impl,getExtraClassInfo publicExtendedClassInfogetExtraClassInfo()
impl,getFileName publicStringgetFileName()
impl,getLineNumber publicintgetLineNumber()
impl,getLocation publicStringgetLocation()
impl,getMethodName publicStringgetMethodName()
impl,getStackTraceElement publicStackTraceElementgetStackTraceElement()
impl,getVersion publicStringgetVersion()
impl,hashCode publicinthashCode() Overrides: hashCodein classObject
impl,isNativeMethod publicbooleanisNativeMethod()
impl,toString publicStringtoString() Overrides: toStringin classObject
impl,"toMap publicMap<String,String>toMap() Specified by: toMapin interfaceReadOnlyStringMap"
impl,containsKey publicbooleancontainsKey(Stringkey) Specified by: containsKeyin interfaceReadOnlyStringMap
impl,"forEach public<V>voidforEach(BiConsumer<String,? super V>action) Specified by: forEachin interfaceReadOnlyStringMap"
impl,"forEach public<V, S>voidforEach(TriConsumer<String,? super V,S>action, Sstate) Specified by: forEachin interfaceReadOnlyStringMap"
impl,getValue public<V>VgetValue(Stringkey) Specified by: getValuein interfaceReadOnlyStringMap
impl,isEmpty publicbooleanisEmpty() Specified by: isEmptyin interfaceReadOnlyStringMap
impl,size publicintsize() Specified by: sizein interfaceReadOnlyStringMap
impl,clear publicvoidclear() Specified by: clearin interfaceStringMap
impl,freeze publicvoidfreeze() Specified by: freezein interfaceStringMap
impl,isFrozen publicbooleanisFrozen() Specified by: isFrozenin interfaceStringMap
impl,putAll publicvoidputAll(ReadOnlyStringMapsource) Specified by: putAllin interfaceStringMap
impl,"putValue publicvoidputValue(Stringkey, Objectvalue) Specified by: putValuein interfaceStringMap"
impl,remove publicvoidremove(Stringkey) Specified by: removein interfaceStringMap
impl,toString publicStringtoString() Overrides: toStringin classObject
impl,equals publicbooleanequals(Objectobject) Specified by: equalsin interfaceStringMap Overrides: equalsin classObject
impl,hashCode publicinthashCode() Specified by: hashCodein interfaceStringMap Overrides: hashCodein classObject
impl,requiresLocation booleanrequiresLocation()
impl,"createEvent LogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, StackTraceElementlocation, Levellevel, Messagedata, List<Property>properties, Throwablet)"
impl,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, ObjectexternalContext, booleancurrentContext) Loads the LoggerContext using the ContextSelector. Specified by: getContextin interfaceLoggerContextFactory Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. externalContext - An external context (such as a ServletContext) to be associated with the LoggerContext. Returns: The LoggerContext."
impl,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, ObjectexternalContext, booleancurrentContext, ConfigurationSourcesource) Loads the LoggerContext using the ContextSelector. Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. externalContext - An external context (such as a ServletContext) to be associated with the LoggerContext. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. source - The configuration source. Returns: The LoggerContext."
impl,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, ObjectexternalContext, booleancurrentContext, Configurationconfiguration) Loads the LoggerContext using the ContextSelector using the provided Configuration Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. externalContext - An external context (such as a ServletContext) to be associated with the LoggerContext. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configuration - The Configuration. Returns: The LoggerContext."
impl,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, ObjectexternalContext, booleancurrentContext, URIconfigLocation, Stringname) Loads the LoggerContext using the ContextSelector. Specified by: getContextin interfaceLoggerContextFactory Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. externalContext - An external context (such as a ServletContext) to be associated with the LoggerContext. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext (or null). Returns: The LoggerContext."
impl,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, Map.Entry<String,Object>entry, booleancurrentContext, URIconfigLocation, Stringname)"
impl,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, ObjectexternalContext, booleancurrentContext, List<URI>configLocations, Stringname)"
impl,"shutdown publicvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Specified by: shutdownin interfaceLoggerContextFactory"
impl,"hasContext publicbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Checks to see if a LoggerContext is installed. Specified by: hasContextin interfaceLoggerContextFactory Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise. Since: 3.0"
impl,getSelector publicContextSelectorgetSelector() Returns the ContextSelector. Returns: The ContextSelector.
impl,getShutdownCallbackRegistry publicShutdownCallbackRegistrygetShutdownCallbackRegistry() Returns the ShutdownCallbackRegistry Returns: the ShutdownCallbackRegistry Since: 2.4
impl,removeContext publicvoidremoveContext(LoggerContextcontext) Removes knowledge of a LoggerContext. Specified by: removeContextin interfaceLoggerContextFactory Parameters: context - The context to remove.
impl,isClassLoaderDependent publicbooleanisClassLoaderDependent() Specified by: isClassLoaderDependentin interfaceLoggerContextFactory
impl,addShutdownCallback publicCancellableaddShutdownCallback(Runnablecallback) Description copied from interface:ShutdownCallbackRegistry Adds a Runnable shutdown callback to this class. Note: The returned Cancellable must be retained on heap by caller to avoid premature garbage-collection of the registered callback (and to ensure the callback runs on shutdown). Specified by: addShutdownCallbackin interfaceShutdownCallbackRegistry Parameters: callback - the shutdown callback to be executed upon shutdown. Returns: a Cancellable wrapper of the provided callback or null if the shutdown hook is disabled and cannot be added.
impl,isShutdownHookEnabled publicbooleanisShutdownHookEnabled()
impl,setLevel publicLog4jLogEvent.BuildersetLevel(Levellevel)
impl,setLoggerFqcn publicLog4jLogEvent.BuildersetLoggerFqcn(StringloggerFqcn)
impl,setLoggerName publicLog4jLogEvent.BuildersetLoggerName(StringloggerName)
impl,setMarker publicLog4jLogEvent.BuildersetMarker(Markermarker)
impl,setMessage publicLog4jLogEvent.BuildersetMessage(Messagemessage)
impl,setThrown publicLog4jLogEvent.BuildersetThrown(Throwablethrown)
impl,setTimeMillis publicLog4jLogEvent.BuildersetTimeMillis(longtimeMillis)
impl,setInstant publicLog4jLogEvent.BuildersetInstant(Instantinstant)
impl,setThrownProxy publicLog4jLogEvent.BuildersetThrownProxy(ThrowableProxythrownProxy)
impl,"setContextMap @Deprecated publicLog4jLogEvent.BuildersetContextMap(Map<String,String>contextMap) Deprecated."
impl,setContextData publicLog4jLogEvent.BuildersetContextData(StringMapcontextData)
impl,setContextStack publicLog4jLogEvent.BuildersetContextStack(ThreadContext.ContextStackcontextStack)
impl,setThreadId publicLog4jLogEvent.BuildersetThreadId(longthreadId)
impl,setThreadName publicLog4jLogEvent.BuildersetThreadName(StringthreadName)
impl,setThreadPriority publicLog4jLogEvent.BuildersetThreadPriority(intthreadPriority)
impl,setSource publicLog4jLogEvent.BuildersetSource(StackTraceElementsource)
impl,setIncludeLocation publicLog4jLogEvent.BuildersetIncludeLocation(booleanincludeLocation)
impl,setEndOfBatch publicLog4jLogEvent.BuildersetEndOfBatch(booleanendOfBatch)
impl,setNanoTime publicLog4jLogEvent.BuildersetNanoTime(longnanoTime) Sets the nano time for the event. Parameters: nanoTime - The value of the running Java Virtual Machine's high-resolution time source when the event was created. Returns: this builder
impl,build publicLog4jLogEventbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<LogEvent> Returns: the configured instance.
impl,newBuilder public staticLog4jLogEvent.BuildernewBuilder() Returns a new empty Log4jLogEvent.Builder with all fields empty. Returns: a new empty builder.
impl,"createEvent @Deprecated public staticLog4jLogEventcreateEvent(StringloggerName, Markermarker, StringloggerFQCN, Levellevel, Messagemessage, Throwablethrown, ThrowableProxythrownProxy, Map<String,String>mdc, ThreadContext.ContextStackndc, StringthreadName, StackTraceElementlocation, longtimestamp) Deprecated. use Log4jLogEvent.Builder instead. This method will be removed in an upcoming release. Create a new LogEvent. Parameters: loggerName - The name of the Logger. marker - The Marker or null. loggerFQCN - The fully qualified class name of the caller. level - The logging Level. message - The Message. thrown - A Throwable or null. thrownProxy - A ThrowableProxy or null. mdc - The mapped diagnostic context. ndc - the nested diagnostic context. threadName - The name of the thread. location - The locations of the caller. timestamp - The timestamp of the event. Returns: a new LogEvent"
impl,getNanoClock public staticNanoClockgetNanoClock() Returns the NanoClock to use for creating the nanoTime timestamp of log events. Returns: the NanoClock to use for creating the nanoTime timestamp of log events
impl,setNanoClock public staticvoidsetNanoClock(NanoClocknanoClock) Sets the NanoClock to use for creating the nanoTime timestamp of log events. FOR INTERNAL USE. This method may be called with a different NanoClock implementation when the configuration changes. Parameters: nanoClock - the NanoClock to use for creating the nanoTime timestamp of log events
impl,asBuilder publicLog4jLogEvent.BuilderasBuilder() Returns a new fully initialized Log4jLogEvent.Builder containing a copy of all fields of this event. Returns: a new fully initialized builder.
impl,"toImmutable publicLog4jLogEventtoImmutable() Description copied from interface:LogEvent Returns an immutable version of this log event, which MAY BE a copy of this event. Specified by: toImmutablein interfaceLogEvent Returns: an immutable version of this log event"
impl,getLevel publicLevelgetLevel() Returns the logging Level. Specified by: getLevelin interfaceLogEvent Returns: the Level associated with this event.
impl,getLoggerName publicStringgetLoggerName() Returns the name of the Logger used to generate the event. Specified by: getLoggerNamein interfaceLogEvent Returns: The Logger name.
impl,getMessage publicMessagegetMessage() Returns the Message associated with the event. Specified by: getMessagein interfaceLogEvent Returns: The Message.
impl,makeMessageImmutable publicvoidmakeMessageImmutable()
impl,getThreadId publiclonggetThreadId() Description copied from interface:LogEvent Gets the thread ID. Specified by: getThreadIdin interfaceLogEvent Returns: thread ID.
impl,getThreadName publicStringgetThreadName() Returns the name of the Thread on which the event was generated. Specified by: getThreadNamein interfaceLogEvent Returns: The name of the Thread.
impl,getThreadPriority publicintgetThreadPriority() Description copied from interface:LogEvent Gets the thread priority. Specified by: getThreadPriorityin interfaceLogEvent Returns: thread priority.
impl,"getTimeMillis publiclonggetTimeMillis() Gets event time in milliseconds since midnight, January 1, 1970 UTC. Use LogEvent.getInstant() to get higher precision timestamp information if available on this platform. Specified by: getTimeMillisin interfaceLogEvent Returns: the milliseconds component of this log event's timestamp See Also: System.currentTimeMillis()"
impl,System.currentTimeMillis()
impl,"getInstant publicInstantgetInstant() Returns the Instant when the message was logged. Caution: if this LogEvent implementation is mutable and reused for multiple consecutive log messages, then the Instant object returned by this method is also mutable and reused. Client code should not keep a reference to the returned object but make a copy instead. Specified by: getInstantin interfaceLogEvent Returns: the Instant holding Instant details for this log event Since: 2.11"
impl,"getThrown publicThrowablegetThrown() Returns the Throwable associated with the event, or null. Specified by: getThrownin interfaceLogEvent Returns: The Throwable associated with the event."
impl,"getThrownProxy publicThrowableProxygetThrownProxy() Returns the ThrowableProxy associated with the event, or null. Specified by: getThrownProxyin interfaceLogEvent Returns: The ThrowableProxy associated with the event."
impl,"getMarker publicMarkergetMarker() Returns the Marker associated with the event, or null. Specified by: getMarkerin interfaceLogEvent Returns: the Marker associated with the event."
impl,getLoggerFqcn publicStringgetLoggerFqcn() The fully qualified class name of the class that was called by the caller. Specified by: getLoggerFqcnin interfaceLogEvent Returns: the fully qualified class name of the class that is performing logging.
impl,getContextData publicReadOnlyStringMapgetContextData() Returns the ReadOnlyStringMap containing context data key-value pairs. Specified by: getContextDatain interfaceLogEvent Returns: the ReadOnlyStringMap containing context data key-value pairs Since: 2.7 See Also: ContextDataInjector ThreadContext
impl,ContextDataInjector
impl,ThreadContext
impl,"getContextMap publicMap<String,String>getContextMap() Returns the immutable copy of the ThreadContext Map. Specified by: getContextMapin interfaceLogEvent Returns: The context Map."
impl,getContextStack publicThreadContext.ContextStackgetContextStack() Returns an immutable copy of the ThreadContext stack. Specified by: getContextStackin interfaceLogEvent Returns: The context Stack.
impl,getSource publicStackTraceElementgetSource() Returns the StackTraceElement for the caller. This will be the entry that occurs right before the first occurrence of FQCN as a class name. Specified by: getSourcein interfaceLogEvent Returns: the StackTraceElement for the caller.
impl,"isIncludeLocation publicbooleanisIncludeLocation() Description copied from interface:LogEvent Returns whether the source of the logging request is required downstream. Asynchronous Loggers and Appenders use this flag to determine whether to take a StackTrace snapshot or not before handing off this event to another thread. Specified by: isIncludeLocationin interfaceLogEvent Returns: true if the source of the logging request is required downstream, false otherwise. See Also: LogEvent.getSource()"
impl,LogEvent.getSource()
impl,"setIncludeLocation publicvoidsetIncludeLocation(booleanincludeLocation) Description copied from interface:LogEvent Sets whether the source of the logging request is required downstream. Asynchronous Loggers and Appenders use this flag to determine whether to take a StackTrace snapshot or not before handing off this event to another thread. Specified by: setIncludeLocationin interfaceLogEvent Parameters: includeLocation - true if the source of the logging request is required downstream, false otherwise. See Also: LogEvent.getSource()"
impl,LogEvent.getSource()
impl,"isEndOfBatch publicbooleanisEndOfBatch() Description copied from interface:LogEvent Returns true if this event is the last one in a batch, false otherwise. Used by asynchronous Loggers and Appenders to signal to buffered downstream components when to flush to disk, as a more efficient alternative to the immediateFlush=true configuration. Specified by: isEndOfBatchin interfaceLogEvent Returns: whether this event is the last one in a batch."
impl,"setEndOfBatch publicvoidsetEndOfBatch(booleanendOfBatch) Description copied from interface:LogEvent Sets whether this event is the last one in a batch. Used by asynchronous Loggers and Appenders to signal to buffered downstream components when to flush to disk, as a more efficient alternative to the immediateFlush=true configuration. Specified by: setEndOfBatchin interfaceLogEvent Parameters: endOfBatch - true if this event is the last one in a batch, false otherwise."
impl,"getNanoTime publiclonggetNanoTime() Description copied from interface:LogEvent Returns the value of the running Java Virtual Machine's high-resolution time source when this event was created, or a dummy value if it is known that this value will not be used downstream. Specified by: getNanoTimein interfaceLogEvent Returns: The value of the running Java Virtual Machine's high-resolution time source when this event was created."
impl,writeReplace protectedObjectwriteReplace() Creates a LogEventProxy that can be serialized. Returns: a LogEventProxy.
impl,"serialize public staticSerializableserialize(LogEventevent, booleanincludeLocation) Take a snapshot of the specified LogEvent. Parameters: event - the event to take a snapshot of includeLocation - if true, this method will obtain caller location information Returns: snapshot of the event as a Serializable object See Also: deserialize(Serializable) serialize(Log4jLogEvent, boolean)"
impl,deserialize(Serializable)
impl,"serialize(Log4jLogEvent, boolean)"
impl,"serialize public staticSerializableserialize(Log4jLogEventevent, booleanincludeLocation) Take a snapshot of the specified Log4jLogEvent. Parameters: event - the event to take a snapshot of includeLocation - if true, this method will obtain caller location information Returns: snapshot of the event as a Serializable object See Also: deserialize(Serializable) serialize(LogEvent, boolean)"
impl,deserialize(Serializable)
impl,"serialize(LogEvent, boolean)"
impl,canDeserialize public staticbooleancanDeserialize(Serializableevent)
impl,deserialize public staticLog4jLogEventdeserialize(Serializableevent)
impl,createMemento public staticLogEventcreateMemento(LogEventlogEvent)
impl,"createMemento public staticLog4jLogEventcreateMemento(LogEventevent, booleanincludeLocation) Creates and returns a new immutable copy of this Log4jLogEvent. Returns: a new immutable copy of the data in this Log4jLogEvent"
impl,toString publicStringtoString() Overrides: toStringin classObject
impl,equals publicbooleanequals(Objecto) Overrides: equalsin classObject
impl,hashCode publicinthashCode() Overrides: hashCodein classObject
impl,getLoggerContextFactory publicLoggerContextFactorygetLoggerContextFactory() Overrides: getLoggerContextFactoryin classProvider
impl,getThreadContextMapInstance publicThreadContextMapgetThreadContextMapInstance() Overrides: getThreadContextMapInstancein classProvider
impl,"createEvent LogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, Levellevel, Messagedata, List<Property>properties, Throwablet)"
impl,"createEvent defaultLogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, StackTraceElementlocation, Levellevel, Messagedata, List<Property>properties, Throwablet) Specified by: createEventin interfaceLocationAwareLogEventFactory"
impl,getFormattedMessage publicStringgetFormattedMessage() Specified by: getFormattedMessagein interfaceMessage
impl,getFormat publicStringgetFormat() Specified by: getFormatin interfaceMessage
impl,getParameters publicObject[]getParameters() Specified by: getParametersin interfaceMessage
impl,getThrowable publicThrowablegetThrowable() Always returns null. Specified by: getThrowablein interfaceMessage Returns: null
impl,formatTo publicvoidformatTo(StringBuilderbuffer) Specified by: formatToin interfaceStringBuilderFormattable
impl,toString publicStringtoString() Overrides: toStringin classObject
impl,"toImmutable publicLog4jLogEventtoImmutable() Description copied from interface:LogEvent Returns an immutable version of this log event, which MAY BE a copy of this event. Specified by: toImmutablein interfaceLogEvent Returns: an immutable version of this log event"
impl,"initFrom publicvoidinitFrom(LogEventevent) Initialize the fields of this MutableLogEvent from another event. Similar in purpose and usage as Log4jLogEvent.LogEventProxy, but a mutable version. This method is used on async logger ringbuffer slots holding MutableLogEvent objects in each slot. Parameters: event - the event to copy data from"
impl,clear publicvoidclear() Clears all references this event has to other objects.
impl,getLoggerFqcn publicStringgetLoggerFqcn() Description copied from interface:LogEvent Returns the fully qualified class name of the caller of the logging API. Specified by: getLoggerFqcnin interfaceLogEvent Returns: The fully qualified class name of the caller.
impl,setLoggerFqcn publicvoidsetLoggerFqcn(StringloggerFqcn)
impl,getMarker publicMarkergetMarker() Description copied from interface:LogEvent Gets the Marker associated with the event. Specified by: getMarkerin interfaceLogEvent Returns: Marker or null if no Marker was defined on this LogEvent
impl,setMarker publicvoidsetMarker(Markermarker)
impl,getLevel publicLevelgetLevel() Description copied from interface:LogEvent Gets the level. Specified by: getLevelin interfaceLogEvent Returns: level.
impl,setLevel publicvoidsetLevel(Levellevel)
impl,"getLoggerName publicStringgetLoggerName() Description copied from interface:LogEvent Gets the logger name. Specified by: getLoggerNamein interfaceLogEvent Returns: logger name, may be null."
impl,setLoggerName publicvoidsetLoggerName(StringloggerName)
impl,getMessage publicMessagegetMessage() Description copied from interface:LogEvent Gets the message associated with the event. Specified by: getMessagein interfaceLogEvent Returns: message.
impl,setMessage publicvoidsetMessage(Messagemsg)
impl,getFormattedMessage publicStringgetFormattedMessage() Specified by: getFormattedMessagein interfaceMessage See Also: Message.getFormattedMessage()
impl,Message.getFormattedMessage()
impl,getFormat publicStringgetFormat() Specified by: getFormatin interfaceMessage See Also: Message.getFormat()
impl,Message.getFormat()
impl,getParameters publicObject[]getParameters() Specified by: getParametersin interfaceMessage See Also: Message.getParameters()
impl,Message.getParameters()
impl,"forEachParameter public<S>voidforEachParameter(ParameterConsumer<S>action, Sstate) Specified by: forEachParameterin interfaceParameterVisitable"
impl,getThrowable publicThrowablegetThrowable() Specified by: getThrowablein interfaceMessage See Also: Message.getThrowable()
impl,Message.getThrowable()
impl,formatTo publicvoidformatTo(StringBuilderbuffer) Specified by: formatToin interfaceStringBuilderFormattable See Also: StringBuilderFormattable.formatTo(StringBuilder)
impl,StringBuilderFormattable.formatTo(StringBuilder)
impl,swapParameters publicObject[]swapParameters(Object[]emptyReplacement) Replaces this ReusableMessage's parameter array with the specified value and return the original array Specified by: swapParametersin interfaceReusableMessage Parameters: emptyReplacement - the parameter array that can be used for subsequent uses of this reusable message Returns: the original parameter array See Also: ReusableMessage.swapParameters(Object[])
impl,ReusableMessage.swapParameters(Object[])
impl,getParameterCount publicshortgetParameterCount() Specified by: getParameterCountin interfaceReusableMessage
impl,memento publicMessagememento() Specified by: mementoin interfaceReusableMessage
impl,"getThrown publicThrowablegetThrown() Description copied from interface:LogEvent Gets throwable associated with logging request. Convenience method for ThrowableProxy.getThrowable(); Specified by: getThrownin interfaceLogEvent Returns: throwable, may be null."
impl,setThrown publicvoidsetThrown(Throwablethrown)
impl,"getTimeMillis publiclonggetTimeMillis() Description copied from interface:LogEvent Gets event time in milliseconds since midnight, January 1, 1970 UTC. Use LogEvent.getInstant() to get higher precision timestamp information if available on this platform. Specified by: getTimeMillisin interfaceLogEvent Returns: the milliseconds component of this log event's timestamp See Also: System.currentTimeMillis()"
impl,System.currentTimeMillis()
impl,setTimeMillis publicvoidsetTimeMillis(longtimeMillis)
impl,"getInstant publicInstantgetInstant() Description copied from interface:LogEvent Returns the Instant when the message was logged. Caution: if this LogEvent implementation is mutable and reused for multiple consecutive log messages, then the Instant object returned by this method is also mutable and reused. Client code should not keep a reference to the returned object but make a copy instead. Specified by: getInstantin interfaceLogEvent Returns: the Instant holding Instant details for this log event"
impl,"getThrownProxy publicThrowableProxygetThrownProxy() Returns the ThrowableProxy associated with the event, or null. Specified by: getThrownProxyin interfaceLogEvent Returns: The ThrowableProxy associated with the event."
impl,setSource publicvoidsetSource(StackTraceElementsource)
impl,getSource publicStackTraceElementgetSource() Returns the StackTraceElement for the caller. This will be the entry that occurs right before the first occurrence of FQCN as a class name. Specified by: getSourcein interfaceLogEvent Returns: the StackTraceElement for the caller.
impl,"getContextData publicReadOnlyStringMapgetContextData() Description copied from interface:LogEvent Returns the ReadOnlyStringMap object holding context data key-value pairs. Context data (also known as Mapped Diagnostic Context or MDC) is data that is set by the application to be included in all subsequent log events. The default source for context data is the ThreadContext (and properties configured on the Logger that logged the event), but users can configure a custom ContextDataInjector to inject key-value pairs from any arbitrary source. Specified by: getContextDatain interfaceLogEvent Returns: the ReadOnlyStringMap object holding context data key-value pairs See Also: ContextDataInjector ThreadContext"
impl,ContextDataInjector
impl,ThreadContext
impl,"getContextMap publicMap<String,String>getContextMap() Description copied from interface:LogEvent Gets the context map (also know as Mapped Diagnostic Context or MDC). Specified by: getContextMapin interfaceLogEvent Returns: The context map, never null."
impl,setContextData publicvoidsetContextData(StringMapmutableContextData)
impl,"getContextStack publicThreadContext.ContextStackgetContextStack() Description copied from interface:LogEvent Gets the context stack (also known as Nested Diagnostic Context or NDC). Specified by: getContextStackin interfaceLogEvent Returns: The context stack, never null."
impl,setContextStack publicvoidsetContextStack(ThreadContext.ContextStackcontextStack)
impl,getThreadId publiclonggetThreadId() Description copied from interface:LogEvent Gets the thread ID. Specified by: getThreadIdin interfaceLogEvent Returns: thread ID.
impl,setThreadId publicvoidsetThreadId(longthreadId)
impl,"getThreadName publicStringgetThreadName() Description copied from interface:LogEvent Gets the thread name. Specified by: getThreadNamein interfaceLogEvent Returns: thread name, may be null. TODO guess this could go into a thread context object too. (RG) Why?"
impl,setThreadName publicvoidsetThreadName(StringthreadName)
impl,getThreadPriority publicintgetThreadPriority() Description copied from interface:LogEvent Gets the thread priority. Specified by: getThreadPriorityin interfaceLogEvent Returns: thread priority.
impl,setThreadPriority publicvoidsetThreadPriority(intthreadPriority)
impl,"isIncludeLocation publicbooleanisIncludeLocation() Description copied from interface:LogEvent Returns whether the source of the logging request is required downstream. Asynchronous Loggers and Appenders use this flag to determine whether to take a StackTrace snapshot or not before handing off this event to another thread. Specified by: isIncludeLocationin interfaceLogEvent Returns: true if the source of the logging request is required downstream, false otherwise. See Also: LogEvent.getSource()"
impl,LogEvent.getSource()
impl,"setIncludeLocation publicvoidsetIncludeLocation(booleanincludeLocation) Description copied from interface:LogEvent Sets whether the source of the logging request is required downstream. Asynchronous Loggers and Appenders use this flag to determine whether to take a StackTrace snapshot or not before handing off this event to another thread. Specified by: setIncludeLocationin interfaceLogEvent Parameters: includeLocation - true if the source of the logging request is required downstream, false otherwise. See Also: LogEvent.getSource()"
impl,LogEvent.getSource()
impl,"isEndOfBatch publicbooleanisEndOfBatch() Description copied from interface:LogEvent Returns true if this event is the last one in a batch, false otherwise. Used by asynchronous Loggers and Appenders to signal to buffered downstream components when to flush to disk, as a more efficient alternative to the immediateFlush=true configuration. Specified by: isEndOfBatchin interfaceLogEvent Returns: whether this event is the last one in a batch."
impl,"setEndOfBatch publicvoidsetEndOfBatch(booleanendOfBatch) Description copied from interface:LogEvent Sets whether this event is the last one in a batch. Used by asynchronous Loggers and Appenders to signal to buffered downstream components when to flush to disk, as a more efficient alternative to the immediateFlush=true configuration. Specified by: setEndOfBatchin interfaceLogEvent Parameters: endOfBatch - true if this event is the last one in a batch, false otherwise."
impl,"getNanoTime publiclonggetNanoTime() Description copied from interface:LogEvent Returns the value of the running Java Virtual Machine's high-resolution time source when this event was created, or a dummy value if it is known that this value will not be used downstream. Specified by: getNanoTimein interfaceLogEvent Returns: The value of the running Java Virtual Machine's high-resolution time source when this event was created."
impl,setNanoTime publicvoidsetNanoTime(longnanoTime)
impl,writeReplace protectedObjectwriteReplace() Creates a LogEventProxy that can be serialized. Returns: a LogEventProxy.
impl,"createMemento publicLog4jLogEventcreateMemento() Creates and returns a new immutable copy of this MutableLogEvent. If isIncludeLocation() is true, this will obtain caller location information. Returns: a new immutable copy of the data in this MutableLogEvent"
impl,initializeBuilder publicvoidinitializeBuilder(Log4jLogEvent.Builderbuilder) Initializes the specified Log4jLogEvent.Builder from this MutableLogEvent. Parameters: builder - the builder whose fields to populate
impl,"createEvent publicLogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, Levellevel, Messagemessage, List<Property>properties, Throwablet) Creates a log event. Specified by: createEventin interfaceLogEventFactory Parameters: loggerName - The name of the Logger. marker - An optional Marker. fqcn - The fully qualified class name of the caller. level - The event Level. message - The Message. properties - Properties to be added to the log event. t - An optional Throwable. Returns: The LogEvent."
impl,"createEvent publicLogEventcreateEvent(StringloggerName, Markermarker, Stringfqcn, StackTraceElementlocation, Levellevel, Messagemessage, List<Property>properties, Throwablet) Creates a log event. Specified by: createEventin interfaceLocationAwareLogEventFactory Specified by: createEventin interfaceLogEventFactory Parameters: loggerName - The name of the Logger. marker - An optional Marker. fqcn - The fully qualified class name of the caller. location - The location of the caller. level - The event Level. message - The Message. properties - Properties to be added to the log event. t - An optional Throwable. Returns: The LogEvent."
impl,"release public staticvoidrelease(LogEventlogEvent) Switches the reserved flag off if the specified event is a MutableLogEvent, otherwise does nothing. This flag is used internally to verify that a reusable log event is no longer in use and can be reused. Parameters: logEvent - the log event to make available again Since: 2.7"
impl,"injectContextData publicStringMapinjectContextData(List<Property>props, StringMapignore) If there are no configuration properties, this injector will return the thread context's internal data structure. Otherwise the configuration properties are combined with the thread context key-value pairs into the specified reusable StringMap. Parameters: props - list of configuration properties, may be null ignore - a StringMap instance from the log event Returns: a StringMap combining configuration properties with thread context data See Also: ThreadContextDataInjector.copyProperties(List, StringMap)"
impl,"ThreadContextDataInjector.copyProperties(List, StringMap)"
impl,"rawContextData publicReadOnlyStringMaprawContextData() Description copied from interface:ContextDataInjector Returns a ReadOnlyStringMap object reflecting the current state of the context. Configuration properties are not included in the result. This method may be called multiple times for each log event by Filters and Lookups and implementors should take care to make this method as performant as possible while preserving at least the following thread-safety guarantee. Thread-safety note: The returned object can only be safely used in the current thread. Changes in the underlying context may or may not be reflected in the returned object, depending on the context data source and the implementation of this method. It is not safe to pass the returned object to another thread. Returns: a ReadOnlyStringMap object reflecting the current state of the context, may not return null"
impl,getValue publicObjectgetValue(Stringkey) Description copied from interface:ContextDataInjector Retrieves a single context data value. Specified by: getValuein interfaceContextDataInjector Parameters: key - The context data key of the value to retrieve. Returns: A context data value.
impl,"injectContextData publicStringMapinjectContextData(List<Property>props, StringMapignore) Puts key-value pairs from both the specified list of properties as well as the thread context into the specified reusable StringMap. Parameters: props - list of configuration properties, may be null ignore - a StringMap instance from the log event Returns: a StringMap combining configuration properties with thread context data See Also: ThreadContextDataInjector.copyProperties(List, StringMap)"
impl,"ThreadContextDataInjector.copyProperties(List, StringMap)"
impl,"rawContextData publicReadOnlyStringMaprawContextData() Description copied from interface:ContextDataInjector Returns a ReadOnlyStringMap object reflecting the current state of the context. Configuration properties are not included in the result. This method may be called multiple times for each log event by Filters and Lookups and implementors should take care to make this method as performant as possible while preserving at least the following thread-safety guarantee. Thread-safety note: The returned object can only be safely used in the current thread. Changes in the underlying context may or may not be reflected in the returned object, depending on the context data source and the implementation of this method. It is not safe to pass the returned object to another thread. Returns: a ReadOnlyStringMap object reflecting the current state of the context, may not return null"
impl,getValue publicObjectgetValue(Stringkey) Description copied from interface:ContextDataInjector Retrieves a single context data value. Specified by: getValuein interfaceContextDataInjector Parameters: key - The context data key of the value to retrieve. Returns: A context data value.
impl,"injectContextData publicStringMapinjectContextData(List<Property>props, StringMapreusable) Puts key-value pairs from both the specified list of properties as well as the thread context into the specified reusable StringMap. Parameters: props - list of configuration properties, may be null reusable - a StringMap instance that may be reused to avoid creating temporary objects Returns: a StringMap combining configuration properties with thread context data See Also: ThreadContextDataInjector.copyProperties(List, StringMap)"
impl,"ThreadContextDataInjector.copyProperties(List, StringMap)"
impl,"rawContextData publicReadOnlyStringMaprawContextData() Description copied from interface:ContextDataInjector Returns a ReadOnlyStringMap object reflecting the current state of the context. Configuration properties are not included in the result. This method may be called multiple times for each log event by Filters and Lookups and implementors should take care to make this method as performant as possible while preserving at least the following thread-safety guarantee. Thread-safety note: The returned object can only be safely used in the current thread. Changes in the underlying context may or may not be reflected in the returned object, depending on the context data source and the implementation of this method. It is not safe to pass the returned object to another thread. Returns: a ReadOnlyStringMap object reflecting the current state of the context, may not return null"
impl,getValue publicObjectgetValue(Stringkey) Description copied from interface:ContextDataInjector Retrieves a single context data value. Specified by: getValuein interfaceContextDataInjector Parameters: key - The context data key of the value to retrieve. Returns: A context data value.
impl,"initServiceProviders @Deprecated public staticvoidinitServiceProviders() Deprecated. no-op Previously this method allowed ContextDataProviders to be loaded eagerly, now they are loaded when this class is initialized."
impl,"copyProperties public staticvoidcopyProperties(List<Property>properties, StringMapresult) Copies key-value pairs from the specified property list into the specified StringMap. Parameters: properties - list of configuration properties, may be null result - the StringMap object to add the key-values to. Must be non-null."
impl,"supplyContextData publicMap<String,String>supplyContextData() Description copied from interface:ContextDataProvider Returns a Map containing context data to be injected into the event or null if no context data is to be added. Thread-safety note: The returned object can safely be passed off to another thread: future changes in the underlying context data will not be reflected in the returned object. Specified by: supplyContextDatain interfaceContextDataProvider Returns: A Map containing the context data or null."
impl,supplyStringMap publicStringMapsupplyStringMap() Description copied from interface:ContextDataProvider Returns the context data as a StringMap. Thread-safety note: The returned object can safely be passed off to another thread: future changes in the underlying context data will not be reflected in the returned object. Specified by: supplyStringMapin interfaceContextDataProvider Returns: the context data in a StringMap.
impl,getLines publicintgetLines() Returns the number of lines to write. Returns: The number of lines to write.
impl,getSeparator publicStringgetSeparator() Returns the stack trace separator. Returns: The stack trace separator.
impl,getTextRenderer publicTextRenderergetTextRenderer() Returns the message rendered. Returns: the message rendered.
impl,getIgnorePackages publicList<String>getIgnorePackages() Returns the list of packages to ignore (filter out). Returns: The list of packages to ignore (filter out).
impl,"allLines publicbooleanallLines() Determines if all lines should be printed. Returns: true for all lines, false otherwise."
impl,"anyLines publicbooleananyLines() Determines if any lines should be printed. Returns: true for any lines, false otherwise."
impl,minLines publicintminLines(intmaxLines) Returns the minimum between the lines and the max lines. Parameters: maxLines - The maximum number of lines. Returns: The number of lines to print.
impl,"hasPackages publicbooleanhasPackages() Determines if there are any packages to filter. Returns: true if there are packages, false otherwise."
impl,toString publicStringtoString() Overrides: toStringin classObject
impl,newInstance public staticThrowableFormatOptionsnewInstance(String[]options) Creates a new instance based on the array of options. Parameters: options - The array of options. Returns: A new initialized instance.
impl,getSuffix publicStringgetSuffix()
impl,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
impl,"formatWrapper publicvoidformatWrapper(StringBuildersb, ThrowableProxycause, Stringsuffix) Formats the specified Throwable. Parameters: sb - StringBuilder to contain the formatted Throwable. cause - The Throwable to format. suffix - Append this to the end of each stack frame."
impl,"formatWrapper publicvoidformatWrapper(StringBuildersb, ThrowableProxycause, List<String>ignorePackages, Stringsuffix) Formats the specified Throwable. Parameters: sb - StringBuilder to contain the formatted Throwable. cause - The Throwable to format. ignorePackages - The List of packages to be suppressed from the trace. suffix - Append this to the end of each stack frame."
impl,"formatWrapper publicvoidformatWrapper(StringBuildersb, ThrowableProxycause, List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix) Formats the specified Throwable. Parameters: sb - StringBuilder to contain the formatted Throwable. cause - The Throwable to format. ignorePackages - The List of packages to be suppressed from the stack trace. textRenderer - The text renderer. suffix - Append this to the end of each stack frame."
impl,"formatWrapper publicvoidformatWrapper(StringBuildersb, ThrowableProxycause, List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix, StringlineSeparator) Formats the specified Throwable. Parameters: sb - StringBuilder to contain the formatted Throwable. cause - The Throwable to format. ignorePackages - The List of packages to be suppressed from the stack trace. textRenderer - The text renderer. suffix - Append this to the end of each stack frame. lineSeparator - The end-of-line separator."
impl,getCauseProxy publicThrowableProxygetCauseProxy()
impl,getCauseStackTraceAsString publicStringgetCauseStackTraceAsString(Stringsuffix) Formats the Throwable that is the cause of this Throwable. Parameters: suffix - Append this to the end of each stack frame. Returns: The formatted Throwable that caused this Throwable.
impl,"getCauseStackTraceAsString publicStringgetCauseStackTraceAsString(List<String>packages, Stringsuffix) Formats the Throwable that is the cause of this Throwable. Parameters: packages - The List of packages to be suppressed from the trace. suffix - Append this to the end of each stack frame. Returns: The formatted Throwable that caused this Throwable."
impl,"getCauseStackTraceAsString publicStringgetCauseStackTraceAsString(List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix) Formats the Throwable that is the cause of this Throwable. Parameters: ignorePackages - The List of packages to be suppressed from the trace. textRenderer - The text renderer. suffix - Append this to the end of each stack frame. Returns: The formatted Throwable that caused this Throwable."
impl,"getCauseStackTraceAsString publicStringgetCauseStackTraceAsString(List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix, StringlineSeparator) Formats the Throwable that is the cause of this Throwable. Parameters: ignorePackages - The List of packages to be suppressed from the stack trace. textRenderer - The text renderer. suffix - Append this to the end of each stack frame. lineSeparator - The end-of-line separator. Returns: The formatted Throwable that caused this Throwable."
impl,getCommonElementCount publicintgetCommonElementCount() Returns the number of elements that are being omitted because they are common with the parent Throwable's stack trace. Returns: The number of elements omitted from the stack trace.
impl,getExtendedStackTrace publicExtendedStackTraceElement[]getExtendedStackTrace() Gets the stack trace including packaging information. Returns: The stack trace including packaging information.
impl,getExtendedStackTraceAsString publicStringgetExtendedStackTraceAsString() Formats the stack trace including packaging information. Returns: The formatted stack trace including packaging information.
impl,getExtendedStackTraceAsString publicStringgetExtendedStackTraceAsString(Stringsuffix) Formats the stack trace including packaging information. Parameters: suffix - Append this to the end of each stack frame. Returns: The formatted stack trace including packaging information.
impl,"getExtendedStackTraceAsString publicStringgetExtendedStackTraceAsString(List<String>ignorePackages, Stringsuffix) Formats the stack trace including packaging information. Parameters: ignorePackages - List of packages to be ignored in the trace. suffix - Append this to the end of each stack frame. Returns: The formatted stack trace including packaging information."
impl,"getExtendedStackTraceAsString publicStringgetExtendedStackTraceAsString(List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix) Formats the stack trace including packaging information. Parameters: ignorePackages - List of packages to be ignored in the trace. textRenderer - The message renderer. suffix - Append this to the end of each stack frame. Returns: The formatted stack trace including packaging information."
impl,"getExtendedStackTraceAsString publicStringgetExtendedStackTraceAsString(List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix, StringlineSeparator) Formats the stack trace including packaging information. Parameters: ignorePackages - List of packages to be ignored in the trace. textRenderer - The message renderer. suffix - Append this to the end of each stack frame. lineSeparator - The end-of-line separator. Returns: The formatted stack trace including packaging information."
impl,"formatExtendedStackTraceTo publicvoidformatExtendedStackTraceTo(StringBuildersb, List<String>ignorePackages, TextRenderertextRenderer, Stringsuffix, StringlineSeparator) Formats the stack trace including packaging information. Parameters: sb - Destination. ignorePackages - List of packages to be ignored in the trace. textRenderer - The message renderer. suffix - Append this to the end of each stack frame. lineSeparator - The end-of-line separator."
impl,getLocalizedMessage publicStringgetLocalizedMessage()
impl,getMessage publicStringgetMessage()
impl,getName publicStringgetName() Return the FQCN of the Throwable. Returns: The FQCN of the Throwable.
impl,getStackTrace publicStackTraceElement[]getStackTrace()
impl,getSuppressedProxies publicThrowableProxy[]getSuppressedProxies() Gets proxies for suppressed exceptions. Returns: proxies for suppressed exceptions.
impl,getSuppressedStackTrace publicStringgetSuppressedStackTrace(Stringsuffix) Formats the suppressed Throwables. Parameters: suffix - Append this to the end of each stack frame. Returns: The formatted suppressed Throwables.
impl,getThrowable publicThrowablegetThrowable() The throwable or null if this object is deserialized from XML or JSON. Returns: The throwable or null if this object is deserialized from XML or JSON.
impl,hashCode publicinthashCode() Overrides: hashCodein classObject
impl,toString publicStringtoString() Overrides: toStringin classObject
jackson,"deserialize publicStringMapdeserialize(com.fasterxml.jackson.core.JsonParserjp, com.fasterxml.jackson.databind.DeserializationContextctxt) throws IOException Specified by: deserializein classcom.fasterxml.jackson.databind.JsonDeserializer<StringMap> Throws: IOException"
jackson,"serialize publicvoidserialize(ReadOnlyStringMapcontextData, com.fasterxml.jackson.core.JsonGeneratorjgen, com.fasterxml.jackson.databind.SerializerProviderprovider) throws IOException, com.fasterxml.jackson.core.JsonGenerationException Specified by: serializein classcom.fasterxml.jackson.databind.ser.std.StdSerializer<ReadOnlyStringMap> Throws: IOException com.fasterxml.jackson.core.JsonGenerationException"
jackson,"deserialize publicStringMapdeserialize(com.fasterxml.jackson.core.JsonParserjp, com.fasterxml.jackson.databind.DeserializationContextctxt) throws IOException Specified by: deserializein classcom.fasterxml.jackson.databind.JsonDeserializer<StringMap> Throws: IOException"
jackson,"serialize publicvoidserialize(ReadOnlyStringMapcontextData, com.fasterxml.jackson.core.JsonGeneratorjgen, com.fasterxml.jackson.databind.SerializerProviderprovider) throws IOException, com.fasterxml.jackson.core.JsonGenerationException Specified by: serializein classcom.fasterxml.jackson.databind.ser.std.StdSerializer<ReadOnlyStringMap> Throws: IOException com.fasterxml.jackson.core.JsonGenerationException"
jackson,"deserialize publicMap<String,String>deserialize(com.fasterxml.jackson.core.JsonParserjp, com.fasterxml.jackson.databind.DeserializationContextctxt) throws IOException, com.fasterxml.jackson.core.JsonProcessingException Specified by: deserializein classcom.fasterxml.jackson.databind.JsonDeserializer<Map<String,String>> Throws: IOException com.fasterxml.jackson.core.JsonProcessingException"
jackson,"serialize publicvoidserialize(Map<String,String>map, com.fasterxml.jackson.core.JsonGeneratorjgen, com.fasterxml.jackson.databind.SerializerProviderprovider) throws IOException, com.fasterxml.jackson.core.JsonGenerationException Specified by: serializein classcom.fasterxml.jackson.databind.ser.std.StdSerializer<Map<String,String>> Throws: IOException com.fasterxml.jackson.core.JsonGenerationException"
jackson,"deserialize publicStackTraceElementdeserialize(com.fasterxml.jackson.core.JsonParserjp, com.fasterxml.jackson.databind.DeserializationContextctxt) throws IOException Specified by: deserializein classcom.fasterxml.jackson.databind.JsonDeserializer<StackTraceElement> Throws: IOException"
jackson,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
jackson,getKey publicStringgetKey()
jackson,getValue publicStringgetValue()
jackson,hashCode publicinthashCode() Overrides: hashCodein classObject
jackson,setKey publicvoidsetKey(Stringkey)
jackson,setValue publicvoidsetValue(Stringvalue)
jackson,toString publicStringtoString() Overrides: toStringin classObject
jackson,"deserialize publicSimpleMessagedeserialize(com.fasterxml.jackson.core.JsonParserjp, com.fasterxml.jackson.databind.DeserializationContextctxt) throws IOException, com.fasterxml.jackson.core.JsonProcessingException Specified by: deserializein classcom.fasterxml.jackson.databind.JsonDeserializer<SimpleMessage> Throws: IOException com.fasterxml.jackson.core.JsonProcessingException"
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Returns: the ObjectName See Also: AppenderAdminMBean.PATTERN
jmx,AppenderAdminMBean.PATTERN
jmx,getName publicStringgetName() Description copied from interface:AppenderAdminMBean Returns the name of the instrumented Appender. Specified by: getNamein interfaceAppenderAdminMBean Returns: the name of the Appender
jmx,getLayout publicStringgetLayout() Description copied from interface:AppenderAdminMBean Returns the result of calling toString on the Layout object of the instrumented Appender. Specified by: getLayoutin interfaceAppenderAdminMBean Returns: the Layout of the instrumented Appender as a string
jmx,isIgnoreExceptions publicbooleanisIgnoreExceptions() Description copied from interface:AppenderAdminMBean Returns how exceptions thrown on the instrumented Appender are handled. Specified by: isIgnoreExceptionsin interfaceAppenderAdminMBean Returns: true if any exceptions thrown by the Appender will be logged or false if such exceptions are re-thrown.
jmx,"getErrorHandler publicStringgetErrorHandler() Description copied from interface:AppenderAdminMBean Returns the result of calling toString on the error handler of this appender, or ""null"" if no error handler was set. Specified by: getErrorHandlerin interfaceAppenderAdminMBean Returns: result of calling toString on the error handler of this appender, or ""null"""
jmx,getFilter publicStringgetFilter() Description copied from interface:AppenderAdminMBean Returns a string description of all filters configured for the instrumented Appender. Specified by: getFilterin interfaceAppenderAdminMBean Returns: a string description of all configured filters for this appender
jmx,getName StringgetName() Returns the name of the instrumented Appender. Returns: the name of the Appender
jmx,getLayout StringgetLayout() Returns the result of calling toString on the Layout object of the instrumented Appender. Returns: the Layout of the instrumented Appender as a string
jmx,isIgnoreExceptions booleanisIgnoreExceptions() Returns how exceptions thrown on the instrumented Appender are handled. Returns: true if any exceptions thrown by the Appender will be logged or false if such exceptions are re-thrown.
jmx,"getErrorHandler StringgetErrorHandler() Returns the result of calling toString on the error handler of this appender, or ""null"" if no error handler was set. Returns: result of calling toString on the error handler of this appender, or ""null"""
jmx,getFilter StringgetFilter() Returns a string description of all filters configured for the instrumented Appender. Returns: a string description of all configured filters for this appender
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Returns: the ObjectName See Also: AppenderAdminMBean.PATTERN
jmx,AppenderAdminMBean.PATTERN
jmx,getName publicStringgetName() Description copied from interface:AsyncAppenderAdminMBean Returns the name of the instrumented AsyncAppender. Specified by: getNamein interfaceAsyncAppenderAdminMBean Returns: the name of the AsyncAppender
jmx,getLayout publicStringgetLayout() Description copied from interface:AsyncAppenderAdminMBean Returns the result of calling toString on the Layout object of the instrumented AsyncAppender. Specified by: getLayoutin interfaceAsyncAppenderAdminMBean Returns: the Layout of the instrumented AsyncAppender as a string
jmx,isIgnoreExceptions publicbooleanisIgnoreExceptions() Description copied from interface:AsyncAppenderAdminMBean Returns how exceptions thrown on the instrumented AsyncAppender are handled. Specified by: isIgnoreExceptionsin interfaceAsyncAppenderAdminMBean Returns: true if any exceptions thrown by the AsyncAppender will be logged or false if such exceptions are re-thrown.
jmx,"getErrorHandler publicStringgetErrorHandler() Description copied from interface:AsyncAppenderAdminMBean Returns the result of calling toString on the error handler of this appender, or ""null"" if no error handler was set. Specified by: getErrorHandlerin interfaceAsyncAppenderAdminMBean Returns: result of calling toString on the error handler of this appender, or ""null"""
jmx,getFilter publicStringgetFilter() Description copied from interface:AsyncAppenderAdminMBean Returns a string description of all filters configured for the instrumented AsyncAppender. Specified by: getFilterin interfaceAsyncAppenderAdminMBean Returns: a string description of all configured filters for this appender
jmx,getAppenderRefs publicString[]getAppenderRefs() Description copied from interface:AsyncAppenderAdminMBean Returns a String array with the appender refs configured for the instrumented AsyncAppender. Specified by: getAppenderRefsin interfaceAsyncAppenderAdminMBean Returns: the appender refs for the instrumented AsyncAppender.
jmx,"isIncludeLocation publicbooleanisIncludeLocation() Returns true if this AsyncAppender will take a snapshot of the stack with every log event to determine the class and method where the logging call was made. Specified by: isIncludeLocationin interfaceAsyncAppenderAdminMBean Returns: true if location is included with every event, false otherwise"
jmx,"isBlocking publicbooleanisBlocking() Returns true if this AsyncAppender will block when the queue is full, or false if events are dropped when the queue is full. Specified by: isBlockingin interfaceAsyncAppenderAdminMBean Returns: whether this AsyncAppender will block or drop events when the queue is full."
jmx,getErrorRef publicStringgetErrorRef() Returns the name of the appender that any errors are logged to or null. Specified by: getErrorRefin interfaceAsyncAppenderAdminMBean Returns: the name of the appender that any errors are logged to or null
jmx,getQueueCapacity publicintgetQueueCapacity() Specified by: getQueueCapacityin interfaceAsyncAppenderAdminMBean
jmx,getQueueRemainingCapacity publicintgetQueueRemainingCapacity() Specified by: getQueueRemainingCapacityin interfaceAsyncAppenderAdminMBean
jmx,getName StringgetName() Returns the name of the instrumented AsyncAppender. Returns: the name of the AsyncAppender
jmx,getLayout StringgetLayout() Returns the result of calling toString on the Layout object of the instrumented AsyncAppender. Returns: the Layout of the instrumented AsyncAppender as a string
jmx,isIgnoreExceptions booleanisIgnoreExceptions() Returns how exceptions thrown on the instrumented AsyncAppender are handled. Returns: true if any exceptions thrown by the AsyncAppender will be logged or false if such exceptions are re-thrown.
jmx,"getErrorHandler StringgetErrorHandler() Returns the result of calling toString on the error handler of this appender, or ""null"" if no error handler was set. Returns: result of calling toString on the error handler of this appender, or ""null"""
jmx,getFilter StringgetFilter() Returns a string description of all filters configured for the instrumented AsyncAppender. Returns: a string description of all configured filters for this appender
jmx,getAppenderRefs String[]getAppenderRefs() Returns a String array with the appender refs configured for the instrumented AsyncAppender. Returns: the appender refs for the instrumented AsyncAppender.
jmx,"isIncludeLocation booleanisIncludeLocation() Returns true if this AsyncAppender will take a snapshot of the stack with every log event to determine the class and method where the logging call was made. Returns: true if location is included with every event, false otherwise"
jmx,"isBlocking booleanisBlocking() Returns true if this AsyncAppender will block when the queue is full, or false if events are dropped when the queue is full. Returns: whether this AsyncAppender will block or drop events when the queue is full."
jmx,getErrorRef StringgetErrorRef() Returns the name of the appender that any errors are logged to or null. Returns: the name of the appender that any errors are logged to or null
jmx,getQueueCapacity intgetQueueCapacity()
jmx,getQueueRemainingCapacity intgetQueueRemainingCapacity()
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Returns: the ObjectName See Also: ContextSelectorAdminMBean.PATTERN
jmx,ContextSelectorAdminMBean.PATTERN
jmx,getImplementationClassName publicStringgetImplementationClassName() Description copied from interface:ContextSelectorAdminMBean Returns the name of the class implementing the ContextSelector interface. Specified by: getImplementationClassNamein interfaceContextSelectorAdminMBean Returns: the name of the ContextSelector implementation class.
jmx,getImplementationClassName StringgetImplementationClassName() Returns the name of the class implementing the ContextSelector interface. Returns: the name of the ContextSelector implementation class.
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Returns: the ObjectName See Also: LoggerConfigAdminMBean.PATTERN
jmx,LoggerConfigAdminMBean.PATTERN
jmx,getName publicStringgetName() Description copied from interface:LoggerConfigAdminMBean Returns the name of the instrumented LoggerConfig. Specified by: getNamein interfaceLoggerConfigAdminMBean Returns: the name of the LoggerConfig
jmx,getLevel publicStringgetLevel() Description copied from interface:LoggerConfigAdminMBean Returns the LoggerConfig level as a String. Specified by: getLevelin interfaceLoggerConfigAdminMBean Returns: the LoggerConfig level.
jmx,setLevel publicvoidsetLevel(Stringlevel) Description copied from interface:LoggerConfigAdminMBean Sets the LoggerConfig level to the specified value. Specified by: setLevelin interfaceLoggerConfigAdminMBean Parameters: level - the new LoggerConfig level.
jmx,"isAdditive publicbooleanisAdditive() Description copied from interface:LoggerConfigAdminMBean Returns whether the instrumented LoggerConfig is additive. Specified by: isAdditivein interfaceLoggerConfigAdminMBean Returns: true if the LoggerConfig is additive, false otherwise"
jmx,"setAdditive publicvoidsetAdditive(booleanadditive) Description copied from interface:LoggerConfigAdminMBean Sets whether the instrumented LoggerConfig should be additive. Specified by: setAdditivein interfaceLoggerConfigAdminMBean Parameters: additive - true if the instrumented LoggerConfig should be additive, false otherwise"
jmx,isIncludeLocation publicbooleanisIncludeLocation() Description copied from interface:LoggerConfigAdminMBean Returns whether the instrumented LoggerConfig is configured to include location. Specified by: isIncludeLocationin interfaceLoggerConfigAdminMBean Returns: whether location should be passed downstream
jmx,getFilter publicStringgetFilter() Description copied from interface:LoggerConfigAdminMBean Returns a string description of all filters configured for the instrumented LoggerConfig. Specified by: getFilterin interfaceLoggerConfigAdminMBean Returns: a string description of all configured filters for this LoggerConfig
jmx,getAppenderRefs publicString[]getAppenderRefs() Description copied from interface:LoggerConfigAdminMBean Returns a String array with the appender refs configured for the instrumented LoggerConfig. Specified by: getAppenderRefsin interfaceLoggerConfigAdminMBean Returns: the appender refs for the instrumented LoggerConfig.
jmx,getName StringgetName() Returns the name of the instrumented LoggerConfig. Returns: the name of the LoggerConfig
jmx,getLevel StringgetLevel() Returns the LoggerConfig level as a String. Returns: the LoggerConfig level.
jmx,"setLevel voidsetLevel(Stringlevel) Sets the LoggerConfig level to the specified value. Parameters: level - the new LoggerConfig level. Throws: IllegalArgumentException - if the specified level is not one of ""OFF"", ""FATAL"", ""ERROR"", ""WARN"", ""INFO"", ""DEBUG"", ""TRACE"", ""ALL"""
jmx,"isAdditive booleanisAdditive() Returns whether the instrumented LoggerConfig is additive. Returns: true if the LoggerConfig is additive, false otherwise"
jmx,"setAdditive voidsetAdditive(booleanadditive) Sets whether the instrumented LoggerConfig should be additive. Parameters: additive - true if the instrumented LoggerConfig should be additive, false otherwise"
jmx,isIncludeLocation booleanisIncludeLocation() Returns whether the instrumented LoggerConfig is configured to include location. Returns: whether location should be passed downstream
jmx,getFilter StringgetFilter() Returns a string description of all filters configured for the instrumented LoggerConfig. Returns: a string description of all configured filters for this LoggerConfig
jmx,getAppenderRefs String[]getAppenderRefs() Returns a String array with the appender refs configured for the instrumented LoggerConfig. Returns: the appender refs for the instrumented LoggerConfig.
jmx,getStatus publicStringgetStatus() Description copied from interface:LoggerContextAdminMBean Returns the status of the instrumented LoggerContext. Specified by: getStatusin interfaceLoggerContextAdminMBean Returns: the LoggerContext status.
jmx,getName publicStringgetName() Description copied from interface:LoggerContextAdminMBean Returns the name of the instrumented LoggerContext. Specified by: getNamein interfaceLoggerContextAdminMBean Returns: the name of the instrumented LoggerContext.
jmx,getConfigLocationUri publicStringgetConfigLocationUri() Description copied from interface:LoggerContextAdminMBean Returns the configuration location URI as a String. Specified by: getConfigLocationUriin interfaceLoggerContextAdminMBean Returns: the configuration location
jmx,"setConfigLocationUri publicvoidsetConfigLocationUri(StringconfigLocation) throws URISyntaxException, IOException Description copied from interface:LoggerContextAdminMBean Sets the configuration location to the specified URI. This will cause the instrumented LoggerContext to reconfigure. Specified by: setConfigLocationUriin interfaceLoggerContextAdminMBean Parameters: configLocation - location of the configuration file in URI format. Throws: URISyntaxException - if the format of the specified configLocationURI is incorrect IOException - if an error occurred reading the specified location"
jmx,propertyChange publicvoidpropertyChange(PropertyChangeEventevt) Specified by: propertyChangein interfacePropertyChangeListener
jmx,"getConfigText publicStringgetConfigText() throws IOException Description copied from interface:LoggerContextAdminMBean Returns the configuration text, which may be the contents of the configuration file or the text that was last set with a call to setConfigText. If reading a file, this method assumes the file's character encoding is UTF-8. Specified by: getConfigTextin interfaceLoggerContextAdminMBean Returns: the configuration text Throws: IOException - if a problem occurred reading the contents of the config file."
jmx,"getConfigText publicStringgetConfigText(StringcharsetName) throws IOException Description copied from interface:LoggerContextAdminMBean Returns the configuration text, which may be the contents of the configuration file or the text that was last set with a call to setConfigText. Specified by: getConfigTextin interfaceLoggerContextAdminMBean Parameters: charsetName - the encoding to use to convert the file's bytes into the resulting string. Returns: the configuration text Throws: IOException - if a problem occurred reading the contents of the config file."
jmx,"setConfigText publicvoidsetConfigText(StringconfigText, StringcharsetName) Description copied from interface:LoggerContextAdminMBean Sets the configuration text. This does not replace the contents of the configuration file, but does cause the instrumented LoggerContext to be reconfigured with the specified text. Specified by: setConfigTextin interfaceLoggerContextAdminMBean Parameters: configText - the configuration text in XML or JSON format charsetName - name of the Charset used to convert the specified configText to bytes"
jmx,getConfigName publicStringgetConfigName() Description copied from interface:LoggerContextAdminMBean Returns the name of the Configuration of the instrumented LoggerContext. Specified by: getConfigNamein interfaceLoggerContextAdminMBean Returns: the Configuration name
jmx,getConfigClassName publicStringgetConfigClassName() Description copied from interface:LoggerContextAdminMBean Returns the class name of the Configuration of the instrumented LoggerContext. Specified by: getConfigClassNamein interfaceLoggerContextAdminMBean Returns: the class name of the Configuration.
jmx,getConfigFilter publicStringgetConfigFilter() Description copied from interface:LoggerContextAdminMBean Returns a string description of all Filters configured in the Configuration of the instrumented LoggerContext. Specified by: getConfigFilterin interfaceLoggerContextAdminMBean Returns: a string description of all Filters configured
jmx,"getConfigProperties publicMap<String,String>getConfigProperties() Description copied from interface:LoggerContextAdminMBean Returns a map with configured properties. Specified by: getConfigPropertiesin interfaceLoggerContextAdminMBean Returns: a map with configured properties."
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Specified by: getObjectNamein interfaceLoggerContextAdminMBean Returns: the ObjectName See Also: LoggerContextAdminMBean.PATTERN
jmx,LoggerContextAdminMBean.PATTERN
jmx,getObjectName ObjectNamegetObjectName() Returns the ObjectName that this MBean is registered with in the MBean server.
jmx,getStatus StringgetStatus() Returns the status of the instrumented LoggerContext. Returns: the LoggerContext status.
jmx,getName StringgetName() Returns the name of the instrumented LoggerContext. Returns: the name of the instrumented LoggerContext.
jmx,getConfigLocationUri StringgetConfigLocationUri() Returns the configuration location URI as a String. Returns: the configuration location
jmx,"setConfigLocationUri voidsetConfigLocationUri(StringconfigLocation) throws URISyntaxException, IOException Sets the configuration location to the specified URI. This will cause the instrumented LoggerContext to reconfigure. Parameters: configLocation - location of the configuration file in URI format. Throws: URISyntaxException - if the format of the specified configLocationURI is incorrect IOException - if an error occurred reading the specified location"
jmx,"getConfigText StringgetConfigText() throws IOException Returns the configuration text, which may be the contents of the configuration file or the text that was last set with a call to setConfigText. If reading a file, this method assumes the file's character encoding is UTF-8. Returns: the configuration text Throws: IOException - if a problem occurred reading the contents of the config file."
jmx,"getConfigText StringgetConfigText(StringcharsetName) throws IOException Returns the configuration text, which may be the contents of the configuration file or the text that was last set with a call to setConfigText. Parameters: charsetName - the encoding to use to convert the file's bytes into the resulting string. Returns: the configuration text Throws: IOException - if a problem occurred reading the contents of the config file."
jmx,"setConfigText voidsetConfigText(StringconfigText, StringcharsetName) Sets the configuration text. This does not replace the contents of the configuration file, but does cause the instrumented LoggerContext to be reconfigured with the specified text. Parameters: configText - the configuration text in XML or JSON format charsetName - name of the Charset used to convert the specified configText to bytes Throws: IllegalArgumentException - if a problem occurs configuring from the specified text"
jmx,getConfigName StringgetConfigName() Returns the name of the Configuration of the instrumented LoggerContext. Returns: the Configuration name
jmx,getConfigClassName StringgetConfigClassName() Returns the class name of the Configuration of the instrumented LoggerContext. Returns: the class name of the Configuration.
jmx,getConfigFilter StringgetConfigFilter() Returns a string description of all Filters configured in the Configuration of the instrumented LoggerContext. Returns: a string description of all Filters configured
jmx,"getConfigProperties Map<String,String>getConfigProperties() Returns a map with configured properties. Returns: a map with configured properties."
jmx,"forAsyncLogger public staticRingBufferAdminforAsyncLogger(com.lmax.disruptor.RingBuffer<?>ringBuffer, StringcontextName)"
jmx,"forAsyncLoggerConfig public staticRingBufferAdminforAsyncLoggerConfig(com.lmax.disruptor.RingBuffer<?>ringBuffer, StringcontextName, StringconfigName)"
jmx,"getBufferSize publiclonggetBufferSize() Description copied from interface:RingBufferAdminMBean Returns the number of slots that the ring buffer was configured with. Disruptor ring buffers are bounded-size data structures, this number does not change during the life of the ring buffer. Specified by: getBufferSizein interfaceRingBufferAdminMBean Returns: the number of slots that the ring buffer was configured with"
jmx,getRemainingCapacity publiclonggetRemainingCapacity() Description copied from interface:RingBufferAdminMBean Returns the number of available slots in the ring buffer. May vary wildly between invocations. Specified by: getRemainingCapacityin interfaceRingBufferAdminMBean Returns: the number of available slots in the ring buffer
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Returns: the ObjectName See Also: RingBufferAdminMBean.PATTERN_ASYNC_LOGGER RingBufferAdminMBean.PATTERN_ASYNC_LOGGER_CONFIG
jmx,RingBufferAdminMBean.PATTERN_ASYNC_LOGGER
jmx,RingBufferAdminMBean.PATTERN_ASYNC_LOGGER_CONFIG
jmx,"getBufferSize longgetBufferSize() Returns the number of slots that the ring buffer was configured with. Disruptor ring buffers are bounded-size data structures, this number does not change during the life of the ring buffer. Returns: the number of slots that the ring buffer was configured with"
jmx,getRemainingCapacity longgetRemainingCapacity() Returns the number of available slots in the ring buffer. May vary wildly between invocations. Returns: the number of available slots in the ring buffer
jmx,"escape public staticStringescape(Stringname) Either returns the specified name as is, or returns a quoted value containing the specified name with the special characters (comma, equals, colon, quote, asterisk, or question mark) preceded with a backslash. Parameters: name - the name to escape so it can be used as a value in an ObjectName. Returns: the escaped name"
jmx,reregisterMBeansAfterReconfigure public staticvoidreregisterMBeansAfterReconfigure()
jmx,reregisterMBeansAfterReconfigure public staticvoidreregisterMBeansAfterReconfigure(MBeanServermbs)
jmx,unregisterMBeans public staticvoidunregisterMBeans() Unregister all log4j MBeans from the platform MBean server.
jmx,unregisterMBeans public staticvoidunregisterMBeans(MBeanServermbs) Unregister all log4j MBeans from the specified MBean server. Parameters: mbs - the MBean server to unregister from.
jmx,unregisterLoggerContext public staticvoidunregisterLoggerContext(StringloggerContextName) Unregisters all MBeans associated with the specified logger context (including MBeans for LoggerConfigs and Appenders from the platform MBean server. Parameters: loggerContextName - name of the logger context to unregister
jmx,"unregisterLoggerContext public staticvoidunregisterLoggerContext(StringcontextName, MBeanServermbs) Unregisters all MBeans associated with the specified logger context (including MBeans for LoggerConfigs and Appenders from the platform MBean server. Parameters: contextName - name of the logger context to unregister mbs - the MBean Server to unregister the instrumented objects from"
jmx,"addNotificationListener publicvoidaddNotificationListener(NotificationListenerlistener, NotificationFilterfilter, Objecthandback) Specified by: addNotificationListenerin interfaceNotificationBroadcaster Overrides: addNotificationListenerin classNotificationBroadcasterSupport"
jmx,"preRegister publicObjectNamepreRegister(MBeanServerserver, ObjectNamename) Specified by: preRegisterin interfaceMBeanRegistration"
jmx,postRegister publicvoidpostRegister(BooleanregistrationDone) Specified by: postRegisterin interfaceMBeanRegistration
jmx,preDeregister publicvoidpreDeregister() Specified by: preDeregisterin interfaceMBeanRegistration
jmx,postDeregister publicvoidpostDeregister() Specified by: postDeregisterin interfaceMBeanRegistration
jmx,"getStatusDataHistory publicString[]getStatusDataHistory() Description copied from interface:StatusLoggerAdminMBean Returns a string array with the most recent messages in the status history. The list has up to 200 entries by default but the length can be configured with system property ""log4j2.status.entries"". Specified by: getStatusDataHistoryin interfaceStatusLoggerAdminMBean Returns: the most recent messages logged by the StatusLogger."
jmx,"getStatusData publicList<StatusData>getStatusData() Description copied from interface:StatusLoggerAdminMBean Returns a list with the most recent StatusData objects in the status history. The list has up to 200 entries by default but the length can be configured with system property ""log4j2.status.entries"". Note that the returned objects may contain Throwables from external libraries. JMX clients calling this method must be prepared to deal with the errors that occur if they do not have the class definition for such Throwables in their classpath. Specified by: getStatusDatain interfaceStatusLoggerAdminMBean Returns: the most recent messages logged by the StatusLogger."
jmx,getLevel publicStringgetLevel() Description copied from interface:StatusLoggerAdminMBean Returns the StatusLogger level as a String. Specified by: getLevelin interfaceStatusLoggerAdminMBean Returns: the StatusLogger level.
jmx,getStatusLevel publicLevelgetStatusLevel() Specified by: getStatusLevelin interfaceStatusListener
jmx,setLevel publicvoidsetLevel(Stringlevel) Description copied from interface:StatusLoggerAdminMBean Sets the StatusLogger level to the specified value. Specified by: setLevelin interfaceStatusLoggerAdminMBean Parameters: level - the new StatusLogger level.
jmx,getContextName publicStringgetContextName() Description copied from interface:StatusLoggerAdminMBean Returns the name of the LoggerContext that the StatusLogger is associated with. Specified by: getContextNamein interfaceStatusLoggerAdminMBean Returns: logger context name
jmx,log publicvoidlog(StatusDatadata) Specified by: login interfaceStatusListener
jmx,getObjectName publicObjectNamegetObjectName() Returns the ObjectName of this mbean. Specified by: getObjectNamein interfaceStatusLoggerAdminMBean Returns: the ObjectName See Also: StatusLoggerAdminMBean.PATTERN
jmx,StatusLoggerAdminMBean.PATTERN
jmx,close publicvoidclose() throws IOException Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable Throws: IOException
jmx,getObjectName ObjectNamegetObjectName() Returns the ObjectName that this status logger mbean is registered with. Returns: the ObjectName of this StatusLogger MBean
jmx,"getStatusData List<StatusData>getStatusData() Returns a list with the most recent StatusData objects in the status history. The list has up to 200 entries by default but the length can be configured with system property ""log4j2.status.entries"". Note that the returned objects may contain Throwables from external libraries. JMX clients calling this method must be prepared to deal with the errors that occur if they do not have the class definition for such Throwables in their classpath. Returns: the most recent messages logged by the StatusLogger."
jmx,"getStatusDataHistory String[]getStatusDataHistory() Returns a string array with the most recent messages in the status history. The list has up to 200 entries by default but the length can be configured with system property ""log4j2.status.entries"". Returns: the most recent messages logged by the StatusLogger."
jmx,getLevel StringgetLevel() Returns the StatusLogger level as a String. Returns: the StatusLogger level.
jmx,"setLevel voidsetLevel(Stringlevel) Sets the StatusLogger level to the specified value. Parameters: level - the new StatusLogger level. Throws: IllegalArgumentException - if the specified level is not one of ""OFF"", ""FATAL"", ""ERROR"", ""WARN"", ""INFO"", ""DEBUG"", ""TRACE"", ""ALL"""
jmx,getContextName StringgetContextName() Returns the name of the LoggerContext that the StatusLogger is associated with. Returns: logger context name
layout,"createFormat protected staticorg.apache.commons.csv.CSVFormatcreateFormat(Stringformat, Characterdelimiter, Characterescape, Characterquote, org.apache.commons.csv.QuoteModequoteMode, StringnullString, StringrecordSeparator)"
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Overrides: getContentTypein classAbstractStringLayout Returns: The default content type for Strings."
layout,getFormat publicorg.apache.commons.csv.CSVFormatgetFormat()
layout,asBuilder publicBasBuilder()
layout,getConfiguration publicConfigurationgetConfiguration()
layout,getFooter publicbyte[]getFooter()
layout,getHeader publicbyte[]getHeader()
layout,setConfiguration publicBsetConfiguration(Configurationconfiguration)
layout,setFooter publicBsetFooter(byte[]footer)
layout,setHeader publicBsetHeader(byte[]header)
layout,getConfiguration publicConfigurationgetConfiguration()
layout,"getContentFormat publicMap<String,String>getContentFormat() Description copied from interface:Layout Returns a description of the content format. Specified by: getContentFormatin interfaceLayout<T extends Serializable> Returns: a Map of key/value pairs describing the Layout-specific content format, or an empty Map if no content format descriptors are specified."
layout,"getFooter publicbyte[]getFooter() Returns the footer, if one is available. Specified by: getFooterin interfaceLayout<T extends Serializable> Returns: A byte array containing the footer."
layout,"getHeader publicbyte[]getHeader() Returns the header, if one is available. Specified by: getHeaderin interfaceLayout<T extends Serializable> Returns: A byte array containing the header."
layout,markEvent protectedvoidmarkEvent()
layout,"encode publicvoidencode(LogEventevent, ByteBufferDestinationdestination) Encodes the specified source LogEvent to some binary representation and writes the result to the specified destination. The default implementation of this method delegates to the Layout.toByteArray(LogEvent) method which allocates temporary objects. Subclasses can override this method to provide a garbage-free implementation. For text-based layouts, AbstractStringLayout provides various convenience methods to help with this: @Plugin(name = ""MyLayout"", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true) public final class MyLayout extends AbstractStringLayout { @Override public void encode(LogEvent event, ByteBufferDestination destination) { StringBuilder text = getStringBuilder(); convertLogEventToText(event, text); getStringBuilderEncoder().encode(text, destination); } private void convertLogEventToText(LogEvent event, StringBuilder destination) { ... // append a text representation of the log event to the StringBuilder } } Specified by: encodein interfaceEncoder<T extends Serializable> Parameters: event - the LogEvent to encode. destination - holds the ByteBuffer to write into. See Also: AbstractStringLayout.getStringBuilder() AbstractStringLayout.getStringBuilderEncoder()"
layout,AbstractStringLayout.getStringBuilder()
layout,AbstractStringLayout.getStringBuilderEncoder()
layout,getCharset publicCharsetgetCharset()
layout,getFooterSerializer publicAbstractStringLayout.SerializergetFooterSerializer()
layout,getHeaderSerializer publicAbstractStringLayout.SerializergetHeaderSerializer()
layout,setCharset publicBsetCharset(Charsetcharset)
layout,setFooterSerializer publicBsetFooterSerializer(AbstractStringLayout.SerializerfooterSerializer)
layout,setHeaderSerializer publicBsetHeaderSerializer(AbstractStringLayout.SerializerheaderSerializer)
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
layout,getStringBuilder protected staticStringBuildergetStringBuilder() Returns a StringBuilder that this Layout implementation can use to write the formatted log event to. Returns: a StringBuilder
layout,trimToMaxSize protected staticvoidtrimToMaxSize(StringBuilderstringBuilder)
layout,getBytes protectedbyte[]getBytes(Strings)
layout,getCharset publicCharsetgetCharset() Description copied from interface:StringLayout Gets the Charset this layout uses to encode Strings into bytes. Specified by: getCharsetin interfaceStringLayout Returns: the Charset this layout uses to encode Strings into bytes.
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Returns: The default content type for Strings."
layout,"getFooter publicbyte[]getFooter() Returns the footer, if one is available. Specified by: getFooterin interfaceLayout<String> Overrides: getFooterin classAbstractLayout<String> Returns: A byte array containing the footer."
layout,getFooterSerializer publicAbstractStringLayout.SerializergetFooterSerializer()
layout,"getHeader publicbyte[]getHeader() Returns the header, if one is available. Specified by: getHeaderin interfaceLayout<String> Overrides: getHeaderin classAbstractLayout<String> Returns: A byte array containing the header."
layout,getHeaderSerializer publicAbstractStringLayout.SerializergetHeaderSerializer()
layout,getStringBuilderEncoder protectedEncoder<StringBuilder>getStringBuilderEncoder() Returns a Encoder<StringBuilder> that this Layout implementation can use for encoding log events. Returns: a Encoder<StringBuilder>
layout,"serializeToBytes protectedbyte[]serializeToBytes(AbstractStringLayout.Serializerserializer, byte[]defaultValue)"
layout,serializeToString protectedStringserializeToString(AbstractStringLayout.Serializerserializer)
layout,toByteArray publicbyte[]toByteArray(LogEventevent) Formats the Log Event as a byte array. Specified by: toByteArrayin interfaceLayout<String> Parameters: event - The Log Event. Returns: The formatted event as a byte array.
layout,toSerializable StringtoSerializable(LogEventevent)
layout,"toSerializable defaultStringBuildertoSerializable(LogEventevent, StringBuilderbuilder) Specified by: toSerializablein interfaceAbstractStringLayout.Serializer2"
layout,"toSerializable StringBuildertoSerializable(LogEventevent, StringBuilderbuilder)"
layout,getByteBuffer ByteBuffergetByteBuffer() Returns the buffer to write to. Returns: the buffer to write to
layout,drain ByteBufferdrain(ByteBufferbuf) Consumes the buffer content and returns a buffer with more available space (which may or may not be the same instance). Called by the producer when buffer becomes too full to write to. Parameters: buf - the buffer to drain Returns: a buffer with more available space (which may or may not be the same instance)
layout,"writeBytes voidwriteBytes(ByteBufferdata) Writes the given data to this ByteBufferDestination entirely. Call of this method should *not* be protected with synchronized on this ByteBufferDestination instance. ByteBufferDestination implementations should synchronize themselves inside this method, if needed. Since: 2.9 (see LOG4J2-1874)"
layout,"writeBytes voidwriteBytes(byte[]data, intoffset, intlength) Writes the given data to this ByteBufferDestination. Call of this method should *not* be protected with synchronized on this ByteBufferDestination instance. ByteBufferDestination implementations should synchronize themselves inside this method, if needed. This method should behave identically to writeBytes(ByteBuffer.wrap(data, offset, length). It is provided to allow callers not to generate extra garbage. This method is called writeBytes() to avoid clashing with OutputStreamManager.write(byte[], int, int), which might be overridden in user-defined subclasses as protected, hence adding it to interface and requiring the method to be public breaks source compatibility. Since: 2.9 (see LOG4J2-1874)"
layout,"writeToUnsynchronized public staticvoidwriteToUnsynchronized(ByteBuffersource, ByteBufferDestinationdestination) Writes the specified data to the specified destination. Doesn't synchronize on the destination object. The helper method for ByteBufferDestination.writeBytes(ByteBuffer) implementations. Parameters: source - the data to write destination - the ByteBufferDestination to write to"
layout,"writeToUnsynchronized public staticvoidwriteToUnsynchronized(byte[]data, intoffset, intlength, ByteBufferDestinationdestination) Writes the specified data to the specified destination. Doesn't synchronize on the destination object. The helper method for ByteBufferDestination.writeBytes(byte[], int, int) implementations. Parameters: data - the data to write offset - where to start in the specified data array length - the number of bytes to write destination - the ByteBufferDestination to write to"
layout,createDefaultLayout public staticCsvLogEventLayoutcreateDefaultLayout()
layout,createLayout public staticCsvLogEventLayoutcreateLayout(org.apache.commons.csv.CSVFormatformat)
layout,"createLayout @PluginFactory public staticCsvLogEventLayoutcreateLayout(@PluginConfiguration Configurationconfig, @PluginAttribute(value=""format"",defaultString=""Default"") Stringformat, @PluginAttribute(""delimiter"") Characterdelimiter, @PluginAttribute(""escape"") Characterescape, @PluginAttribute(""quote"") Characterquote, @PluginAttribute(""quoteMode"") org.apache.commons.csv.QuoteModequoteMode, @PluginAttribute(""nullString"") StringnullString, @PluginAttribute(""recordSeparator"") StringrecordSeparator, @PluginAttribute(value=""charset"",defaultString=""UTF-8"") Charsetcharset, @PluginAttribute(""header"") Stringheader, @PluginAttribute(""footer"") Stringfooter)"
layout,toSerializable publicStringtoSerializable(LogEventevent) Description copied from interface:Layout Formats the event as an Object that can be serialized. Parameters: event - The Logging Event. Returns: The formatted event.
layout,createDefaultLayout public staticAbstractCsvLayoutcreateDefaultLayout()
layout,createLayout public staticAbstractCsvLayoutcreateLayout(org.apache.commons.csv.CSVFormatformat)
layout,"createLayout @PluginFactory public staticAbstractCsvLayoutcreateLayout(@PluginConfiguration Configurationconfig, @PluginAttribute(value=""format"",defaultString=""Default"") Stringformat, @PluginAttribute(""delimiter"") Characterdelimiter, @PluginAttribute(""escape"") Characterescape, @PluginAttribute(""quote"") Characterquote, @PluginAttribute(""quoteMode"") org.apache.commons.csv.QuoteModequoteMode, @PluginAttribute(""nullString"") StringnullString, @PluginAttribute(""recordSeparator"") StringrecordSeparator, @PluginAttribute(value=""charset"",defaultString=""UTF-8"") Charsetcharset, @PluginAttribute(""header"") Stringheader, @PluginAttribute(""footer"") Stringfooter)"
layout,toSerializable publicStringtoSerializable(LogEventevent) Description copied from interface:Layout Formats the event as an Object that can be serialized. Parameters: event - The Logging Event. Returns: The formatted event.
layout,"encode voidencode(Tsource, ByteBufferDestinationdestination) Encodes the specified source object to some binary representation and writes the result to the specified destination. Parameters: source - the object to encode. destination - holds the ByteBuffer to write into."
layout,build publicGelfLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends GelfLayout.Builder<B>> Returns: the configured instance.
layout,getHost publicStringgetHost()
layout,getCompressionType publicGelfLayout.CompressionTypegetCompressionType()
layout,getCompressionThreshold publicintgetCompressionThreshold()
layout,isIncludeStacktrace publicbooleanisIncludeStacktrace()
layout,isIncludeThreadContext publicbooleanisIncludeThreadContext()
layout,isIncludeNullDelimiter publicbooleanisIncludeNullDelimiter()
layout,isIncludeNewLineDelimiter publicbooleanisIncludeNewLineDelimiter()
layout,getAdditionalFields publicKeyValuePair[]getAdditionalFields()
layout,"setHost publicBsetHost(Stringhost) The value of the host property (optional, defaults to local host name). Returns: this builder"
layout,"setCompressionType publicBsetCompressionType(GelfLayout.CompressionTypecompressionType) Compression to use (optional, defaults to GZIP). Returns: this builder"
layout,"setCompressionThreshold publicBsetCompressionThreshold(intcompressionThreshold) Compress if data is larger than this number of bytes (optional, defaults to 1024). Returns: this builder"
layout,"setIncludeStacktrace publicBsetIncludeStacktrace(booleanincludeStacktrace) Whether to include full stacktrace of logged Throwables (optional, default to true). If set to false, only the class name and message of the Throwable will be included. Returns: this builder"
layout,"setIncludeThreadContext publicBsetIncludeThreadContext(booleanincludeThreadContext) Whether to include thread context as additional fields (optional, default to true). Returns: this builder"
layout,"setIncludeNullDelimiter publicBsetIncludeNullDelimiter(booleanincludeNullDelimiter) Whether to include NULL byte as delimiter after each event (optional, default to false). Useful for Graylog GELF TCP input. Returns: this builder"
layout,"setIncludeNewLineDelimiter publicBsetIncludeNewLineDelimiter(booleanincludeNewLineDelimiter) Whether to include newline (LF) as delimiter after each event (optional, default to false). Returns: this builder"
layout,setAdditionalFields publicBsetAdditionalFields(KeyValuePair[]additionalFields) Additional fields to set on each log event. Returns: this builder
layout,setMessagePattern publicBsetMessagePattern(Stringpattern) The pattern to use to format the message. Parameters: pattern - the pattern string. Returns: this builder
layout,setPatternSelector publicBsetPatternSelector(PatternSelectorpatternSelector) The PatternSelector to use to format the message. Parameters: patternSelector - the PatternSelector. Returns: this builder
layout,setMdcIncludes publicBsetMdcIncludes(StringmdcIncludes) A comma separated list of thread context keys to include; Parameters: mdcIncludes - the list of keys. Returns: this builder
layout,setMdcExcludes publicBsetMdcExcludes(StringmdcExcludes) A comma separated list of thread context keys to include; Parameters: mdcExcludes - the list of keys. Returns: this builder
layout,"setIncludeMapMessage publicBsetIncludeMapMessage(booleanincludeMapMessage) Whether to include MapMessage fields as additional fields (optional, default to true). Returns: this builder"
layout,setMapMessageIncludes publicBsetMapMessageIncludes(StringmapMessageIncludes) A comma separated list of thread context keys to include; Parameters: mapMessageIncludes - the list of keys. Returns: this builder
layout,setMapMessageExcludes publicBsetMapMessageExcludes(StringmapMessageExcludes) A comma separated list of MapMessage keys to exclude; Parameters: mapMessageExcludes - the list of keys. Returns: this builder
layout,setThreadContextPrefix publicBsetThreadContextPrefix(Stringprefix) The String to prefix the ThreadContext attributes. Parameters: prefix - The prefix value. Null values will be ignored. Returns: this builder.
layout,setMapPrefix publicBsetMapPrefix(Stringprefix) The String to prefix the MapMessage attributes. Parameters: prefix - The prefix value. Null values will be ignored. Returns: this builder.
layout,"values public staticGelfLayout.CompressionType[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
layout,valueOf public staticGelfLayout.CompressionTypevalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
layout,createDeflaterOutputStream public abstractDeflaterOutputStreamcreateDeflaterOutputStream(OutputStreamos) throws IOException Throws: IOException
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,"createLayout @Deprecated public staticGelfLayoutcreateLayout(@PluginAttribute(""host"") Stringhost, @PluginElement(""AdditionalField"") KeyValuePair[]additionalFields, @PluginAttribute(value=""compressionType"",defaultString=""GZIP"") GelfLayout.CompressionTypecompressionType, @PluginAttribute(value=""compressionThreshold"",defaultInt=1024) intcompressionThreshold, @PluginAttribute(value=""includeStacktrace"",defaultBoolean=true) booleanincludeStacktrace) Deprecated. Use newBuilder() instead"
layout,newBuilder @PluginBuilderFactory public static<B extends GelfLayout.Builder<B>>BnewBuilder()
layout,"getContentFormat publicMap<String,String>getContentFormat() Description copied from interface:Layout Returns a description of the content format. Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: a Map of key/value pairs describing the Layout-specific content format, or an empty Map if no content format descriptors are specified."
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Overrides: getContentTypein classAbstractStringLayout Returns: The default content type for Strings."
layout,toByteArray publicbyte[]toByteArray(LogEventevent) Description copied from class:AbstractStringLayout Formats the Log Event as a byte array. Specified by: toByteArrayin interfaceLayout<String> Overrides: toByteArrayin classAbstractStringLayout Parameters: event - The Log Event. Returns: The formatted event as a byte array.
layout,"encode publicvoidencode(LogEventevent, ByteBufferDestinationdestination) Description copied from class:AbstractLayout Encodes the specified source LogEvent to some binary representation and writes the result to the specified destination. The default implementation of this method delegates to the Layout.toByteArray(LogEvent) method which allocates temporary objects. Subclasses can override this method to provide a garbage-free implementation. For text-based layouts, AbstractStringLayout provides various convenience methods to help with this: @Plugin(name = ""MyLayout"", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true) public final class MyLayout extends AbstractStringLayout { @Override public void encode(LogEvent event, ByteBufferDestination destination) { StringBuilder text = getStringBuilder(); convertLogEventToText(event, text); getStringBuilderEncoder().encode(text, destination); } private void convertLogEventToText(LogEvent event, StringBuilder destination) { ... // append a text representation of the log event to the StringBuilder } } Specified by: encodein interfaceEncoder<LogEvent> Overrides: encodein classAbstractLayout<String> Parameters: event - the LogEvent to encode. destination - holds the ByteBuffer to write into. See Also: AbstractStringLayout.getStringBuilder() AbstractStringLayout.getStringBuilderEncoder()"
layout,AbstractStringLayout.getStringBuilder()
layout,AbstractStringLayout.getStringBuilderEncoder()
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware Overrides: requiresLocationin classAbstractStringLayout
layout,toSerializable publicStringtoSerializable(LogEventevent) Description copied from interface:Layout Formats the event as an Object that can be serialized. Parameters: event - The Logging Event. Returns: The formatted event.
layout,withLocationInfo publicHtmlLayout.BuilderwithLocationInfo(booleanlocationInfo)
layout,withTitle publicHtmlLayout.BuilderwithTitle(Stringtitle)
layout,withContentType publicHtmlLayout.BuilderwithContentType(StringcontentType)
layout,withCharset publicHtmlLayout.BuilderwithCharset(Charsetcharset)
layout,withFontSize publicHtmlLayout.BuilderwithFontSize(HtmlLayout.FontSizefontSize)
layout,withFontName publicHtmlLayout.BuilderwithFontName(StringfontName)
layout,setDatePattern publicHtmlLayout.BuildersetDatePattern(StringdatePattern)
layout,setTimezone publicHtmlLayout.BuildersetTimezone(Stringtimezone)
layout,build publicHtmlLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<HtmlLayout> Returns: the configured instance.
layout,"values public staticHtmlLayout.FontSize[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
layout,valueOf public staticHtmlLayout.FontSizevalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
layout,getFontSize publicStringgetFontSize()
layout,getFontSize public staticHtmlLayout.FontSizegetFontSize(Stringsize)
layout,larger publicHtmlLayout.FontSizelarger()
layout,getTitle publicStringgetTitle() For testing purposes.
layout,isLocationInfo publicbooleanisLocationInfo() For testing purposes.
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware Overrides: requiresLocationin classAbstractStringLayout
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats as a String. Parameters: event - The Logging Event. Returns: A String containing the LogEvent as HTML.
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Overrides: getContentTypein classAbstractStringLayout Returns: The default content type for Strings."
layout,getHeader publicbyte[]getHeader() Returns appropriate HTML headers. Specified by: getHeaderin interfaceLayout<String> Overrides: getHeaderin classAbstractStringLayout Returns: The header as a byte array.
layout,getFooter publicbyte[]getFooter() Returns the appropriate HTML footers. Specified by: getFooterin interfaceLayout<String> Overrides: getFooterin classAbstractStringLayout Returns: the footer as a byte array.
layout,"createLayout @Deprecated @PluginFactory public staticHtmlLayoutcreateLayout(@PluginAttribute(""locationInfo"") booleanlocationInfo, @PluginAttribute(value=""title"",defaultString=""Log4j Log Messages"") Stringtitle, @PluginAttribute(""contentType"") StringcontentType, @PluginAttribute(value=""charset"",defaultString=""UTF-8"") Charsetcharset, @PluginAttribute(""fontSize"") StringfontSize, @PluginAttribute(value=""fontName"",defaultString=""arial,sans-serif"") Stringfont) Deprecated. Creates an HTML Layout. Parameters: locationInfo - If ""true"", location information will be included. The default is false. title - The title to include in the file header. If none is specified the default title will be used. contentType - The content type. Defaults to ""text/html"". charset - The character set to use. If not specified, the default will be used. fontSize - The font size of the text. font - The font to use for the text. Returns: An HTML Layout."
layout,createDefaultLayout public staticHtmlLayoutcreateDefaultLayout() Creates an HTML Layout using the default settings. Returns: an HTML Layout.
layout,newBuilder @PluginBuilderFactory public staticHtmlLayout.BuildernewBuilder()
layout,build publicJsonLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends JsonLayout.Builder<B>> Returns: the configured instance.
layout,isPropertiesAsList publicbooleanisPropertiesAsList()
layout,setPropertiesAsList publicBsetPropertiesAsList(booleanpropertiesAsList)
layout,getObjectMessageAsJsonObject publicbooleangetObjectMessageAsJsonObject()
layout,setObjectMessageAsJsonObject publicBsetObjectMessageAsJsonObject(booleanobjectMessageAsJsonObject)
layout,getAdditionalFields publicKeyValuePair[]getAdditionalFields() Overrides: getAdditionalFieldsin classorg.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder<B extends JsonLayout.Builder<B>>
layout,setAdditionalFields publicBsetAdditionalFields(KeyValuePair[]additionalFields) Description copied from class:org.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder Additional fields to set on each log event. Overrides: setAdditionalFieldsin classorg.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder<B extends JsonLayout.Builder<B>> Returns: this builder
layout,"getHeader publicbyte[]getHeader() Returns appropriate JSON header. Specified by: getHeaderin interfaceLayout<String> Overrides: getHeaderin classAbstractStringLayout Returns: a byte array containing the header, opening the JSON array."
layout,"getFooter publicbyte[]getFooter() Returns appropriate JSON footer. Specified by: getFooterin interfaceLayout<String> Overrides: getFooterin classAbstractStringLayout Returns: a byte array containing the footer, closing the JSON array."
layout,"getContentFormat publicMap<String,String>getContentFormat() Description copied from interface:Layout Returns a description of the content format. Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: a Map of key/value pairs describing the Layout-specific content format, or an empty Map if no content format descriptors are specified."
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Overrides: getContentTypein classAbstractStringLayout Returns: The content type."
layout,"createLayout @Deprecated public staticJsonLayoutcreateLayout(Configurationconfig, booleanlocationInfo, booleanproperties, booleanpropertiesAsList, booleancomplete, booleancompact, booleaneventEol, StringheaderPattern, StringfooterPattern, Charsetcharset, booleanincludeStacktrace) Deprecated. Use newBuilder() instead Creates a JSON Layout. Parameters: config - The plugin configuration. locationInfo - If ""true"", includes the location information in the generated JSON. properties - If ""true"", includes the thread context map in the generated JSON. propertiesAsList - If true, the thread context map is included as a list of map entry objects, where each entry has a ""key"" attribute (whose value is the key) and a ""value"" attribute (whose value is the value). Defaults to false, in which case the thread context map is included as a simple map of key-value pairs. complete - If ""true"", includes the JSON header and footer, and comma between records. compact - If ""true"", does not use end-of-lines and indentation, defaults to ""false"". eventEol - If ""true"", forces an EOL after each log event (even if compact is ""true""), defaults to ""false"". This allows one even per line, even in compact mode. headerPattern - The header pattern, defaults to ""["" if null. footerPattern - The footer pattern, defaults to ""]"" if null. charset - The character set to use, if null, uses ""UTF-8"". includeStacktrace - If ""true"", includes the stacktrace of any Throwable in the generated JSON, defaults to ""true"". Returns: A JSON Layout."
layout,newBuilder @PluginBuilderFactory public static<B extends JsonLayout.Builder<B>>BnewBuilder()
layout,createDefaultLayout public staticJsonLayoutcreateDefaultLayout() Creates a JSON Layout using the default settings. Useful for testing. Returns: A JSON Layout.
layout,"toSerializable publicvoidtoSerializable(LogEventevent, Writerwriter) throws IOException Throws: IOException"
layout,valueNeedsLookup protected staticbooleanvalueNeedsLookup(Stringvalue)
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats a LogEvent. Parameters: event - The LogEvent. Returns: The XML representation of the LogEvent.
layout,wrapLogEvent protectedObjectwrapLogEvent(LogEventevent)
layout,build publicLevelPatternSelectorbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<LevelPatternSelector> Returns: the configured instance.
layout,setProperties publicLevelPatternSelector.BuildersetProperties(PatternMatch[]properties)
layout,setDefaultPattern publicLevelPatternSelector.BuildersetDefaultPattern(StringdefaultPattern)
layout,setAlwaysWriteExceptions publicLevelPatternSelector.BuildersetAlwaysWriteExceptions(booleanalwaysWriteExceptions)
layout,setDisableAnsi publicLevelPatternSelector.BuildersetDisableAnsi(booleandisableAnsi)
layout,setNoConsoleNoAnsi publicLevelPatternSelector.BuildersetNoConsoleNoAnsi(booleannoConsoleNoAnsi)
layout,setConfiguration publicLevelPatternSelector.BuildersetConfiguration(Configurationconfiguration)
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
layout,getFormatters publicPatternFormatter[]getFormatters(LogEventevent) Specified by: getFormattersin interfacePatternSelector
layout,newBuilder @PluginBuilderFactory public staticLevelPatternSelector.BuildernewBuilder() Creates a builder for a custom ScriptPatternSelector. Returns: a ScriptPatternSelector builder.
layout,"createSelector @Deprecated public staticLevelPatternSelectorcreateSelector(PatternMatch[]properties, StringdefaultPattern, booleanalwaysWriteExceptions, booleannoConsoleNoAnsi, Configurationconfiguration) Deprecated. Use newBuilder() instead. Deprecated, use newBuilder() instead. Parameters: properties - PatternMatch configuration items defaultPattern - the default pattern alwaysWriteExceptions - To always write exceptions even if the pattern contains no exception conversions. noConsoleNoAnsi - Do not output ANSI escape codes if System.console() is null. configuration - the current configuration Returns: a new MarkerPatternSelector."
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,"encode publicvoidencode(StringBuildersource, ByteBufferDestinationdestination) Description copied from interface:Encoder Encodes the specified source object to some binary representation and writes the result to the specified destination. Specified by: encodein interfaceEncoder<StringBuilder> Parameters: source - the object to encode. destination - holds the ByteBuffer to write into."
layout,"getMap publicMap<String,String>getMap()"
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,"createLoggerFields @PluginFactory public staticLoggerFieldscreateLoggerFields(@PluginElement(""LoggerFields"") KeyValuePair[]keyValuePairs, @PluginAttribute(""sdId"") StringsdId, @PluginAttribute(""enterpriseId"") StringenterpriseId, @PluginAttribute(""discardIfAllFieldsAreEmpty"") booleandiscardIfAllFieldsAreEmpty) Create a LoggerFields from KeyValuePairs. Parameters: keyValuePairs - An array of KeyValuePairs. sdId - The SD-ID in an SD-ELEMENT enterpriseId - The IANA assigned enterprise number discardIfAllFieldsAreEmpty - this SD-ELEMENT should be discarded if all fields are empty Returns: A LoggerFields instance containing a Map<String, String>."
layout,getSdId publicStructuredDataIdgetSdId()
layout,getDiscardIfAllFieldsAreEmpty publicbooleangetDiscardIfAllFieldsAreEmpty()
layout,build publicMarkerPatternSelectorbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<MarkerPatternSelector> Returns: the configured instance.
layout,setProperties publicMarkerPatternSelector.BuildersetProperties(PatternMatch[]properties)
layout,setDefaultPattern publicMarkerPatternSelector.BuildersetDefaultPattern(StringdefaultPattern)
layout,setAlwaysWriteExceptions publicMarkerPatternSelector.BuildersetAlwaysWriteExceptions(booleanalwaysWriteExceptions)
layout,setDisableAnsi publicMarkerPatternSelector.BuildersetDisableAnsi(booleandisableAnsi)
layout,setNoConsoleNoAnsi publicMarkerPatternSelector.BuildersetNoConsoleNoAnsi(booleannoConsoleNoAnsi)
layout,setConfiguration publicMarkerPatternSelector.BuildersetConfiguration(Configurationconfiguration)
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
layout,getFormatters publicPatternFormatter[]getFormatters(LogEventevent) Specified by: getFormattersin interfacePatternSelector
layout,newBuilder @PluginBuilderFactory public staticMarkerPatternSelector.BuildernewBuilder() Creates a builder for a custom ScriptPatternSelector. Returns: a ScriptPatternSelector builder.
layout,"createSelector @Deprecated public staticMarkerPatternSelectorcreateSelector(PatternMatch[]properties, StringdefaultPattern, booleanalwaysWriteExceptions, booleannoConsoleNoAnsi, Configurationconfiguration) Deprecated. Use newBuilder() instead. Deprecated, use newBuilder() instead. Parameters: properties - PatternMatch configuration items defaultPattern - the default pattern alwaysWriteExceptions - To always write exceptions even if the pattern contains no exception conversions. noConsoleNoAnsi - Do not output ANSI escape codes if System.console() is null. configuration - the current configuration Returns: a new MarkerPatternSelector."
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,toByteArray publicbyte[]toByteArray(LogEventevent) Description copied from interface:Layout Formats the event suitable for display. Parameters: event - The Logging Event. Returns: The formatted event.
layout,toSerializable publicMessagetoSerializable(LogEventevent) Description copied from interface:Layout Formats the event as an Object that can be serialized. Parameters: event - The Logging Event. Returns: The formatted event.
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Returns: the content type."
layout,createLayout @PluginFactory public staticLayout<?>createLayout()
layout,"withPattern publicPatternLayout.BuilderwithPattern(Stringpattern) Parameters: pattern - The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN."
layout,withPatternSelector publicPatternLayout.BuilderwithPatternSelector(PatternSelectorpatternSelector) Parameters: patternSelector - Allows different patterns to be used based on some selection criteria.
layout,withConfiguration publicPatternLayout.BuilderwithConfiguration(Configurationconfiguration) Parameters: configuration - The Configuration. Some Converters require access to the Interpolator.
layout,withRegexReplacement publicPatternLayout.BuilderwithRegexReplacement(RegexReplacementregexReplacement) Parameters: regexReplacement - A Regex replacement
layout,withCharset publicPatternLayout.BuilderwithCharset(Charsetcharset) Parameters: charset - The character set. The platform default is used if not specified.
layout,"withAlwaysWriteExceptions publicPatternLayout.BuilderwithAlwaysWriteExceptions(booleanalwaysWriteExceptions) Parameters: alwaysWriteExceptions - If ""true"" (default) exceptions are always written even if the pattern contains no exception tokens."
layout,"withDisableAnsi publicPatternLayout.BuilderwithDisableAnsi(booleandisableAnsi) Parameters: disableAnsi - If ""true"" (default is value of system property `log4j.skipJansi`, or `true` if undefined), do not output ANSI escape codes"
layout,"withNoConsoleNoAnsi publicPatternLayout.BuilderwithNoConsoleNoAnsi(booleannoConsoleNoAnsi) Parameters: noConsoleNoAnsi - If ""true"" (default is false) and System.console() is null, do not output ANSI escape codes"
layout,"withHeader publicPatternLayout.BuilderwithHeader(Stringheader) Parameters: header - The header to place at the top of the document, once."
layout,"withFooter publicPatternLayout.BuilderwithFooter(Stringfooter) Parameters: footer - The footer to place at the bottom of the document, once."
layout,build publicPatternLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<PatternLayout> Returns: the configured instance.
layout,newSerializerBuilder public staticPatternLayout.SerializerBuildernewSerializerBuilder()
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware Overrides: requiresLocationin classAbstractStringLayout
layout,"createSerializer @Deprecated public staticAbstractStringLayout.SerializercreateSerializer(Configurationconfiguration, RegexReplacementreplace, Stringpattern, StringdefaultPattern, PatternSelectorpatternSelector, booleanalwaysWriteExceptions, booleannoConsoleNoAnsi) Deprecated. Use newSerializerBuilder() instead. Deprecated, use newSerializerBuilder() instead. Parameters: configuration - the current configuration replace - Allows portions of the resulting String to be replaced. pattern - the current pattern defaultPattern - the default pattern patternSelector - Allows different patterns to be used with the PatternLayout based on some selection criteria. alwaysWriteExceptions - To always write exceptions even if the pattern contains no exception conversions. noConsoleNoAnsi - Do not output ANSI escape codes if System.console() is null. Returns: a new Serializer"
layout,getConversionPattern publicStringgetConversionPattern() Gets the conversion pattern. Returns: the conversion pattern.
layout,"getContentFormat publicMap<String,String>getContentFormat() Gets this PatternLayout's content format. Specified by: Key: ""structured"" Value: ""false"" Key: ""formatType"" Value: ""conversion"" (format uses the keywords supported by OptionConverter) Key: ""format"" Value: provided ""conversionPattern"" param Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: Map of content format keys supporting PatternLayout"
layout,"Key: ""structured"" Value: ""false"""
layout,"Key: ""formatType"" Value: ""conversion"" (format uses the keywords supported by OptionConverter)"
layout,"Key: ""format"" Value: provided ""conversionPattern"" param"
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats a logging event to a writer. Parameters: event - logging event to be formatted. Returns: The event formatted as a String.
layout,"serialize publicvoidserialize(LogEventevent, StringBuilderstringBuilder)"
layout,"encode publicvoidencode(LogEventevent, ByteBufferDestinationdestination) Description copied from class:AbstractLayout Encodes the specified source LogEvent to some binary representation and writes the result to the specified destination. The default implementation of this method delegates to the Layout.toByteArray(LogEvent) method which allocates temporary objects. Subclasses can override this method to provide a garbage-free implementation. For text-based layouts, AbstractStringLayout provides various convenience methods to help with this: @Plugin(name = ""MyLayout"", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true) public final class MyLayout extends AbstractStringLayout { @Override public void encode(LogEvent event, ByteBufferDestination destination) { StringBuilder text = getStringBuilder(); convertLogEventToText(event, text); getStringBuilderEncoder().encode(text, destination); } private void convertLogEventToText(LogEvent event, StringBuilder destination) { ... // append a text representation of the log event to the StringBuilder } } Specified by: encodein interfaceEncoder<LogEvent> Overrides: encodein classAbstractLayout<String> Parameters: event - the LogEvent to encode. destination - holds the ByteBuffer to write into. See Also: AbstractStringLayout.getStringBuilder() AbstractStringLayout.getStringBuilderEncoder()"
layout,AbstractStringLayout.getStringBuilder()
layout,AbstractStringLayout.getStringBuilderEncoder()
layout,createPatternParser public staticPatternParsercreatePatternParser(Configurationconfig) Creates a PatternParser. Parameters: config - The Configuration or null. Returns: The PatternParser.
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,"createLayout @PluginFactory @Deprecated public staticPatternLayoutcreateLayout(@PluginAttribute(value=""pattern"",defaultString=""%m%n"") Stringpattern, @PluginElement(""PatternSelector"") PatternSelectorpatternSelector, @PluginConfiguration Configurationconfig, @PluginElement(""Replace"") RegexReplacementreplace, @PluginAttribute(""charset"") Charsetcharset, @PluginAttribute(value=""alwaysWriteExceptions"",defaultBoolean=true) booleanalwaysWriteExceptions, @PluginAttribute(""noConsoleNoAnsi"") booleannoConsoleNoAnsi, @PluginAttribute(""header"") StringheaderPattern, @PluginAttribute(""footer"") StringfooterPattern) Deprecated. Use newBuilder() instead. This will be private in a future version. Creates a pattern layout. Parameters: pattern - The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN. patternSelector - Allows different patterns to be used based on some selection criteria. config - The Configuration. Some Converters require access to the Interpolator. replace - A Regex replacement String. charset - The character set. The platform default is used if not specified. alwaysWriteExceptions - If ""true"" (default) exceptions are always written even if the pattern contains no exception tokens. noConsoleNoAnsi - If ""true"" (default is false) and System.console() is null, do not output ANSI escape codes headerPattern - The footer to place at the top of the document, once. footerPattern - The footer to place at the bottom of the document, once. Returns: The PatternLayout."
layout,"createDefaultLayout public staticPatternLayoutcreateDefaultLayout() Creates a PatternLayout using the default options. These options include using UTF-8, the default conversion pattern, exceptions being written, and with ANSI escape codes. Returns: the PatternLayout. See Also: Default conversion pattern"
layout,Default conversion pattern
layout,"createDefaultLayout public staticPatternLayoutcreateDefaultLayout(Configurationconfiguration) Creates a PatternLayout using the default options and the given configuration. These options include using UTF-8, the default conversion pattern, exceptions being written, and with ANSI escape codes. Parameters: configuration - The Configuration. Returns: the PatternLayout. See Also: Default conversion pattern"
layout,Default conversion pattern
layout,newBuilder @PluginBuilderFactory public staticPatternLayout.BuildernewBuilder() Creates a builder for a custom PatternLayout. Returns: a PatternLayout builder.
layout,getEventSerializer publicAbstractStringLayout.SerializergetEventSerializer()
layout,build publicAbstractStringLayout.Serializerbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<AbstractStringLayout.Serializer> Returns: the configured instance.
layout,setConfiguration publicPatternLayout.SerializerBuildersetConfiguration(Configurationconfiguration)
layout,setReplace publicPatternLayout.SerializerBuildersetReplace(RegexReplacementreplace)
layout,setPattern publicPatternLayout.SerializerBuildersetPattern(Stringpattern)
layout,setDefaultPattern publicPatternLayout.SerializerBuildersetDefaultPattern(StringdefaultPattern)
layout,setPatternSelector publicPatternLayout.SerializerBuildersetPatternSelector(PatternSelectorpatternSelector)
layout,setAlwaysWriteExceptions publicPatternLayout.SerializerBuildersetAlwaysWriteExceptions(booleanalwaysWriteExceptions)
layout,setDisableAnsi publicPatternLayout.SerializerBuildersetDisableAnsi(booleandisableAnsi)
layout,setNoConsoleNoAnsi publicPatternLayout.SerializerBuildersetNoConsoleNoAnsi(booleannoConsoleNoAnsi)
layout,setKey publicPatternMatch.BuildersetKey(Stringkey)
layout,setPattern publicPatternMatch.BuildersetPattern(Stringpattern)
layout,build publicPatternMatchbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<PatternMatch> Returns: the configured instance.
layout,readResolve protectedObjectreadResolve() throws ObjectStreamException Throws: ObjectStreamException
layout,getKey publicStringgetKey() Returns the key. Returns: the key.
layout,getPattern publicStringgetPattern() Returns the pattern. Returns: The pattern.
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,newBuilder @PluginBuilderFactory public staticPatternMatch.BuildernewBuilder()
layout,hashCode publicinthashCode() Overrides: hashCodein classObject
layout,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
layout,getFormatters PatternFormatter[]getFormatters(LogEventevent)
layout,"getContentFormat publicMap<String,String>getContentFormat() Gets this Rfc5424Layout's content format. Specified by: Key: ""structured"" Value: ""true"" Key: ""format"" Value: ""RFC5424"" Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: Map of content format keys supporting Rfc5424Layout"
layout,"Key: ""structured"" Value: ""true"""
layout,"Key: ""format"" Value: ""RFC5424"""
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats a LogEvent in conformance with the RFC 5424 Syslog specification. Parameters: event - The LogEvent. Returns: The RFC 5424 String representation of the LogEvent.
layout,getProcId protectedStringgetProcId()
layout,getMdcExcludes protectedList<String>getMdcExcludes()
layout,getMdcIncludes protectedList<String>getMdcIncludes()
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,"createLayout @Deprecated public staticRfc5424LayoutcreateLayout(Facilityfacility, Stringid, intenterpriseNumber, booleanincludeMDC, StringmdcId, StringmdcPrefix, StringeventPrefix, booleannewLine, StringescapeNL, StringappName, StringmsgId, Stringexcludes, Stringincludes, Stringrequired, StringexceptionPattern, booleanuseTlsMessageFormat, LoggerFields[]loggerFields, Configurationconfig) Deprecated. Use instead Create the RFC 5424 Layout. Parameters: facility - The Facility is used to try to classify the message. id - The default structured data id to use when formatting according to RFC 5424. enterpriseNumber - The IANA enterprise number. includeMDC - Indicates whether data from the ThreadContextMap will be included in the RFC 5424 Syslog record. Defaults to ""true:. mdcId - The id to use for the MDC Structured Data Element. mdcPrefix - The prefix to add to MDC key names. eventPrefix - The prefix to add to event key names. newLine - If true, a newline will be appended to the end of the syslog record. The default is false. escapeNL - String that should be used to replace newlines within the message text. appName - The value to use as the APP-NAME in the RFC 5424 syslog record. msgId - The default value to be used in the MSGID field of RFC 5424 syslog records. excludes - A comma separated list of MDC keys that should be excluded from the LogEvent. includes - A comma separated list of MDC keys that should be included in the FlumeEvent. required - A comma separated list of MDC keys that must be present in the MDC. exceptionPattern - The pattern for formatting exceptions. useTlsMessageFormat - If true the message will be formatted according to RFC 5425. loggerFields - Container for the KeyValuePairs containing the patterns config - The Configuration. Some Converters require access to the Interpolator. Returns: An Rfc5424Layout."
layout,newBuilder @PluginBuilderFactory public staticRfc5424Layout.Rfc5424LayoutBuildernewBuilder()
layout,getFacility publicFacilitygetFacility()
layout,getDefaultId publicStringgetDefaultId()
layout,getEnterpriseNumber publicStringgetEnterpriseNumber()
layout,isIncludeMdc publicbooleanisIncludeMdc()
layout,getMdcId publicStringgetMdcId()
layout,setConfig @Deprecated publicRfc5424Layout.Rfc5424LayoutBuildersetConfig(Configurationconfig) Deprecated. Since 2.24.0 use AbstractLayout.Builder.setConfiguration(org.apache.logging.log4j.core.config.Configuration) instead.
layout,setFacility publicRfc5424Layout.Rfc5424LayoutBuildersetFacility(Facilityfacility)
layout,setId publicRfc5424Layout.Rfc5424LayoutBuildersetId(Stringid)
layout,setEin publicRfc5424Layout.Rfc5424LayoutBuildersetEin(Stringein)
layout,setIncludeMDC publicRfc5424Layout.Rfc5424LayoutBuildersetIncludeMDC(booleanincludeMDC)
layout,setIncludeNL publicRfc5424Layout.Rfc5424LayoutBuildersetIncludeNL(booleanincludeNL)
layout,setEscapeNL publicRfc5424Layout.Rfc5424LayoutBuildersetEscapeNL(StringescapeNL)
layout,setMdcId publicRfc5424Layout.Rfc5424LayoutBuildersetMdcId(StringmdcId)
layout,setMdcPrefix publicRfc5424Layout.Rfc5424LayoutBuildersetMdcPrefix(StringmdcPrefix)
layout,setEventPrefix publicRfc5424Layout.Rfc5424LayoutBuildersetEventPrefix(StringeventPrefix)
layout,setAppName publicRfc5424Layout.Rfc5424LayoutBuildersetAppName(StringappName)
layout,setMessageId publicRfc5424Layout.Rfc5424LayoutBuildersetMessageId(StringmessageId)
layout,setExcludes publicRfc5424Layout.Rfc5424LayoutBuildersetExcludes(Stringexcludes)
layout,setIncludes publicRfc5424Layout.Rfc5424LayoutBuildersetIncludes(Stringincludes)
layout,setRequired publicRfc5424Layout.Rfc5424LayoutBuildersetRequired(Stringrequired)
layout,setCharset publicRfc5424Layout.Rfc5424LayoutBuildersetCharset(Charsetcharset) Overrides: setCharsetin classAbstractStringLayout.Builder<Rfc5424Layout.Rfc5424LayoutBuilder>
layout,setExceptionPattern publicRfc5424Layout.Rfc5424LayoutBuildersetExceptionPattern(StringexceptionPattern)
layout,setUseTLSMessageFormat publicRfc5424Layout.Rfc5424LayoutBuildersetUseTLSMessageFormat(booleanuseTLSMessageFormat)
layout,setLoggerFields publicRfc5424Layout.Rfc5424LayoutBuildersetLoggerFields(LoggerFields[]loggerFields)
layout,build publicRfc5424Layoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<Rfc5424Layout> Returns: the configured instance.
layout,build publicScriptPatternSelectorbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<ScriptPatternSelector> Returns: the configured instance.
layout,setScript publicScriptPatternSelector.BuildersetScript(AbstractScriptscript)
layout,setProperties publicScriptPatternSelector.BuildersetProperties(PatternMatch[]properties)
layout,setDefaultPattern publicScriptPatternSelector.BuildersetDefaultPattern(StringdefaultPattern)
layout,setAlwaysWriteExceptions publicScriptPatternSelector.BuildersetAlwaysWriteExceptions(booleanalwaysWriteExceptions)
layout,setDisableAnsi publicScriptPatternSelector.BuildersetDisableAnsi(booleandisableAnsi)
layout,setNoConsoleNoAnsi publicScriptPatternSelector.BuildersetNoConsoleNoAnsi(booleannoConsoleNoAnsi)
layout,setConfiguration publicScriptPatternSelector.BuildersetConfiguration(Configurationconfig)
layout,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
layout,getFormatters publicPatternFormatter[]getFormatters(LogEventevent) Specified by: getFormattersin interfacePatternSelector
layout,newBuilder @PluginBuilderFactory public staticScriptPatternSelector.BuildernewBuilder() Creates a builder for a custom ScriptPatternSelector. Returns: a ScriptPatternSelector builder.
layout,"createSelector @Deprecated public staticScriptPatternSelectorcreateSelector(AbstractScriptscript, PatternMatch[]properties, StringdefaultPattern, booleanalwaysWriteExceptions, booleannoConsoleNoAnsi, Configurationconfiguration) Deprecated. Use newBuilder() instead. Deprecated, use newBuilder() instead. Parameters: script - the script properties - the PatternMatch configuration items defaultPattern - the default pattern alwaysWriteExceptions - To always write exceptions even if the pattern contains no exception conversions. noConsoleNoAnsi - Do not output ANSI escape codes if System.console() is null. configuration - the configuration Returns: a new ScriptPatternSelector"
layout,toString publicStringtoString() Overrides: toStringin classObject
layout,toByteArray publicbyte[]toByteArray(LogEventevent) Deprecated. Formats a LogEvent as a serialized byte array of the LogEvent object. Parameters: event - The LogEvent. Returns: the formatted LogEvent.
layout,toSerializable publicLogEventtoSerializable(LogEventevent) Deprecated. Returns the LogEvent. Parameters: event - The Logging Event. Returns: The LogEvent.
layout,createLayout @Deprecated @PluginFactory public staticSerializedLayoutcreateLayout() Deprecated. Creates a SerializedLayout. Returns: A SerializedLayout.
layout,"getHeader publicbyte[]getHeader() Deprecated. Description copied from class:AbstractLayout Returns the header, if one is available. Specified by: getHeaderin interfaceLayout<LogEvent> Overrides: getHeaderin classAbstractLayout<LogEvent> Returns: A byte array containing the header."
layout,getContentType publicStringgetContentType() Deprecated. SerializedLayout returns a binary stream. Returns: The content type.
layout,"encode publicvoidencode(StringBuildersource, ByteBufferDestinationdestination) Description copied from interface:Encoder Encodes the specified source object to some binary representation and writes the result to the specified destination. Specified by: encodein interfaceEncoder<StringBuilder> Parameters: source - the object to encode. destination - holds the ByteBuffer to write into."
layout,build publicSyslogLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends SyslogLayout.Builder<B>> Returns: the configured instance.
layout,getFacility publicFacilitygetFacility()
layout,isIncludeNewLine publicbooleanisIncludeNewLine()
layout,getEscapeNL publicStringgetEscapeNL()
layout,setFacility publicBsetFacility(Facilityfacility)
layout,setIncludeNewLine publicBsetIncludeNewLine(booleanincludeNewLine)
layout,setEscapeNL publicBsetEscapeNL(StringescapeNL)
layout,newBuilder @PluginBuilderFactory public static<B extends SyslogLayout.Builder<B>>BnewBuilder()
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats a LogEvent in conformance with the BSD Log record format. Parameters: event - The LogEvent Returns: the event formatted as a String.
layout,"getContentFormat publicMap<String,String>getContentFormat() Gets this SyslogLayout's content format. Specified by: Key: ""structured"" Value: ""false"" Key: ""dateFormat"" Value: ""MMM dd HH:mm:ss"" Key: ""format"" Value: ""<LEVEL>TIMESTAMP PROP(HOSTNAME) MESSAGE"" Key: ""formatType"" Value: ""logfilepatternreceiver"" (format uses the keywords supported by LogFilePatternReceiver) Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: Map of content format keys supporting SyslogLayout"
layout,"Key: ""structured"" Value: ""false"""
layout,"Key: ""dateFormat"" Value: ""MMM dd HH:mm:ss"""
layout,"Key: ""format"" Value: ""<LEVEL>TIMESTAMP PROP(HOSTNAME) MESSAGE"""
layout,"Key: ""formatType"" Value: ""logfilepatternreceiver"" (format uses the keywords supported by LogFilePatternReceiver)"
layout,"createLayout @Deprecated public staticSyslogLayoutcreateLayout(Facilityfacility, booleanincludeNewLine, StringescapeNL, Charsetcharset) Deprecated. Use newBuilder(). Creates a SyslogLayout. Parameters: facility - The Facility is used to try to classify the message. includeNewLine - If true a newline will be appended to the result. escapeNL - Pattern to use for replacing newlines. charset - The character set. Returns: A SyslogLayout."
layout,getFacility publicFacilitygetFacility() Gets the facility. Returns: the facility
layout,"encodeText public staticvoidencodeText(CharsetEncodercharsetEncoder, CharBuffercharBuf, ByteBufferbyteBuf, StringBuildertext, ByteBufferDestinationdestination) Converts the specified text to bytes and writes the resulting bytes to the specified destination. Attempts to postpone synchronizing on the destination as long as possible to minimize lock contention. Parameters: charsetEncoder - thread-local encoder instance for converting chars to bytes charBuf - thread-local text buffer for converting text to bytes byteBuf - thread-local buffer to temporarily hold converted bytes before copying them to the destination text - the text to convert and write to the destination destination - the destination to write the bytes to"
layout,"encodeText @Deprecated public staticvoidencodeText(CharsetEncodercharsetEncoder, CharBuffercharBuf, ByteBufferDestinationdestination) Deprecated. For testing purposes only."
layout,build publicXmlLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends XmlLayout.Builder<B>> Returns: the configured instance.
layout,getHeader publicbyte[]getHeader() Returns appropriate XML headers. XML processing instruction XML root element Specified by: getHeaderin interfaceLayout<String> Overrides: getHeaderin classAbstractStringLayout Returns: a byte array containing the header.
layout,XML processing instruction
layout,XML root element
layout,"getFooter publicbyte[]getFooter() Returns appropriate XML footer. Specified by: getFooterin interfaceLayout<String> Overrides: getFooterin classAbstractStringLayout Returns: a byte array containing the footer, closing the XML root element."
layout,"getContentFormat publicMap<String,String>getContentFormat() Gets this XmlLayout's content format. Specified by: Key: ""dtd"" Value: ""log4j-events.dtd"" Key: ""version"" Value: ""2.0"" Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: Map of content format keys supporting XmlLayout"
layout,"Key: ""dtd"" Value: ""log4j-events.dtd"""
layout,"Key: ""version"" Value: ""2.0"""
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Overrides: getContentTypein classAbstractStringLayout Returns: The content type."
layout,"createLayout @Deprecated public staticXmlLayoutcreateLayout(booleanlocationInfo, booleanproperties, booleancomplete, booleancompact, Charsetcharset, booleanincludeStacktrace) Deprecated. Use newBuilder() instead Creates an XML Layout. Parameters: locationInfo - If ""true"", includes the location information in the generated XML. properties - If ""true"", includes the thread context map in the generated XML. complete - If ""true"", includes the XML header and footer, defaults to ""false"". compact - If ""true"", does not use end-of-lines and indentation, defaults to ""false"". charset - The character set to use, if null, uses ""UTF-8"". includeStacktrace - If ""true"", includes the stacktrace of any Throwable in the generated XML, defaults to ""true"". Returns: An XML Layout."
layout,newBuilder @PluginBuilderFactory public static<B extends XmlLayout.Builder<B>>BnewBuilder()
layout,createDefaultLayout public staticXmlLayoutcreateDefaultLayout() Creates an XML Layout using the default settings. Returns: an XML Layout.
layout,valueNeedsLookup protected staticbooleanvalueNeedsLookup(Stringvalue)
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats a LogEvent. Parameters: event - The LogEvent. Returns: The XML representation of the LogEvent.
layout,wrapLogEvent protectedObjectwrapLogEvent(LogEventevent)
layout,"toSerializable publicvoidtoSerializable(LogEventevent, Writerwriter) throws com.fasterxml.jackson.core.JsonGenerationException, com.fasterxml.jackson.databind.JsonMappingException, IOException Throws: com.fasterxml.jackson.core.JsonGenerationException com.fasterxml.jackson.databind.JsonMappingException IOException"
layout,build publicYamlLayoutbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<B extends YamlLayout.Builder<B>> Returns: the configured instance.
layout,"getHeader publicbyte[]getHeader() Returns appropriate YAML header. Specified by: getHeaderin interfaceLayout<String> Overrides: getHeaderin classAbstractStringLayout Returns: a byte array containing the header, opening the YAML array."
layout,"getFooter publicbyte[]getFooter() Returns appropriate YAML footer. Specified by: getFooterin interfaceLayout<String> Overrides: getFooterin classAbstractStringLayout Returns: a byte array containing the footer, closing the YAML array."
layout,"getContentFormat publicMap<String,String>getContentFormat() Description copied from interface:Layout Returns a description of the content format. Specified by: getContentFormatin interfaceLayout<String> Overrides: getContentFormatin classAbstractLayout<String> Returns: a Map of key/value pairs describing the Layout-specific content format, or an empty Map if no content format descriptors are specified."
layout,"getContentType publicStringgetContentType() Description copied from interface:Layout Returns the content type output by this layout. The base class returns ""text/plain"". Specified by: getContentTypein interfaceLayout<String> Overrides: getContentTypein classAbstractStringLayout Returns: The content type."
layout,"createLayout @Deprecated public staticorg.apache.logging.log4j.core.layout.AbstractJacksonLayoutcreateLayout(Configurationconfig, booleanlocationInfo, booleanproperties, StringheaderPattern, StringfooterPattern, Charsetcharset, booleanincludeStacktrace) Deprecated. Use newBuilder() instead Creates a YAML Layout. Parameters: config - The plugin configuration. locationInfo - If ""true"", includes the location information in the generated YAML. properties - If ""true"", includes the thread context map in the generated YAML. headerPattern - The header pattern, defaults to """" if null. footerPattern - The footer pattern, defaults to """" if null. charset - The character set to use, if null, uses ""UTF-8"". includeStacktrace - If ""true"", includes the stacktrace of any Throwable in the generated YAML, defaults to ""true"". Returns: A YAML Layout."
layout,newBuilder @PluginBuilderFactory public static<B extends YamlLayout.Builder<B>>BnewBuilder()
layout,createDefaultLayout public staticorg.apache.logging.log4j.core.layout.AbstractJacksonLayoutcreateDefaultLayout() Creates a YAML Layout using the default settings. Useful for testing. Returns: A YAML Layout.
layout,valueNeedsLookup protected staticbooleanvalueNeedsLookup(Stringvalue)
layout,toSerializable publicStringtoSerializable(LogEventevent) Formats a LogEvent. Parameters: event - The LogEvent. Returns: The XML representation of the LogEvent.
layout,wrapLogEvent protectedObjectwrapLogEvent(LogEventevent)
layout,"toSerializable publicvoidtoSerializable(LogEventevent, Writerwriter) throws com.fasterxml.jackson.core.JsonGenerationException, com.fasterxml.jackson.databind.JsonMappingException, IOException Throws: com.fasterxml.jackson.core.JsonGenerationException com.fasterxml.jackson.databind.JsonMappingException IOException"
lookup,setConfiguration publicvoidsetConfiguration(Configurationconfiguration) Description copied from interface:ConfigurationAware Injects the current Configuration into this object. Specified by: setConfigurationin interfaceConfigurationAware Parameters: configuration - the current Configuration
lookup,"lookup publicStringlookup(Stringkey) Calls lookup(null, key) in the implementation. Specified by: lookupin interfaceStrLookup Parameters: key - the key to be looked up, may be null Returns: the matching value, null if no match See Also: StrLookup.lookup(LogEvent, String)"
lookup,"StrLookup.lookup(LogEvent, String)"
lookup,"evaluate publicLookupResultevaluate(Stringkey) Calls evaluate(null, key) in the implementation. Specified by: evaluatein interfaceStrLookup See Also: StrLookup.evaluate(LogEvent, String)"
lookup,"StrLookup.evaluate(LogEvent, String)"
lookup,toString publicStringtoString() Overrides: toStringin classStrSubstitutor
lookup,"lookup publicStringlookup(Stringkey) Looks up the value from the ThreadContext Map. Specified by: lookupin interfaceStrLookup Parameters: key - the key to be looked up, may be null Returns: The value associated with the key."
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Looks up the value from the ThreadContext Map. Specified by: lookupin interfaceStrLookup Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: The value associated with the key."
lookup,"lookup publicStringlookup(Stringkey) Looks up the current date. Specified by: lookupin interfaceStrLookup Parameters: key - the format to use. If null, the default DateFormat will be used. Returns: The formatted current date, never null."
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Looks up d the current date or the date in the LogEvent. Specified by: lookupin interfaceStrLookup Parameters: event - The LogEvent for which the date is returned. If null, current date is returned. key - the format to use. If null, the default DateFormat will be used. Returns: The formatted date, never null."
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Looks up the value of the environment variable. Parameters: key - the key to be looked up, may be null ignored - The current LogEvent. Returns: The value of the environment variable."
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Looks up the value from the logging event. Parameters: event - The current LogEvent. key - the key to be looked up. Returns: The value of the specified log event field."
lookup,getDefaultLookup publicStrLookupgetDefaultLookup()
lookup,"getStrLookupMap publicMap<String,StrLookup>getStrLookupMap()"
lookup,"lookup publicStringlookup(LogEventevent, Stringvar) Resolves the specified variable. This implementation will try to extract a variable prefix from the given variable name (the first colon (':') is used as prefix separator). It then passes the name of the variable with the prefix stripped to the lookup object registered for this prefix. If no prefix can be found or if the associated lookup object cannot resolve this variable, the default lookup object will be used. Specified by: lookupin interfaceStrLookup Parameters: event - The current LogEvent or null. var - the name of the variable whose value is to be looked up Returns: the value of this variable or null if it cannot be resolved"
lookup,"evaluate publicLookupResultevaluate(LogEventevent, Stringvar) Resolves the specified variable. This implementation will try to extract a variable prefix from the given variable name (the first colon (':') is used as prefix separator). It then passes the name of the variable with the prefix stripped to the lookup object registered for this prefix. If no prefix can be found or if the associated lookup object cannot resolve this variable, the default lookup object will be used. Specified by: evaluatein interfaceStrLookup Parameters: event - The current LogEvent or null. var - the name of the variable whose value is to be looked up Returns: the value of this variable or null if it cannot be resolved"
lookup,setConfiguration publicvoidsetConfiguration(Configurationconfiguration) Description copied from interface:ConfigurationAware Injects the current Configuration into this object. Specified by: setConfigurationin interfaceConfigurationAware Overrides: setConfigurationin classAbstractConfigurationAwareLookup Parameters: configuration - the current Configuration
lookup,setLoggerContext publicvoidsetLoggerContext(LoggerContextloggerContext) Description copied from interface:LoggerContextAware Injects the current LoggerContext into this object. Specified by: setLoggerContextin interfaceLoggerContextAware Parameters: loggerContext - the current LoggerContext
lookup,toString publicStringtoString() Overrides: toStringin classObject
lookup,getHardware publicStringgetHardware() Accessible through the Lookup key hw. Returns: hardware processor information.
lookup,getLocale publicStringgetLocale() Accessible through the Lookup key locale. Returns: system locale and file encoding information.
lookup,getOperatingSystem publicStringgetOperatingSystem() Accessible through the Lookup key os. Returns: operating system information.
lookup,getRuntime publicStringgetRuntime() Accessible through the Lookup key runtime. Returns: Java Runtime Environment information.
lookup,getVirtualMachine publicStringgetVirtualMachine() Accessible through the Lookup key vm. Returns: Java Virtual Machine information.
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Looks up the value of the environment variable. Parameters: key - the key to be looked up, may be null ignored - The current LogEvent. Returns: The value of the environment variable."
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Description copied from interface:StrLookup Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Specified by: lookupin interfaceStrLookup Overrides: lookupin classMapLookup Parameters: ignored - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Looks up the value of the JNDI resource. Parameters: key - the JNDI resource name to be looked up, may be null ignored - The current LogEvent. Returns: The String value of the JNDI resource."
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Description copied from interface:StrLookup Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Parameters: ignored - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,value Stringvalue() Value of the lookup result. Never null.
lookup,"isLookupEvaluationAllowedInValue defaultbooleanisLookupEvaluationAllowedInValue() True if the value() should be re-evaluated for other lookups. This is used by PropertiesLookup to allow properties to be evaluated against other properties, because the configuration properties are completely trusted and designed with lookups in mind. It is unsafe to return true in most cases because it may allow unintended lookups to evaluate other lookups."
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Converts the ""key"" to lower case. Parameters: key - the key to be looked up, may be null ignored - The current LogEvent. Returns: The value associated with the key."
lookup,"setMainArguments public staticvoidsetMainArguments(String...args) An application's public static main(String[]) method calls this method to make its main arguments available for lookup with the prefix main. The map provides two kinds of access: First by index, starting at ""0"", ""1"" and so on. For example, the command line --file path/file.txt -x 2 can be accessed from a configuration file with: ""main:0"" = ""--file"" ""main:1"" = ""path/file.txt"" ""main:2"" = ""-x"" ""main:3"" = ""2"" Second using the argument at position n as the key to access the value at n+1. ""main:\--file"" = ""path/file.txt"" ""main:\-x"" = ""2"" Note: Many applications use leading dashes to identify command arguments. Specifying ""main:--file would result in the lookup failing because it would look for a variable named ""main"" with a default value of ""-file"". To avoid this the "":"" separating the Lookup name from the key must be followed by a backslash as an escape character. Parameters: args - An application's public static main(String[]) arguments."
lookup,"""main:0"" = ""--file"""
lookup,"""main:1"" = ""path/file.txt"""
lookup,"""main:2"" = ""-x"""
lookup,"""main:3"" = ""2"""
lookup,"""main:\--file"" = ""path/file.txt"""
lookup,"""main:\-x"" = ""2"""
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Description copied from interface:StrLookup Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Specified by: lookupin interfaceStrLookup Overrides: lookupin classMapLookup Parameters: ignored - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup publicStringlookup(Stringkey) Description copied from class:MapLookup Looks up a String key to a String value using the map. If the map is null, then null is returned. The map result object is converted to a string using toString(). Specified by: lookupin interfaceStrLookup Overrides: lookupin classMapLookup Parameters: key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"setMainArguments @Deprecated public staticvoidsetMainArguments(String...args) Deprecated. As of 2.4, use MainMapLookup.setMainArguments(String[]) An application's public static main(String[]) method calls this method to make its main arguments available for lookup with the prefix main. The map provides two kinds of access: First by index, starting at ""0"", ""1"" and so on. For example, the command line --file path/file.txt -x 2 can be accessed from a configuration file with: ""main:0"" = ""--file"" ""main:1"" = ""path/file.txt"" ""main:2"" = ""-x"" ""main:3"" = ""2"" Second using the argument at position n as the key to access the value at n+1. ""main:--file"" = ""path/file.txt"" ""main:-x"" = ""2"" Parameters: args - An application's public static main(String[]) arguments. Since: 2.1"
lookup,"""main:0"" = ""--file"""
lookup,"""main:1"" = ""path/file.txt"""
lookup,"""main:2"" = ""-x"""
lookup,"""main:3"" = ""2"""
lookup,"""main:--file"" = ""path/file.txt"""
lookup,"""main:-x"" = ""2"""
lookup,"getMap protectedMap<String,String>getMap()"
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Description copied from interface:StrLookup Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Specified by: lookupin interfaceStrLookup Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup publicStringlookup(Stringkey) Looks up a String key to a String value using the map. If the map is null, then null is returned. The map result object is converted to a string using toString(). Specified by: lookupin interfaceStrLookup Parameters: key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Description copied from interface:StrLookup Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup publicStringlookup(Stringkey) Description copied from class:AbstractLookup Calls lookup(null, key) in the implementation. Specified by: lookupin interfaceStrLookup Overrides: lookupin classAbstractLookup Parameters: key - the key to be looked up, may be null Returns: the matching value, null if no match See Also: StrLookup.lookup(LogEvent, String)"
lookup,"StrLookup.lookup(LogEvent, String)"
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Description copied from interface:StrLookup Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Specified by: lookupin interfaceStrLookup Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup publicStringlookup(Stringkey) Looks a value from configuration properties. If the property is not defined, then null is returned. Specified by: lookupin interfaceStrLookup Parameters: key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"evaluate publicLookupResultevaluate(Stringkey) Description copied from interface:StrLookup Same as StrLookup.lookup(String), but provides additional metadata describing the result. Returns null if the key cannot be evaluated, otherwise a LookupResult wrapping the non-null string value. Specified by: evaluatein interfaceStrLookup"
lookup,"evaluate publicLookupResultevaluate(LogEventevent, Stringkey) Description copied from interface:StrLookup Same as StrLookup.lookup(LogEvent, String), but provides additional metadata describing the result. Returns null if the key cannot be evaluated, otherwise a LookupResult wrapping the non-null string value. Specified by: evaluatein interfaceStrLookup"
lookup,toString publicStringtoString() Overrides: toStringin classObject
lookup,"lookup publicStringlookup(LogEventignored, Stringkey) Looks up the value for the key in the format ""BundleName:BundleKey"". For example: ""com.domain.messages:MyKey"". Parameters: key - the key to be looked up, may be null ignored - The current LogEvent. Returns: The value associated with the key."
lookup,toString publicStringtoString() Overrides: toStringin classStrSubstitutor
lookup,"lookup Stringlookup(Stringkey) Looks up a String key to a String value. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Parameters: key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"lookup Stringlookup(LogEventevent, Stringkey) Looks up a String key to a String value possibly using the current LogEvent. The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. This method always returns a String, regardless of the underlying data, by converting it as necessary. For example: Map<String, Object> map = new HashMap<String, Object>(); map.put(""number"", new Integer(2)); assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number"")); Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: the matching value, null if no match"
lookup,"evaluate defaultLookupResultevaluate(Stringkey) Same as lookup(String), but provides additional metadata describing the result. Returns null if the key cannot be evaluated, otherwise a LookupResult wrapping the non-null string value."
lookup,"evaluate defaultLookupResultevaluate(LogEventevent, Stringkey) Same as lookup(LogEvent, String), but provides additional metadata describing the result. Returns null if the key cannot be evaluated, otherwise a LookupResult wrapping the non-null string value."
lookup,commaMatcher public staticStrMatchercommaMatcher() Returns a matcher which matches the comma character. Returns: a matcher for a comma
lookup,tabMatcher public staticStrMatchertabMatcher() Returns a matcher which matches the tab character. Returns: a matcher for a tab
lookup,spaceMatcher public staticStrMatcherspaceMatcher() Returns a matcher which matches the space character. Returns: a matcher for a space
lookup,"splitMatcher public staticStrMatchersplitMatcher() Matches the same characters as StringTokenizer, namely space, tab, newline and formfeed. Returns: the split matcher"
lookup,trimMatcher public staticStrMatchertrimMatcher() Matches the String trim() whitespace characters. Returns: the trim matcher
lookup,singleQuoteMatcher public staticStrMatchersingleQuoteMatcher() Returns a matcher which matches the single quote character. Returns: a matcher for a single quote
lookup,doubleQuoteMatcher public staticStrMatcherdoubleQuoteMatcher() Returns a matcher which matches the double quote character. Returns: a matcher for a double quote
lookup,quoteMatcher public staticStrMatcherquoteMatcher() Returns a matcher which matches the single or double quote character. Returns: a matcher for a single or double quote
lookup,noneMatcher public staticStrMatchernoneMatcher() Matches no characters. Returns: a matcher that matches nothing
lookup,"charMatcher public staticStrMatchercharMatcher(charch) Constructor that creates a matcher from a character. Parameters: ch - the character to match, must not be null Returns: a new Matcher for the given char"
lookup,"charSetMatcher public staticStrMatchercharSetMatcher(char[]chars) Constructor that creates a matcher from a set of characters. Parameters: chars - the characters to match, null or empty matches nothing Returns: a new matcher for the given char[]"
lookup,"charSetMatcher public staticStrMatchercharSetMatcher(Stringchars) Constructor that creates a matcher from a string representing a set of characters. Parameters: chars - the characters to match, null or empty matches nothing Returns: a new Matcher for the given characters"
lookup,"stringMatcher public staticStrMatcherstringMatcher(Stringstr) Constructor that creates a matcher from a string. Parameters: str - the string to match, null or empty matches nothing Returns: a new Matcher for the given String"
lookup,"isMatch public abstractintisMatch(char[]buffer, intpos, intbufferStart, intbufferEnd) Returns the number of matching characters, zero for no match. This method is called to check for a match. The parameter pos represents the current position to be checked in the string buffer (a character array which must not be changed). The API guarantees that pos is a valid index for buffer. The character array may be larger than the active area to be matched. Only values in the buffer between the specified indices may be accessed. The matching code may check one character or many. It may check characters preceding pos as well as those after, so long as no checks exceed the bounds specified. It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched. Parameters: buffer - the text content to match against, do not change pos - the starting position for the match, valid for buffer bufferStart - the first active index in the buffer, valid for buffer bufferEnd - the end index (exclusive) of the active buffer, valid for buffer Returns: the number of matching characters, zero for no match"
lookup,"isMatch publicintisMatch(char[]buffer, intpos) Returns the number of matching characters, zero for no match. This method is called to check for a match. The parameter pos represents the current position to be checked in the string buffer (a character array which must not be changed). The API guarantees that pos is a valid index for buffer. The matching code may check one character or many. It may check characters preceding pos as well as those after. It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched. Parameters: buffer - the text content to match against, do not change pos - the starting position for the match, valid for buffer Returns: the number of matching characters, zero for no match Since: 2.4"
lookup,"replace public staticStringreplace(Objectsource, Map<String,String>valueMap) Replaces all the occurrences of variables in the given source object with their matching values from the map. Parameters: source - the source text containing the variables to substitute, null returns null valueMap - the map with the values, may be null Returns: the result of the replace operation"
lookup,"replace public staticStringreplace(Objectsource, Map<String,String>valueMap, Stringprefix, Stringsuffix) Replaces all the occurrences of variables in the given source object with their matching values from the map. This method allows to specify a custom variable prefix and suffix Parameters: source - the source text containing the variables to substitute, null returns null valueMap - the map with the values, may be null prefix - the prefix of variables, not null suffix - the suffix of variables, not null Returns: the result of the replace operation Throws: IllegalArgumentException - if the prefix or suffix is null"
lookup,"replace public staticStringreplace(Objectsource, PropertiesvalueProperties) Replaces all the occurrences of variables in the given source object with their matching values from the properties. Parameters: source - the source text containing the variables to substitute, null returns null valueProperties - the properties with values, may be null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(Stringsource) Replaces all the occurrences of variables with their matching values from the resolver using the given source string as a template. Parameters: source - the string to replace in, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, Stringsource) Replaces all the occurrences of variables with their matching values from the resolver using the given source string as a template. Parameters: event - The current LogEvent if there is one. source - the string to replace in, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(Stringsource, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source string as a template. Only the specified portion of the string will be processed. The rest of the string is not processed, and is not returned. Parameters: source - the string to replace in, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, Stringsource, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source string as a template. Only the specified portion of the string will be processed. The rest of the string is not processed, and is not returned. Parameters: event - the current LogEvent, if one exists. source - the string to replace in, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(char[]source) Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method. Parameters: source - the character array to replace in, not altered, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, char[]source) Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method. Parameters: event - the current LogEvent, if one exists. source - the character array to replace in, not altered, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(char[]source, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method. Only the specified portion of the array will be processed. The rest of the array is not processed, and is not returned. Parameters: source - the character array to replace in, not altered, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, char[]source, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method. Only the specified portion of the array will be processed. The rest of the array is not processed, and is not returned. Parameters: event - the current LogEvent, if one exists. source - the character array to replace in, not altered, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(StringBuffersource) Replaces all the occurrences of variables with their matching values from the resolver using the given source buffer as a template. The buffer is not altered by this method. Parameters: source - the buffer to use as a template, not changed, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, StringBuffersource) Replaces all the occurrences of variables with their matching values from the resolver using the given source buffer as a template. The buffer is not altered by this method. Parameters: event - the current LogEvent, if one exists. source - the buffer to use as a template, not changed, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(StringBuffersource, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source buffer as a template. The buffer is not altered by this method. Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, and is not returned. Parameters: source - the buffer to use as a template, not changed, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, StringBuffersource, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source buffer as a template. The buffer is not altered by this method. Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, and is not returned. Parameters: event - the current LogEvent, if one exists. source - the buffer to use as a template, not changed, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(StringBuildersource) Replaces all the occurrences of variables with their matching values from the resolver using the given source builder as a template. The builder is not altered by this method. Parameters: source - the builder to use as a template, not changed, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, StringBuildersource) Replaces all the occurrences of variables with their matching values from the resolver using the given source builder as a template. The builder is not altered by this method. Parameters: event - The LogEvent. source - the builder to use as a template, not changed, null returns null. Returns: the result of the replace operation."
lookup,"replace publicStringreplace(StringBuildersource, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source builder as a template. The builder is not altered by this method. Only the specified portion of the builder will be processed. The rest of the builder is not processed, and is not returned. Parameters: source - the builder to use as a template, not changed, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, StringBuildersource, intoffset, intlength) Replaces all the occurrences of variables with their matching values from the resolver using the given source builder as a template. The builder is not altered by this method. Only the specified portion of the builder will be processed. The rest of the builder is not processed, and is not returned. Parameters: event - the current LogEvent, if one exists. source - the builder to use as a template, not changed, null returns null offset - the start offset within the array, must be valid length - the length within the array to be processed, must be valid Returns: the result of the replace operation"
lookup,"replace publicStringreplace(Objectsource) Replaces all the occurrences of variables in the given source object with their matching values from the resolver. The input source object is converted to a string using toString and is not altered. Parameters: source - the source to replace in, null returns null Returns: the result of the replace operation"
lookup,"replace publicStringreplace(LogEventevent, Objectsource) Replaces all the occurrences of variables in the given source object with their matching values from the resolver. The input source object is converted to a string using toString and is not altered. Parameters: event - the current LogEvent, if one exists. source - the source to replace in, null returns null Returns: the result of the replace operation"
lookup,"replaceIn publicbooleanreplaceIn(StringBuffersource) Replaces all the occurrences of variables within the given source buffer with their matching values from the resolver. The buffer is updated with the result. Parameters: source - the buffer to replace in, updated, null returns false Returns: true if altered"
lookup,"replaceIn publicbooleanreplaceIn(StringBuffersource, intoffset, intlength) Replaces all the occurrences of variables within the given source buffer with their matching values from the resolver. The buffer is updated with the result. Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, but it is not deleted. Parameters: source - the buffer to replace in, updated, null returns false offset - the start offset within the array, must be valid length - the length within the buffer to be processed, must be valid Returns: true if altered"
lookup,"replaceIn publicbooleanreplaceIn(LogEventevent, StringBuffersource, intoffset, intlength) Replaces all the occurrences of variables within the given source buffer with their matching values from the resolver. The buffer is updated with the result. Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, but it is not deleted. Parameters: event - the current LogEvent, if one exists. source - the buffer to replace in, updated, null returns false offset - the start offset within the array, must be valid length - the length within the buffer to be processed, must be valid Returns: true if altered"
lookup,"replaceIn publicbooleanreplaceIn(StringBuildersource) Replaces all the occurrences of variables within the given source builder with their matching values from the resolver. Parameters: source - the builder to replace in, updated, null returns false Returns: true if altered"
lookup,"replaceIn publicbooleanreplaceIn(LogEventevent, StringBuildersource) Replaces all the occurrences of variables within the given source builder with their matching values from the resolver. Parameters: event - the current LogEvent, if one exists. source - the builder to replace in, updated, null returns false Returns: true if altered"
lookup,"replaceIn publicbooleanreplaceIn(StringBuildersource, intoffset, intlength) Replaces all the occurrences of variables within the given source builder with their matching values from the resolver. Only the specified portion of the builder will be processed. The rest of the builder is not processed, but it is not deleted. Parameters: source - the builder to replace in, null returns false offset - the start offset within the array, must be valid length - the length within the builder to be processed, must be valid Returns: true if altered"
lookup,"replaceIn publicbooleanreplaceIn(LogEventevent, StringBuildersource, intoffset, intlength) Replaces all the occurrences of variables within the given source builder with their matching values from the resolver. Only the specified portion of the builder will be processed. The rest of the builder is not processed, but it is not deleted. Parameters: event - the current LogEvent, if one is present. source - the builder to replace in, null returns false offset - the start offset within the array, must be valid length - the length within the builder to be processed, must be valid Returns: true if altered"
lookup,"substitute protectedbooleansubstitute(LogEventevent, StringBuilderbuf, intoffset, intlength) Internal method that substitutes the variables. Most users of this class do not need to call this method. This method will be called automatically by another (public) method. Writers of subclasses can override this method if they need access to the substitution process at the start or end. Parameters: event - The current LogEvent, if there is one. buf - the string builder to substitute into, not null offset - the start offset within the builder, must be valid length - the length within the builder to be processed, must be valid Returns: true if altered"
lookup,"resolveVariable protectedLookupResultresolveVariable(LogEventevent, StringvariableName, StringBuilderbuf, intstartPos, intendPos) Internal method that resolves the value of a variable. Most users of this class do not need to call this method. This method is called automatically by the substitution process. Writers of subclasses can override this method if they need to alter how each substitution occurs. The method is passed the variable's name and must return the corresponding value. This implementation uses the getVariableResolver() with the variable's name as the key. Parameters: event - The LogEvent, if there is one. variableName - the name of the variable, not null buf - the buffer where the substitution is occurring, not null startPos - the start position of the variable including the prefix, valid endPos - the end position of the variable including the suffix, valid Returns: the variable's value or null if the variable is unknown"
lookup,getEscapeChar publicchargetEscapeChar() Returns the escape character. Returns: the character used for escaping variable references
lookup,"setEscapeChar publicvoidsetEscapeChar(charescapeCharacter) Sets the escape character. If this character is placed before a variable reference in the source text, this variable will be ignored. Parameters: escapeCharacter - the escape character (0 for disabling escaping)"
lookup,getVariablePrefixMatcher publicStrMatchergetVariablePrefixMatcher() Gets the variable prefix matcher currently in use. The variable prefix is the character or characters that identify the start of a variable. This prefix is expressed in terms of a matcher allowing advanced prefix matches. Returns: the prefix matcher in use
lookup,"setVariablePrefixMatcher publicStrSubstitutorsetVariablePrefixMatcher(StrMatcherprefixMatcher) Sets the variable prefix matcher currently in use. The variable prefix is the character or characters that identify the start of a variable. This prefix is expressed in terms of a matcher allowing advanced prefix matches. Parameters: prefixMatcher - the prefix matcher to use, must not be null Returns: this, to enable chaining Throws: IllegalArgumentException - if the prefix matcher is null"
lookup,"setVariablePrefix publicStrSubstitutorsetVariablePrefix(charprefix) Sets the variable prefix to use. The variable prefix is the character or characters that identify the start of a variable. This method allows a single character prefix to be easily set. Parameters: prefix - the prefix character to use Returns: this, to enable chaining"
lookup,"setVariablePrefix publicStrSubstitutorsetVariablePrefix(Stringprefix) Sets the variable prefix to use. The variable prefix is the character or characters that identify the start of a variable. This method allows a string prefix to be easily set. Parameters: prefix - the prefix for variables, not null Returns: this, to enable chaining Throws: IllegalArgumentException - if the prefix is null"
lookup,getVariableSuffixMatcher publicStrMatchergetVariableSuffixMatcher() Gets the variable suffix matcher currently in use. The variable suffix is the character or characters that identify the end of a variable. This suffix is expressed in terms of a matcher allowing advanced suffix matches. Returns: the suffix matcher in use
lookup,"setVariableSuffixMatcher publicStrSubstitutorsetVariableSuffixMatcher(StrMatchersuffixMatcher) Sets the variable suffix matcher currently in use. The variable suffix is the character or characters that identify the end of a variable. This suffix is expressed in terms of a matcher allowing advanced suffix matches. Parameters: suffixMatcher - the suffix matcher to use, must not be null Returns: this, to enable chaining Throws: IllegalArgumentException - if the suffix matcher is null"
lookup,"setVariableSuffix publicStrSubstitutorsetVariableSuffix(charsuffix) Sets the variable suffix to use. The variable suffix is the character or characters that identify the end of a variable. This method allows a single character suffix to be easily set. Parameters: suffix - the suffix character to use Returns: this, to enable chaining"
lookup,"setVariableSuffix publicStrSubstitutorsetVariableSuffix(Stringsuffix) Sets the variable suffix to use. The variable suffix is the character or characters that identify the end of a variable. This method allows a string suffix to be easily set. Parameters: suffix - the suffix for variables, not null Returns: this, to enable chaining Throws: IllegalArgumentException - if the suffix is null"
lookup,"getValueDelimiterMatcher publicStrMatchergetValueDelimiterMatcher() Gets the variable default value delimiter matcher currently in use. The variable default value delimiter is the character or characters that delimit the variable name and the variable default value. This delimiter is expressed in terms of a matcher allowing advanced variable default value delimiter matches. If it returns null, then the variable default value resolution is disabled. Returns: the variable default value delimiter matcher in use, may be null"
lookup,"setValueDelimiterMatcher publicStrSubstitutorsetValueDelimiterMatcher(StrMatchervalueDelimiterMatcher) Sets the variable default value delimiter matcher to use. The variable default value delimiter is the character or characters that delimit the variable name and the variable default value. This delimiter is expressed in terms of a matcher allowing advanced variable default value delimiter matches. If the valueDelimiterMatcher is null, then the variable default value resolution becomes disabled. Parameters: valueDelimiterMatcher - variable default value delimiter matcher to use, may be null Returns: this, to enable chaining"
lookup,"setValueDelimiter publicStrSubstitutorsetValueDelimiter(charvalueDelimiter) Sets the variable default value delimiter to use. The variable default value delimiter is the character or characters that delimit the variable name and the variable default value. This method allows a single character variable default value delimiter to be easily set. Parameters: valueDelimiter - the variable default value delimiter character to use Returns: this, to enable chaining"
lookup,"setValueDelimiter publicStrSubstitutorsetValueDelimiter(StringvalueDelimiter) Sets the variable default value delimiter to use. The variable default value delimiter is the character or characters that delimit the variable name and the variable default value. This method allows a string variable default value delimiter to be easily set. If the valueDelimiter is null or empty string, then the variable default value resolution becomes disabled. Parameters: valueDelimiter - the variable default value delimiter string to use, may be null or empty Returns: this, to enable chaining"
lookup,getVariableResolver publicStrLookupgetVariableResolver() Gets the VariableResolver that is used to lookup variables. Returns: the VariableResolver
lookup,setVariableResolver publicvoidsetVariableResolver(StrLookupvariableResolver) Sets the VariableResolver that is used to lookup variables. Parameters: variableResolver - the VariableResolver
lookup,isEnableSubstitutionInVariables publicbooleanisEnableSubstitutionInVariables() Returns a flag whether substitution is done in variable names. Returns: the substitution in variable names flag
lookup,"setEnableSubstitutionInVariables publicvoidsetEnableSubstitutionInVariables(booleanenableSubstitutionInVariables) Sets a flag whether substitution is done in variable names. If set to true, the names of variables can contain other variables which are processed first before the original variable is evaluated, e.g. ${jre-${java.version}}. The default value is true. Parameters: enableSubstitutionInVariables - the new value of the flag"
lookup,"appendWithSeparators publicvoidappendWithSeparators(StringBuildersb, Iterable<?>iterable, Stringseparator) Appends a iterable placing separators between each value, but not before the first or after the last. Appending a null iterable will have no effect.. Parameters: sb - StringBuilder that contains the String being constructed. iterable - the iterable to append separator - the separator to use, null means no separator"
lookup,toString publicStringtoString() Overrides: toStringin classObject
lookup,setConfiguration publicvoidsetConfiguration(Configurationconfiguration) Description copied from interface:ConfigurationAware Injects the current Configuration into this object. Specified by: setConfigurationin interfaceConfigurationAware Parameters: configuration - the current Configuration
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Looks up the value for the key using the data in the LogEvent. Parameters: event - The current LogEvent. key - The key to be looked up, may be null. Returns: The value associated with the key."
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Looks up the value for the key using the data in the LogEvent. Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: The value associated with the key."
lookup,"lookup publicStringlookup(Stringkey) Converts the ""key"" to upper case. Specified by: lookupin interfaceStrLookup Parameters: key - the key to be looked up, may be null Returns: The value associated with the key."
lookup,"lookup publicStringlookup(LogEventevent, Stringkey) Converts the ""key"" to upper case. Specified by: lookupin interfaceStrLookup Parameters: event - The current LogEvent. key - the key to be looked up, may be null Returns: The value associated with the key."
net,"getContentFormat publicMap<String,String>getContentFormat() Gets this AbstractSocketManager's content format. Specified by: Key: ""port"" Value: provided ""port"" param Key: ""address"" Value: provided ""address"" param Overrides: getContentFormatin classAbstractManager Returns: Map of content format keys supporting AbstractSocketManager"
net,"Key: ""port"" Value: provided ""port"" param"
net,"Key: ""address"" Value: provided ""address"" param"
net,getHost publicStringgetHost() Gets the host. Returns: the host.
net,getPort publicintgetPort() Gets the port. Returns: the port.
net,"advertise Objectadvertise(Map<String,String>properties)"
net,unadvertise voidunadvertise(ObjectadvertisedObject)
net,"write publicvoidwrite(byte[]bytes, intoffset, intlength) throws IOException Overrides: writein classOutputStream Throws: IOException"
net,write publicvoidwrite(inti) throws IOException Specified by: writein classOutputStream Throws: IOException
net,write publicvoidwrite(byte[]bytes) throws IOException Overrides: writein classOutputStream Throws: IOException
net,flush publicvoidflush() throws IOException Specified by: flushin interfaceFlushable Overrides: flushin classOutputStream Throws: IOException
net,close publicvoidclose() throws IOException Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable Overrides: closein classOutputStream Throws: IOException
net,"getSocketManager public staticDatagramSocketManagergetSocketManager(Stringhost, intport, Layout<? extends Serializable>layout, intbufferSize) Obtain a SocketManager. Parameters: host - The host to connect to. port - The port on the host. layout - The layout. bufferSize - The buffer size. Returns: A DatagramSocketManager."
net,"getContentFormat publicMap<String,String>getContentFormat() Gets this DatagramSocketManager's content format. Specified by: Key: ""protocol"" Value: ""udp"" Key: ""direction"" Value: ""out"" Overrides: getContentFormatin classAbstractSocketManager Returns: Map of content format keys supporting DatagramSocketManager"
net,"Key: ""protocol"" Value: ""udp"""
net,"Key: ""direction"" Value: ""out"""
net,"values public staticFacility[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
net,valueOf public staticFacilityvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
net,"toFacility public staticFacilitytoFacility(Stringname) Returns the Facility for the given string. Parameters: name - The Facility enum name, case-insensitive. If null, returns null Returns: a Facility enum value or null if name is null"
net,"toFacility public staticFacilitytoFacility(Stringname, FacilitydefaultFacility) Returns the Facility for the given string. Parameters: name - The Facility enum name, case-insensitive. If null, returns, defaultFacility defaultFacility - the Facility to return if name is null Returns: a Facility enum value or defaultFacility if name is null"
net,getCode publicintgetCode() Retrieve the value of the enumeration. Returns: The value associated with the enumeration.
net,"isEqual publicbooleanisEqual(Stringname) Determine if this enumeration matches the specified name (ignoring case). Parameters: name - The name to check. Returns: true if the name matches this enumeration, ignoring case."
net,isJndiEnabled public staticbooleanisJndiEnabled() Tests whether any JNDI system properties are currently enabled. Returns: whether any JNDI system properties are currently enabled.
net,isJndiContextSelectorEnabled public staticbooleanisJndiContextSelectorEnabled() Tests whether the JNDI system properties for ContextSelector is currently enabled. Returns: whether the JNDI system properties for ContextSelector is currently enabled.
net,isJndiJdbcEnabled public staticbooleanisJndiJdbcEnabled() Tests whether the JNDI system properties for JDBC is currently enabled. Returns: whether the JNDI system properties for JDBC is currently enabled.
net,isJndiJmsEnabled public staticbooleanisJndiJmsEnabled() Tests whether the JNDI system properties for JMS is currently enabled. Returns: whether the JNDI system properties for JMS is currently enabled.
net,isJndiLookupEnabled public staticbooleanisJndiLookupEnabled() Tests whether the JNDI system properties for Lookup is currently enabled. Returns: whether the JNDI system properties for Lookup is currently enabled.
net,getDefaultManager public staticJndiManagergetDefaultManager() Gets the default JndiManager using the default InitialContext. Returns: the default JndiManager
net,getDefaultManager public staticJndiManagergetDefaultManager(Stringname) Gets a named JndiManager using the default InitialContext. Parameters: name - the name of the JndiManager instance to create or use if available Returns: a default JndiManager
net,"getJndiManager public staticJndiManagergetJndiManager(StringinitialContextFactoryName, StringproviderURL, StringurlPkgPrefixes, StringsecurityPrincipal, StringsecurityCredentials, PropertiesadditionalProperties) Gets a JndiManager with the provided configuration information. Parameters: initialContextFactoryName - Fully qualified class name of an implementation of InitialContextFactory. providerURL - The provider URL to use for the JNDI connection (specific to the above factory). urlPkgPrefixes - A colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory securityPrincipal - The name of the identity of the Principal. securityCredentials - The security credentials of the Principal. additionalProperties - Any additional JNDI environment properties to set or null for none. Returns: the JndiManager for the provided parameters."
net,"getJndiManager public staticJndiManagergetJndiManager(Propertiesproperties) Gets a JndiManager with the provided configuration information. Parameters: properties - JNDI properties, usually created by calling createProperties(String, String, String, String, String, Properties). Returns: the JndiManager for the provided parameters. Since: 2.9 See Also: createProperties(String, String, String, String, String, Properties)"
net,"createProperties(String, String, String, String, String, Properties)"
net,"createProperties public staticPropertiescreateProperties(StringinitialContextFactoryName, StringproviderURL, StringurlPkgPrefixes, StringsecurityPrincipal, StringsecurityCredentials, PropertiesadditionalProperties) Creates JNDI Properties with the provided configuration information. Parameters: initialContextFactoryName - Fully qualified class name of an implementation of InitialContextFactory. providerURL - The provider URL to use for the JNDI connection (specific to the above factory). urlPkgPrefixes - A colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory securityPrincipal - The name of the identity of the Principal. securityCredentials - The security credentials of the Principal. additionalProperties - Any additional JNDI environment properties to set or null for none. Returns: the Properties for the provided parameters. Since: 2.9"
net,"releaseSub protectedbooleanreleaseSub(longtimeout, TimeUnittimeUnit) Description copied from class:AbstractManager May be overridden by managers to perform processing while the manager is being released and the lock is held. A timeout is passed for implementors to use as they see fit. Overrides: releaseSubin classAbstractManager Parameters: timeout - timeout timeUnit - timeout time unit Returns: true if all resources were closed normally, false otherwise."
net,lookup public<T>Tlookup(Stringname) throws NamingException Looks up a named object through this JNDI context. Type Parameters: T - the type of the object. Parameters: name - name of the object to look up. Returns: the named object if it could be located. Throws: NamingException - if a naming exception is encountered
net,toString publicStringtoString() Overrides: toStringin classObject
net,getTo publicStringgetTo()
net,getCc publicStringgetCc()
net,getBcc publicStringgetBcc()
net,getFrom publicStringgetFrom()
net,getReplyTo publicStringgetReplyTo()
net,getSubject publicStringgetSubject()
net,getSubjectSerializer publicAbstractStringLayout.SerializergetSubjectSerializer()
net,getSmtpProtocol publicStringgetSmtpProtocol()
net,getSmtpHost publicStringgetSmtpHost()
net,getSmtpPort publicintgetSmtpPort()
net,getSmtpUsername publicStringgetSmtpUsername()
net,getSmtpPassword publicStringgetSmtpPassword()
net,isSmtpDebug publicbooleanisSmtpDebug()
net,getBufferSize publicintgetBufferSize()
net,getSslConfiguration publicSslConfigurationgetSslConfiguration()
net,getFilterName publicStringgetFilterName()
net,getManagerName publicStringgetManagerName()
net,add public abstractvoidadd(LogEventevent) Adds an event to the cyclic buffer. Parameters: event - The event to add.
net,"sendEvents public abstractvoidsendEvents(Layout<?>layout, LogEventappendEvent) Send the contents of the cyclic buffer as an e-mail message. Parameters: layout - The layout for formatting the events. appendEvent - The event that triggered the send."
net,"createManager MailManagercreateManager(Stringname, MailManager.FactoryDatadata) Description copied from interface:ManagerFactory Creates a Manager. Specified by: createManagerin interfaceManagerFactory<MailManager,MailManager.FactoryData> Parameters: name - The name of the entity to manage. data - The data required to create the entity. Returns: A Manager for the entity."
net,setFrom publicMimeMessageBuildersetFrom(Stringfrom) throws javax.mail.MessagingException Throws: javax.mail.MessagingException
net,setReplyTo publicMimeMessageBuildersetReplyTo(StringreplyTo) throws javax.mail.MessagingException Throws: javax.mail.MessagingException
net,"setRecipients publicMimeMessageBuildersetRecipients(javax.mail.Message.RecipientTyperecipientType, Stringrecipients) throws javax.mail.MessagingException Throws: javax.mail.MessagingException"
net,setSubject publicMimeMessageBuildersetSubject(Stringsubject) throws javax.mail.MessagingException Throws: javax.mail.MessagingException
net,getMimeMessage @Deprecated publicjavax.mail.internet.MimeMessagegetMimeMessage() Deprecated. Use build().
net,build publicjavax.mail.internet.MimeMessagebuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<javax.mail.internet.MimeMessage> Returns: the configured instance.
net,"advertise publicObjectadvertise(Map<String,String>properties) Advertise the provided entity. Properties map provided in advertise method must include a ""name"" entry but may also provide ""protocol"" (tcp/udp) as well as a ""port"" entry The length of property names and values must be 255 bytes or less. Entries with names or values larger than 255 bytes will be removed prior to advertisement. Specified by: advertisein interfaceAdvertiser Parameters: properties - the properties representing the entity to advertise Returns: the object which can be used to unadvertise, or null if advertisement was unsuccessful"
net,unadvertise publicvoidunadvertise(ObjectserviceInfo) Unadvertise the previously advertised entity. Specified by: unadvertisein interfaceAdvertiser Parameters: serviceInfo - instance of javax.jmdns.ServiceInfo
net,"getPriority public staticintgetPriority(Facilityfacility, Levellevel) Returns the priority value based on the Facility and Log Level. Parameters: facility - The Facility. level - The Level. Returns: The integer value of the priority."
net,getFacility publicFacilitygetFacility() Returns the Facility. Returns: the Facility.
net,getSeverity publicSeveritygetSeverity() Returns the Severity. Returns: the Severity.
net,getValue publicintgetValue() Returns the value of this Priority. Returns: the value of this Priority.
net,toString publicStringtoString() Overrides: toStringin classObject
net,"values public staticProtocol[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
net,valueOf public staticProtocolvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
net,isEqual publicbooleanisEqual(Stringname) Determines if the String matches this enum. Parameters: name - The enumeration name to check. Returns: true if this enumeration has the specified name.
net,"values public staticRfc1349TrafficClass[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
net,valueOf public staticRfc1349TrafficClassvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
net,value publicintvalue() Gets the value. Returns: the value.
net,"values public staticSeverity[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
net,valueOf public staticSeverityvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
net,getCode publicintgetCode() Returns the severity code. Returns: The numeric value associated with the Severity.
net,"isEqual publicbooleanisEqual(Stringname) Determine if the name matches this Severity. Parameters: name - the name to match. Returns: true if the name matches, false otherwise."
net,"getSeverity public staticSeveritygetSeverity(Levellevel) Returns the Severity for the specified Level. Parameters: level - The Level. Returns: The matching Severity, or DEBUG if there is no match."
net,add publicvoidadd(LogEventevent) Description copied from class:MailManager Adds an event to the cyclic buffer. Specified by: addin classMailManager Parameters: event - The event to add.
net,"getSmtpManager @Deprecated public staticSmtpManagergetSmtpManager(Configurationconfig, Stringto, Stringcc, Stringbcc, Stringfrom, StringreplyTo, Stringsubject, Stringprotocol, Stringhost, intport, Stringusername, Stringpassword, booleanisDebug, StringfilterName, intnumElements, SslConfigurationsslConfiguration) Deprecated."
net,"sendEvents publicvoidsendEvents(Layout<?>layout, LogEventappendEvent) Description copied from class:MailManager Send the contents of the cyclic buffer as an e-mail message. Specified by: sendEventsin classMailManager Parameters: layout - The layout for formatting the events. appendEvent - The event that triggered the send."
net,"formatContentToBytes protectedbyte[]formatContentToBytes(LogEvent[]priorEvents, LogEventappendEvent, Layout<?>layout) throws IOException Throws: IOException"
net,"writeHeader protectedvoidwriteHeader(Layout<?>layout, OutputStreamout) throws IOException Throws: IOException"
net,"writeBuffer protectedvoidwriteBuffer(LogEvent[]priorEvents, LogEventappendEvent, Layout<?>layout, OutputStreamout) throws IOException Throws: IOException"
net,"writeFooter protectedvoidwriteFooter(Layout<?>layout, OutputStreamout) throws IOException Throws: IOException"
net,"getEncoding protectedStringgetEncoding(byte[]rawBytes, StringcontentType)"
net,"encodeContentToBytes protectedbyte[]encodeContentToBytes(byte[]rawBytes, Stringencoding) throws javax.mail.MessagingException, IOException Throws: javax.mail.MessagingException IOException"
net,"encodeContent protectedvoidencodeContent(byte[]bytes, Stringencoding, ByteArrayOutputStreamout) throws javax.mail.MessagingException, IOException Throws: javax.mail.MessagingException IOException"
net,"getHeaders protectedjavax.mail.internet.InternetHeadersgetHeaders(StringcontentType, Stringencoding)"
net,"getMimeMultipart protectedjavax.mail.internet.MimeMultipartgetMimeMultipart(byte[]encodedBytes, javax.mail.internet.InternetHeadersheaders) throws javax.mail.MessagingException Throws: javax.mail.MessagingException"
net,"sendMultipartMessage @Deprecated protectedvoidsendMultipartMessage(javax.mail.internet.MimeMessagemsg, javax.mail.internet.MimeMultipartmp) throws javax.mail.MessagingException Deprecated. Please use the sendMultipartMessage(MimeMessage, MimeMultipart, String) method instead. Throws: javax.mail.MessagingException"
net,"sendMultipartMessage protectedvoidsendMultipartMessage(javax.mail.internet.MimeMessagemsg, javax.mail.internet.MimeMultipartmp, Stringsubject) throws javax.mail.MessagingException Throws: javax.mail.MessagingException"
net,"createManager publicSmtpManagercreateManager(Stringname, MailManager.FactoryDatadata) Description copied from interface:ManagerFactory Creates a Manager. Specified by: createManagerin interfaceMailManagerFactory Specified by: createManagerin interfaceManagerFactory<MailManager,MailManager.FactoryData> Parameters: name - The name of the entity to manage. data - The data required to create the entity. Returns: A Manager for the entity."
net,setHost publicSocketAddress.BuildersetHost(InetAddresshost)
net,setPort publicSocketAddress.BuildersetPort(intport)
net,build publicSocketAddressbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SocketAddress> Returns: the configured instance.
net,getLoopback public staticSocketAddressgetLoopback() Creates a SocketAddress corresponding to localhost:0. Returns: a SocketAddress for localhost:0
net,getSocketAddress publicInetSocketAddressgetSocketAddress()
net,getPort publicintgetPort()
net,getAddress publicInetAddressgetAddress()
net,getHostName publicStringgetHostName()
net,newBuilder @PluginBuilderFactory public staticSocketAddress.BuildernewBuilder()
net,toString publicStringtoString() Overrides: toStringin classObject
net,newBuilder @PluginBuilderFactory public staticSocketOptionsnewBuilder() Constructs a new builder. Returns: a new builder.
net,"apply publicvoidapply(Socketsocket) throws SocketException Applies the values in this builder to the given socket. Parameters: socket - The target Socket. Throws: SocketException - if there is an error in the underlying protocol, such as a TCP error."
net,build publicSocketOptionsbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SocketOptions> Returns: the configured instance.
net,getActualTrafficClass publicIntegergetActualTrafficClass() See Socket.setTrafficClass(int). Returns: the value to apply to a Socket.
net,"getPerformancePreferences publicSocketPerformancePreferencesgetPerformancePreferences() See Socket.setPerformancePreferences(int, int, int). Returns: this."
net,getReceiveBufferSize publicIntegergetReceiveBufferSize() See Socket.setReceiveBufferSize(int). Returns: the value to apply to a Socket.
net,getRfc1349TrafficClass publicRfc1349TrafficClassgetRfc1349TrafficClass() See Socket.setTrafficClass(int). Returns: the value to apply to a Socket.
net,getSendBufferSize publicIntegergetSendBufferSize() See Socket.setSendBufferSize(int). Returns: the value to apply to a Socket.
net,"getSoLinger publicIntegergetSoLinger() See Socket.setSoLinger(boolean, int). Returns: the value to apply to a Socket."
net,getSoTimeout publicIntegergetSoTimeout() See Socket.setSoTimeout(int). Returns: the value to apply to a Socket.
net,getTrafficClass publicIntegergetTrafficClass() See Socket.setTrafficClass(int). Returns: the value to apply to a Socket.
net,isKeepAlive publicBooleanisKeepAlive() See Socket.setKeepAlive(boolean). Returns: the value to apply to a Socket.
net,isOobInline publicBooleanisOobInline() See Socket.setOOBInline(boolean). Returns: the value to apply to a Socket.
net,isReuseAddress publicBooleanisReuseAddress() See Socket.setReuseAddress(boolean). Returns: the value to apply to a Socket.
net,isTcpNoDelay publicBooleanisTcpNoDelay() See Socket.setTcpNoDelay(boolean). Returns: the value to apply to a Socket.
net,setKeepAlive publicSocketOptionssetKeepAlive(booleankeepAlive) See Socket.setKeepAlive(boolean). Parameters: keepAlive - See Socket.setKeepAlive(boolean). Returns: this.
net,setOobInline publicSocketOptionssetOobInline(booleanoobInline) See Socket.setOOBInline(boolean). Parameters: oobInline - See Socket.setOOBInline(boolean). Returns: this.
net,"setPerformancePreferences publicSocketOptionssetPerformancePreferences(SocketPerformancePreferencesperformancePreferences) See Socket.setPerformancePreferences(int, int, int). Parameters: performancePreferences - See Socket.setPerformancePreferences(int, int, int). Returns: this."
net,setReceiveBufferSize publicSocketOptionssetReceiveBufferSize(intreceiveBufferSize) See Socket.setReceiveBufferSize(int). Parameters: receiveBufferSize - See Socket.setReceiveBufferSize(int). Returns: this.
net,setReuseAddress publicSocketOptionssetReuseAddress(booleanreuseAddress) See Socket.setReuseAddress(boolean). Parameters: reuseAddress - See Socket.setReuseAddress(boolean). Returns: this.
net,setRfc1349TrafficClass publicSocketOptionssetRfc1349TrafficClass(Rfc1349TrafficClasstrafficClass) See Socket.setTrafficClass(int). Parameters: trafficClass - See Socket.setTrafficClass(int). Returns: the value to apply to a Socket.
net,setSendBufferSize publicSocketOptionssetSendBufferSize(intsendBufferSize) See Socket.setSendBufferSize(int). Parameters: sendBufferSize - See Socket.setSendBufferSize(int). Returns: this.
net,"setSoLinger publicSocketOptionssetSoLinger(intsoLinger) See Socket.setSoLinger(boolean, int). Parameters: soLinger - See Socket.setSoLinger(boolean, int). Returns: this."
net,setSoTimeout publicSocketOptionssetSoTimeout(intsoTimeout) See Socket.setSoTimeout(int). Parameters: soTimeout - See Socket.setSoTimeout(int). Returns: this.
net,setTcpNoDelay publicSocketOptionssetTcpNoDelay(booleantcpNoDelay) See Socket.setTcpNoDelay(boolean). Parameters: tcpNoDelay - See Socket.setTcpNoDelay(boolean). Returns: this.
net,setTrafficClass publicSocketOptionssetTrafficClass(inttrafficClass) See Socket.setTrafficClass(int). Parameters: trafficClass - See Socket.setTrafficClass(int). Returns: this.
net,toString publicStringtoString() Overrides: toStringin classObject
net,newBuilder @PluginBuilderFactory public staticSocketPerformancePreferencesnewBuilder()
net,apply publicvoidapply(Socketsocket)
net,build publicSocketPerformancePreferencesbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<SocketPerformancePreferences> Returns: the configured instance.
net,getBandwidth publicintgetBandwidth()
net,getConnectionTime publicintgetConnectionTime()
net,getLatency publicintgetLatency()
net,setBandwidth publicvoidsetBandwidth(intbandwidth)
net,setConnectionTime publicvoidsetConnectionTime(intconnectionTime)
net,setLatency publicvoidsetLatency(intlatency)
net,toString publicStringtoString() Overrides: toStringin classObject
net,"getSocketManager @Deprecated public staticSslSocketManagergetSocketManager(SslConfigurationsslConfig, Stringhost, intport, intconnectTimeoutMillis, intreconnectDelayMillis, booleanimmediateFail, Layout<? extends Serializable>layout, intbufferSize) Deprecated. Use getSocketManager(SslConfiguration, String, int, int, int, boolean, Layout, int, SocketOptions)."
net,"getSocketManager public staticSslSocketManagergetSocketManager(SslConfigurationsslConfig, Stringhost, intport, intconnectTimeoutMillis, intreconnectDelayMillis, booleanimmediateFail, Layout<? extends Serializable>layout, intbufferSize, SocketOptionssocketOptions)"
net,createSocket protectedSocketcreateSocket(InetSocketAddresssocketAddress) throws IOException Overrides: createSocketin classTcpSocketManager Throws: IOException
net,"resolveHost publicList<InetSocketAddress>resolveHost(Stringhost, intport) throws UnknownHostException Throws: UnknownHostException"
net,"getSocketManager @Deprecated public staticTcpSocketManagergetSocketManager(Stringhost, intport, intconnectTimeoutMillis, intreconnectDelayMillis, booleanimmediateFail, Layout<? extends Serializable>layout, intbufferSize) Deprecated. Use getSocketManager(String, int, int, int, boolean, Layout, int, SocketOptions). Obtains a TcpSocketManager. Parameters: host - The host to connect to. port - The port on the host. connectTimeoutMillis - the connect timeout in milliseconds reconnectDelayMillis - The interval to pause between retries. bufferSize - The buffer size. Returns: A TcpSocketManager."
net,"getSocketManager public staticTcpSocketManagergetSocketManager(Stringhost, intport, intconnectTimeoutMillis, intreconnectDelayMillis, booleanimmediateFail, Layout<? extends Serializable>layout, intbufferSize, SocketOptionssocketOptions) Obtains a TcpSocketManager. Parameters: host - The host to connect to. port - The port on the host. connectTimeoutMillis - the connect timeout in milliseconds reconnectDelayMillis - The interval to pause between retries. bufferSize - The buffer size. Returns: A TcpSocketManager."
net,"write protectedvoidwrite(byte[]bytes, intoffset, intlength, booleanimmediateFlush) Description copied from class:OutputStreamManager Some output streams synchronize writes while others do not. Synchronizing here insures that log events won't be intertwined. Overrides: writein classOutputStreamManager Parameters: bytes - The serialized Log event. offset - The offset into the byte array. length - The number of bytes to write. immediateFlush - flushes immediately after writing."
net,closeOutputStream protectedbooleancloseOutputStream() Overrides: closeOutputStreamin classOutputStreamManager
net,getConnectTimeoutMillis publicintgetConnectTimeoutMillis()
net,"getContentFormat publicMap<String,String>getContentFormat() Gets this TcpSocketManager's content format. Specified by: Key: ""protocol"" Value: ""tcp"" Key: ""direction"" Value: ""out"" Overrides: getContentFormatin classAbstractSocketManager Returns: Map of content format keys supporting TcpSocketManager"
net,"Key: ""protocol"" Value: ""tcp"""
net,"Key: ""direction"" Value: ""out"""
net,createSocket protectedSocketcreateSocket(InetSocketAddresssocketAddress) throws IOException Throws: IOException
net,"createSocket protected staticSocketcreateSocket(InetSocketAddresssocketAddress, SocketOptionssocketOptions, intconnectTimeoutMillis) throws IOException Throws: IOException"
net,setHostResolver public staticvoidsetHostResolver(TcpSocketManager.HostResolverresolver) This method is only for unit testing. It is not Thread-safe. Parameters: resolver - the HostResolver.
net,"getSocketOptions publicSocketOptionsgetSocketOptions() USE AT YOUR OWN RISK, method is public for testing purpose only for now."
net,"getSocket publicSocketgetSocket() USE AT YOUR OWN RISK, method is public for testing purpose only for now."
net,getReconnectionDelayMillis publicintgetReconnectionDelayMillis()
net,toString publicStringtoString() Overrides: toStringin classObject
net,"createManager publicMcreateManager(Stringname, Tdata) Description copied from interface:ManagerFactory Creates a Manager. Specified by: createManagerin interfaceManagerFactory<M extends TcpSocketManager,T extends org.apache.logging.log4j.core.net.TcpSocketManager.FactoryData> Parameters: name - The name of the entity to manage. data - The data required to create the entity. Returns: A Manager for the entity."
net,"errorMessage protectedStringerrorMessage(Tdata, List<InetSocketAddress>socketAddresses)"
net,"createConnection public static<T extends URLConnection>TcreateConnection(URLurl, longlastModifiedMillis, SslConfigurationsslConfiguration, AuthorizationProviderauthorizationProvider) throws IOException Throws: IOException"
net,createConnection public staticURLConnectioncreateConnection(URLurl) throws IOException Throws: IOException
net,load protectedKeyStoreload() throws StoreConfigurationException Overrides: loadin classStoreConfiguration<KeyStore> Throws: StoreConfigurationException - May be thrown by subclasses
net,getKeyStore publicKeyStoregetKeyStore()
net,hashCode publicinthashCode() Overrides: hashCodein classStoreConfiguration<KeyStore>
net,equals publicbooleanequals(Objectobj) Overrides: equalsin classStoreConfiguration<KeyStore>
net,getKeyStoreType publicStringgetKeyStoreType()
net,"createKeyStoreConfiguration @PluginFactory public staticKeyStoreConfigurationcreateKeyStoreConfiguration(@PluginAttribute(""location"") Stringlocation, @PluginAttribute(value=""password"",sensitive=true) char[]password, @PluginAttribute(""passwordEnvironmentVariable"") StringpasswordEnvironmentVariable, @PluginAttribute(""passwordFile"") StringpasswordFile, @PluginAttribute(""type"") StringkeyStoreType, @PluginAttribute(""keyManagerFactoryAlgorithm"") StringkeyManagerFactoryAlgorithm) throws StoreConfigurationException Creates a KeyStoreConfiguration. Parameters: location - The location of the KeyStore, a file path, URL or resource. password - The password to access the KeyStore. keyStoreType - The KeyStore type, null defaults to ""JKS"". keyManagerFactoryAlgorithm - The standard name of the requested algorithm. See the Java Secure Socket Extension Reference Guide for information about these names. Returns: a new KeyStoreConfiguration Throws: StoreConfigurationException - Thrown if this call cannot load the KeyStore."
net,"createKeyStoreConfiguration @Deprecated public staticKeyStoreConfigurationcreateKeyStoreConfiguration(Stringlocation, char[]password, StringkeyStoreType, StringkeyManagerFactoryAlgorithm) throws StoreConfigurationException Deprecated. use createKeyStoreConfiguration(String, char[], String, String, String, String) Throws: StoreConfigurationException"
net,"createKeyStoreConfiguration @Deprecated public staticKeyStoreConfigurationcreateKeyStoreConfiguration(Stringlocation, Stringpassword, StringkeyStoreType, StringkeyManagerFactoryAlgorithm) throws StoreConfigurationException Deprecated. Use createKeyStoreConfiguration(String, char[], String, String) Creates a KeyStoreConfiguration. Parameters: location - The location of the KeyStore, a file path, URL or resource. password - The password to access the KeyStore. keyStoreType - The KeyStore type, null defaults to ""JKS"". keyManagerFactoryAlgorithm - The standard name of the requested algorithm. See the Java Secure Socket Extension Reference Guide for information about these names. Returns: a new KeyStoreConfiguration Throws: StoreConfigurationException - Thrown if this call cannot load the KeyStore."
net,"initKeyManagerFactory publicKeyManagerFactoryinitKeyManagerFactory() throws NoSuchAlgorithmException, UnrecoverableKeyException, KeyStoreException Throws: NoSuchAlgorithmException UnrecoverableKeyException KeyStoreException"
net,hashCode publicinthashCode() Overrides: hashCodein classAbstractKeyStoreConfiguration
net,equals publicbooleanequals(Objectobj) Overrides: equalsin classAbstractKeyStoreConfiguration
net,getKeyManagerFactoryAlgorithm publicStringgetKeyManagerFactoryAlgorithm()
net,"verify publicbooleanverify(Strings, SSLSessionsslSession) Specified by: verifyin interfaceHostnameVerifier"
net,"getPassword char[]getPassword() Returns a new char[] array with the password characters. It is the responsibility of the caller to erase this data by calling Arrays.fill(char[], char) immediately when authentication is complete and the password data is no longer needed. Returns: a copy of the password"
net,clearSecrets publicvoidclearSecrets() Clears the secret fields in this object but still allow it to operate normally.
net,getSslSocketFactory publicSSLSocketFactorygetSslSocketFactory()
net,getSslServerSocketFactory publicSSLServerSocketFactorygetSslServerSocketFactory()
net,"createSSLConfiguration @PluginFactory public staticSslConfigurationcreateSSLConfiguration(@PluginAttribute(""protocol"") Stringprotocol, @PluginElement(""KeyStore"") KeyStoreConfigurationkeyStoreConfig, @PluginElement(""TrustStore"") TrustStoreConfigurationtrustStoreConfig) Creates an SslConfiguration from a KeyStoreConfiguration and a TrustStoreConfiguration. Parameters: protocol - The protocol, see SSLContext Algorithms keyStoreConfig - The KeyStoreConfiguration. trustStoreConfig - The TrustStoreConfiguration. Returns: a new SslConfiguration"
net,"createSSLConfiguration public staticSslConfigurationcreateSSLConfiguration(@PluginAttribute(""protocol"") Stringprotocol, @PluginElement(""KeyStore"") KeyStoreConfigurationkeyStoreConfig, @PluginElement(""TrustStore"") TrustStoreConfigurationtrustStoreConfig, @PluginAttribute(""verifyHostName"") booleanverifyHostName) Creates an SslConfiguration from a KeyStoreConfiguration and a TrustStoreConfiguration. Parameters: protocol - The protocol, see SSLContext Algorithms keyStoreConfig - The KeyStoreConfiguration. trustStoreConfig - The TrustStoreConfiguration. verifyHostName - whether or not to perform host name verification Returns: a new SslConfiguration Since: 2.12"
net,hashCode publicinthashCode() Overrides: hashCodein classObject
net,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
net,getKeyStoreConfig publicKeyStoreConfigurationgetKeyStoreConfig()
net,getTrustStoreConfig publicTrustStoreConfigurationgetTrustStoreConfig()
net,getSslContext publicSSLContextgetSslContext()
net,getProtocol publicStringgetProtocol()
net,isVerifyHostName publicbooleanisVerifyHostName()
net,getSslConfiguration public staticSslConfigurationgetSslConfiguration()
net,clearSecrets publicvoidclearSecrets() Clears the secret fields in this object.
net,getLocation publicStringgetLocation()
net,setLocation publicvoidsetLocation(Stringlocation)
net,getPassword @Deprecated publicStringgetPassword() Deprecated. Use getPasswordAsCharArray()
net,getPasswordAsCharArray publicchar[]getPasswordAsCharArray()
net,setPassword publicvoidsetPassword(char[]password)
net,setPassword @Deprecated publicvoidsetPassword(Stringpassword) Deprecated. Use getPasswordAsCharArray()
net,load protectedTload() throws StoreConfigurationException Throws: StoreConfigurationException - May be thrown by subclasses
net,hashCode publicinthashCode() Overrides: hashCodein classObject
net,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
net,"createKeyStoreConfiguration @PluginFactory public staticTrustStoreConfigurationcreateKeyStoreConfiguration(@PluginAttribute(""location"") Stringlocation, @PluginAttribute(value=""password"",sensitive=true) char[]password, @PluginAttribute(""passwordEnvironmentVariable"") StringpasswordEnvironmentVariable, @PluginAttribute(""passwordFile"") StringpasswordFile, @PluginAttribute(""type"") StringkeyStoreType, @PluginAttribute(""trustManagerFactoryAlgorithm"") StringtrustManagerFactoryAlgorithm) throws StoreConfigurationException Creates a KeyStoreConfiguration. Parameters: location - The location of the KeyStore, a file path, URL or resource. password - The password to access the KeyStore. keyStoreType - The KeyStore type, null defaults to ""JKS"". trustManagerFactoryAlgorithm - The standard name of the requested trust management algorithm. See the Java Secure Socket Extension Reference Guide for information these names. Returns: a new TrustStoreConfiguration Throws: StoreConfigurationException - Thrown if this instance cannot load the KeyStore."
net,"createKeyStoreConfiguration @Deprecated public staticTrustStoreConfigurationcreateKeyStoreConfiguration(Stringlocation, char[]password, StringkeyStoreType, StringtrustManagerFactoryAlgorithm) throws StoreConfigurationException Deprecated. Use createKeyStoreConfiguration(String, char[], String, String, String, String) Throws: StoreConfigurationException"
net,"createKeyStoreConfiguration @Deprecated public staticTrustStoreConfigurationcreateKeyStoreConfiguration(Stringlocation, Stringpassword, StringkeyStoreType, StringtrustManagerFactoryAlgorithm) throws StoreConfigurationException Deprecated. Use createKeyStoreConfiguration(String, char[], String, String) Creates a KeyStoreConfiguration. Parameters: location - The location of the KeyStore, a file path, URL or resource. password - The password to access the KeyStore. keyStoreType - The KeyStore type, null defaults to ""JKS"". trustManagerFactoryAlgorithm - The standard name of the requested trust management algorithm. See the Java Secure Socket Extension Reference Guide for information these names. Returns: a new TrustStoreConfiguration Throws: StoreConfigurationException - Thrown if this instance cannot load the KeyStore."
net,"initTrustManagerFactory publicTrustManagerFactoryinitTrustManagerFactory() throws NoSuchAlgorithmException, KeyStoreException Throws: NoSuchAlgorithmException KeyStoreException"
net,hashCode publicinthashCode() Overrides: hashCodein classAbstractKeyStoreConfiguration
net,equals publicbooleanequals(Objectobj) Overrides: equalsin classAbstractKeyStoreConfiguration
net,getTrustManagerFactoryAlgorithm publicStringgetTrustManagerFactoryAlgorithm()
osgi,start publicvoidstart(org.osgi.framework.BundleContextcontext) throws Exception Specified by: startin interfaceorg.osgi.framework.BundleActivator Overrides: startin classProviderActivator Throws: Exception
osgi,stop publicvoidstop(org.osgi.framework.BundleContextcontext) throws Exception Specified by: stopin interfaceorg.osgi.framework.BundleActivator Overrides: stopin classProviderActivator Throws: Exception
osgi,bundleChanged publicvoidbundleChanged(org.osgi.framework.BundleEventevent) Specified by: bundleChangedin interfaceorg.osgi.framework.BundleListener
osgi,"shutdown publicvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Description copied from interface:ContextSelector Shuts down the LoggerContext. Specified by: shutdownin interfaceContextSelector Overrides: shutdownin classClassLoaderContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate allContexts - if true all LoggerContexts that can be located will be shutdown."
osgi,"hasContext publicbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Checks to see if a LoggerContext is installed. The default implementation returns false. Specified by: hasContextin interfaceContextSelector Overrides: hasContextin classClassLoaderContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise."
osgi,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext, URIconfigLocation) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Overrides: getContextin classClassLoaderContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
parser,"parseFrom publicLogEventparseFrom(Stringinput) throws ParseException Description copied from interface:TextLogEventParser Parses a String, which is expected to contain exactly one log event. Specified by: parseFromin interfaceTextLogEventParser Parameters: input - the string Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(byte[]input) throws ParseException Description copied from interface:LogEventParser Parses a byte array, which is expected to contain exactly one log event. Specified by: parseFromin interfaceLogEventParser Parameters: input - the byte array Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(byte[]input, intoffset, intlength) throws ParseException Description copied from interface:LogEventParser Parses a specified range in a byte array. The specified range is expected to contain exactly one log event. Specified by: parseFromin interfaceLogEventParser Parameters: input - the byte array offset - the initial offset length - the length Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom LogEventparseFrom(byte[]input) throws ParseException Parses a byte array, which is expected to contain exactly one log event. Parameters: input - the byte array Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom LogEventparseFrom(byte[]input, intoffset, intlength) throws ParseException Parses a specified range in a byte array. The specified range is expected to contain exactly one log event. Parameters: input - the byte array offset - the initial offset length - the length Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom LogEventparseFrom(Stringinput) throws ParseException Parses a String, which is expected to contain exactly one log event. Parameters: input - the string Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(Stringinput) throws ParseException Description copied from interface:TextLogEventParser Parses a String, which is expected to contain exactly one log event. Specified by: parseFromin interfaceTextLogEventParser Parameters: input - the string Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(byte[]input) throws ParseException Description copied from interface:LogEventParser Parses a byte array, which is expected to contain exactly one log event. Specified by: parseFromin interfaceLogEventParser Parameters: input - the byte array Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(byte[]input, intoffset, intlength) throws ParseException Description copied from interface:LogEventParser Parses a specified range in a byte array. The specified range is expected to contain exactly one log event. Specified by: parseFromin interfaceLogEventParser Parameters: input - the byte array offset - the initial offset length - the length Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(Stringinput) throws ParseException Description copied from interface:TextLogEventParser Parses a String, which is expected to contain exactly one log event. Specified by: parseFromin interfaceTextLogEventParser Parameters: input - the string Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(byte[]input) throws ParseException Description copied from interface:LogEventParser Parses a byte array, which is expected to contain exactly one log event. Specified by: parseFromin interfaceLogEventParser Parameters: input - the byte array Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
parser,"parseFrom publicLogEventparseFrom(byte[]input, intoffset, intlength) throws ParseException Description copied from interface:LogEventParser Parses a specified range in a byte array. The specified range is expected to contain exactly one log event. Specified by: parseFromin interfaceLogEventParser Parameters: input - the byte array offset - the initial offset length - the length Returns: the parsed LogEvent, never null. Throws: ParseException - if the input is malformed and cannot be parsed as a LogEvent"
pattern,getName public finalStringgetName() This method returns the name of the conversion pattern. The name can be useful to certain Layouts such as HtmlLayout. Specified by: getNamein interfacePatternConverter Returns: the name of the conversion pattern
pattern,"getStyleClass publicStringgetStyleClass(Objecte) This method returns the CSS style class that should be applied to the LoggingEvent passed as parameter, which can be null. This information is currently used only by HtmlLayout. Specified by: getStyleClassin interfacePatternConverter Parameters: e - null values are accepted Returns: the name of the conversion pattern"
pattern,"newInstance public staticAbstractStyleNameConverter.BlacknewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance public staticAbstractStyleNameConverter.BluenewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance public staticAbstractStyleNameConverter.CyannewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance public staticAbstractStyleNameConverter.GreennewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance protected static<T extends AbstractStyleNameConverter> TnewInstance(Class<T>asnConverterClass, Stringname, Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticAbstractStyleNameConverter.MagentanewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance public staticAbstractStyleNameConverter.RednewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance public staticAbstractStyleNameConverter.WhitenewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"newInstance public staticAbstractStyleNameConverter.YellownewInstance(Configurationconfig, String[]options) Gets an instance of the class (called via reflection). Parameters: config - The current Configuration. options - The pattern options, may be null. If the first element is ""short"", only the first line of the throwable will be formatted. Returns: new instance of class or null"
pattern,"values public staticAnsiEscape[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
pattern,valueOf public staticAnsiEscapevalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
pattern,getDefaultStyle public staticStringgetDefaultStyle() Gets the default style. Returns: the default style
pattern,getCode publicStringgetCode() Gets the escape code. Returns: the escape code.
pattern,"createMap public staticMap<String,String>createMap(Stringvalues, String[]dontEscapeKeys) Creates a Map from a source array where values are ANSI escape sequences. The format is: Key1=Value, Key2=Value, ... For example: ERROR=red bold, WARN=yellow bold, INFO=green, ... You can use whitespace around the comma and equal sign. The names in values MUST come from the AnsiEscape enum, case is normalized to upper-case internally. Parameters: values - the source string to parse. dontEscapeKeys - do not escape these keys, leave the values as is in the map Returns: a new map"
pattern,"createMap public staticMap<String,String>createMap(String[]values, String[]dontEscapeKeys) Creates a Map from a source array where values are ANSI escape sequences. Each array entry must be in the format: Key1 = Value For example: ERROR=red bold You can use whitespace around the equal sign and between the value elements. The names in values MUST come from the AnsiEscape enum, case is normalized to upper-case internally. Parameters: values - the source array to parse. dontEscapeKeys - do not escape these keys, leave the values as is in the map Returns: a new map"
pattern,createSequence public staticStringcreateSequence(String...names) Creates an ANSI escape sequence from the given AnsiEscape names. Parameters: names - AnsiEscape names. Returns: An ANSI escape sequence.
pattern,"format voidformat(StringBuildertoAppendTo, Object...objects) Formats an array of Objects. Parameters: toAppendTo - The StringBuilder to add the content to. objects - The Object array."
pattern,"newInstance public staticClassNamePatternConverternewInstance(String[]options) Gets an instance of ClassNamePatternConverter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Format a logging event. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format. toAppendTo - string buffer to which class name will be appended."
pattern,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
pattern,"newInstance public staticDatePatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(Datedate, StringBuildertoAppendTo) Appends formatted date to string buffer. Parameters: date - date toAppendTo - buffer to which formatted date is appended."
pattern,"format publicvoidformat(LogEventevent, StringBuilderoutput) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(longepochMilli, StringBuilderoutput)"
pattern,"format publicvoidformat(Instantinstant, StringBuilderoutput)"
pattern,"format publicvoidformat(Objectobj, StringBuilderoutput) Formats an object into a string buffer. Specified by: formatin interfacePatternConverter Overrides: formatin classLogEventPatternConverter Parameters: obj - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(StringBuildertoAppendTo, Object...objects) Description copied from interface:ArrayPatternConverter Formats an array of Objects. Specified by: formatin interfaceArrayPatternConverter Parameters: toAppendTo - The StringBuilder to add the content to. objects - The Object array."
pattern,getPattern publicStringgetPattern() Gets the pattern string describing this date format. Returns: the pattern string describing this date format or null if the format does not have a pattern.
pattern,getTimeZone publicTimeZonegetTimeZone() Gets the timezone used by this date format. Returns: the timezone used by this date format.
pattern,"handlesThrowable publicbooleanhandlesThrowable() Description copied from class:LogEventPatternConverter Normally pattern converters are not meant to handle Exceptions although few pattern converters might. By examining the return values for this method, the containing layout will determine whether it handles throwables or not. Overrides: handlesThrowablein classLogEventPatternConverter Returns: true if this PatternConverter handles throwables"
pattern,"newInstance public staticEncodingPatternConverternewInstance(Configurationconfig, String[]options) Creates an EncodingPatternConverter using a pattern string and an optional escape format. Parameters: config - the current Configuration options - first option is the nested pattern format; second option is the escape format (optional) Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticEndOfBatchPatternConverternewInstance(String[]options) Obtains an instance of EndOfBatchPatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of EndOfBatchPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"equals protected abstractbooleanequals(Stringstr, StringBuilderbuff, intfrom, intlen) Returns true if the specified String equals the specified section of the specified StringBuilder. Parameters: str - the String to compare buff - the StringBuilder to compare a section of from - start index in the StringBuilder len - length of the section in the StringBuilder Returns: true if equal, false otherwise"
pattern,"newInstance public staticEqualsIgnoreCaseReplacementConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, an array of three elements: pattern, testString, and substitution. Returns: instance of class."
pattern,"equals protectedbooleanequals(Stringstr, StringBuilderbuff, intfrom, intlen) Description copied from class:EqualsBaseReplacementConverter Returns true if the specified String equals the specified section of the specified StringBuilder. Specified by: equalsin classEqualsBaseReplacementConverter Parameters: str - the String to compare buff - the StringBuilder to compare a section of from - start index in the StringBuilder len - length of the section in the StringBuilder Returns: true if equal, false otherwise"
pattern,"newInstance public staticEqualsReplacementConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, an array of three elements: pattern, testString, and substitution. Returns: instance of class."
pattern,"equals protectedbooleanequals(Stringstr, StringBuilderbuff, intfrom, intlen) Description copied from class:EqualsBaseReplacementConverter Returns true if the specified String equals the specified section of the specified StringBuilder. Specified by: equalsin classEqualsBaseReplacementConverter Parameters: str - the String to compare buff - the StringBuilder to compare a section of from - start index in the StringBuilder len - length of the section in the StringBuilder Returns: true if equal, false otherwise"
pattern,"newInstance public staticExtendedThrowablePatternConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, may be null. If first element is ""short"", only the first line of the throwable will be formatted. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Overrides: formatin classThrowablePatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"newInstance public staticFileLocationPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuilderoutput) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
pattern,getDefault public staticFormattingInfogetDefault() Gets default instance. Returns: default instance.
pattern,isLeftAligned publicbooleanisLeftAligned() Determine if left aligned. Returns: true if left aligned.
pattern,isLeftTruncate publicbooleanisLeftTruncate() Determine if left truncated. Returns: true if left truncated.
pattern,isZeroPad publicbooleanisZeroPad() Determine if zero-padded. Returns: true if zero-padded.
pattern,getMinLength publicintgetMinLength() Get minimum length. Returns: minimum length.
pattern,getMaxLength publicintgetMaxLength() Get maximum length. Returns: maximum length.
pattern,"format publicvoidformat(intfieldStart, StringBuilderbuffer) Adjust the content of the buffer based on the specified lengths and alignment. Parameters: fieldStart - start of field in buffer. buffer - buffer to be modified."
pattern,toString publicStringtoString() Returns a String suitable for debugging. Overrides: toStringin classObject Returns: a String suitable for debugging.
pattern,"newInstance public staticFullLocationPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuilderoutput) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
pattern,"newInstance public staticHighlightConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, may be null. If first element is ""short"", only the first line of the throwable will be formatted. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"handlesThrowable publicbooleanhandlesThrowable() Description copied from class:LogEventPatternConverter Normally pattern converters are not meant to handle Exceptions although few pattern converters might. By examining the return values for this method, the containing layout will determine whether it handles throwables or not. Overrides: handlesThrowablein classLogEventPatternConverter Returns: true if this PatternConverter handles throwables"
pattern,"render publicvoidrender(Stringinput, StringBuilderoutput, StringstyleName) Description copied from interface:TextRenderer Renders input text to an output. Specified by: renderin interfaceTextRenderer Parameters: input - The input output - The output styleName - The style name to use to render the input on the output."
pattern,"render publicvoidrender(StringBuilderinput, StringBuilderoutput) Description copied from interface:TextRenderer Renders input text to an output. Specified by: renderin interfaceTextRenderer Parameters: input - The input output - The output"
pattern,"newInstance public staticIntegerPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(StringBuildertoAppendTo, Object...objects) Description copied from interface:ArrayPatternConverter Formats an array of Objects. Specified by: formatin interfaceArrayPatternConverter Parameters: toAppendTo - The StringBuilder to add the content to. objects - The Object array."
pattern,"format publicvoidformat(Objectobj, StringBuildertoAppendTo) Formats an object into a string buffer. Specified by: formatin interfacePatternConverter Parameters: obj - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"getStyleMap publicMap<String,org.fusesource.jansi.AnsiRenderer.Code[]>getStyleMap()"
pattern,"render publicvoidrender(Stringinput, StringBuilderoutput, StringstyleName) throws IllegalArgumentException Description copied from interface:TextRenderer Renders input text to an output. Specified by: renderin interfaceTextRenderer Parameters: input - The input output - The output styleName - The style name to use to render the input on the output. Throws: IllegalArgumentException"
pattern,"render publicvoidrender(StringBuilderinput, StringBuilderoutput) throws IllegalArgumentException Description copied from interface:TextRenderer Renders input text to an output. Specified by: renderin interfaceTextRenderer Parameters: input - The input output - The output Throws: IllegalArgumentException"
pattern,toString publicStringtoString() Overrides: toStringin classObject
pattern,"newInstance public staticLevelPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. May contain a list of level names and The value that should be displayed for the Level. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuilderoutput) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,"getStyleClass publicStringgetStyleClass(Objecte) This method returns the CSS style class that should be applied to the LoggingEvent passed as parameter, which can be null. This information is currently used only by HtmlLayout. Specified by: getStyleClassin interfacePatternConverter Overrides: getStyleClassin classAbstractPatternConverter Parameters: e - null values are accepted Returns: the name of the conversion pattern"
pattern,"newInstance public staticLineLocationPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuilderoutput) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
pattern,"newInstance public staticLineSeparatorPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventignored, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: ignored - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(Objectignored, StringBuilderoutput) Formats an object into a string buffer. Specified by: formatin interfacePatternConverter Overrides: formatin classLogEventPatternConverter Parameters: ignored - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,isVariable publicbooleanisVariable() Overrides: isVariablein classLogEventPatternConverter
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(Objectobj, StringBuilderoutput) Formats an object into a string buffer. Specified by: formatin interfacePatternConverter Overrides: formatin classLogEventPatternConverter Parameters: obj - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(StringBuilderoutput, Object...objects) Formats an array of Objects. Specified by: formatin interfaceArrayPatternConverter Parameters: output - The StringBuilder to add the content to. objects - The Object array."
pattern,getLiteral publicStringgetLiteral()
pattern,isVariable publicbooleanisVariable() Overrides: isVariablein classLogEventPatternConverter
pattern,toString publicStringtoString() Overrides: toStringin classObject
pattern,"format public abstractvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(Objectobj, StringBuilderoutput) Formats an object into a string buffer. Parameters: obj - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,"handlesThrowable publicbooleanhandlesThrowable() Normally pattern converters are not meant to handle Exceptions although few pattern converters might. By examining the return values for this method, the containing layout will determine whether it handles throwables or not. Returns: true if this PatternConverter handles throwables"
pattern,isVariable publicbooleanisVariable()
pattern,"emptyVariableOutput publicStringemptyVariableOutput() Returns: the formatted output when the input variable (MDC, NDC, etc.) is empty"
pattern,"newInstance public staticLoggerFqcnPatternConverternewInstance(String[]options) Obtains an instance of LoggerFqcnPatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of LoggerFqcnPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticLoggerPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticMapPatternConverternewInstance(String[]options) Obtains an instance of MapPatternConverter. Parameters: options - options, may be null or first element contains name of property to format. Returns: instance of MapPatternConverter."
pattern,"newInstance public staticMapPatternConverternewInstance(String[]options, MapMessage.MapFormatformat) Obtain an instance of MapPatternConverter. Parameters: options - options, may be null or first element contains name of property to format. format - the format to use if no options are given (i.e., options is null). Ignored if options is non-null. Returns: instance of MapPatternConverter. Since: 2.11.2"
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticMarkerPatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticMarkerSimpleNamePatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticMaxLengthConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, an array of two elements: pattern, max length (defaults to 100 on invalid value). Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Description copied from class:LogEventPatternConverter Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticMdcPatternConverternewInstance(String[]options) Obtains an instance of PropertiesPatternConverter. Parameters: options - options, may be null or first element contains name of property to format. Returns: instance of PropertiesPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"emptyVariableOutput publicStringemptyVariableOutput() Overrides: emptyVariableOutputin classLogEventPatternConverter Returns: the formatted output when the input variable (MDC, NDC, etc.) is empty"
pattern,"newInstance public staticMessagePatternConverternewInstance(Configurationconfig, String[]options) Obtains an instance of pattern converter. Parameters: config - The Configuration. options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Description copied from class:LogEventPatternConverter Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticMethodLocationPatternConverternewInstance(String[]options) Obtains an instance of MethodLocationPatternConverter. Parameters: options - options, may be null. Returns: instance of MethodLocationPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,requiresLocation publicbooleanrequiresLocation() Specified by: requiresLocationin interfaceLocationAware
pattern,"getAbbreviator public staticNameAbbreviatorgetAbbreviator(Stringpattern) Gets an abbreviator. For example, ""%logger{2}"" will output only 2 elements of the logger name, ""%logger{1.}"" will output only the first character of the non-final elements in the name, ""%logger(1~.2~} will output the first character of the first element, two characters of the second and subsequent elements and will use a tilde to indicate abbreviated characters. Parameters: pattern - abbreviation pattern. Returns: abbreviator, will not be null."
pattern,getDefaultAbbreviator public staticNameAbbreviatorgetDefaultAbbreviator() Gets default abbreviator. Returns: default abbreviator.
pattern,"abbreviate public abstractvoidabbreviate(Stringoriginal, StringBuilderdestination) Abbreviates a name in a String. Parameters: original - the text to abbreviate, may not be null. destination - StringBuilder to write the result to"
pattern,"abbreviate protected finalvoidabbreviate(Stringoriginal, StringBuilderdestination) Abbreviate name in string buffer. Parameters: original - string containing name. destination - the StringBuilder to write to"
pattern,"newInstance public staticNanoTimePatternConverternewInstance(String[]options) Obtains an instance of pattern converter. Parameters: options - options, may be null. Returns: instance of pattern converter."
pattern,"format publicvoidformat(LogEventevent, StringBuilderoutput) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. output - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticNdcPatternConverternewInstance(String[]options) Obtains an instance of NdcPatternConverter. Parameters: options - options, may be null. Returns: instance of NdcPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Description copied from class:LogEventPatternConverter Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"emptyVariableOutput publicStringemptyVariableOutput() Overrides: emptyVariableOutputin classLogEventPatternConverter Returns: the formatted output when the input variable (MDC, NDC, etc.) is empty"
pattern,toString publicStringtoString() Overrides: toStringin classObject
pattern,"format voidformat(Objectobj, StringBuildertoAppendTo) Formats an object into a string buffer. Parameters: obj - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,getName StringgetName() Returns the name of the converter. Returns: The name of the converter.
pattern,"getStyleClass StringgetStyleClass(Objecte) This method returns the CSS style class that should be applied to the LoggingEvent passed as parameter, which can be null. Parameters: e - null values are accepted Returns: the name of the conversion pattern"
pattern,"format publicvoidformat(LogEventevent, StringBuilderbuf)"
pattern,getConverter publicLogEventPatternConvertergetConverter()
pattern,getFormattingInfo publicFormattingInfogetFormattingInfo()
pattern,"handlesThrowable publicbooleanhandlesThrowable() Normally pattern formatters are not meant to handle Exceptions although few pattern formatters might. By examining the return values for this method, the containing layout will determine whether it handles throwables or not. Returns: true if this PatternConverter handles throwables"
pattern,requiresLocation publicbooleanrequiresLocation() Most pattern formatters do not use location information. When they do they should return true here so that the logging system can efficiently capture it. Returns: true if location information is required.
pattern,toString publicStringtoString() Returns a String suitable for debugging. Overrides: toStringin classObject Returns: a String suitable for debugging.
pattern,parse publicList<PatternFormatter>parse(Stringpattern)
pattern,"parse publicList<PatternFormatter>parse(Stringpattern, booleanalwaysWriteExceptions, booleannoConsoleNoAnsi)"
pattern,"parse publicList<PatternFormatter>parse(Stringpattern, booleanalwaysWriteExceptions, booleandisableAnsi, booleannoConsoleNoAnsi)"
pattern,"parse publicvoidparse(Stringpattern, List<PatternConverter>patternConverters, List<FormattingInfo>formattingInfos, booleannoConsoleNoAnsi, booleanconvertBackslashes) Parse a format specifier. Parameters: pattern - pattern to parse. patternConverters - list to receive pattern converters. formattingInfos - list to receive field specifiers corresponding to pattern converters. noConsoleNoAnsi - do not do not output ANSI escape codes if System.console() convertBackslashes - if true, backslash characters are treated as escape characters and character sequences like ""\"" followed by ""t"" (backslash+t) are converted to special characters like '\t' (tab)."
pattern,"parse publicvoidparse(Stringpattern, List<PatternConverter>patternConverters, List<FormattingInfo>formattingInfos, booleandisableAnsi, booleannoConsoleNoAnsi, booleanconvertBackslashes) Parse a format specifier. Parameters: pattern - pattern to parse. patternConverters - list to receive pattern converters. formattingInfos - list to receive field specifiers corresponding to pattern converters. disableAnsi - do not output ANSI escape codes noConsoleNoAnsi - do not do not output ANSI escape codes if System.console() convertBackslashes - if true, backslash characters are treated as escape characters and character sequences like ""\"" followed by ""t"" (backslash+t) are converted to special characters like '\t' (tab)."
pattern,getInstance public staticPlainTextRenderergetInstance()
pattern,"render publicvoidrender(Stringinput, StringBuilderoutput, StringstyleName) Description copied from interface:TextRenderer Renders input text to an output. Specified by: renderin interfaceTextRenderer Parameters: input - The input output - The output styleName - The style name to use to render the input on the output."
pattern,"render publicvoidrender(StringBuilderinput, StringBuilderoutput) Description copied from interface:TextRenderer Renders input text to an output. Specified by: renderin interfaceTextRenderer Parameters: input - The input output - The output"
pattern,getProcessId publicStringgetProcessId() Returns the process ID. Returns: the process ID
pattern,main public staticvoidmain(String[]args)
pattern,"newInstance public staticProcessIdPatternConverternewInstance(String[]options) Obtains an instance of ProcessIdPatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of ProcessIdPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,format publicStringformat(Stringmsg) Perform the replacement. Parameters: msg - The String to match against. Returns: the replacement String.
pattern,toString publicStringtoString() Overrides: toStringin classObject
pattern,"createRegexReplacement @PluginFactory public staticRegexReplacementcreateRegexReplacement(@PluginAttribute(""regex"") Patternregex, @PluginAttribute(""replacement"") Stringreplacement) Create a RegexReplacement. Parameters: regex - The regular expression to locate. replacement - The replacement value. Returns: A RegexReplacement."
pattern,"newInstance public staticRegexReplacementConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, may be null. If first element is ""short"", only the first line of the throwable will be formatted. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticRelativeTimePatternConverternewInstance(String[]options) Obtains an instance of RelativeTimePatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of RelativeTimePatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticRepeatPatternConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, an array of two elements: repeatString and count. Returns: instance of class."
pattern,"format publicvoidformat(Objectobj, StringBuildertoAppendTo) Adds the repeated String to the buffer. Specified by: formatin interfacePatternConverter Overrides: formatin classLogEventPatternConverter Parameters: obj - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Adds the repeated String to the buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticRootThrowablePatternConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The Configuration or null. options - pattern options, may be null. If first element is ""short"", only the first line of the throwable will be formatted. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Overrides: formatin classThrowablePatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticSequenceNumberPatternConverternewInstance(String[]options) Obtains an instance of SequencePatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of SequencePatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticStyleConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, may be null. If first element is ""short"", only the first line of the throwable will be formatted. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"handlesThrowable publicbooleanhandlesThrowable() Description copied from class:LogEventPatternConverter Normally pattern converters are not meant to handle Exceptions although few pattern converters might. By examining the return values for this method, the containing layout will determine whether it handles throwables or not. Overrides: handlesThrowablein classLogEventPatternConverter Returns: true if this PatternConverter handles throwables"
pattern,toString publicStringtoString() Returns a String suitable for debugging. Overrides: toStringin classObject Returns: a String suitable for debugging.
pattern,"render voidrender(Stringinput, StringBuilderoutput, StringstyleName) Renders input text to an output. Parameters: input - The input output - The output styleName - The style name to use to render the input on the output."
pattern,"render voidrender(StringBuilderinput, StringBuilderoutput) Renders input text to an output. Parameters: input - The input output - The output"
pattern,"newInstance public staticThreadIdPatternConverternewInstance(String[]options) Obtains an instance of ThreadPatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of ThreadPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticThreadNamePatternConverternewInstance(String[]options) Obtains an instance of ThreadPatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of ThreadPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticThreadPriorityPatternConverternewInstance(String[]options) Obtains an instance of ThreadPatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of ThreadPatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticThrowablePatternConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The Configuration or null. options - pattern options, may be null. If first element is ""short"", only the first line of the throwable will be formatted. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuilderbuffer) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. buffer - string buffer to which the formatted event will be appended. May not be null."
pattern,handlesThrowable publicbooleanhandlesThrowable() This converter obviously handles throwables. Overrides: handlesThrowablein classLogEventPatternConverter Returns: true.
pattern,getSuffix protectedStringgetSuffix(LogEventevent)
pattern,getOptions publicThrowableFormatOptionsgetOptions()
pattern,"newInstance public staticUuidPatternConverternewInstance(String[]options) Obtains an instance of SequencePatternConverter. Parameters: options - options, currently ignored, may be null. Returns: instance of SequencePatternConverter."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
pattern,"newInstance public staticVariablesNotEmptyReplacementConverternewInstance(Configurationconfig, String[]options) Gets an instance of the class. Parameters: config - The current Configuration. options - pattern options, may be null. Returns: instance of class."
pattern,"format publicvoidformat(LogEventevent, StringBuildertoAppendTo) Formats an event into a string buffer. Specified by: formatin classLogEventPatternConverter Parameters: event - event to format, may not be null. toAppendTo - string buffer to which the formatted event will be appended. May not be null."
script,getLanguage publicStringgetLanguage()
script,getScriptText publicStringgetScriptText()
script,getName publicStringgetName()
script,"createScript @PluginFactory public staticScriptcreateScript(@PluginAttribute(""name"") Stringname, @PluginAttribute(""language"") Stringlanguage, @PluginValue(""scriptText"") StringscriptText)"
script,toString publicStringtoString() Overrides: toStringin classObject
script,getPath publicPathgetPath()
script,isWatched publicbooleanisWatched()
script,"createScript @PluginFactory public staticScriptFilecreateScript(@PluginAttribute(""name"") Stringname, @PluginAttribute(""language"") Stringlanguage, @PluginAttribute(""path"") StringfilePathOrUri, @PluginAttribute(""isWatched"") BooleanisWatched, @PluginAttribute(""charset"") Charsetcharset)"
script,toString publicStringtoString() Overrides: toStringin classObject
script,getAllowedLanguages publicSet<String>getAllowedLanguages()
script,addScript publicbooleanaddScript(AbstractScriptscript)
script,createBindings publicBindingscreateBindings(AbstractScriptscript)
script,getScript publicAbstractScriptgetScript(Stringname)
script,fileModified publicvoidfileModified(Filefile) Description copied from interface:FileWatcher Called when a WatchManager detects that the given File changed. Specified by: fileModifiedin interfaceFileWatcher Parameters: file - the file that changed. See Also: WatchManager
script,WatchManager
script,"execute publicObjectexecute(Stringname, Bindingsbindings)"
script,getLanguage publicStringgetLanguage() Overrides: getLanguagein classAbstractScript
script,getScriptText publicStringgetScriptText() Overrides: getScriptTextin classAbstractScript
script,"createReference @PluginFactory public staticScriptRefcreateReference(@PluginAttribute(""ref"") Stringname, @PluginConfiguration Configurationconfiguration)"
script,toString publicStringtoString() Overrides: toStringin classObject
selector,"shutdown publicvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Description copied from interface:ContextSelector Shuts down the LoggerContext. Specified by: shutdownin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate allContexts - if true all LoggerContexts that can be located will be shutdown."
selector,"hasContext publicbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Checks to see if a LoggerContext is installed. The default implementation returns false. Specified by: hasContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: The LoggerContext."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext, URIconfigLocation) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
selector,"locateContext publicLoggerContextlocateContext(Stringname, StringconfigLocation)"
selector,removeContext publicvoidremoveContext(LoggerContextcontext) Description copied from interface:ContextSelector Remove any references to the LoggerContext. Specified by: removeContextin interfaceContextSelector Parameters: context - The context to remove.
selector,"isClassLoaderDependent publicbooleanisClassLoaderDependent() Description copied from interface:ContextSelector Determines whether or not this ContextSelector depends on the callers classloader. This method should be overridden by implementations, however a default method is provided which always returns true to preserve the old behavior. Specified by: isClassLoaderDependentin interfaceContextSelector Returns: true if the class loader is required."
selector,getLoggerContexts publicList<LoggerContext>getLoggerContexts() Description copied from interface:ContextSelector Returns a List of all the available LoggerContexts. Specified by: getLoggerContextsin interfaceContextSelector Returns: The List of LoggerContexts.
selector,"shutdown publicvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Description copied from interface:ContextSelector Shuts down the LoggerContext. Specified by: shutdownin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate allContexts - if true all LoggerContexts that can be located will be shutdown."
selector,contextShutdown publicvoidcontextShutdown(LoggerContextloggerContext) Specified by: contextShutdownin interfaceLoggerContextShutdownAware
selector,"hasContext publicbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Checks to see if a LoggerContext is installed. The default implementation returns false. Specified by: hasContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: The LoggerContext."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext, URIconfigLocation) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, Map.Entry<String,Object>entry, booleancurrentContext, URIconfigLocation) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
selector,removeContext publicvoidremoveContext(LoggerContextcontext) Description copied from interface:ContextSelector Remove any references to the LoggerContext. Specified by: removeContextin interfaceContextSelector Parameters: context - The context to remove.
selector,"isClassLoaderDependent publicbooleanisClassLoaderDependent() Description copied from interface:ContextSelector Determines whether or not this ContextSelector depends on the callers classloader. This method should be overridden by implementations, however a default method is provided which always returns true to preserve the old behavior. Specified by: isClassLoaderDependentin interfaceContextSelector Returns: true if the class loader is required."
selector,getLoggerContexts publicList<LoggerContext>getLoggerContexts() Description copied from interface:ContextSelector Returns a List of all the available LoggerContexts. Specified by: getLoggerContextsin interfaceContextSelector Returns: The List of LoggerContexts.
selector,"createContext protectedLoggerContextcreateContext(Stringname, URIconfigLocation)"
selector,toContextMapKey protectedStringtoContextMapKey(ClassLoaderloader)
selector,getDefault protectedLoggerContextgetDefault()
selector,defaultContextName protectedStringdefaultContextName()
selector,"shutdown defaultvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Shuts down the LoggerContext. Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate allContexts - if true all LoggerContexts that can be located will be shutdown. Since: 2.13.0"
selector,"hasContext defaultbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Checks to see if a LoggerContext is installed. The default implementation returns false. Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise. Since: 2.13.0"
selector,"getContext LoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Returns the LoggerContext. Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: The LoggerContext."
selector,"getContext defaultLoggerContextgetContext(Stringfqcn, ClassLoaderloader, Map.Entry<String,Object>entry, booleancurrentContext) Returns the LoggerContext. Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. entry - An entry for the external Context map. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: The LoggerContext."
selector,"getContext LoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext, URIconfigLocation) Returns the LoggerContext. Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
selector,"getContext defaultLoggerContextgetContext(Stringfqcn, ClassLoaderloader, Map.Entry<String,Object>entry, booleancurrentContext, URIconfigLocation) Returns the LoggerContext. Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
selector,getLoggerContexts List<LoggerContext>getLoggerContexts() Returns a List of all the available LoggerContexts. Returns: The List of LoggerContexts.
selector,removeContext voidremoveContext(LoggerContextcontext) Remove any references to the LoggerContext. Parameters: context - The context to remove.
selector,"isClassLoaderDependent defaultbooleanisClassLoaderDependent() Determines whether or not this ContextSelector depends on the callers classloader. This method should be overridden by implementations, however a default method is provided which always returns true to preserve the old behavior. Returns: true if the class loader is required. Since: 2.15.0"
selector,"shutdown publicvoidshutdown(Stringfqcn, ClassLoaderloader, booleancurrentContext, booleanallContexts) Description copied from interface:ContextSelector Shuts down the LoggerContext. Specified by: shutdownin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate allContexts - if true all LoggerContexts that can be located will be shutdown."
selector,"hasContext publicbooleanhasContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Checks to see if a LoggerContext is installed. The default implementation returns false. Specified by: hasContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - The ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: true if a LoggerContext has been installed, false otherwise."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. Returns: The LoggerContext."
selector,"getContext publicLoggerContextgetContext(Stringfqcn, ClassLoaderloader, booleancurrentContext, URIconfigLocation) Description copied from interface:ContextSelector Returns the LoggerContext. Specified by: getContextin interfaceContextSelector Parameters: fqcn - The fully qualified class name of the caller. loader - ClassLoader to use or null. currentContext - If true returns the current Context, if false returns the Context appropriate for the caller if a more appropriate Context can be determined. configLocation - The location of the configuration for the LoggerContext. Returns: The LoggerContext."
selector,"locateContext publicLoggerContextlocateContext(Stringname, ObjectexternalContext, URIconfigLocation) Description copied from interface:NamedContextSelector Locate the LoggerContext with the specified name. Specified by: locateContextin interfaceNamedContextSelector Parameters: name - The LoggerContext name. externalContext - The external context to associate with the LoggerContext. configLocation - The location of the configuration. Returns: A LoggerContext."
selector,removeContext publicvoidremoveContext(LoggerContextcontext) Description copied from interface:ContextSelector Remove any references to the LoggerContext. Specified by: removeContextin interfaceContextSelector Parameters: context - The context to remove.
selector,"isClassLoaderDependent publicbooleanisClassLoaderDependent() Description copied from interface:ContextSelector Determines whether or not this ContextSelector depends on the callers classloader. This method should be overridden by implementations, however a default method is provided which always returns true to preserve the old behavior. Specified by: isClassLoaderDependentin interfaceContextSelector Returns: true if the class loader is required."
selector,removeContext publicLoggerContextremoveContext(Stringname) Description copied from interface:NamedContextSelector Locate the LoggerContext with the specified name using the default configuration. Specified by: removeContextin interfaceNamedContextSelector Parameters: name - The LoggerContext name. Returns: A LoggerContext.
selector,getLoggerContexts publicList<LoggerContext>getLoggerContexts() Description copied from interface:ContextSelector Returns a List of all the available LoggerContexts. Specified by: getLoggerContextsin interfaceContextSelector Returns: The List of LoggerContexts.
selector,"locateContext LoggerContextlocateContext(Stringname, ObjectexternalContext, URIconfigLocation) Locate the LoggerContext with the specified name. Parameters: name - The LoggerContext name. externalContext - The external context to associate with the LoggerContext. configLocation - The location of the configuration. Returns: A LoggerContext."
selector,removeContext LoggerContextremoveContext(Stringname) Locate the LoggerContext with the specified name using the default configuration. Parameters: name - The LoggerContext name. Returns: A LoggerContext.
time,getEpochSecond longgetEpochSecond() Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z. The epoch second count is a simple incrementing count of seconds where second 0 is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned by getNanoOfSecond(). Returns: the seconds from the epoch of 1970-01-01T00:00:00Z
time,"getNanoOfSecond intgetNanoOfSecond() Gets the number of nanoseconds, later along the time-line, from the start of the second. The nanosecond-of-second value measures the total number of nanoseconds from the second returned by getEpochSecond(). Returns: the nanoseconds within the second, always positive, never exceeds 999,999,999"
time,getEpochMillisecond longgetEpochMillisecond() Gets the number of milliseconds from the Java epoch of 1970-01-01T00:00:00Z. The epoch millisecond count is a simple incrementing count of milliseconds where millisecond 0 is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned by getNanoOfMillisecond(). Returns: the milliseconds from the epoch of 1970-01-01T00:00:00Z
time,"getNanoOfMillisecond intgetNanoOfMillisecond() Gets the number of nanoseconds, later along the time-line, from the start of the millisecond. The nanosecond-of-millisecond value measures the total number of nanoseconds from the millisecond returned by getEpochMillisecond(). Returns: the nanoseconds within the millisecond, always positive, never exceeds 999,999"
time,getEpochSecond publiclonggetEpochSecond() Description copied from interface:Instant Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z. The epoch second count is a simple incrementing count of seconds where second 0 is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned by Instant.getNanoOfSecond(). Specified by: getEpochSecondin interfaceInstant Returns: the seconds from the epoch of 1970-01-01T00:00:00Z
time,"getNanoOfSecond publicintgetNanoOfSecond() Description copied from interface:Instant Gets the number of nanoseconds, later along the time-line, from the start of the second. The nanosecond-of-second value measures the total number of nanoseconds from the second returned by Instant.getEpochSecond(). Specified by: getNanoOfSecondin interfaceInstant Returns: the nanoseconds within the second, always positive, never exceeds 999,999,999"
time,getEpochMillisecond publiclonggetEpochMillisecond() Description copied from interface:Instant Gets the number of milliseconds from the Java epoch of 1970-01-01T00:00:00Z. The epoch millisecond count is a simple incrementing count of milliseconds where millisecond 0 is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned by Instant.getNanoOfMillisecond(). Specified by: getEpochMillisecondin interfaceInstant Returns: the milliseconds from the epoch of 1970-01-01T00:00:00Z
time,"getNanoOfMillisecond publicintgetNanoOfMillisecond() Description copied from interface:Instant Gets the number of nanoseconds, later along the time-line, from the start of the millisecond. The nanosecond-of-millisecond value measures the total number of nanoseconds from the millisecond returned by Instant.getEpochMillisecond(). Specified by: getNanoOfMillisecondin interfaceInstant Returns: the nanoseconds within the millisecond, always positive, never exceeds 999,999"
time,initFrom publicvoidinitFrom(Instantother)
time,"initFromEpochMilli publicvoidinitFromEpochMilli(longepochMilli, intnanoOfMillisecond) Updates the fields of this MutableInstant from the specified epoch millis. Parameters: epochMilli - the number of milliseconds from the Java epoch of 1970-01-01T00:00:00Z nanoOfMillisecond - the number of nanoseconds, later along the time-line, from the start of the millisecond"
time,initFrom publicvoidinitFrom(Clockclock)
time,"initFromEpochSecond publicvoidinitFromEpochSecond(longepochSecond, intnano) Updates the fields of this MutableInstant from the specified instant components. Parameters: epochSecond - the number of seconds from the Java epoch of 1970-01-01T00:00:00Z nano - the number of nanoseconds, later along the time-line, from the start of the second"
time,"instantToMillisAndNanos public staticvoidinstantToMillisAndNanos(longepochSecond, intnano, long[]result) Updates the elements of the specified long[] result array from the specified instant components. Parameters: epochSecond - (input) the number of seconds from the Java epoch of 1970-01-01T00:00:00Z nano - (input) the number of nanoseconds, later along the time-line, from the start of the second result - (output) a two-element array to store the result: the first element is the number of milliseconds from the Java epoch of 1970-01-01T00:00:00Z, the second element is the number of nanoseconds, later along the time-line, from the start of the millisecond"
time,isSupported publicbooleanisSupported(TemporalFieldfield) Specified by: isSupportedin interfaceTemporalAccessor
time,getLong publiclonggetLong(TemporalFieldfield) Specified by: getLongin interfaceTemporalAccessor
time,range publicValueRangerange(TemporalFieldfield) Specified by: rangein interfaceTemporalAccessor
time,get publicintget(TemporalFieldfield) Specified by: getin interfaceTemporalAccessor
time,query public<R>Rquery(TemporalQuery<R>query) Specified by: queryin interfaceTemporalAccessor
time,equals publicbooleanequals(Objectobject) Overrides: equalsin classObject
time,hashCode publicinthashCode() Overrides: hashCodein classObject
time,toString publicStringtoString() Overrides: toStringin classObject
time,formatTo publicvoidformatTo(StringBuilderbuffer) Specified by: formatToin interfaceStringBuilderFormattable
time,init voidinit(MutableInstantmutableInstant) Initializes the specified instant with time information as accurate as available on this platform. Parameters: mutableInstant - the container to be initialized with the accurate time information Since: 2.11
tools,isHelp publicbooleanisHelp()
tools,setHelp publicvoidsetHelp(booleanhelp)
tools,main public staticvoidmain(String[]args) Delegates to Generate.CustomLogger.main(String[]) Parameters: args - the command line arguments to pass on
tools,main public staticvoidmain(String[]args) Delegates to Generate.ExtendedLogger.main(String[]) Parameters: args - the command line arguments to pass on
tools,"main public staticvoidmain(String[]args) Generates source code for custom logger wrappers that only provide convenience methods for the specified custom levels, not for the standard built-in levels. Parameters: args - className of the custom logger to generate, followed by a NAME=intLevel pair for each custom log level to generate convenience methods for"
tools,"main public staticvoidmain(String[]args) Generates source code for extended logger wrappers that provide convenience methods for the specified custom levels. Parameters: args - className of the custom logger to generate, followed by a NAME=intLevel pair for each custom log level to generate convenience methods for"
tools,"generateExtend public staticvoidgenerateExtend(String[]args, PrintStreamprintStream) Generates source code for extended logger wrappers that provide convenience methods for the specified custom levels. Parameters: args - className of the custom logger to generate, followed by a NAME=intLevel pair for each custom log level to generate convenience methods for printStream - the stream to write the generated source code to"
tools,"generateCustom public staticvoidgenerateCustom(String[]args, PrintStreamprintStream) Generates source code for custom logger wrappers that only provide convenience methods for the specified custom levels, not for the standard built-in levels. Parameters: args - className of the custom logger to generate, followed by a NAME=intLevel pair for each custom log level to generate convenience methods for printStream - the stream to write the generated source code to"
util,getListeners publicList<ConfigurationListener>getListeners() Description copied from interface:Watcher Returns the list of listeners for this configuration. Specified by: getListenersin interfaceWatcher Returns: The list of listeners.
util,modified publicvoidmodified() Description copied from interface:Watcher Called when the configuration has been modified. Specified by: modifiedin interfaceWatcher
util,getConfiguration publicConfigurationgetConfiguration()
util,getLastModified public abstractlonggetLastModified() Description copied from interface:Watcher Returns the time the source was last modified or 0 if it is not available. Specified by: getLastModifiedin interfaceWatcher Returns: the time the source was last modified.
util,"isModified public abstractbooleanisModified() Description copied from interface:Watcher Periodically called to determine if the configuration has been modified. Specified by: isModifiedin interfaceWatcher Returns: true if the configuration was modified, false otherwise."
util,watching publicvoidwatching(Sourcesource) Description copied from interface:Watcher Called when the Watcher is registered. Specified by: watchingin interfaceWatcher Parameters: source - the Source that is being watched.
util,getSource publicSourcegetSource() Description copied from interface:Watcher Returns the Source being monitored. Specified by: getSourcein interfaceWatcher Returns: the Source.
util,run publicvoidrun() Specified by: runin interfaceRunnable
util,isEmpty public staticbooleanisEmpty(byte[]array) Checks if an array of Objects is empty or null. Parameters: array - the array to test Returns: true if the array is empty or null Since: 2.1
util,"getLength public staticintgetLength(Objectarray) Returns the length of the specified array. This method can deal with Object arrays and with primitive arrays. If the input array is null, 0 is returned. ArrayUtils.getLength(null) = 0 ArrayUtils.getLength([]) = 0 ArrayUtils.getLength([null]) = 1 ArrayUtils.getLength([true, false]) = 2 ArrayUtils.getLength([1, 2, 3]) = 3 ArrayUtils.getLength([""a"", ""b"", ""c""]) = 3 Parameters: array - the array to retrieve the length from, may be null Returns: The length of the array, or 0 if the array is null Throws: IllegalArgumentException - if the object argument is not an array. Since: 2.1"
util,"remove public static<T>T[]remove(T[]array, intindex) Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array. If the input array is null, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified. ArrayUtils.remove([""a""], 0) = [] ArrayUtils.remove([""a"", ""b""], 0) = [""b""] ArrayUtils.remove([""a"", ""b""], 1) = [""a""] ArrayUtils.remove([""a"", ""b"", ""c""], 1) = [""a"", ""c""] Type Parameters: T - the component type of the array Parameters: array - the array to remove the element from, may not be null index - the position of the element to be removed Returns: A new array containing the existing elements except the element at the specified position. Throws: IndexOutOfBoundsException - if the index is out of range (index < 0 || index >= array.length), or if the array is null. Since: 2.1"
util,"isEmpty public staticbooleanisEmpty(Objecto) Checks if an object has empty semantics. The following scenarios are considered empty: null empty CharSequence empty array empty Iterable empty Map Parameters: o - value to check for emptiness Returns: true if the value is empty, false otherwise Since: 2.8"
util,null
util,empty CharSequence
util,empty array
util,empty Iterable
util,empty Map
util,"isNonEmpty public staticbooleanisNonEmpty(Objecto) Opposite of isEmpty(Object). Parameters: o - value to check for non-emptiness Returns: true if the value is non-empty, false otherwise Since: 2.8"
util,requireNonEmpty public static<T>TrequireNonEmpty(Tvalue) Checks a value for emptiness and throws an IllegalArgumentException if it's empty. Type Parameters: T - type of value Parameters: value - value to check for emptiness Returns: the provided value if non-empty Since: 2.8
util,"requireNonEmpty public static<T>TrequireNonEmpty(Tvalue, Stringmessage) Checks a value for emptiness and throws an IllegalArgumentException if it's empty. Type Parameters: T - type of value Parameters: value - value to check for emptiness message - message to provide in exception Returns: the provided value if non-empty Since: 2.8"
util,"valueIsAtLeast public staticintvalueIsAtLeast(intvalue, intminValue)"
util,addAuthorization voidaddAuthorization(URLConnectionurlConnection)
util,addAuthorization publicvoidaddAuthorization(URLConnectionurlConnection) Specified by: addAuthorizationin interfaceAuthorizationProvider
util,"parseBoolean public staticbooleanparseBoolean(Strings, booleandefaultValue) Returns true if s is ""true"" (case-insensitive), false if s is ""false"" (case-insensitive), and defaultValue if s is anything else (including null or empty). Parameters: s - The String to parse into a boolean defaultValue - The default value to use if s is neither ""true"" nor ""false"" Returns: the boolean value represented by the argument, or defaultValue."
util,build Tbuild() Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Returns: the configured instance. Throws: ConfigurationException - if there was an error building the object.
util,isValid defaultbooleanisValid()
util,getErrorPrefix defaultStringgetErrorPrefix() Prefix to use to report errors from this builder. Returns: The prefix of all logged errors.
util,instance public staticCachedClockinstance()
util,"currentTimeMillis publiclongcurrentTimeMillis() Returns the value of a private long field that is updated by a background thread once every millisecond. Timers on most platforms do not have millisecond granularity, the returned value may ""jump"" every 10 or 16 milliseconds. To reduce this problem, this method also updates the internal time value every 1024 calls. Specified by: currentTimeMillisin interfaceClock Returns: the cached time"
util,cancel voidcancel() Cancels the execution of this Runnable callback. This method has no effect if this has already executed.
util,currentTimeMillis longcurrentTimeMillis() Returns the time in milliseconds since the epoch. Returns: the time in milliseconds since the epoch
util,"getClock public staticClockgetClock() Returns a Clock instance depending on the value of system property PROPERTY_NAME. If system property log4j.Clock=CachedClock is specified, this method returns an instance of CachedClock. If system property log4j.Clock=CoarseCachedClock is specified, this method returns an instance of CoarseCachedClock. If another value is specified, this value is taken as the fully qualified class name of a class that implements the Clock interface. An object of this class is instantiated and returned. If no value is specified, or if the specified value could not correctly be instantiated or did not implement the Clock interface, then an instance of SystemClock is returned. Returns: a Clock instance"
util,"close public staticbooleanclose(AutoCloseablecloseable) throws Exception Closes an AutoCloseable or ignores if null. Parameters: closeable - the resource to close; may be null Returns: Whether the resource was closed. Throws: Exception - if the resource cannot be closed Since: 2.8, 2.11.2 returns a boolean instead of being a void return type."
util,"closeSilently public staticbooleancloseSilently(AutoCloseablecloseable) Closes an AutoCloseable and returns true if it closed without exception. Parameters: closeable - the resource to close; may be null Returns: true if resource was closed successfully, or false if an exception was thrown"
util,close publicvoidclose() Does nothing. Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable Overrides: closein classOutputStream
util,flush publicvoidflush() throws IOException Specified by: flushin interfaceFlushable Overrides: flushin classOutputStream Throws: IOException
util,write publicvoidwrite(byte[]b) throws IOException Overrides: writein classOutputStream Throws: IOException
util,"write publicvoidwrite(byte[]b, intoff, intlen) throws IOException Overrides: writein classOutputStream Throws: IOException"
util,write publicvoidwrite(intb) throws IOException Specified by: writein classOutputStream Throws: IOException
util,close publicvoidclose() throws IOException Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable Specified by: closein classWriter Throws: IOException
util,flush publicvoidflush() throws IOException Specified by: flushin interfaceFlushable Specified by: flushin classWriter Throws: IOException
util,"write publicvoidwrite(char[]cbuf, intoff, intlen) throws IOException Specified by: writein classWriter Throws: IOException"
util,instance public staticCoarseCachedClockinstance() Returns the singleton instance. Returns: the singleton instance
util,"currentTimeMillis publiclongcurrentTimeMillis() Returns the value of a private long field that is updated by a background thread once every millisecond. Because timers on most platforms do not have millisecond granularity, the returned value may ""jump"" every 10 or 16 milliseconds. Specified by: currentTimeMillisin interfaceClock Returns: the cached time"
util,"supplyContextData Map<String,String>supplyContextData() Returns a Map containing context data to be injected into the event or null if no context data is to be added. Thread-safety note: The returned object can safely be passed off to another thread: future changes in the underlying context data will not be reflected in the returned object. Returns: A Map containing the context data or null."
util,supplyStringMap defaultStringMapsupplyStringMap() Returns the context data as a StringMap. Thread-safety note: The returned object can safely be passed off to another thread: future changes in the underlying context data will not be reflected in the returned object. Returns: the context data in a StringMap.
util,"getValue defaultObjectgetValue(Stringkey) Retrieves a single context data value. This method avoids the overhead of copying the entire context data, when only a single value is needed. Parameters: key - The context data key of the value to retrieve. Returns: A context data value. Since: 2.24.0"
util,"isSatisfiedBy publicbooleanisSatisfiedBy(Datedate) Indicates whether the given date satisfies the cron expression. Note that milliseconds are ignored, so two Dates falling on different milliseconds of the same second will always have the same result here. Parameters: date - the date to evaluate Returns: a boolean indicating whether the given date satisfies the cron expression"
util,getNextValidTimeAfter publicDategetNextValidTimeAfter(Datedate) Returns the next date/time after the given date/time which satisfies the cron expression. Parameters: date - the date/time at which to begin the search for the next valid date/time Returns: the next valid date/time
util,getNextInvalidTimeAfter publicDategetNextInvalidTimeAfter(Datedate) Returns the next date/time after the given date/time which does not satisfy the expression Parameters: date - the date/time at which to begin the search for the next invalid date/time Returns: the next valid date/time
util,getTimeZone publicTimeZonegetTimeZone() Returns the time zone for which this CronExpression will be resolved.
util,setTimeZone publicvoidsetTimeZone(TimeZonetimeZone) Sets the time zone for which this CronExpression will be resolved.
util,toString publicStringtoString() Returns the string representation of the CronExpression Overrides: toStringin classObject Returns: a string representation of the CronExpression
util,isValidExpression public staticbooleanisValidExpression(StringcronExpression) Indicates whether the specified cron expression can be parsed into a valid cron expression Parameters: cronExpression - the expression to evaluate Returns: a boolean indicating whether the given expression is a valid cron expression
util,validateExpression public staticvoidvalidateExpression(StringcronExpression) throws ParseException Throws: ParseException
util,buildExpression protectedvoidbuildExpression(Stringexpression) throws ParseException Throws: ParseException
util,"storeExpressionVals protectedintstoreExpressionVals(intpos, Strings, inttype) throws ParseException Throws: ParseException"
util,"checkNext protectedintcheckNext(intpos, Strings, intval, inttype) throws ParseException Throws: ParseException"
util,getCronExpression publicStringgetCronExpression()
util,getExpressionSummary publicStringgetExpressionSummary()
util,getExpressionSetSummary protectedStringgetExpressionSetSummary(Set<Integer>set)
util,getExpressionSetSummary protectedStringgetExpressionSetSummary(ArrayList<Integer>list)
util,"skipWhiteSpace protectedintskipWhiteSpace(inti, Strings)"
util,"findNextWhiteSpace protectedintfindNextWhiteSpace(inti, Strings)"
util,"addToSet protectedvoidaddToSet(intval, intend, intincr, inttype) throws ParseException Throws: ParseException"
util,"getValue protectedorg.apache.logging.log4j.core.util.CronExpression.ValueSetgetValue(intv, Strings, inti)"
util,"getNumericValue protectedintgetNumericValue(Strings, inti)"
util,getMonthNumber protectedintgetMonthNumber(Strings)
util,getDayOfWeekNumber protectedintgetDayOfWeekNumber(Strings)
util,getTimeAfter publicDategetTimeAfter(DateafterTime)
util,"setCalendarHour protectedvoidsetCalendarHour(Calendarcal, inthour) Advance the calendar to the particular hour paying particular attention to daylight saving problems. Parameters: cal - the calendar to operate on hour - the hour to set"
util,getTimeBefore protectedDategetTimeBefore(DatetargetDate)
util,getPrevFireTime publicDategetPrevFireTime(DatetargetDate)
util,getFinalFireTime publicDategetFinalFireTime() NOT YET IMPLEMENTED: Returns the final time that the CronExpression will match.
util,isLeapYear protectedbooleanisLeapYear(intyear)
util,"getLastDayOfMonth protectedintgetLastDayOfMonth(intmonthNum, intyear)"
util,add publicvoidadd(Titem) Adds an item as the last event in the buffer. Parameters: item - The item to add to the buffer.
util,removeAll publicT[]removeAll() Removes all the elements from the buffer and returns them. Returns: An array of the elements in the buffer.
util,"isEmpty publicbooleanisEmpty() Determines if the buffer contains elements. Returns: true if the buffer is empty, false otherwise."
util,run publicvoidrun() Executes the registered shutdown callbacks. Specified by: runin interfaceRunnable
util,addShutdownCallback publicCancellableaddShutdownCallback(Runnablecallback) Description copied from interface:ShutdownCallbackRegistry Adds a Runnable shutdown callback to this class. Note: The returned Cancellable must be retained on heap by caller to avoid premature garbage-collection of the registered callback (and to ensure the callback runs on shutdown). Specified by: addShutdownCallbackin interfaceShutdownCallbackRegistry Parameters: callback - the shutdown callback to be executed upon shutdown. Returns: a Cancellable wrapper of the provided callback or null if the shutdown hook is disabled and cannot be added.
util,initialize publicvoidinitialize() Specified by: initializein interfaceLifeCycle
util,start publicvoidstart() Registers the shutdown thread only if this is initialized. Specified by: startin interfaceLifeCycle
util,stop publicvoidstop() Specified by: stopin interfaceLifeCycle
util,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Cancels the shutdown thread only if this is started. Specified by: stopin interfaceLifeCycle2 Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
util,getState publicLifeCycle.StategetState() Description copied from interface:LifeCycle Gets the life-cycle state. Specified by: getStatein interfaceLifeCycle Returns: the life-cycle state
util,isStarted publicbooleanisStarted() Indicates if this can accept shutdown hooks. Specified by: isStartedin interfaceLifeCycle Returns: true if this can accept shutdown hooks
util,isStopped publicbooleanisStopped() Specified by: isStoppedin interfaceLifeCycle
util,nanoTime publiclongnanoTime() Returns the constructor value. Specified by: nanoTimein interfaceNanoClock Returns: the constructor value
util,"shutdown public staticbooleanshutdown(ExecutorServiceexecutorService, longtimeout, TimeUnittimeUnit, Stringsource) Shuts down the given ExecutorService in an orderly fashion. Disables new tasks from submission and then waits for existing tasks to terminate. Eventually cancels running tasks if too much time elapses. If the timeout is 0, then a plain shutdown takes place. Parameters: executorService - the pool to shutdown. timeout - the maximum time to wait, or 0 to not wait for existing tasks to terminate. timeUnit - the time unit of the timeout argument source - use this string in any log messages. Returns: true if the given executor terminated and false if the timeout elapsed before termination."
util,ensureInitialized public staticvoidensureInitialized() No-op method which can be invoked to ensure this class has been initialized per jls-12.4.2.
util,"values public staticExtensionLanguageMapping[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
util,valueOf public staticExtensionLanguageMappingvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
util,getExtension publicStringgetExtension()
util,getLanguage publicStringgetLanguage()
util,getByExtension public staticExtensionLanguageMappinggetByExtension(Stringextension)
util,getByLanguage public staticList<ExtensionLanguageMapping>getByLanguage(Stringlanguage)
util,"fileFromUri public staticFilefileFromUri(URIuri) Tries to convert the specified URI to a file object. If this fails, null is returned. Parameters: uri - the URI Returns: the resulting file object"
util,isFile public staticbooleanisFile(URLurl)
util,getFileExtension public staticStringgetFileExtension(Filefile)
util,"mkdir public staticvoidmkdir(Filedir, booleancreateDirectoryIfNotExisting) throws IOException Asserts that the given directory exists and creates it if necessary. Parameters: dir - the directory that shall exist createDirectoryIfNotExisting - specifies if the directory shall be created if it does not exist. Throws: IOException - thrown if the directory could not be created."
util,makeParentDirs public staticvoidmakeParentDirs(Filefile) throws IOException Creates the parent directories for the given File. Parameters: file - For which parent directory is to be created. Throws: IOException - Thrown if the directory could not be created.
util,"defineFilePosixAttributeView public staticvoiddefineFilePosixAttributeView(Pathpath, Set<PosixFilePermission>filePermissions, StringfileOwner, StringfileGroup) throws IOException Define file POSIX attribute view on a path/file. Parameters: path - Target path filePermissions - Permissions to apply fileOwner - File owner fileGroup - File group Throws: IOException - If IO error during definition of file attribute view"
util,"isFilePosixAttributeViewSupported public staticbooleanisFilePosixAttributeViewSupported() Check if POSIX file attribute view is supported on the default FileSystem. Returns: true if POSIX file attribute view supported, false otherwise"
util,fileModified voidfileModified(Filefile) Called when a WatchManager detects that the given File changed. Parameters: file - the file that changed. See Also: WatchManager
util,WatchManager
util,"parseInt public staticintparseInt(Strings, intdefaultValue) Parses the string argument as a signed decimal integer. The input may be surrounded by whitespace. Parameters: s - a String containing the int representation to parse, may be null or """" defaultValue - the return value, use defaultValue if s is null or """" Returns: the integer value represented by the argument in decimal. Throws: NumberFormatException - if the string does not contain a parsable integer."
util,"parseInt public staticintparseInt(Strings) Parses the string argument as a signed decimal integer. Parameters: s - a String containing the int representation to parse, may be null or """" Returns: the integer value represented by the argument in decimal. Throws: NumberFormatException - if the string does not contain a parsable integer."
util,"ceilingNextPowerOfTwo public staticintceilingNextPowerOfTwo(intx) Calculate the next power of 2, greater than or equal to x. From Hacker's Delight, Chapter 3, Harry S. Warren Jr. Parameters: x - Value to round up Returns: The next power of 2 from x inclusive"
util,"copy public staticintcopy(Readerinput, Writeroutput) throws IOException Copies chars from a Reader to a Writer. This method buffers the input internally, so there is no need to use a BufferedReader. Large streams (over 2GB) will return a chars copied value of -1 after the copy has completed since the correct number of chars cannot be returned as an int. For large streams use the copyLarge(Reader, Writer) method. Parameters: input - the Reader to read from output - the Writer to write to Returns: the number of characters copied, or -1 if > Integer.MAX_VALUE Throws: NullPointerException - if the input or output is null IOException - if an I/O error occurs Since: 1.1"
util,"copyLarge public staticlongcopyLarge(Readerinput, Writeroutput) throws IOException Copies chars from a large (over 2GB) Reader to a Writer. This method buffers the input internally, so there is no need to use a BufferedReader. The buffer size is given by DEFAULT_BUFFER_SIZE. Parameters: input - the Reader to read from output - the Writer to write to Returns: the number of characters copied Throws: NullPointerException - if the input or output is null IOException - if an I/O error occurs Since: 1.3"
util,"copyLarge public staticlongcopyLarge(Readerinput, Writeroutput, char[]buffer) throws IOException Copies chars from a large (over 2GB) Reader to a Writer. This method uses the provided buffer, so there is no need to use a BufferedReader. Parameters: input - the Reader to read from output - the Writer to write to buffer - the buffer to be used for the copy Returns: the number of characters copied Throws: NullPointerException - if the input or output is null IOException - if an I/O error occurs Since: 2.2"
util,"toString public staticStringtoString(Readerinput) throws IOException Gets the contents of a Reader as a String. This method buffers the input internally, so there is no need to use a BufferedReader. Parameters: input - the Reader to read from Returns: the requested String Throws: NullPointerException - if the input is null IOException - if an I/O error occurs"
util,"close public staticvoidclose(Contextcontext) throws NamingException Closes the specified Context. Parameters: context - the JNDI Context to close, may be null Throws: NamingException - if a problem occurred closing the specified JNDI Context See Also: Context.close()"
util,Context.close()
util,"closeSilently public staticbooleancloseSilently(Contextcontext) Closes the specified Context, ignoring any exceptions thrown by the close operation. Parameters: context - the JNDI Context to close, may be null Returns: Whether closing succeeded See Also: Context.close()"
util,Context.close()
util,"quoteAsString public staticvoidquoteAsString(CharSequenceinput, StringBuilderoutput) Quote text contents using JSON standard quoting, and append results to a supplied StringBuilder."
util,setKey publicKeyValuePair.BuildersetKey(StringaKey)
util,setValue publicKeyValuePair.BuildersetValue(StringaValue)
util,build publicKeyValuePairbuild() Description copied from interface:Builder Builds the object after all configuration has been set. This will use default values for any unspecified attributes for the object. Specified by: buildin interfaceBuilder<KeyValuePair> Returns: the configured instance.
util,getKey publicStringgetKey() Returns the key. Returns: the key.
util,getValue publicStringgetValue() Returns the value. Returns: The value.
util,toString publicStringtoString() Overrides: toStringin classObject
util,newBuilder @PluginBuilderFactory public staticKeyValuePair.BuildernewBuilder()
util,hashCode publicinthashCode() Overrides: hashCodein classObject
util,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
util,getClassLoader public staticClassLoadergetClassLoader() Returns the ClassLoader to use. Returns: the ClassLoader.
util,"getThreadContextClassLoader public staticClassLoadergetThreadContextClassLoader() Returns the ClassLoader of current thread if possible, or falls back to the system ClassLoader if none is available. Returns: the TCCL. See Also: LoaderUtil.getThreadContextClassLoader()"
util,LoaderUtil.getThreadContextClassLoader()
util,"getClassLoader public staticClassLoadergetClassLoader(Class<?>class1, Class<?>class2)"
util,"getResource public staticURLgetResource(Stringresource, ClassLoaderdefaultLoader) This method will search for resource in different places. The search order is as follows: Search for resource using the thread context class loader under Java2. If that fails, search for resource using the class loader that loaded this class (Loader). Under JDK 1.1, only the class loader that loaded this class (Loader) is used. Try one last time with ClassLoader.getSystemResource(resource), that is using the system class loader in JDK 1.2 and virtual machine's built-in class loader in JDK 1.1. Parameters: resource - The resource to load. defaultLoader - The default ClassLoader. Returns: A URL to the resource."
util,"Search for resource using the thread context class loader under Java2. If that fails, search for resource using the class loader that loaded this class (Loader). Under JDK 1.1, only the class loader that loaded this class (Loader) is used."
util,"Try one last time with ClassLoader.getSystemResource(resource), that is using the system class loader in JDK 1.2 and virtual machine's built-in class loader in JDK 1.1."
util,"getResourceAsStream public staticInputStreamgetResourceAsStream(Stringresource, ClassLoaderdefaultLoader) This method will search for resource in different places. The search order is as follows: Search for resource using the thread context class loader under Java2. If that fails, search for resource using the class loader that loaded this class (Loader). Under JDK 1.1, only the class loader that loaded this class (Loader) is used. Try one last time with ClassLoader.getSystemResource(resource), that is using the system class loader in JDK 1.2 and virtual machine's built-in class loader in JDK 1.1. Parameters: resource - The resource to load. defaultLoader - The default ClassLoader. Returns: An InputStream to read the resouce."
util,"Search for resource using the thread context class loader under Java2. If that fails, search for resource using the class loader that loaded this class (Loader). Under JDK 1.1, only the class loader that loaded this class (Loader) is used."
util,"Try one last time with ClassLoader.getSystemResource(resource), that is using the system class loader in JDK 1.2 and virtual machine's built-in class loader in JDK 1.1."
util,"initializeClass public staticClass<?>initializeClass(StringclassName, ClassLoaderloader) throws ClassNotFoundException Loads and initializes a named Class using a given ClassLoader. Parameters: className - The class name. loader - The class loader. Returns: The class. Throws: ClassNotFoundException - if the class could not be found."
util,"loadClass public staticClass<?>loadClass(StringclassName, ClassLoaderloader) throws ClassNotFoundException Loads a named Class using a given ClassLoader. Parameters: className - The class name. loader - The class loader. Returns: The class, or null if loader is null. Throws: ClassNotFoundException - if the class could not be found."
util,loadSystemClass public staticClass<?>loadSystemClass(StringclassName) throws ClassNotFoundException Load a Class in the java.* namespace by name. Useful for peculiar scenarios typically involving Google App Engine. Parameters: className - The class name. Returns: The Class. Throws: ClassNotFoundException - if the Class could not be found.
util,"newInstanceOf public static<T>TnewInstanceOf(StringclassName) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException Loads and instantiates a Class using the default constructor. Parameters: className - The class name. Returns: new instance of the class. Throws: ClassNotFoundException - if the class isn't available to the usual ClassLoaders IllegalAccessException - if the class can't be instantiated through a public constructor InstantiationException - if there was an exception whilst instantiating the class NoSuchMethodException - if there isn't a no-args constructor on the class InvocationTargetException - if there was an exception whilst constructing the class"
util,"newCheckedInstanceOf public static<T>TnewCheckedInstanceOf(StringclassName, Class<T>clazz) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException Loads, instantiates, and casts a Class using the default constructor. Type Parameters: T - The type to cast it to. Parameters: className - The class name. clazz - The class to cast it to. Returns: new instance of the class cast to T Throws: ClassNotFoundException - if the class isn't available to the usual ClassLoaders IllegalAccessException - if the class can't be instantiated through a public constructor InstantiationException - if there was an exception whilst instantiating the class NoSuchMethodException - if there isn't a no-args constructor on the class InvocationTargetException - if there was an exception whilst constructing the class ClassCastException - if the constructed object isn't type compatible with T"
util,"newCheckedInstanceOfProperty public static<T>TnewCheckedInstanceOfProperty(StringpropertyName, Class<T>clazz) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException Loads and instantiates a class given by a property name. Type Parameters: T - The type to cast it to. Parameters: propertyName - The property name to look up a class name for. clazz - The class to cast it to. Returns: new instance of the class given in the property or null if the property was unset. Throws: ClassNotFoundException - if the class isn't available to the usual ClassLoaders IllegalAccessException - if the class can't be instantiated through a public constructor InstantiationException - if there was an exception whilst instantiating the class NoSuchMethodException - if there isn't a no-args constructor on the class InvocationTargetException - if there was an exception whilst constructing the class ClassCastException - if the constructed object isn't type compatible with T"
util,isClassAvailable public staticbooleanisClassAvailable(StringclassName) Determines if a named Class can be loaded or not. Parameters: className - The class name. Returns: true if the class could be found or false otherwise.
util,isJansiAvailable public staticbooleanisJansiAvailable()
util,"loadClass public staticClass<?>loadClass(StringclassName) throws ClassNotFoundException Loads a class by name. This method respects the IGNORE_TCCL_PROPERTY Log4j property. If this property is specified and set to anything besides false, then the default ClassLoader will be used. Parameters: className - The class name. Returns: the Class for the given name. Throws: ClassNotFoundException - if the specified class name could not be found"
util,createDaemonThreadFactory public staticLog4jThreadFactorycreateDaemonThreadFactory(StringthreadFactoryName) Creates a new daemon thread factory. Parameters: threadFactoryName - The thread factory name. Returns: a new daemon thread factory.
util,createThreadFactory public staticLog4jThreadFactorycreateThreadFactory(StringthreadFactoryName) Creates a new thread factory. This is mainly used for tests. Production code should be very careful with creating non-daemon threads since those will block application shutdown (see https://issues.apache.org/jira/browse/LOG4J2-1748). Parameters: threadFactoryName - The thread factory name. Returns: a new daemon thread factory.
util,newThread publicThreadnewThread(Runnablerunnable) Specified by: newThreadin interfaceThreadFactory
util,getSubName public staticStringgetSubName(Stringname)
util,"md5 @Deprecated public staticStringmd5(Stringinput) Deprecated. Calculates the MD5 hash of the given input string encoded using the default platform charset. MD5 has severe vulnerabilities and should not be used for sharing any sensitive information. This function should only be used to create unique identifiers, e.g., configuration element names. Parameters: input - string to be hashed Returns: string composed of 32 hexadecimal digits of the calculated hash"
util,"nanoTime longnanoTime() Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds. Returns: the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds"
util,"getLocalHostname public staticStringgetLocalHostname() This method gets the network name of the machine we are running on. Returns ""UNKNOWN_LOCALHOST"" in the unlikely case where the host name cannot be found. Returns: String the name of the local host"
util,"getCanonicalLocalHostname public staticStringgetCanonicalLocalHostname() This method gets the FQDN of the machine we are running on. It returns ""UNKNOWN_LOCALHOST"" if the host name cannot be found. Returns: The canonical name of the local host; or ""UNKNOWN_LOCALHOST"", if cannot be found."
util,getMacAddress public staticbyte[]getMacAddress() Returns the local network interface's MAC address if possible. The local network interface is defined here as the NetworkInterface that is both up and not a loopback interface. Returns: the MAC address of the local network interface or null if no MAC address could be determined.
util,"getMacAddressString public staticStringgetMacAddressString() Returns the mac address, if it is available, as a string with each byte separated by a "":"" character. Returns: the mac address String or null."
util,toURI public staticURItoURI(Stringpath) Converts a URI string or file path to a URI object. Parameters: path - the URI string or path Returns: the URI object
util,toURIs public staticList<URI>toURIs(Stringpath)
util,getInstance public staticNullOutputStreamgetInstance() Gets the singleton instance. Returns: the singleton instance.
util,"write publicvoidwrite(byte[]b, intoff, intlen) Does nothing - output to /dev/null. Overrides: writein classOutputStream Parameters: b - The bytes to write off - The start offset len - The number of bytes to write"
util,write publicvoidwrite(intb) Does nothing - output to /dev/null. Specified by: writein classOutputStream Parameters: b - The byte to write
util,write publicvoidwrite(byte[]b) throws IOException Does nothing - output to /dev/null. Overrides: writein classOutputStream Parameters: b - The bytes to write Throws: IOException - never
util,hasNext publicbooleanhasNext() Returns true if there are more elements to return from the array. Specified by: hasNextin interfaceIterator<E> Returns: true if there is a next element to return
util,next publicEnext() Returns the next element in the array. Specified by: nextin interfaceIterator<E> Returns: the next element in the array Throws: NoSuchElementException - if all the elements in the array have already been returned
util,remove publicvoidremove() Throws UnsupportedOperationException. Specified by: removein interfaceIterator<E> Throws: UnsupportedOperationException - always
util,getArray publicE[]getArray() Gets the array that this iterator is iterating over. Returns: the array this iterator iterates over
util,getStartIndex publicintgetStartIndex() Gets the start index to loop from. Returns: the start index
util,getEndIndex publicintgetEndIndex() Gets the end index to loop to. Returns: the end index
util,reset publicvoidreset() Resets the iterator back to the start index.
util,"concatenateArrays public staticString[]concatenateArrays(String[]l, String[]r)"
util,convertSpecialChars public staticStringconvertSpecialChars(Strings)
util,"instantiateByKey public staticObjectinstantiateByKey(Propertiesprops, Stringkey, Class<?>superClass, ObjectdefaultValue)"
util,"toBoolean public staticbooleantoBoolean(Stringvalue, booleandefaultValue) If value is ""true"", then true is returned. If value is ""false"", then false is returned. Otherwise, default is returned. Case of value is unimportant. Parameters: value - The value to convert. defaultValue - The default value. Returns: true or false, depending on the value and/or default."
util,"toInt public staticinttoInt(Stringvalue, intdefaultValue) Convert the String value to an int. Parameters: value - The value as a String. defaultValue - The default value. Returns: The value as an int."
util,"toLevel public staticLeveltoLevel(Stringvalue, LeveldefaultValue)"
util,"toFileSize public staticlongtoFileSize(Stringvalue, longdefaultValue) Parameters: value - The size of the file as a String. defaultValue - The default value. Returns: The size of the file as a long."
util,"findAndSubst public staticStringfindAndSubst(Stringkey, Propertiesprops) Find the value corresponding to key in props. Then perform variable substitution on the found value. Parameters: key - The key to locate. props - The properties. Returns: The String after substitution."
util,"instantiateByClassName public staticObjectinstantiateByClassName(StringclassName, Class<?>superClass, ObjectdefaultValue) Instantiate an object given a class name. Check that the className is a subclass of superClass. If that test fails or the object could not be instantiated, then defaultValue is returned. Parameters: className - The fully qualified class name of the object to instantiate. superClass - The class to which the new object should belong. defaultValue - The object to return in case of non-fulfillment Returns: The created object."
util,"substVars public staticStringsubstVars(Stringval, Propertiesprops) throws IllegalArgumentException Perform variable substitution in string val from the values of keys found in the system propeties. The variable substitution delimiters are ${ and }. For example, if the System properties contains ""key=value"", then the call String s = OptionConverter.substituteVars(""Value of key is ${key}.""); will set the variable s to ""Value of key is value."". If no value could be found for the specified key, then the props parameter is searched, if the value could not be found there, then substitution defaults to the empty string. For example, if system properties contains no value for the key ""inexistentKey"", then the call String s = OptionConverter.subsVars(""Value of inexistentKey is [${inexistentKey}]""); will set s to ""Value of inexistentKey is []"" An IllegalArgumentException is thrown if val contains a start delimeter ""${"" which is not balanced by a stop delimeter ""}"". Parameters: val - The string on which variable substitution is performed. props - The properties to use for substitution. Returns: The String after substitution. Throws: IllegalArgumentException - if val is malformed."
util,decryptPassword StringdecryptPassword(Stringpassword)
util,toWhitespaceSeparator public staticStringtoWhitespaceSeparator(Stringseparator) Creates a pattern string for separator surrounded by whitespace. Parameters: separator - The separator. Returns: a pattern for separator surrounded by whitespace.
util,isAccessible public static<T extends AccessibleObject & Member> booleanisAccessible(Tmember) Indicates whether or not a Member is both public and is contained in a public class. Type Parameters: T - type of the object whose accessibility to test Parameters: member - the Member to check for public accessibility (must not be null). Returns: true if member is public and contained in a public class. Throws: NullPointerException - if member is null.
util,makeAccessible public static<T extends AccessibleObject & Member> voidmakeAccessible(Tmember) Makes a Member accessible if the member is not public. Type Parameters: T - type of the object to make accessible Parameters: member - the Member to make accessible (must not be null). Throws: NullPointerException - if member is null.
util,makeAccessible public staticvoidmakeAccessible(Fieldfield) Makes a Field accessible if it is not public or if it is final. Note that using this method to make a final field writable will most likely not work very well due to compiler optimizations and the like. Parameters: field - the Field to make accessible (must not be null). Throws: NullPointerException - if field is null.
util,"getFieldValue public staticObjectgetFieldValue(Fieldfield, Objectinstance) Gets the value of a Field, making it accessible if required. Parameters: field - the Field to obtain a value from (must not be null). instance - the instance to obtain the field value from or null only if the field is static. Returns: the value stored by the field. Throws: NullPointerException - if field is null, or if instance is null but field is not static. See Also: Field.get(Object)"
util,Field.get(Object)
util,"getStaticFieldValue public staticObjectgetStaticFieldValue(Fieldfield) Gets the value of a static Field, making it accessible if required. Parameters: field - the Field to obtain a value from (must not be null). Returns: the value stored by the static field. Throws: NullPointerException - if field is null, or if field is not static. See Also: Field.get(Object)"
util,Field.get(Object)
util,"setFieldValue public staticvoidsetFieldValue(Fieldfield, Objectinstance, Objectvalue) Sets the value of a Field, making it accessible if required. Parameters: field - the Field to write a value to (must not be null). instance - the instance to write the value to or null only if the field is static. value - the (possibly wrapped) value to write to the field. Throws: NullPointerException - if field is null, or if instance is null but field is not static. See Also: Field.set(Object, Object)"
util,"Field.set(Object, Object)"
util,"setStaticFieldValue public staticvoidsetStaticFieldValue(Fieldfield, Objectvalue) Sets the value of a static Field, making it accessible if required. Parameters: field - the Field to write a value to (must not be null). value - the (possibly wrapped) value to write to the field. Throws: NullPointerException - if field is null, or if field is not static. See Also: Field.set(Object, Object)"
util,"Field.set(Object, Object)"
util,getDefaultConstructor public static<T>Constructor<T>getDefaultConstructor(Class<T>clazz) Gets the default (no-arg) constructor for a given class. Type Parameters: T - the type made by the constructor Parameters: clazz - the class to find a constructor for Returns: the default constructor for the given class Throws: IllegalStateException - if no default constructor can be found
util,"instantiate public static<T>Tinstantiate(Class<T>clazz) Constructs a new T object using the default constructor of its class. Any exceptions thrown by the constructor will be rethrown by this method, possibly wrapped in an UndeclaredThrowableException. Type Parameters: T - the type of the object to construct. Parameters: clazz - the class to use for instantiation. Returns: a new instance of T made from its default constructor. Throws: IllegalArgumentException - if the given class is abstract, an interface, an array class, a primitive type, or void IllegalStateException - if access is denied to the constructor, or there are no default constructors InternalError - wrapper of the underlying exception if checked"
util,getSecretKey SecretKeygetSecretKey() Returns this SecretKey. Returns: the SecretKey.
util,addShutdownCallback CancellableaddShutdownCallback(Runnablecallback) Adds a Runnable shutdown callback to this class. Note: The returned Cancellable must be retained on heap by caller to avoid premature garbage-collection of the registered callback (and to ensure the callback runs on shutdown). Parameters: callback - the shutdown callback to be executed upon shutdown. Returns: a Cancellable wrapper of the provided callback or null if the shutdown hook is disabled and cannot be added. Since: 2.1
util,equals publicbooleanequals(Objectobj) Overrides: equalsin classObject
util,"getFile publicFilegetFile() Gets the file configuration source, or null if this configuration source is based on an URL or has neither a file nor an URL. Returns: the configuration source file, or null"
util,"getLocation publicStringgetLocation() Gets a string describing the configuration source file or URI, or null if this configuration source has neither a file nor an URI. Returns: a string describing the configuration source file or URI, or null"
util,getPath publicPathgetPath() Gets this source as a Path. Returns: this source as a Path.
util,"getURI publicURIgetURI() Gets the configuration source URI, or null if this configuration source is based on a file or has neither a file nor an URI. Returns: the configuration source URI, or null"
util,"getURL publicURLgetURL() Gets the configuration source URL. Returns: the configuration source URI, or null"
util,hashCode publicinthashCode() Overrides: hashCodein classObject
util,toString publicStringtoString() Overrides: toStringin classObject
util,append publicWriterappend(charvalue) Appends a single character to this Writer. Specified by: appendin interfaceAppendable Overrides: appendin classWriter Parameters: value - The character to append Returns: This writer instance
util,append publicWriterappend(CharSequencevalue) Appends a character sequence to this Writer. Specified by: appendin interfaceAppendable Overrides: appendin classWriter Parameters: value - The character to append Returns: This writer instance
util,"append publicWriterappend(CharSequencevalue, intstart, intend) Appends a portion of a character sequence to the StringBuilder. Specified by: appendin interfaceAppendable Overrides: appendin classWriter Parameters: value - The character to append start - The index of the first character end - The index of the last character + 1 Returns: This writer instance"
util,close publicvoidclose() Closing this writer has no effect. Specified by: closein interfaceAutoCloseable Specified by: closein interfaceCloseable Specified by: closein classWriter
util,flush publicvoidflush() Flushing this writer has no effect. Specified by: flushin interfaceFlushable Specified by: flushin classWriter
util,write publicvoidwrite(Stringvalue) Writes a String to the StringBuilder. Overrides: writein classWriter Parameters: value - The value to write
util,"write publicvoidwrite(char[]value, intoffset, intlength) Writes a portion of a character array to the StringBuilder. Specified by: writein classWriter Parameters: value - The value to write offset - The index of the first character length - The number of characters to write"
util,getBuilder publicStringBuildergetBuilder() Returns the underlying builder. Returns: The underlying builder
util,toString publicStringtoString() Returns StringBuilder.toString(). Overrides: toStringin classObject Returns: The contents of the String builder.
util,"toBytes public staticbyte[]toBytes(Stringstr, Charsetcharset) Converts a String to a byte[]. Parameters: str - if null, return null. charset - if null, use the default charset. Returns: a byte[]"
util,encodeSingleByteChars @Deprecated public staticbyte[]encodeSingleByteChars(CharSequences) Deprecated. No longer necessary given better performance in Java 8 Prefer standard String.getBytes(Charset) which performs better in Java 8 and beyond. Encodes the specified char sequence by casting each character to a byte. Parameters: s - the char sequence to encode Returns: the encoded String See Also: LOG4J2-1151
util,LOG4J2-1151
util,"encodeIsoChars @Deprecated public staticintencodeIsoChars(CharSequencecharArray, intcharIndex, byte[]byteArray, intbyteIndex, intlength) Deprecated. No longer necessary given better performance in Java 8 Prefer standard String.getBytes(Charset) which performs better in Java 8 and beyond. Implementation note: this is the fast path. If the char array contains only ISO-8859-1 characters, all the work will be done here."
util,"encodeString @Deprecated public staticintencodeString(CharSequencecharArray, intcharOffset, intcharLength, byte[]byteArray) Deprecated. No longer necessary given better performance in Java 8 Prefer standard String.getBytes(Charset) which performs better in Java 8 and beyond."
util,currentTimeMillis publiclongcurrentTimeMillis() Returns the system time. Specified by: currentTimeMillisin interfaceClock Returns: the result of calling System.currentTimeMillis()
util,currentTimeMillis publiclongcurrentTimeMillis() Returns the system time. Specified by: currentTimeMillisin interfaceClock Returns: the result of calling System.currentTimeMillis()
util,nanoTime publiclongnanoTime() Returns the system high-resolution time. Specified by: nanoTimein interfaceNanoClock Returns: the result of calling System.nanoTime()
util,getRootCause public staticThrowablegetRootCause(Throwablethrowable) Returns the deepest cause of the given throwable. Parameters: throwable - the throwable to navigate Returns: the deepest throwable or the given throwable
util,toStringList public staticList<String>toStringList(Throwablethrowable) Converts a Throwable stack trace into a List of Strings. Parameters: throwable - the Throwable Returns: a List of Strings
util,rethrow public staticvoidrethrow(Throwablet) Rethrows a Throwable. Parameters: t - the Throwable to throw. Since: 2.1
util,"escapeHtmlTags public staticStringescapeHtmlTags(Stringinput) This method takes a string which may contain HTML tags (ie, <b>, <table>, etc) and replaces any '<', '>' , '&' or '""' characters with respective predefined entity references. Parameters: input - The text to be converted. Returns: The input string with the special characters replaced."
util,"appendEscapingCData public staticvoidappendEscapingCData(StringBuilderbuf, Stringstr) Ensures that embedded CDEnd strings (]]>) are handled properly within message, NDC and throwable tag text. Parameters: buf - StringBuilder holding the XML data to this point. The initial CDStart (<![CDATA[) and final CDEnd (]]>) of the CDATA section are the responsibility of the calling method. str - The String that is inserted into an existing CDATA Section within buf."
util,escapeJsonControlCharacters public staticStringescapeJsonControlCharacters(Stringinput) This method takes a string which may contain JSON reserved chars and escapes them. Parameters: input - The text to be converted. Returns: The input string with the special characters replaced.
util,getAllDeclaredFields public staticList<Field>getAllDeclaredFields(Class<?>cls) Gets all declared fields for the given class (including superclasses). Parameters: cls - the class to examine Returns: all declared fields for the given class (including superclasses). See Also: Class.getDeclaredFields()
util,Class.getDeclaredFields()
util,"isAssignable public staticbooleanisAssignable(Typelhs, Typerhs) Indicates if two Types are assignment compatible. Parameters: lhs - the left hand side to check assignability to rhs - the right hand side to check assignability from Returns: true if it is legal to assign a variable of type rhs to a variable of type lhs See Also: Class.isAssignableFrom(Class)"
util,Class.isAssignableFrom(Class)
util,"getTimeBasedUuid public staticUUIDgetTimeBasedUuid() Generates Type 1 UUID. The time contains the number of 100NS intervals that have occurred since 00:00:00.00 UTC, 10 October 1582. Each UUID on a particular machine is unique to the 100NS interval until they rollover around 3400 A.D. Digits 1-12 are the lower 48 bits of the number of 100 ns increments since the start of the UUID epoch. Digit 13 is the version (with a value of 1). Digits 14-16 are a sequence number that is incremented each time a UUID is generated. Digit 17 is the variant (with a value of binary 10) and 10 bits of the sequence number Digit 18 is final 16 bits of the sequence number. Digits 19-32 represent the system the application is running on. Returns: universally unique identifiers (UUID)"
util,Digits 1-12 are the lower 48 bits of the number of 100 ns increments since the start of the UUID epoch.
util,Digit 13 is the version (with a value of 1).
util,Digits 14-16 are a sequence number that is incremented each time a UUID is generated.
util,Digit 17 is the variant (with a value of binary 10) and 10 bits of the sequence number
util,Digit 18 is final 16 bits of the sequence number.
util,Digits 19-32 represent the system the application is running on.
util,getListeners List<ConfigurationListener>getListeners() Returns the list of listeners for this configuration. Returns: The list of listeners.
util,modified voidmodified() Called when the configuration has been modified.
util,"isModified booleanisModified() Periodically called to determine if the configuration has been modified. Returns: true if the configuration was modified, false otherwise."
util,getLastModified longgetLastModified() Returns the time the source was last modified or 0 if it is not available. Returns: the time the source was last modified.
util,watching voidwatching(Sourcesource) Called when the Watcher is registered. Parameters: source - the Source that is being watched.
util,getSource SourcegetSource() Returns the Source being monitored. Returns: the Source.
util,"newWatcher WatchernewWatcher(Reconfigurablereconfigurable, List<ConfigurationListener>listeners, longlastModifiedMillis) Creates a new Watcher by copying the original and using the new Reconfigurable and listeners. Parameters: reconfigurable - The Reconfigurable. listeners - the listeners. lastModifiedMillis - The time the resource was last modified in milliseconds. Returns: A new Watcher."
util,getInstance public staticWatcherFactorygetInstance(List<String>packages)
util,"newWatcher publicWatchernewWatcher(Sourcesource, Configurationconfiguration, Reconfigurablereconfigurable, List<ConfigurationListener>configurationListeners, longlastModifiedMillis)"
util,"instantiate public static<T extends Watcher>Tinstantiate(Stringname, Class<T>clazz, Configurationconfiguration, Reconfigurablereconfigurable, List<ConfigurationListener>listeners, longlastModifiedMillis)"
util,subscribe voidsubscribe(WatchManagermanager)
util,unsubscribe voidunsubscribe(WatchManagermanager)
util,checkFiles publicvoidcheckFiles()
util,"getConfigurationWatchers publicMap<Source,Watcher>getConfigurationWatchers() Return the ConfigurationWaatchers. Returns: the ConfigurationWatchers. Since: 2.11.2"
util,getId publicUUIDgetId()
util,"getIntervalSeconds publicintgetIntervalSeconds() Gets how often this manager checks for file modifications. Returns: how often, in seconds, this manager checks for file modifications."
util,"getWatchers @Deprecated publicMap<File,FileWatcher>getWatchers() Deprecated. use getConfigurationWatchers. Returns a Map of the file watchers. Returns: A Map of the file watchers."
util,hasEventListeners publicbooleanhasEventListeners()
util,"reset publicvoidreset() Resets all file monitors to their current last modified time. If this manager does not watch any file, nothing happens. This allows you to start, stop, reset and start again a manager, without triggering file modified events if the a watched file has changed during the period of time when the manager was stopped. Since: 2.11.0"
util,"reset publicvoidreset(Filefile) Resets the file monitor for the given file being watched to its current last modified time. If this manager does not watch the given file, nothing happens. This allows you to start, stop, reset and start again a manager, without triggering file modified events if the given watched file has changed during the period of time when the manager was stopped. Parameters: file - the file for the monitor to reset. Since: 2.11.0"
util,"reset publicvoidreset(Sourcesource) Resets the configuration monitor for the given file being watched to its current last modified time. If this manager does not watch the given configuration, nothing happens. This allows you to start, stop, reset and start again a manager, without triggering file modified events if the given watched configuration has changed during the period of time when the manager was stopped. Parameters: source - the Source for the monitor to reset. Since: 2.12.0"
util,setIntervalSeconds publicvoidsetIntervalSeconds(intintervalSeconds)
util,start publicvoidstart() Specified by: startin interfaceLifeCycle Overrides: startin classAbstractLifeCycle
util,"stop publicbooleanstop(longtimeout, TimeUnittimeUnit) Description copied from interface:LifeCycle2 Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Specified by: stopin interfaceLifeCycle2 Overrides: stopin classAbstractLifeCycle Parameters: timeout - the maximum time to wait timeUnit - the time unit of the timeout argument Returns: true if the receiver was stopped cleanly and normally, false otherwise."
util,toString publicStringtoString() Overrides: toStringin classObject
util,unwatch publicvoidunwatch(Sourcesource) Unwatches the given file. Parameters: source - the Source to stop watching. the file to stop watching. Since: 2.12.0
util,unwatchFile publicvoidunwatchFile(Filefile) Unwatches the given file. Parameters: file - the file to stop watching. Since: 2.11.0
util,"watch publicvoidwatch(Sourcesource, Watcherwatcher) Watches the given file. Parameters: source - the source to watch. watcher - the watcher to notify of file changes."
util,"watchFile publicvoidwatchFile(Filefile, FileWatcherfileWatcher) Watches the given file. Parameters: file - the file to watch. fileWatcher - the watcher to notify of file changes."
util,getLastModified publiclonggetLastModified() Description copied from interface:Watcher Returns the time the source was last modified or 0 if it is not available. Specified by: getLastModifiedin interfaceWatcher Specified by: getLastModifiedin classAbstractWatcher Returns: the time the source was last modified.
util,fileModified publicvoidfileModified(Filefile) Description copied from interface:FileWatcher Called when a WatchManager detects that the given File changed. Specified by: fileModifiedin interfaceFileWatcher Parameters: file - the file that changed. See Also: WatchManager
util,WatchManager
util,"isModified publicbooleanisModified() Description copied from interface:Watcher Periodically called to determine if the configuration has been modified. Specified by: isModifiedin interfaceWatcher Specified by: isModifiedin classAbstractWatcher Returns: true if the configuration was modified, false otherwise."
util,getListeners publicList<ConfigurationListener>getListeners() Description copied from interface:Watcher Returns the list of listeners for this configuration. Specified by: getListenersin interfaceWatcher Overrides: getListenersin classAbstractWatcher Returns: The list of listeners.
util,modified publicvoidmodified() Description copied from interface:Watcher Called when the configuration has been modified. Specified by: modifiedin interfaceWatcher Overrides: modifiedin classAbstractWatcher
util,watching publicvoidwatching(Sourcesource) Description copied from interface:Watcher Called when the Watcher is registered. Specified by: watchingin interfaceWatcher Overrides: watchingin classAbstractWatcher Parameters: source - the Source that is being watched.
util,"newWatcher publicWatchernewWatcher(Reconfigurablereconfigurable, List<ConfigurationListener>listeners, longlastModifiedMillis) Description copied from interface:Watcher Creates a new Watcher by copying the original and using the new Reconfigurable and listeners. Specified by: newWatcherin interfaceWatcher Parameters: reconfigurable - The Reconfigurable. listeners - the listeners. lastModifiedMillis - The time the resource was last modified in milliseconds. Returns: A new Watcher."
util,format Stringformat(longmillis) Formats a millisecond long value. Parameters: millis - the millisecond value to format Returns: the formatted string Since: 2.1
util,format Stringformat(Datedate) Formats a Date object using a GregorianCalendar. Parameters: date - the date to format Returns: the formatted string
util,format Stringformat(Calendarcalendar) Formats a Calendar object. The TimeZone set on the Calendar is only used to adjust the time offset. The TimeZone specified during the construction of the Parser will determine the TimeZone used in the formatted string. Parameters: calendar - the calendar to format. Returns: the formatted string
util,"format <B extends Appendable>Bformat(longmillis, Bbuf) Formats a millisecond long value into the supplied Appendable. Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: millis - the millisecond value to format buf - the buffer to format into Returns: the specified string buffer Since: 3.5"
util,"format <B extends Appendable>Bformat(Datedate, Bbuf) Formats a Date object into the supplied Appendable using a GregorianCalendar. Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: date - the date to format buf - the buffer to format into Returns: the specified string buffer Since: 3.5"
util,"format <B extends Appendable>Bformat(Calendarcalendar, Bbuf) Formats a Calendar object into the supplied Appendable. The TimeZone set on the Calendar is only used to adjust the time offset. The TimeZone specified during the construction of the Parser will determine the TimeZone used in the formatted string. Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: calendar - the calendar to format buf - the buffer to format into Returns: the specified string buffer Since: 3.5"
util,"getPattern StringgetPattern() Gets the pattern used by this printer. Returns: the pattern, SimpleDateFormat compatible"
util,getTimeZone TimeZonegetTimeZone() Gets the time zone used by this printer. This zone is always used for Date printing. Returns: the time zone
util,getLocale LocalegetLocale() Gets the locale used by this printer. Returns: the locale
util,"format StringBuilderformat(Objectobj, StringBuildertoAppendTo, FieldPositionpos) Formats a Date, Calendar or Long (milliseconds) object. Parameters: obj - the object to format toAppendTo - the buffer to append to pos - the position - ignored Returns: the buffer passed in See Also: DateFormat.format(Object, StringBuffer, FieldPosition)"
util,"DateFormat.format(Object, StringBuffer, FieldPosition)"
util,getInstance public staticFastDateFormatgetInstance() Gets a formatter instance using the default pattern in the default locale. Returns: a date/time formatter
util,getInstance public staticFastDateFormatgetInstance(Stringpattern) Gets a formatter instance using the specified pattern in the default locale. Parameters: pattern - SimpleDateFormat compatible pattern Returns: a pattern based date/time formatter Throws: IllegalArgumentException - if pattern is invalid
util,"getInstance public staticFastDateFormatgetInstance(Stringpattern, TimeZonetimeZone) Gets a formatter instance using the specified pattern and time zone. Parameters: pattern - SimpleDateFormat compatible pattern timeZone - optional time zone, overrides time zone of formatted date Returns: a pattern based date/time formatter Throws: IllegalArgumentException - if pattern is invalid"
util,"getInstance public staticFastDateFormatgetInstance(Stringpattern, Localelocale) Gets a formatter instance using the specified pattern and locale. Parameters: pattern - SimpleDateFormat compatible pattern locale - optional locale, overrides system locale Returns: a pattern based date/time formatter Throws: IllegalArgumentException - if pattern is invalid"
util,"getInstance public staticFastDateFormatgetInstance(Stringpattern, TimeZonetimeZone, Localelocale) Gets a formatter instance using the specified pattern, time zone and locale. Parameters: pattern - SimpleDateFormat compatible pattern timeZone - optional time zone, overrides time zone of formatted date locale - optional locale, overrides system locale Returns: a pattern based date/time formatter Throws: IllegalArgumentException - if pattern is invalid or null"
util,"getDateInstance public staticFastDateFormatgetDateInstance(intstyle) Gets a date formatter instance using the specified style in the default time zone and locale. Parameters: style - date style: FULL, LONG, MEDIUM, or SHORT Returns: a localized standard date formatter Throws: IllegalArgumentException - if the Locale has no date pattern defined Since: 2.1"
util,"getDateInstance public staticFastDateFormatgetDateInstance(intstyle, Localelocale) Gets a date formatter instance using the specified style and locale in the default time zone. Parameters: style - date style: FULL, LONG, MEDIUM, or SHORT locale - optional locale, overrides system locale Returns: a localized standard date formatter Throws: IllegalArgumentException - if the Locale has no date pattern defined Since: 2.1"
util,"getDateInstance public staticFastDateFormatgetDateInstance(intstyle, TimeZonetimeZone) Gets a date formatter instance using the specified style and time zone in the default locale. Parameters: style - date style: FULL, LONG, MEDIUM, or SHORT timeZone - optional time zone, overrides time zone of formatted date Returns: a localized standard date formatter Throws: IllegalArgumentException - if the Locale has no date pattern defined Since: 2.1"
util,"getDateInstance public staticFastDateFormatgetDateInstance(intstyle, TimeZonetimeZone, Localelocale) Gets a date formatter instance using the specified style, time zone and locale. Parameters: style - date style: FULL, LONG, MEDIUM, or SHORT timeZone - optional time zone, overrides time zone of formatted date locale - optional locale, overrides system locale Returns: a localized standard date formatter Throws: IllegalArgumentException - if the Locale has no date pattern defined"
util,"getTimeInstance public staticFastDateFormatgetTimeInstance(intstyle) Gets a time formatter instance using the specified style in the default time zone and locale. Parameters: style - time style: FULL, LONG, MEDIUM, or SHORT Returns: a localized standard time formatter Throws: IllegalArgumentException - if the Locale has no time pattern defined Since: 2.1"
util,"getTimeInstance public staticFastDateFormatgetTimeInstance(intstyle, Localelocale) Gets a time formatter instance using the specified style and locale in the default time zone. Parameters: style - time style: FULL, LONG, MEDIUM, or SHORT locale - optional locale, overrides system locale Returns: a localized standard time formatter Throws: IllegalArgumentException - if the Locale has no time pattern defined Since: 2.1"
util,"getTimeInstance public staticFastDateFormatgetTimeInstance(intstyle, TimeZonetimeZone) Gets a time formatter instance using the specified style and time zone in the default locale. Parameters: style - time style: FULL, LONG, MEDIUM, or SHORT timeZone - optional time zone, overrides time zone of formatted time Returns: a localized standard time formatter Throws: IllegalArgumentException - if the Locale has no time pattern defined Since: 2.1"
util,"getTimeInstance public staticFastDateFormatgetTimeInstance(intstyle, TimeZonetimeZone, Localelocale) Gets a time formatter instance using the specified style, time zone and locale. Parameters: style - time style: FULL, LONG, MEDIUM, or SHORT timeZone - optional time zone, overrides time zone of formatted time locale - optional locale, overrides system locale Returns: a localized standard time formatter Throws: IllegalArgumentException - if the Locale has no time pattern defined"
util,"getDateTimeInstance public staticFastDateFormatgetDateTimeInstance(intdateStyle, inttimeStyle) Gets a date/time formatter instance using the specified style in the default time zone and locale. Parameters: dateStyle - date style: FULL, LONG, MEDIUM, or SHORT timeStyle - time style: FULL, LONG, MEDIUM, or SHORT Returns: a localized standard date/time formatter Throws: IllegalArgumentException - if the Locale has no date/time pattern defined Since: 2.1"
util,"getDateTimeInstance public staticFastDateFormatgetDateTimeInstance(intdateStyle, inttimeStyle, Localelocale) Gets a date/time formatter instance using the specified style and locale in the default time zone. Parameters: dateStyle - date style: FULL, LONG, MEDIUM, or SHORT timeStyle - time style: FULL, LONG, MEDIUM, or SHORT locale - optional locale, overrides system locale Returns: a localized standard date/time formatter Throws: IllegalArgumentException - if the Locale has no date/time pattern defined Since: 2.1"
util,"getDateTimeInstance public staticFastDateFormatgetDateTimeInstance(intdateStyle, inttimeStyle, TimeZonetimeZone) Gets a date/time formatter instance using the specified style and time zone in the default locale. Parameters: dateStyle - date style: FULL, LONG, MEDIUM, or SHORT timeStyle - time style: FULL, LONG, MEDIUM, or SHORT timeZone - optional time zone, overrides time zone of formatted date Returns: a localized standard date/time formatter Throws: IllegalArgumentException - if the Locale has no date/time pattern defined Since: 2.1"
util,"getDateTimeInstance public staticFastDateFormatgetDateTimeInstance(intdateStyle, inttimeStyle, TimeZonetimeZone, Localelocale) Gets a date/time formatter instance using the specified style, time zone and locale. Parameters: dateStyle - date style: FULL, LONG, MEDIUM, or SHORT timeStyle - time style: FULL, LONG, MEDIUM, or SHORT timeZone - optional time zone, overrides time zone of formatted date locale - optional locale, overrides system locale Returns: a localized standard date/time formatter Throws: IllegalArgumentException - if the Locale has no date/time pattern defined"
util,"format publicStringBuilderformat(Objectobj, StringBuildertoAppendTo, FieldPositionpos) Formats a Date, Calendar or Long (milliseconds) object. This method is an implementation of Format.format(Object, StringBuilder, FieldPosition) Specified by: formatin interfaceDatePrinter Specified by: formatin classFormat Parameters: obj - the object to format toAppendTo - the buffer to append to pos - the position - ignored Returns: the buffer passed in See Also: DateFormat.format(Object, StringBuffer, FieldPosition)"
util,"DateFormat.format(Object, StringBuffer, FieldPosition)"
util,format publicStringformat(longmillis) Formats a millisecond long value. Specified by: formatin interfaceDatePrinter Parameters: millis - the millisecond value to format Returns: the formatted string Since: 2.1
util,format publicStringformat(Datedate) Formats a Date object using a GregorianCalendar. Specified by: formatin interfaceDatePrinter Parameters: date - the date to format Returns: the formatted string
util,format publicStringformat(Calendarcalendar) Formats a Calendar object. Specified by: formatin interfaceDatePrinter Parameters: calendar - the calendar to format Returns: the formatted string
util,"format public<B extends Appendable>Bformat(longmillis, Bbuf) Formats a millisecond long value into the supplied StringBuffer. Specified by: formatin interfaceDatePrinter Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: millis - the millisecond value to format buf - the buffer to format into Returns: the specified string buffer Since: 3.5"
util,"format public<B extends Appendable>Bformat(Datedate, Bbuf) Formats a Date object into the supplied StringBuffer using a GregorianCalendar. Specified by: formatin interfaceDatePrinter Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: date - the date to format buf - the buffer to format into Returns: the specified string buffer Since: 3.5"
util,"format public<B extends Appendable>Bformat(Calendarcalendar, Bbuf) Formats a Calendar object into the supplied StringBuffer. Specified by: formatin interfaceDatePrinter Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: calendar - the calendar to format buf - the buffer to format into Returns: the specified string buffer Since: 3.5"
util,"getPattern publicStringgetPattern() Gets the pattern used by this formatter. Specified by: getPatternin interfaceDatePrinter Returns: the pattern, SimpleDateFormat compatible"
util,getTimeZone publicTimeZonegetTimeZone() Gets the time zone used by this formatter. This zone is always used for Date formatting. Specified by: getTimeZonein interfaceDatePrinter Returns: the time zone
util,getLocale publicLocalegetLocale() Gets the locale used by this formatter. Specified by: getLocalein interfaceDatePrinter Returns: the locale
util,getMaxLengthEstimate publicintgetMaxLengthEstimate() Gets an estimate for the maximum string length that the formatter will produce. The actual formatted length will almost always be less than or equal to this amount. Returns: the maximum formatted length
util,equals publicbooleanequals(Objectobj) Compares two objects for equality. Overrides: equalsin classObject Parameters: obj - the object to compare to Returns: true if equal
util,hashCode publicinthashCode() Returns a hash code compatible with equals. Overrides: hashCodein classObject Returns: a hash code compatible with equals
util,toString publicStringtoString() Gets a debugging string version of this formatter. Overrides: toStringin classObject Returns: a debugging string
util,parsePattern protectedList<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule>parsePattern() Returns a list of Rules given a pattern. Returns: a List of Rule objects Throws: IllegalArgumentException - if pattern is invalid
util,"parseToken protectedStringparseToken(Stringpattern, int[]indexRef) Performs the parsing of tokens. Parameters: pattern - the pattern indexRef - index references Returns: parsed token"
util,"selectNumberRule protectedorg.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRuleselectNumberRule(intfield, intpadding) Gets an appropriate rule for the padding required. Parameters: field - the field to get a rule for padding - the padding required Returns: a new rule with the correct padding"
util,"format @Deprecated publicStringBuilderformat(Objectobj, StringBuildertoAppendTo, FieldPositionpos) Deprecated. Use {format(Date), {format(Calendar), {format(long), or {format(Object) Formats a Date, Calendar or Long (milliseconds) object. Specified by: formatin interfaceDatePrinter Parameters: obj - the object to format toAppendTo - the buffer to append to pos - the position - ignored Returns: the buffer passed in See Also: DateFormat.format(Object, StringBuffer, FieldPosition)"
util,"DateFormat.format(Object, StringBuffer, FieldPosition)"
util,format publicStringformat(longmillis) Description copied from interface:DatePrinter Formats a millisecond long value. Specified by: formatin interfaceDatePrinter Parameters: millis - the millisecond value to format Returns: the formatted string
util,format publicStringformat(Datedate) Description copied from interface:DatePrinter Formats a Date object using a GregorianCalendar. Specified by: formatin interfaceDatePrinter Parameters: date - the date to format Returns: the formatted string
util,format publicStringformat(Calendarcalendar) Description copied from interface:DatePrinter Formats a Calendar object. The TimeZone set on the Calendar is only used to adjust the time offset. The TimeZone specified during the construction of the Parser will determine the TimeZone used in the formatted string. Specified by: formatin interfaceDatePrinter Parameters: calendar - the calendar to format. Returns: the formatted string
util,"format public<B extends Appendable>Bformat(longmillis, Bbuf) Description copied from interface:DatePrinter Formats a millisecond long value into the supplied Appendable. Specified by: formatin interfaceDatePrinter Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: millis - the millisecond value to format buf - the buffer to format into Returns: the specified string buffer"
util,"format public<B extends Appendable>Bformat(Datedate, Bbuf) Description copied from interface:DatePrinter Formats a Date object into the supplied Appendable using a GregorianCalendar. Specified by: formatin interfaceDatePrinter Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: date - the date to format buf - the buffer to format into Returns: the specified string buffer"
util,"format public<B extends Appendable>Bformat(Calendarcalendar, Bbuf) Description copied from interface:DatePrinter Formats a Calendar object into the supplied Appendable. The TimeZone set on the Calendar is only used to adjust the time offset. The TimeZone specified during the construction of the Parser will determine the TimeZone used in the formatted string. Specified by: formatin interfaceDatePrinter Type Parameters: B - the Appendable class type, usually StringBuilder or StringBuffer. Parameters: calendar - the calendar to format buf - the buffer to format into Returns: the specified string buffer"
util,"applyRules @Deprecated protectedStringBufferapplyRules(Calendarcalendar, StringBufferbuf) Deprecated. use format(Calendar) or format(Calendar, Appendable) Performs the formatting by applying the rules to the specified calendar. Parameters: calendar - the calendar to format buf - the buffer to format into Returns: the specified string buffer"
util,"getPattern publicStringgetPattern() Description copied from interface:DatePrinter Gets the pattern used by this printer. Specified by: getPatternin interfaceDatePrinter Returns: the pattern, SimpleDateFormat compatible"
util,getTimeZone publicTimeZonegetTimeZone() Description copied from interface:DatePrinter Gets the time zone used by this printer. This zone is always used for Date printing. Specified by: getTimeZonein interfaceDatePrinter Returns: the time zone
util,getLocale publicLocalegetLocale() Description copied from interface:DatePrinter Gets the locale used by this printer. Specified by: getLocalein interfaceDatePrinter Returns: the locale
util,getMaxLengthEstimate publicintgetMaxLengthEstimate() Gets an estimate for the maximum string length that the formatter will produce. The actual formatted length will almost always be less than or equal to this amount. Returns: the maximum formatted length
util,equals publicbooleanequals(Objectobj) Compares two objects for equality. Overrides: equalsin classObject Parameters: obj - the object to compare to Returns: true if equal
util,hashCode publicinthashCode() Returns a hash code compatible with equals. Overrides: hashCodein classObject Returns: a hash code compatible with equals
util,toString publicStringtoString() Gets a debugging string version of this formatter. Overrides: toStringin classObject Returns: a debugging string
util,"values public staticFixedDateFormat.FixedFormat[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
util,valueOf public staticFixedDateFormat.FixedFormatvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
util,getPattern publicStringgetPattern() Returns the full pattern. Returns: the full pattern
util,getDatePattern publicStringgetDatePattern() Returns the date part of the pattern. Returns: the date part of the pattern
util,lookup public staticFixedDateFormat.FixedFormatlookup(StringnameOrPattern) Returns the FixedFormat with the name or pattern matching the specified string or null if not found. Parameters: nameOrPattern - the name or pattern to find a FixedFormat for Returns: the FixedFormat with the name or pattern matching the specified string
util,getLength publicintgetLength() Returns the length of the resulting formatted date and time strings in the ROOT locale. Returns: the length of the resulting formatted date and time strings
util,getDatePatternLength publicintgetDatePatternLength() Returns the length of the date part of the resulting formatted string. Returns: the length of the date part of the resulting formatted string
util,getFastDateFormat publicFastDateFormatgetFastDateFormat() Returns the FastDateFormat object for formatting the date part of the pattern or null if the pattern does not have a date part. Returns: the FastDateFormat object for formatting the date part of the pattern or null
util,getFastDateFormat publicFastDateFormatgetFastDateFormat(TimeZonetz) Returns the FastDateFormat object for formatting the date part of the pattern or null if the pattern does not have a date part. Parameters: tz - the time zone to use Returns: the FastDateFormat object for formatting the date part of the pattern or null
util,"getSecondFractionDigits publicintgetSecondFractionDigits() Returns the number of digits specifying the fraction of the second to show Returns: 3 for millisecond precision, 6 for microsecond precision or 9 for nanosecond precision"
util,"getFixedTimeZoneFormat publicFixedDateFormat.FixedTimeZoneFormatgetFixedTimeZoneFormat() Returns the optional time zone format. Returns: the optional time zone format, may be null."
util,"values public staticFixedDateFormat.FixedTimeZoneFormat[]values() Returns an array containing the constants of this enum type, in the order they are declared. Returns: an array containing the constants of this enum type, in the order they are declared"
util,valueOf public staticFixedDateFormat.FixedTimeZoneFormatvalueOf(Stringname) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: IllegalArgumentException - if this enum type has no constant with the specified name NullPointerException - if the argument is null
util,getLength publicintgetLength()
util,createIfSupported public staticFixedDateFormatcreateIfSupported(String...options)
util,create public staticFixedDateFormatcreate(FixedDateFormat.FixedFormatformat) Returns a new FixedDateFormat object for the specified FixedFormat and a TimeZone.getDefault() TimeZone. Parameters: format - the format to use Returns: a new FixedDateFormat object
util,"create public staticFixedDateFormatcreate(FixedDateFormat.FixedFormatformat, TimeZonetz) Returns a new FixedDateFormat object for the specified FixedFormat and TimeZone. Parameters: format - the format to use tz - the time zone to use Returns: a new FixedDateFormat object"
util,getFormat publicStringgetFormat() Returns the full pattern of the selected fixed format. Returns: the full date-time pattern
util,getLength public finalintgetLength() Returns the length of the resulting formatted date and time strings. Returns: the length of the resulting formatted date and time strings
util,getTimeZone publicTimeZonegetTimeZone() Returns the time zone. Returns: the time zone
util,"millisSinceMidnight publiclongmillisSinceMidnight(longcurrentTime) Returns the number of milliseconds since midnight in the time zone that this FixedDateFormat was constructed with for the specified currentTime. As a side effect, this method updates the cached formatted date and the cached date demarcation timestamps when the specified current time is outside the previously set demarcation timestamps for the start or end of the current day. Parameters: currentTime - the current time in millis since the epoch Returns: the number of milliseconds since midnight for the specified time"
util,formatInstant publicStringformatInstant(Instantinstant)
util,"formatInstant publicintformatInstant(Instantinstant, char[]buffer, intstartPos)"
util,format publicStringformat(longepochMillis)
util,"format publicintformat(longepochMillis, char[]buffer, intstartPos)"
util,"isEquivalent publicbooleanisEquivalent(longoldEpochSecond, intoldNanoOfSecond, longepochSecond, intnanoOfSecond) Returns true if the old and new date values will result in the same formatted output, false if results may differ."
util,format public finalStringformat(Objectobj)
util,"format public abstractStringBuilderformat(Objectobj, StringBuildertoAppendTo, FieldPositionpos)"
