- `update_rate_hz` (double) [hz]
  - Default parameter: 20.0

This parameter is update rate for the `onTimer` function.
This parameter should be same as the frame rate of input topics.

- `new_frame_id` (string)
  - Default parameter: "base_link"

This parameter is the header frame_id of the output topic.
If output topics use for perception module, it should be set for "base_link"

- `timeout_threshold` (double) [s]
  - Default parameter: 0.1

This parameter is the threshold for timeout judgement.
If the time difference between the first topic of `input_topics` and an input topic is exceeded to this parameter, then the objects of topic is not merged to output objects.

```cpp
  for (size_t i = 0; i < input_topic_size; i++) {
    double time_diff = rclcpp::Time(objects_data_.at(i)->header.stamp).seconds() -
                       rclcpp::Time(objects_data_.at(0)->header.stamp).seconds();
    if (std::abs(time_diff) < node_param_.timeout_threshold) {
      // merge objects
    }
  }
```

- `input_topics` (List[string])
  - Default parameter: "[]"

This parameter is the name of input topics.
For example, when this packages use for radar objects,

```yaml
input_topics:
  [
    "/sensing/radar/front_center/detected_objects",
    "/sensing/radar/front_left/detected_objects",
    "/sensing/radar/rear_left/detected_objects",
    "/sensing/radar/rear_center/detected_objects",
    "/sensing/radar/rear_right/detected_objects",
    "/sensing/radar/front_right/detected_objects",
  ]
```

can be set in config yaml file.
For now, the time difference is calculated by the header time between the first topic of `input_topics` and the input topics, so the most important objects to detect should be set in the first of `input_topics` list.