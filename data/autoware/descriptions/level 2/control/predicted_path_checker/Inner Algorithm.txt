![FlowChart.png](images%2FFlowChart.png)

**cutTrajectory() ->** It cuts the predicted trajectory with input length. Length is calculated by multiplying the
velocity
of ego vehicle with "trajectory_check_time" parameter and "min_trajectory_length".

**filterObstacles() ->** It filters the predicted objects in the environment. It filters the objects which are not in
front of the vehicle and far away from predicted trajectory.

**checkTrajectoryForCollision() ->** It checks the predicted trajectory for collision with the predicted objects. It
calculates both polygon of trajectory points and predicted objects and checks intersection of both polygons. If there is
an intersection, it calculates the nearest collision point. It returns the nearest collision point of polygon and the
predicted object. It also checks predicted objects history which are intersect with the footprint before to avoid
unexpected behaviors. Predicted objects history stores the objects if it was detected below the "chattering_threshold"
seconds ago.

If the "enable_z_axis_obstacle_filtering" parameter is set to true, it filters the predicted objects in the Z-axis by
using "z_axis_filtering_buffer". If the object does not intersect with the Z-axis, it is filtered out.

![Z_axis_filtering.png](images%2FZ_axis_filtering.png)

**calculateProjectedVelAndAcc() ->** It calculates the projected velocity and acceleration of the predicted object on
predicted trajectory's collision point's axes.

**isInBrakeDistance() ->** It checks if the stop point is in brake distance. It gets relative velocity and
acceleration of ego vehicle with respect to the predicted object. It calculates the brake distance, if the point in
brake distance, it returns true.

**isItDiscretePoint() ->** It checks if the stop point on predicted trajectory is discrete point or not. If it is not
discrete point, planning should handle the stop.

**isThereStopPointOnRefTrajectory() ->** It checks if there is a stop point on reference trajectory. If there is a stop
point before the stop index, it returns true. Otherwise, it returns false, and node is going to call pause interface to
make the vehicle stop.