| Parameter               | Type             | Description                                                                                                                                                                                          |
| ----------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `detection_method`      | string           | [-] candidate: Object, ObjectWithoutPath, Points                                                                                                                                                     |
| `target_obstacle_types` | vector of string | [-] specifies which obstacle types will be considered by the module, if the obstacles classification type is not written here, it will be ignored. candidate: ["PEDESTRIAN", "BICYCLE","MOTORCYCLE"] |
| `use_partition_lanelet` | bool             | [-] whether to use partition lanelet map data                                                                                                                                                        |
| `specify_decel_jerk`    | bool             | [-] whether to specify jerk when ego decelerates                                                                                                                                                     |
| `stop_margin`           | double           | [m] the vehicle decelerates to be able to stop with this margin                                                                                                                                      |
| `passing_margin`        | double           | [m] the vehicle begins to accelerate if the vehicle's front in predicted position is ahead of the obstacle + this margin                                                                             |
| `deceleration_jerk`     | double           | [m/s^3] ego decelerates with this jerk when stopping for obstacles                                                                                                                                   |
| `detection_distance`    | double           | [m] ahead distance from ego to detect the obstacles                                                                                                                                                  |
| `detection_span`        | double           | [m] calculate collision with this span to reduce calculation time                                                                                                                                    |
| `min_vel_ego_kmph`      | double           | [km/h] min velocity to calculate time to collision                                                                                                                                                   |

| Parameter /detection_area | Type   | Description                                  |
| ------------------------- | ------ | -------------------------------------------- |
| `margin_ahead`            | double | [m] ahead margin for detection area polygon  |
| `margin_behind`           | double | [m] behind margin for detection area polygon |

| Parameter /dynamic_obstacle          | Type   | Description                                                                                                                   |
| ------------------------------------ | ------ | ----------------------------------------------------------------------------------------------------------------------------- |
| `use_mandatory_area`                 | double | [-] whether to use mandatory detection area                                                                                   |
| `assume_fixed_velocity.enable`       | double | [-] If enabled, the obstacle's velocity is assumed to be within the minimum and maximum velocity values specified below       |
| `assume_fixed_velocity.min_vel_kmph` | double | [km/h] minimum velocity for dynamic obstacles                                                                                 |
| `assume_fixed_velocity.max_vel_kmph` | double | [km/h] maximum velocity for dynamic obstacles                                                                                 |
| `diameter`                           | double | [m] diameter of obstacles. used for creating dynamic obstacles from points                                                    |
| `height`                             | double | [m] height of obstacles. used for creating dynamic obstacles from points                                                      |
| `max_prediction_time`                | double | [sec] create predicted path until this time                                                                                   |
| `time_step`                          | double | [sec] time step for each path step. used for creating dynamic obstacles from points or objects without path                   |
| `points_interval`                    | double | [m] divide obstacle points into groups with this interval, and detect only lateral nearest point. used only for Points method |

| Parameter /approaching | Type   | Description                                           |
| ---------------------- | ------ | ----------------------------------------------------- |
| `enable`               | bool   | [-] whether to enable approaching after stopping      |
| `margin`               | double | [m] distance on how close ego approaches the obstacle |
| `limit_vel_kmph`       | double | [km/h] limit velocity for approaching after stopping  |

| Parameter /state         | Type   | Description                                                                         |
| ------------------------ | ------ | ----------------------------------------------------------------------------------- |
| `stop_thresh`            | double | [m/s] threshold to decide if ego is stopping                                        |
| `stop_time_thresh`       | double | [sec] threshold for stopping time to transit to approaching state                   |
| `disable_approach_dist`  | double | [m] end the approaching state if distance to the obstacle is longer than this value |
| `keep_approach_duration` | double | [sec] keep approach state for this duration to avoid chattering of state transition |

| Parameter /slow_down_limit | Type   | Description                                                   |
| -------------------------- | ------ | ------------------------------------------------------------- |
| `enable`                   | bool   | [-] whether to enable to limit velocity with max jerk and acc |
| `max_jerk`                 | double | [m/s^3] minimum jerk deceleration for safe brake.             |
| `max_acc`                  | double | [m/s^2] minimum accel deceleration for safe brake.            |

| Parameter /ignore_momentary_detection | Type   | Description                                                       |
| ------------------------------------- | ------ | ----------------------------------------------------------------- |
| `enable`                              | bool   | [-] whether to ignore momentary detection                         |
| `time_threshold`                      | double | [sec] ignores detections that persist for less than this duration |