```plantuml
@startuml
title insertTargetVelocity()
start

:get target vehicle point (*1) in detection area ;

partition Estimate-Target-Velocity {

if (Is there a DynamicObject on the target vehicle point?) then (yes)
:use the DynamicObject velocity\nas a target vehicle point velocity (*2);
else (no)

  if (The target vehicle point is found in the previous step?) then (yes)
  else (no (estimation failed))
  stop
  endif

  :estimate the target vehicle point velocity \nby the travel distance from the previous step;

  if (The estimated velocity is valid?) then (yes)
  else (no (estimation failed))
  stop
  endif

  :use the estimated velocity\nas a target vehicle point velocity (*2);

endif
}

if (Is the target vehicle point velocity fast enough?) then (yes)
else (no)
  stop
endif

if (calculate distance to the pointcloud from self-position?) then (yes)
else (no)
  stop
endif

:calculate target velocity to be inserted in the trajectory;

if (the target velocity is fast enough?) then (yes)
else (no)
  stop
endif

:insert the target velocity;

stop
@enduml
```

(\*1) The target vehicle point is calculated as a closest obstacle PointCloud from ego along the trajectory.

(\*2) The sources of velocity estimation can be changed by the following ROS parameters.

- `adaptive_cruise_control.use_object_to_estimate_vel`
- `adaptive_cruise_control.use_pcl_to_estimate_vel`

This module works only when the target point is found in the detection area of the `Obstacle stop planner` module.

The first process of this module is to estimate the velocity of the target vehicle point. The velocity estimation uses
the velocity information of dynamic objects or the travel distance of the target vehicle point from the previous step.
The dynamic object information is primal, and the travel distance estimation is used as a backup in case of the
perception failure.
If the target vehicle point is contained in the bounding box of a dynamic object geometrically, the velocity of the
dynamic object is used as the target point velocity.
Otherwise, the target point velocity is calculated by the travel distance of the target point from the previous step;
that is `(current_position - previous_position) / dt`. Note that this travel distance based estimation fails when the
target point is detected in the first time (it mainly happens in the cut-in situation). To improve the stability of the
estimation, the median of the calculation result for several steps is used.

If the calculated velocity is within the threshold range, it is used as the target point velocity.

Only when the estimation is succeeded and the estimated velocity exceeds the value of `obstacle_stop_velocity_thresh_*`,
the distance to the pointcloud from self-position is calculated. For prevent chattering in the mode
transition, `obstacle_velocity_thresh_to_start_acc` is used for the threshold to start adaptive cruise,
and `obstacle_velocity_thresh_to_stop_acc` is used for the threshold to stop adaptive cruise. When the calculated
distance value exceeds the emergency distance $d\_{emergency}$ calculated by emergency_stop parameters, target velocity
to insert is calculated.

The emergency distance $d\_{emergency}$ is calculated as follows.

$d_{emergency} = d_{margin_{emergency}} + t_{idling_{emergency}} \cdot v_{ego} + (-\frac{v_{ego}^2}{2 \cdot a_{ego_
{emergency}}}) - (-\frac{v_{obj}^2}{2 \cdot a_{obj_{emergency}}})$

- $d_{margin_{emergency}}$ is a minimum margin to the obstacle pointcloud. The value of $d_{margin_{emergency}}$ depends
  on the parameter `min_dist_stop`
- $t_{idling_{emergency}}$ is a supposed idling time. The value of $t_{idling_{emergency}}$ depends on the
  parameter `emergency_stop_idling_time`
- $v_{ego}$ is a current velocity of own vehicle
- $a_{ego_{_{emergency}}}$ is a minimum acceleration (maximum deceleration) of own vehicle. The value of $a_{ego_{_
  {emergency}}}$ depends on the parameter `emergency_stop_acceleration`
- $v_{obj}$ is a current velocity of obstacle pointcloud.
- $a_{obj_{_{emergency}}}$ is a supposed minimum acceleration of obstacle pointcloud. The value of $a_{obj_{_
  {emergency}}}$ depends on the parameter `obstacle_emergency_stop_acceleration`
- \*Above $X_{_{emergency}}$ parameters are used only in emergency situation.

The target velocity is determined to keep the distance to the obstacle pointcloud from own vehicle at the standard
distance $d\_{standard}$ calculated as following. Therefore, if the distance
to the obstacle pointcloud is longer than standard distance, The target velocity becomes higher than the current
velocity, and vice versa. For keeping the distance, a PID controller is used.

$d_{standard} = d_{margin_{standard}} + t_{idling_{standard}} \cdot v_{ego} + (-\frac{v_{ego}^2}{2 \cdot a_{ego_
{standard}}}) - (-\frac{v_{obj}^2}{2 \cdot a_{obj_{standard}}})$

- $d_{margin_{standard}}$ is a minimum margin to the obstacle pointcloud. The value of $d_{margin_{standard}}$ depends
  on the parameter `min_dist_stop`
- $t_{idling_{standard}}$ is a supposed idling time. The value of $t_{idling_{standard}}$ depends on the
  parameter `standard_stop_idling_time`
- $v_{ego}$ is a current velocity of own vehicle
- $a_{ego_{_{standard}}}$ is a minimum acceleration (maximum deceleration) of own vehicle. The value of $a_{ego_{_
  {standard}}}$ depends on the parameter `min_standard_acceleration`
- $v_{obj}$ is a current velocity of obstacle pointcloud.
- $a_{obj_{_{standard}}}$ is a supposed minimum acceleration of obstacle pointcloud. The value of $a_{obj_{_
  {standard}}}$ depends on the parameter `obstacle_min_standard_acceleration`
- \*Above $X_{_{standard}}$ parameters are used only in non-emergency situation.

![adaptive_cruise](./docs/adaptive_cruise.drawio.svg)

If the target velocity exceeds the value of `thresh_vel_to_stop`, the target velocity is embedded in the trajectory.