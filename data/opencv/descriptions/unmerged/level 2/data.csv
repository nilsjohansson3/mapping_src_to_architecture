Module,Text
calib3d,Functions
calib3d,double
calib3d,"cv::fisheye::calibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size &image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))"
calib3d,Performs camera calibration.
calib3d,double
calib3d,"cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,double
calib3d,"cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
calib3d,double
calib3d,"cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,double
calib3d,"cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
calib3d,void
calib3d,"cv::calibrateHandEye (InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)"
calib3d,Computes Hand-Eye calibration: \(_{}^{g}\textrm{T}_c\).
calib3d,void
calib3d,"cv::calibrateRobotWorldHandEye (InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)"
calib3d,Computes Robot-World/Hand-Eye calibration: \(_{}^{w}\textrm{T}_b\) and \(_{}^{c}\textrm{T}_g\).
calib3d,void
calib3d,"cv::calibrationMatrixValues (InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &fovx, double &fovy, double &focalLength, Point2d &principalPoint, double &aspectRatio)"
calib3d,Computes useful camera characteristics from the camera intrinsic matrix.
calib3d,bool
calib3d,"cv::checkChessboard (InputArray img, Size size)"
calib3d,void
calib3d,"cv::composeRT (InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())"
calib3d,Combines two rotation-and-shift transformations.
calib3d,void
calib3d,"cv::computeCorrespondEpilines (InputArray points, int whichImage, InputArray F, OutputArray lines)"
calib3d,"For points in an image of a stereo pair, computes the corresponding epilines in the other image."
calib3d,void
calib3d,"cv::convertPointsFromHomogeneous (InputArray src, OutputArray dst)"
calib3d,Converts points from homogeneous to Euclidean space.
calib3d,void
calib3d,"cv::convertPointsHomogeneous (InputArray src, OutputArray dst)"
calib3d,Converts points to/from homogeneous coordinates.
calib3d,void
calib3d,"cv::convertPointsToHomogeneous (InputArray src, OutputArray dst)"
calib3d,Converts points from Euclidean to homogeneous space.
calib3d,void
calib3d,"cv::correctMatches (InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)"
calib3d,Refines coordinates of corresponding points.
calib3d,void
calib3d,"cv::decomposeEssentialMat (InputArray E, OutputArray R1, OutputArray R2, OutputArray t)"
calib3d,Decompose an essential matrix to possible rotations and translation.
calib3d,int
calib3d,"cv::decomposeHomographyMat (InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)"
calib3d,"Decompose a homography matrix to rotation(s), translation(s) and plane normal(s)."
calib3d,void
calib3d,"cv::decomposeProjectionMatrix (InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())"
calib3d,Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.
calib3d,void
calib3d,"cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray K, InputArray D, double alpha=0)"
calib3d,Distorts 2D points using fisheye model.
calib3d,void
calib3d,"cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray Kundistorted, InputArray K, InputArray D, double alpha=0)"
calib3d,void
calib3d,"cv::drawChessboardCorners (InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)"
calib3d,Renders the detected chessboard corners.
calib3d,void
calib3d,"cv::drawFrameAxes (InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)"
calib3d,Draw axes of the world/object coordinate system from pose estimation.
calib3d,cv::Mat
calib3d,"cv::estimateAffine2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)"
calib3d,Computes an optimal affine transformation between two 2D point sets.
calib3d,cv::Mat
calib3d,"cv::estimateAffine2D (InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &params)"
calib3d,cv::Mat
calib3d,"cv::estimateAffine3D (InputArray src, InputArray dst, double *scale=nullptr, bool force_rotation=true)"
calib3d,Computes an optimal affine transformation between two 3D point sets.
calib3d,int
calib3d,"cv::estimateAffine3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)"
calib3d,Computes an optimal affine transformation between two 3D point sets.
calib3d,cv::Mat
calib3d,"cv::estimateAffinePartial2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)"
calib3d,Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.
calib3d,Scalar
calib3d,"cv::estimateChessboardSharpness (InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())"
calib3d,Estimates the sharpness of a detected chessboard.
calib3d,void
calib3d,"cv::fisheye::estimateNewCameraMatrixForUndistortRectify (InputArray K, InputArray D, const Size &image_size, InputArray R, OutputArray P, double balance=0.0, const Size &new_size=Size(), double fov_scale=1.0)"
calib3d,Estimates new camera intrinsic matrix for undistortion or rectification.
calib3d,int
calib3d,"cv::estimateTranslation3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)"
calib3d,Computes an optimal translation between two 3D point sets.
calib3d,void
calib3d,"cv::filterHomographyDecompByVisibleRefpoints (InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())"
calib3d,Filters homography decompositions based on additional information.
calib3d,void
calib3d,"cv::filterSpeckles (InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())"
calib3d,Filters off small noise blobs (speckles) in the disparity map.
calib3d,bool
calib3d,"cv::find4QuadCornerSubpix (InputArray img, InputOutputArray corners, Size region_size)"
calib3d,finds subpixel-accurate positions of the chessboard corners
calib3d,bool
calib3d,"cv::findChessboardCorners (InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)"
calib3d,Finds the positions of internal corners of the chessboard.
calib3d,bool
calib3d,"cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)"
calib3d,Finds the positions of internal corners of the chessboard using a sector based approach.
calib3d,bool
calib3d,"cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags=0)"
calib3d,bool
calib3d,"cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr< FeatureDetector > &blobDetector, const CirclesGridFinderParameters &parameters)"
calib3d,Finds centers in the grid of circles.
calib3d,bool
calib3d,"cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr< FeatureDetector > &blobDetector=SimpleBlobDetector::create())"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, double focal, Point2d pp, int method, double prob, double threshold, OutputArray mask)"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method, double prob, double threshold, OutputArray mask)"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())"
calib3d,Calculates an essential matrix from the corresponding points in two images.
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &params)"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())"
calib3d,Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())"
calib3d,Calculates a fundamental matrix from the corresponding points in two images.
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())"
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, const UsacParams &params)"
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)"
calib3d,Mat
calib3d,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)"
calib3d,Finds a perspective transformation between two planes.
calib3d,Mat
calib3d,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &params)"
calib3d,Mat
calib3d,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)"
calib3d,Mat
calib3d,"cv::getDefaultNewCameraMatrix (InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)"
calib3d,Returns the default new camera matrix.
calib3d,Mat
calib3d,"cv::getOptimalNewCameraMatrix (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)"
calib3d,Returns the new camera intrinsic matrix based on the free scaling parameter.
calib3d,Rect
calib3d,"cv::getValidDisparityROI (Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)"
calib3d,computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by stereoRectify)
calib3d,Mat
calib3d,"cv::initCameraMatrix2D (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)"
calib3d,Finds an initial camera intrinsic matrix from 3D-2D point correspondences.
calib3d,void
calib3d,"cv::initInverseRectificationMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, const Size &size, int m1type, OutputArray map1, OutputArray map2)"
calib3d,"Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs."
calib3d,void
calib3d,"cv::initUndistortRectifyMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)"
calib3d,Computes the undistortion and rectification transformation map.
calib3d,void
calib3d,"cv::fisheye::initUndistortRectifyMap (InputArray K, InputArray D, InputArray R, InputArray P, const cv::Size &size, int m1type, OutputArray map1, OutputArray map2)"
calib3d,"Computes undistortion and rectification maps for image transform by remap. If D is empty zero distortion is used, if R or P is empty identity matrixes are used."
calib3d,float
calib3d,"cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)"
calib3d,initializes maps for remap for wide-angle
calib3d,static float
calib3d,"cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)"
calib3d,void
calib3d,"cv::matMulDeriv (InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)"
calib3d,Computes partial derivatives of the matrix product for each multiplied matrix.
calib3d,void
calib3d,"cv::projectPoints (InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)"
calib3d,Projects 3D points to an image plane.
calib3d,void
calib3d,"cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, const Affine3d &affine, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())"
calib3d,Projects points using fisheye model.
calib3d,void
calib3d,"cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())"
calib3d,int
calib3d,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())"
calib3d,int
calib3d,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())"
calib3d,"Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using chirality check. Returns the number of inliers that pass the check."
calib3d,int
calib3d,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())"
calib3d,int
calib3d,"cv::recoverPose (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, OutputArray E, OutputArray R, OutputArray t, int method=cv::RANSAC, double prob=0.999, double threshold=1.0, InputOutputArray mask=noArray())"
calib3d,"Recovers the relative camera rotation and the translation from corresponding points in two images from two different cameras, using cheirality check. Returns the number of inliers that pass the check."
calib3d,float
calib3d,"cv::rectify3Collinear (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)"
calib3d,"computes the rectification transformations for 3-head camera, where all the heads are on the same line."
calib3d,void
calib3d,"cv::reprojectImageTo3D (InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)"
calib3d,Reprojects a disparity image to 3D space.
calib3d,void
calib3d,"cv::Rodrigues (InputArray src, OutputArray dst, OutputArray jacobian=noArray())"
calib3d,Converts a rotation matrix to a rotation vector or vice versa.
calib3d,Vec3d
calib3d,"cv::RQDecomp3x3 (InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())"
calib3d,Computes an RQ decomposition of 3x3 matrices.
calib3d,double
calib3d,"cv::sampsonDistance (InputArray pt1, InputArray pt2, InputArray F)"
calib3d,Calculates the Sampson Distance between two points.
calib3d,int
calib3d,"cv::solveP3P (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)"
calib3d,Finds an object pose from 3 3D-2D point correspondences.
calib3d,bool
calib3d,"cv::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)"
calib3d,Finds an object pose from 3D-2D point correspondences.
calib3d,bool
calib3d,"cv::fisheye::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))"
calib3d,Finds an object pose from 3D-2D point correspondences for fisheye camera moodel.
calib3d,int
calib3d,"cv::solvePnPGeneric (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())"
calib3d,Finds an object pose from 3D-2D point correspondences.
calib3d,bool
calib3d,"cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)"
calib3d,Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.
calib3d,bool
calib3d,"cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &params=UsacParams())"
calib3d,void
calib3d,"cv::solvePnPRefineLM (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))"
calib3d,Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
calib3d,void
calib3d,"cv::solvePnPRefineVVS (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)"
calib3d,Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
calib3d,double
calib3d,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
calib3d,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
calib3d,double
calib3d,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
calib3d,Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.
calib3d,double
calib3d,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
calib3d,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
calib3d,double
calib3d,"cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))"
calib3d,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
calib3d,double
calib3d,"cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))"
calib3d,Performs stereo calibration.
calib3d,void
calib3d,"cv::stereoRectify (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)"
calib3d,Computes rectification transforms for each head of a calibrated stereo camera.
calib3d,void
calib3d,"cv::fisheye::stereoRectify (InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &newImageSize=Size(), double balance=0.0, double fov_scale=1.0)"
calib3d,Stereo rectification for fisheye camera model.
calib3d,bool
calib3d,"cv::stereoRectifyUncalibrated (InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)"
calib3d,Computes a rectification transform for an uncalibrated stereo camera.
calib3d,void
calib3d,"cv::triangulatePoints (InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)"
calib3d,This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.
calib3d,void
calib3d,"cv::undistort (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())"
calib3d,Transforms an image to compensate for lens distortion.
calib3d,void
calib3d,"cv::fisheye::undistortImage (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew=cv::noArray(), const Size &new_size=Size())"
calib3d,Transforms an image to compensate for fisheye lens distortion.
calib3d,void
calib3d,"cv::undistortImagePoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, TermCriteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 0.01))"
calib3d,Compute undistorted image points position.
calib3d,void
calib3d,"cv::fisheye::undistortPoints (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray R=noArray(), InputArray P=noArray(), TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))"
calib3d,Undistorts 2D points using fisheye model.
calib3d,void
calib3d,"cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)"
calib3d,void
calib3d,"cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())"
calib3d,Computes the ideal point coordinates from the observed point coordinates.
calib3d,void
calib3d,"cv::validateDisparity (InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)"
calib3d,"validates disparity using the left-right check. The matrix ""cost"" should be computed by the stereo correspondence algorithm"
calib3d,"The functions in this section use a so-called pinhole camera model. The view of a scene is obtained by projecting a scene's 3D point \(P_w\) into the image plane using a perspective transformation which forms the corresponding pixel \(p\). Both \(P_w\) and \(p\) are represented in homogeneous coordinates, i.e. as 3D and 2D homogeneous vector respectively. You will find a brief introduction to projective geometry, homogeneous vectors and homogeneous transformations at the end of this section's introduction. For more succinct notation, we often drop the 'homogeneous' and say vector instead of homogeneous vector."
calib3d,The distortion-free projective transformation given by a pinhole camera model is shown below.
calib3d,"\[s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w,\]"
calib3d,"where \(P_w\) is a 3D point expressed with respect to the world coordinate system, \(p\) is a 2D pixel in the image plane, \(A\) is the camera intrinsic matrix, \(R\) and \(t\) are the rotation and translation that describe the change of coordinates from world to camera coordinate systems (or camera frame) and \(s\) is the projective transformation's arbitrary scaling and not part of the camera model."
calib3d,"The camera intrinsic matrix \(A\) (notation used as in [319] and also generally notated as \(K\)) projects 3D points given in the camera coordinate system to 2D pixel coordinates, i.e."
calib3d,\[p = A P_c.\]
calib3d,"The camera intrinsic matrix \(A\) is composed of the focal lengths \(f_x\) and \(f_y\), which are expressed in pixel units, and the principal point \((c_x, c_y)\), that is usually close to the image center:"
calib3d,"\[A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1},\]"
calib3d,and thus
calib3d,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \vecthree{X_c}{Y_c}{Z_c}.\]
calib3d,"The matrix of intrinsic parameters does not depend on the scene viewed. So, once estimated, it can be re-used as long as the focal length is fixed (in case of a zoom lens). Thus, if an image from the camera is scaled by a factor, all of these parameters need to be scaled (multiplied/divided, respectively) by the same factor."
calib3d,The joint rotation-translation matrix \([R|t]\) is the matrix product of a projective transformation and a homogeneous transformation. The 3-by-4 projective transformation maps 3D points represented in camera coordinates to 2D points in the image plane and represented in normalized camera coordinates \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\):
calib3d,\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix} \begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix}.\]
calib3d,"The homogeneous transformation is encoded by the extrinsic parameters \(R\) and \(t\) and represents the change of basis from world coordinate system \(w\) to the camera coordinate sytem \(c\). Thus, given the representation of the point \(P\) in world coordinates, \(P_w\), we obtain \(P\)'s representation in the camera coordinate system, \(P_c\), by"
calib3d,"\[P_c = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_w,\]"
calib3d,"This homogeneous transformation is composed out of \(R\), a 3-by-3 rotation matrix, and \(t\), a 3-by-1 translation vector:"
calib3d,"\[\begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix}, \]"
calib3d,and therefore
calib3d,\[\begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
calib3d,"Combining the projective transformation and the homogeneous transformation, we obtain the projective transformation that maps 3D points in world coordinates into 2D points in the image plane and in normalized camera coordinates:"
calib3d,"\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix},\]"
calib3d,"with \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\). Putting the equations for instrincs and extrinsics together, we can write out \(s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w\) as"
calib3d,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
calib3d,"If \(Z_c \ne 0\), the transformation above is equivalent to the following,"
calib3d,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x X_c/Z_c + c_x \\ f_y Y_c/Z_c + c_y \end{bmatrix}\]
calib3d,with
calib3d,\[\vecthree{X_c}{Y_c}{Z_c} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
calib3d,The following figure illustrates the pinhole camera model.
calib3d,"Real lenses usually have some distortion, mostly radial distortion, and slight tangential distortion. So, the above model is extended as:"
calib3d,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x'' + c_x \\ f_y y'' + c_y \end{bmatrix}\]
calib3d,where
calib3d,\[\begin{bmatrix} x'' \\ y'' \end{bmatrix} = \begin{bmatrix} x' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + 2 p_1 x' y' + p_2(r^2 + 2 x'^2) + s_1 r^2 + s_2 r^4 \\ y' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\ \end{bmatrix}\]
calib3d,with
calib3d,\[r^2 = x'^2 + y'^2\]
calib3d,and
calib3d,"\[\begin{bmatrix} x'\\ y' \end{bmatrix} = \begin{bmatrix} X_c/Z_c \\ Y_c/Z_c \end{bmatrix},\]"
calib3d,if \(Z_c \ne 0\).
calib3d,"The distortion parameters are the radial coefficients \(k_1\), \(k_2\), \(k_3\), \(k_4\), \(k_5\), and \(k_6\) , \(p_1\) and \(p_2\) are the tangential distortion coefficients, and \(s_1\), \(s_2\), \(s_3\), and \(s_4\), are the thin prism distortion coefficients. Higher-order coefficients are not considered in OpenCV."
calib3d,"The next figures show two common types of radial distortion: barrel distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically decreasing) and pincushion distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically increasing). Radial distortion is always monotonic for real lenses, and if the estimator produces a non-monotonic result, this should be considered a calibration failure. More generally, radial distortion must be monotonic and the distortion function must be bijective. A failed estimation result may look deceptively good near the image center but will work poorly in e.g. AR/SFM applications. The optimization method used in OpenCV camera calibration does not include these constraints as the framework does not support the required integer programming and polynomial inequalities. See issue #15992 for additional information."
calib3d,"In some cases, the image sensor may be tilted in order to focus an oblique plane in front of the camera (Scheimpflug principle). This can be useful for particle image velocimetry (PIV) or triangulation with a laser fan. The tilt causes a perspective distortion of \(x''\) and \(y''\). This distortion can be modeled in the following way, see e.g. [172]."
calib3d,"\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x''' + c_x \\ f_y y''' + c_y \end{bmatrix},\]"
calib3d,where
calib3d,"\[s\vecthree{x'''}{y'''}{1} = \vecthreethree{R_{33}(\tau_x, \tau_y)}{0}{-R_{13}(\tau_x, \tau_y)} {0}{R_{33}(\tau_x, \tau_y)}{-R_{23}(\tau_x, \tau_y)} {0}{0}{1} R(\tau_x, \tau_y) \vecthree{x''}{y''}{1}\]"
calib3d,"and the matrix \(R(\tau_x, \tau_y)\) is defined by two rotations with angular parameter \(\tau_x\) and \(\tau_y\), respectively,"
calib3d,"\[ R(\tau_x, \tau_y) = \vecthreethree{\cos(\tau_y)}{0}{-\sin(\tau_y)}{0}{1}{0}{\sin(\tau_y)}{0}{\cos(\tau_y)} \vecthreethree{1}{0}{0}{0}{\cos(\tau_x)}{\sin(\tau_x)}{0}{-\sin(\tau_x)}{\cos(\tau_x)} = \vecthreethree{\cos(\tau_y)}{\sin(\tau_y)\sin(\tau_x)}{-\sin(\tau_y)\cos(\tau_x)} {0}{\cos(\tau_x)}{\sin(\tau_x)} {\sin(\tau_y)}{-\cos(\tau_y)\sin(\tau_x)}{\cos(\tau_y)\cos(\tau_x)}. \]"
calib3d,In the functions below the coefficients are passed or returned as
calib3d,"\[(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])\]"
calib3d,"vector. That is, if the vector contains four elements, it means that \(k_3=0\) . The distortion coefficients do not depend on the scene viewed. Thus, they also belong to the intrinsic camera parameters. And they remain the same regardless of the captured image resolution. If, for example, a camera has been calibrated on images of 320 x 240 resolution, absolutely the same distortion coefficients can be used for 640 x 480 images from the same camera while \(f_x\), \(f_y\), \(c_x\), and \(c_y\) need to be scaled appropriately."
calib3d,The functions below use the above model to do the following:
calib3d,Project 3D points to the image plane given intrinsic and extrinsic parameters.
calib3d,"Compute extrinsic parameters given intrinsic parameters, a few 3D points, and their projections."
calib3d,Estimate intrinsic and extrinsic camera parameters from several views of a known calibration pattern (every view is described by several 3D-2D point correspondences).
calib3d,"Estimate the relative position and orientation of the stereo camera ""heads"" and compute the rectification* transformation that makes the camera optical axes parallel."
calib3d,"Homogeneous Coordinates Homogeneous Coordinates are a system of coordinates that are used in projective geometry. Their use allows to represent points at infinity by finite coordinates and simplifies formulas when compared to the cartesian counterparts, e.g. they have the advantage that affine transformations can be expressed as linear homogeneous transformation."
calib3d,One obtains the homogeneous vector \(P_h\) by appending a 1 along an n-dimensional cartesian vector \(P\) e.g. for a 3D cartesian vector the mapping \(P \rightarrow P_h\) is:
calib3d,\[\begin{bmatrix} X \\ Y \\ Z \end{bmatrix} \rightarrow \begin{bmatrix} X \\ Y \\ Z \\ 1 \end{bmatrix}.\]
calib3d,"For the inverse mapping \(P_h \rightarrow P\), one divides all elements of the homogeneous vector by its last element, e.g. for a 3D homogeneous vector one gets its 2D cartesian counterpart by:"
calib3d,"\[\begin{bmatrix} X \\ Y \\ W \end{bmatrix} \rightarrow \begin{bmatrix} X / W \\ Y / W \end{bmatrix},\]"
calib3d,if \(W \ne 0\).
calib3d,"Due to this mapping, all multiples \(k P_h\), for \(k \ne 0\), of a homogeneous point represent the same point \(P_h\). An intuitive understanding of this property is that under a projective transformation, all multiples of \(P_h\) are mapped to the same point. This is the physical observation one does for pinhole cameras, as all points along a ray through the camera's pinhole are projected to the same image point, e.g. all points along the red ray in the image of the pinhole camera model above would be mapped to the same image coordinate. This property is also the source for the scale ambiguity s in the equation of the pinhole camera model."
calib3d,"As mentioned, by using homogeneous coordinates we can express any change of basis parameterized by \(R\) and \(t\) as a linear transformation, e.g. for the change of basis from coordinate system 0 to coordinate system 1 becomes:"
calib3d,\[P_1 = R P_0 + t \rightarrow P_{h_1} = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_{h_0}.\]
calib3d,"Many functions in this module take a camera intrinsic matrix as an input parameter. Although all functions assume the same structure of this parameter, they may name it differently. The parameter's description, however, will be clear in that a camera intrinsic matrix with the structure shown above is required."
calib3d,A calibration sample for 3 cameras in a horizontal position can be found at opencv_source_code/samples/cpp/3calibration.cpp
calib3d,A calibration sample based on a sequence of images can be found at opencv_source_code/samples/cpp/calibration.cpp
calib3d,A calibration sample in order to do 3D reconstruction can be found at opencv_source_code/samples/cpp/build3dmodel.cpp
calib3d,A calibration example on stereo calibration can be found at opencv_source_code/samples/cpp/stereo_calib.cpp
calib3d,A calibration example on stereo matching can be found at opencv_source_code/samples/cpp/stereo_match.cpp
calib3d,(Python) A camera calibration sample can be found at opencv_source_code/samples/python/calibrate.py
calib3d,Classes
calib3d,struct
calib3d,cv::CirclesGridFinderParameters
calib3d,class
calib3d,cv::LMSolver
calib3d,class
calib3d,cv::StereoBM
calib3d,"Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. More..."
calib3d,class
calib3d,cv::StereoMatcher
calib3d,The base class for stereo correspondence algorithms. More...
calib3d,class
calib3d,cv::StereoSGBM
calib3d,The class implements the modified H. Hirschmuller algorithm [126] that differs from the original one as follows: More...
calib3d,struct
calib3d,cv::UsacParams
calib3d,Functions
calib3d,double
calib3d,"cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,double
calib3d,"cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
calib3d,double
calib3d,"cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,double
calib3d,"cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
calib3d,Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
calib3d,void
calib3d,"cv::calibrateHandEye (InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)"
calib3d,Computes Hand-Eye calibration: \(_{}^{g}\textrm{T}_c\).
calib3d,void
calib3d,"cv::calibrateRobotWorldHandEye (InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)"
calib3d,Computes Robot-World/Hand-Eye calibration: \(_{}^{w}\textrm{T}_b\) and \(_{}^{c}\textrm{T}_g\).
calib3d,void
calib3d,"cv::calibrationMatrixValues (InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &fovx, double &fovy, double &focalLength, Point2d &principalPoint, double &aspectRatio)"
calib3d,Computes useful camera characteristics from the camera intrinsic matrix.
calib3d,bool
calib3d,"cv::checkChessboard (InputArray img, Size size)"
calib3d,void
calib3d,"cv::composeRT (InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())"
calib3d,Combines two rotation-and-shift transformations.
calib3d,void
calib3d,"cv::computeCorrespondEpilines (InputArray points, int whichImage, InputArray F, OutputArray lines)"
calib3d,"For points in an image of a stereo pair, computes the corresponding epilines in the other image."
calib3d,void
calib3d,"cv::convertPointsFromHomogeneous (InputArray src, OutputArray dst)"
calib3d,Converts points from homogeneous to Euclidean space.
calib3d,void
calib3d,"cv::convertPointsHomogeneous (InputArray src, OutputArray dst)"
calib3d,Converts points to/from homogeneous coordinates.
calib3d,void
calib3d,"cv::convertPointsToHomogeneous (InputArray src, OutputArray dst)"
calib3d,Converts points from Euclidean to homogeneous space.
calib3d,void
calib3d,"cv::correctMatches (InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)"
calib3d,Refines coordinates of corresponding points.
calib3d,void
calib3d,"cv::decomposeEssentialMat (InputArray E, OutputArray R1, OutputArray R2, OutputArray t)"
calib3d,Decompose an essential matrix to possible rotations and translation.
calib3d,int
calib3d,"cv::decomposeHomographyMat (InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)"
calib3d,"Decompose a homography matrix to rotation(s), translation(s) and plane normal(s)."
calib3d,void
calib3d,"cv::decomposeProjectionMatrix (InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())"
calib3d,Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.
calib3d,void
calib3d,"cv::drawChessboardCorners (InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)"
calib3d,Renders the detected chessboard corners.
calib3d,void
calib3d,"cv::drawFrameAxes (InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)"
calib3d,Draw axes of the world/object coordinate system from pose estimation.
calib3d,cv::Mat
calib3d,"cv::estimateAffine2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)"
calib3d,Computes an optimal affine transformation between two 2D point sets.
calib3d,cv::Mat
calib3d,"cv::estimateAffine2D (InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &params)"
calib3d,cv::Mat
calib3d,"cv::estimateAffine3D (InputArray src, InputArray dst, double *scale=nullptr, bool force_rotation=true)"
calib3d,Computes an optimal affine transformation between two 3D point sets.
calib3d,int
calib3d,"cv::estimateAffine3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)"
calib3d,Computes an optimal affine transformation between two 3D point sets.
calib3d,cv::Mat
calib3d,"cv::estimateAffinePartial2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)"
calib3d,Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.
calib3d,Scalar
calib3d,"cv::estimateChessboardSharpness (InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())"
calib3d,Estimates the sharpness of a detected chessboard.
calib3d,int
calib3d,"cv::estimateTranslation3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)"
calib3d,Computes an optimal translation between two 3D point sets.
calib3d,void
calib3d,"cv::filterHomographyDecompByVisibleRefpoints (InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())"
calib3d,Filters homography decompositions based on additional information.
calib3d,void
calib3d,"cv::filterSpeckles (InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())"
calib3d,Filters off small noise blobs (speckles) in the disparity map.
calib3d,bool
calib3d,"cv::find4QuadCornerSubpix (InputArray img, InputOutputArray corners, Size region_size)"
calib3d,finds subpixel-accurate positions of the chessboard corners
calib3d,bool
calib3d,"cv::findChessboardCorners (InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)"
calib3d,Finds the positions of internal corners of the chessboard.
calib3d,bool
calib3d,"cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)"
calib3d,Finds the positions of internal corners of the chessboard using a sector based approach.
calib3d,bool
calib3d,"cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags=0)"
calib3d,bool
calib3d,"cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr< FeatureDetector > &blobDetector, const CirclesGridFinderParameters &parameters)"
calib3d,Finds centers in the grid of circles.
calib3d,bool
calib3d,"cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr< FeatureDetector > &blobDetector=SimpleBlobDetector::create())"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, double focal, Point2d pp, int method, double prob, double threshold, OutputArray mask)"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method, double prob, double threshold, OutputArray mask)"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())"
calib3d,Calculates an essential matrix from the corresponding points in two images.
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &params)"
calib3d,Mat
calib3d,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())"
calib3d,Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())"
calib3d,Calculates a fundamental matrix from the corresponding points in two images.
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())"
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, const UsacParams &params)"
calib3d,Mat
calib3d,"cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)"
calib3d,Mat
calib3d,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)"
calib3d,Finds a perspective transformation between two planes.
calib3d,Mat
calib3d,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &params)"
calib3d,Mat
calib3d,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)"
calib3d,Mat
calib3d,"cv::getDefaultNewCameraMatrix (InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)"
calib3d,Returns the default new camera matrix.
calib3d,Mat
calib3d,"cv::getOptimalNewCameraMatrix (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)"
calib3d,Returns the new camera intrinsic matrix based on the free scaling parameter.
calib3d,Rect
calib3d,"cv::getValidDisparityROI (Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)"
calib3d,computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by stereoRectify)
calib3d,Mat
calib3d,"cv::initCameraMatrix2D (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)"
calib3d,Finds an initial camera intrinsic matrix from 3D-2D point correspondences.
calib3d,void
calib3d,"cv::initInverseRectificationMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, const Size &size, int m1type, OutputArray map1, OutputArray map2)"
calib3d,"Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs."
calib3d,void
calib3d,"cv::initUndistortRectifyMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)"
calib3d,Computes the undistortion and rectification transformation map.
calib3d,float
calib3d,"cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)"
calib3d,initializes maps for remap for wide-angle
calib3d,static float
calib3d,"cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)"
calib3d,void
calib3d,"cv::matMulDeriv (InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)"
calib3d,Computes partial derivatives of the matrix product for each multiplied matrix.
calib3d,void
calib3d,"cv::projectPoints (InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)"
calib3d,Projects 3D points to an image plane.
calib3d,int
calib3d,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())"
calib3d,int
calib3d,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())"
calib3d,"Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using chirality check. Returns the number of inliers that pass the check."
calib3d,int
calib3d,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())"
calib3d,int
calib3d,"cv::recoverPose (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, OutputArray E, OutputArray R, OutputArray t, int method=cv::RANSAC, double prob=0.999, double threshold=1.0, InputOutputArray mask=noArray())"
calib3d,"Recovers the relative camera rotation and the translation from corresponding points in two images from two different cameras, using cheirality check. Returns the number of inliers that pass the check."
calib3d,float
calib3d,"cv::rectify3Collinear (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)"
calib3d,"computes the rectification transformations for 3-head camera, where all the heads are on the same line."
calib3d,void
calib3d,"cv::reprojectImageTo3D (InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)"
calib3d,Reprojects a disparity image to 3D space.
calib3d,void
calib3d,"cv::Rodrigues (InputArray src, OutputArray dst, OutputArray jacobian=noArray())"
calib3d,Converts a rotation matrix to a rotation vector or vice versa.
calib3d,Vec3d
calib3d,"cv::RQDecomp3x3 (InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())"
calib3d,Computes an RQ decomposition of 3x3 matrices.
calib3d,double
calib3d,"cv::sampsonDistance (InputArray pt1, InputArray pt2, InputArray F)"
calib3d,Calculates the Sampson Distance between two points.
calib3d,int
calib3d,"cv::solveP3P (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)"
calib3d,Finds an object pose from 3 3D-2D point correspondences.
calib3d,bool
calib3d,"cv::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)"
calib3d,Finds an object pose from 3D-2D point correspondences.
calib3d,int
calib3d,"cv::solvePnPGeneric (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())"
calib3d,Finds an object pose from 3D-2D point correspondences.
calib3d,bool
calib3d,"cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)"
calib3d,Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.
calib3d,bool
calib3d,"cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &params=UsacParams())"
calib3d,void
calib3d,"cv::solvePnPRefineLM (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))"
calib3d,Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
calib3d,void
calib3d,"cv::solvePnPRefineVVS (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)"
calib3d,Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
calib3d,double
calib3d,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
calib3d,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
calib3d,double
calib3d,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
calib3d,Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.
calib3d,double
calib3d,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
calib3d,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
calib3d,void
calib3d,"cv::stereoRectify (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)"
calib3d,Computes rectification transforms for each head of a calibrated stereo camera.
calib3d,bool
calib3d,"cv::stereoRectifyUncalibrated (InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)"
calib3d,Computes a rectification transform for an uncalibrated stereo camera.
calib3d,void
calib3d,"cv::triangulatePoints (InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)"
calib3d,This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.
calib3d,void
calib3d,"cv::undistort (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())"
calib3d,Transforms an image to compensate for lens distortion.
calib3d,void
calib3d,"cv::undistortImagePoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, TermCriteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 0.01))"
calib3d,Compute undistorted image points position.
calib3d,void
calib3d,"cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)"
calib3d,void
calib3d,"cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())"
calib3d,Computes the ideal point coordinates from the observed point coordinates.
calib3d,void
calib3d,"cv::validateDisparity (InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)"
calib3d,"validates disparity using the left-right check. The matrix ""cost"" should be computed by the stereo correspondence algorithm"
calib3d,Definitions: Let P be a point in 3D of coordinates X in the world reference frame (stored in the matrix X) The coordinate vector of P in the camera reference frame is:
calib3d,\[Xc = R X + T\]
calib3d,"where R is the rotation matrix corresponding to the rotation vector om: R = rodrigues(om); call x, y and z the 3 coordinates of Xc:"
calib3d,\[\begin{array}{l} x = Xc_1 \\ y = Xc_2 \\ z = Xc_3 \end{array} \]
calib3d,The pinhole projection coordinates of P is [a; b] where
calib3d,\[\begin{array}{l} a = x / z \ and \ b = y / z \\ r^2 = a^2 + b^2 \\ \theta = atan(r) \end{array} \]
calib3d,Fisheye distortion:
calib3d,\[\theta_d = \theta (1 + k_1 \theta^2 + k_2 \theta^4 + k_3 \theta^6 + k_4 \theta^8)\]
calib3d,The distorted point coordinates are [x'; y'] where
calib3d,\[\begin{array}{l} x' = (\theta_d / r) a \\ y' = (\theta_d / r) b \end{array} \]
calib3d,"Finally, conversion into pixel coordinates: The final pixel coordinates vector [u; v] where:"
calib3d,\[\begin{array}{l} u = f_x (x' + \alpha y') + c_x \\ v = f_y y' + c_y \end{array} \]
calib3d,Summary: Generic camera model [143] with perspective projection and without distortion correction
calib3d,Namespaces
calib3d,namespace
calib3d,cv::fisheye
calib3d,The methods in this namespace use a so-called fisheye camera model.
calib3d,Functions
calib3d,double
calib3d,"cv::fisheye::calibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size &image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))"
calib3d,Performs camera calibration.
calib3d,void
calib3d,"cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray K, InputArray D, double alpha=0)"
calib3d,Distorts 2D points using fisheye model.
calib3d,void
calib3d,"cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray Kundistorted, InputArray K, InputArray D, double alpha=0)"
calib3d,void
calib3d,"cv::fisheye::estimateNewCameraMatrixForUndistortRectify (InputArray K, InputArray D, const Size &image_size, InputArray R, OutputArray P, double balance=0.0, const Size &new_size=Size(), double fov_scale=1.0)"
calib3d,Estimates new camera intrinsic matrix for undistortion or rectification.
calib3d,void
calib3d,"cv::fisheye::initUndistortRectifyMap (InputArray K, InputArray D, InputArray R, InputArray P, const cv::Size &size, int m1type, OutputArray map1, OutputArray map2)"
calib3d,"Computes undistortion and rectification maps for image transform by remap. If D is empty zero distortion is used, if R or P is empty identity matrixes are used."
calib3d,void
calib3d,"cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, const Affine3d &affine, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())"
calib3d,Projects points using fisheye model.
calib3d,void
calib3d,"cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())"
calib3d,bool
calib3d,"cv::fisheye::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))"
calib3d,Finds an object pose from 3D-2D point correspondences for fisheye camera moodel.
calib3d,double
calib3d,"cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))"
calib3d,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
calib3d,double
calib3d,"cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))"
calib3d,Performs stereo calibration.
calib3d,void
calib3d,"cv::fisheye::stereoRectify (InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &newImageSize=Size(), double balance=0.0, double fov_scale=1.0)"
calib3d,Stereo rectification for fisheye camera model.
calib3d,void
calib3d,"cv::fisheye::undistortImage (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew=cv::noArray(), const Size &new_size=Size())"
calib3d,Transforms an image to compensate for fisheye lens distortion.
calib3d,void
calib3d,"cv::fisheye::undistortPoints (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray R=noArray(), InputArray P=noArray(), TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))"
calib3d,Undistorts 2D points using fisheye model.
core,Classes
core,class
core,cv::cuda::CannyEdgeDetector
core,Base class for Canny Edge Detector. : More...
core,class
core,cv::cuda::TemplateMatching
core,Base class for Template Matching. : More...
core,Functions
core,void
core,"cv::cuda::bilateralFilter (InputArray src, OutputArray dst, int kernel_size, float sigma_color, float sigma_spatial, int borderMode=BORDER_DEFAULT, Stream &stream=Stream::Null())"
core,Performs bilateral filtering of passed image.
core,void
core,"cv::cuda::blendLinear (InputArray img1, InputArray img2, InputArray weights1, InputArray weights2, OutputArray result, Stream &stream=Stream::Null())"
core,Performs linear blending of two images.
core,void
core,"cv::cuda::connectedComponents (InputArray image, OutputArray labels, int connectivity, int ltype, cv::cuda::ConnectedComponentsAlgorithmsTypes ccltype)"
core,Computes the Connected Components Labeled image of a binary image.
core,void
core,"cv::cuda::connectedComponents (InputArray image, OutputArray labels, int connectivity=8, int ltype=CV_32S)"
core,Ptr< CannyEdgeDetector >
core,"cv::cuda::createCannyEdgeDetector (double low_thresh, double high_thresh, int apperture_size=3, bool L2gradient=false)"
core,Creates implementation for cuda::CannyEdgeDetector .
core,Ptr< TemplateMatching >
core,"cv::cuda::createTemplateMatching (int srcType, int method, Size user_block_size=Size())"
core,Creates implementation for cuda::TemplateMatching .
core,void
core,"cv::cuda::meanShiftFiltering (InputArray src, OutputArray dst, int sp, int sr, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &stream=Stream::Null())"
core,Performs mean-shift filtering for each point of the source image.
core,void
core,"cv::cuda::meanShiftProc (InputArray src, OutputArray dstr, OutputArray dstsp, int sp, int sr, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &stream=Stream::Null())"
core,Performs a mean-shift procedure and stores information about processed points (their colors and positions) in two images.
core,void
core,"cv::cuda::meanShiftSegmentation (InputArray src, OutputArray dst, int sp, int sr, int minsize, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &stream=Stream::Null())"
core,Performs a mean-shift segmentation of the source image and eliminates small segments.
core,Classes
core,struct
core,cv::cudacodec::EncodeQp
core,class
core,cv::cudacodec::EncoderCallback
core,Interface for encoder callbacks. More...
core,struct
core,cv::cudacodec::EncoderParams
core,Different parameters for CUDA video encoder. More...
core,struct
core,cv::cudacodec::FormatInfo
core,Struct providing information about video file format. : More...
core,class
core,cv::cudacodec::RawVideoSource
core,Interface for video demultiplexing. : More...
core,class
core,cv::cudacodec::VideoReader
core,"Video reader interface, see createVideoReader(). More..."
core,struct
core,cv::cudacodec::VideoReaderInitParams
core,VideoReader initialization parameters. More...
core,class
core,cv::cudacodec::VideoWriter
core,"Video writer interface, see createVideoWriter(). More..."
core,Functions
core,Ptr< VideoReader >
core,"cv::cudacodec::createVideoReader (const Ptr< RawVideoSource > &source, const VideoReaderInitParams params=VideoReaderInitParams())"
core,Ptr< VideoReader >
core,"cv::cudacodec::createVideoReader (const String &filename, const std::vector< int > &sourceParams={}, const VideoReaderInitParams params=VideoReaderInitParams())"
core,Creates video reader.
core,Ptr< cudacodec::VideoWriter >
core,"cv::cudacodec::createVideoWriter (const String &fileName, const Size frameSize, const Codec codec, const double fps, const ColorFormat colorFormat, const EncoderParams &params, Ptr< EncoderCallback > encoderCallback=0, const cuda::Stream &stream=cuda::Stream::Null())"
core,Creates video writer.
core,Ptr< cudacodec::VideoWriter >
core,"cv::cudacodec::createVideoWriter (const String &fileName, const Size frameSize, const Codec codec=Codec::H264, const double fps=25.0, const ColorFormat colorFormat=ColorFormat::BGR, Ptr< EncoderCallback > encoderCallback=0, const cuda::Stream &stream=cuda::Stream::Null())"
core,Creates video writer.
core,void
core,"cv::cudacodec::MapHist (const cuda::GpuMat &hist, Mat &histFull)"
core,Utility function demonstrating how to map the luma histogram when FormatInfo::videoFullRangeFlag == false.
core,bool
core,"cv::cudacodec::operator== (const EncoderParams &lhs, const EncoderParams &rhs)"
core,Namespaces
core,namespace
core,cv::traits
core,Functions
core,template<typename T >
core,Quat< T >
core,cv::acos (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::acosh (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::asin (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::asinh (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::atan (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::atanh (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::cos (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::cosh (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,"cv::crossProduct (const Quat< T > &p, const Quat< T > &q)"
core,template<typename T >
core,Quat< T >
core,cv::exp (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,"cv::inv (const Quat< T > &q, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)"
core,template<typename T >
core,Quat< T >
core,"cv::log (const Quat< T > &q, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)"
core,"template<typename T , typename V >"
core,static V
core,"cv::operator* (const Affine3< T > &affine, const V &vector)"
core,"V is a 3-element vector with member fields x, y and z."
core,template<typename T >
core,static Affine3< T >
core,"cv::operator* (const Affine3< T > &affine1, const Affine3< T > &affine2)"
core,static Vec3d
core,"cv::operator* (const Affine3d &affine, const Vec3d &vector)"
core,static Vec3f
core,"cv::operator* (const Affine3f &affine, const Vec3f &vector)"
core,template<typename T >
core,Quat< T >
core,"cv::operator* (const Quat< T > &, const T)"
core,template<typename T >
core,Quat< T >
core,"cv::operator* (const T, const Quat< T > &)"
core,template<typename _Tp >
core,std::ostream &
core,"cv::operator<< (std::ostream &, const DualQuat< _Tp > &)"
core,template<typename _Tp >
core,std::ostream &
core,"cv::operator<< (std::ostream &, const Quat< _Tp > &)"
core,template<typename S >
core,std::ostream &
core,"cv::operator<< (std::ostream &, const Quat< S > &)"
core,template<typename T >
core,Quat< T >
core,"cv::power (const Quat< T > &q, const Quat< T > &p, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)"
core,template<typename T >
core,Quat< T >
core,"cv::power (const Quat< T > &q, const T x, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)"
core,template<typename T >
core,Quat< T >
core,cv::sin (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::sinh (const Quat< T > &q)
core,template<typename S >
core,Quat< S >
core,"cv::sqrt (const Quat< S > &q, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)"
core,void
core,"cv::swap (Mat &a, Mat &b)"
core,Swaps two matrices.
core,void
core,"cv::swap (UMat &a, UMat &b)"
core,template<typename T >
core,Quat< T >
core,cv::tan (const Quat< T > &q)
core,template<typename T >
core,Quat< T >
core,cv::tanh (const Quat< T > &q)
core,This module includes photo processing algorithms
core,This section describes 3D visualization window as well as classes and methods that are used to interact with it.
core,"3D visualization window (see Viz3d) is used to display widgets (see Widget), and it provides several methods to interact with scene and widgets."
core,Classes
core,class
core,cv::viz::Camera
core,This class wraps intrinsic parameters of a camera. More...
core,class
core,cv::viz::Color
core,This class represents color in BGR order. More...
core,class
core,cv::viz::KeyboardEvent
core,This class represents a keyboard event. More...
core,class
core,cv::viz::Mesh
core,"This class wraps mesh attributes, and it can load a mesh from a ply file. : More..."
core,class
core,cv::viz::MouseEvent
core,This class represents a mouse event. More...
core,class
core,cv::viz::Viz3d
core,The Viz3d class represents a 3D visualizer window. This class is implicitly shared. More...
core,"This figure illustrates the stitching module pipeline implemented in the Stitcher class. Using that class it's possible to configure/remove some steps, i.e. adjust the stitching pipeline according to the particular needs. All building blocks from the pipeline are available in the detail namespace, one can combine and use them separately."
core,The implemented stitching pipeline is very similar to the one proposed in [41] .
core,Classes
core,class
core,cv::AffineTransformer
core,Wrapper class for the OpenCV Affine Transformation algorithm. : More...
core,class
core,cv::ChiHistogramCostExtractor
core,An Chi based cost extraction. : More...
core,class
core,cv::EMDHistogramCostExtractor
core,An EMD based cost extraction. : More...
core,class
core,cv::EMDL1HistogramCostExtractor
core,An EMD-L1 based cost extraction. : More...
core,class
core,cv::HausdorffDistanceExtractor
core,A simple Hausdorff distance measure between shapes defined by contours. More...
core,class
core,cv::HistogramCostExtractor
core,Abstract base class for histogram cost algorithms. More...
core,class
core,cv::NormHistogramCostExtractor
core,A norm based cost extraction. : More...
core,class
core,cv::ShapeContextDistanceExtractor
core,Implementation of the Shape Context descriptor and matching algorithm. More...
core,class
core,cv::ShapeDistanceExtractor
core,Abstract base class for shape distance algorithms. More...
core,class
core,cv::ShapeTransformer
core,Abstract base class for shape transformation algorithms. More...
core,class
core,cv::ThinPlateSplineShapeTransformer
core,Definition of the transformation. More...
core,"Structured light is considered one of the most effective techniques to acquire 3D models. This technique is based on projecting a light pattern and capturing the illuminated scene from one or more points of view. Since the pattern is coded, correspondences between image points and points of the projected pattern can be quickly found and 3D information easily retrieved."
core,"One of the most commonly exploited coding strategies is based on trmatime-multiplexing. In this case, a set of patterns are successively projected onto the measuring surface. The codeword for a given pixel is usually formed by the sequence of illuminance values for that pixel across the projected patterns. Thus, the codification is called temporal because the bits of the codewords are multiplexed in time [233] ."
core,"In this module a time-multiplexing coding strategy based on Gray encoding is implemented following the (stereo) approach described in 3DUNDERWORLD algorithm [124] . For more details, see Structured Light tutorials."
core,Classes
core,class
core,cv::structured_light::GrayCodePattern
core,"Class implementing the Gray-code pattern, based on [124]. More..."
core,class
core,cv::structured_light::SinusoidalPattern
core,"Class implementing Fourier transform profilometry (FTP) , phase-shifting profilometry (PSP) and Fourier-assisted phase-shifting profilometry (FAPS) based on [62]. More..."
core,class
core,cv::structured_light::StructuredLightPattern
core,Abstract base class for generating and decoding structured light patterns. More...
core,ovis is a simplified rendering wrapper around ogre3d. The Ogre terminology is used in the API and Ogre Script is assumed to be used for advanced customization.
core,"Besides the API you see here, there are several environment variables that control the behavior of ovis. They are documented in createWindow."
core,Functions
core,void
core,cv::ovis::addResourceLocation (const String &path)
core,void
core,"cv::ovis::createGridMesh (const String &name, const Size2f &size, const Size &segments=Size(1, 1))"
core,void
core,"cv::ovis::createPlaneMesh (const String &name, const Size2f &size, InputArray image=noArray())"
core,void
core,"cv::ovis::createPointCloudMesh (const String &name, InputArray vertices, InputArray colors=noArray())"
core,void
core,"cv::ovis::createTriangleMesh (const String &name, InputArray vertices, InputArray normals=noArray(), InputArray indices=noArray())"
core,Ptr< WindowScene >
core,"cv::ovis::createWindow (const String &title, const Size &size, int flags=SCENE_INTERACTIVE|SCENE_AA)"
core,void
core,"cv::ovis::setMaterialProperty (const String &name, const String &prop, const Scalar &value)"
core,void
core,"cv::ovis::setMaterialProperty (const String &name, int prop, const Scalar &value)"
core,void
core,"cv::ovis::setMaterialProperty (const String &name, int prop, const String &value)"
core,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
core,void
core,"cv::ovis::setMaterialProperty (const String &name, int prop, InputArray value)"
core,void
core,"cv::ovis::updateTexture (const String &name, InputArray image)"
core,int
core,cv::ovis::waitKey (int delay=0)
core,This module includes signal processing algorithms.
core,Functions
core,void
core,"cv::signal::resampleSignal (InputArray inputSignal, OutputArray outSignal, const int inFreq, const int outFreq)"
core,Signal resampling.
core,ICP point-to-plane odometry algorithm
core,Classes
core,class
core,cv::linemod::ColorGradient
core,Modality that computes quantized gradient orientations from a color image. More...
core,class
core,cv::rgbd::DepthCleaner
core,class
core,cv::linemod::DepthNormal
core,Modality that computes quantized surface normals from a dense depth map. More...
core,class
core,cv::linemod::Detector
core,Object detector using the LINE template matching algorithm with any set of modalities. More...
core,class
core,cv::rgbd::FastICPOdometry
core,struct
core,cv::linemod::Feature
core,Discriminant feature described by its location and label. More...
core,class
core,cv::rgbd::ICPOdometry
core,struct
core,cv::linemod::Match
core,Represents a successful template match. More...
core,class
core,cv::linemod::Modality
core,Interface for modalities that plug into the LINE template matching representation. More...
core,class
core,cv::rgbd::Odometry
core,struct
core,cv::rgbd::OdometryFrame
core,class
core,cv::linemod::QuantizedPyramid
core,Represents a modality operating over an image pyramid. More...
core,struct
core,cv::rgbd::RgbdFrame
core,class
core,cv::rgbd::RgbdICPOdometry
core,class
core,cv::rgbd::RgbdNormals
core,class
core,cv::rgbd::RgbdOdometry
core,class
core,cv::rgbd::RgbdPlane
core,struct
core,cv::linemod::Template
core,Classes
core,class
core,cv::bgsegm::BackgroundSubtractorCNT
core,Background subtraction based on counting. More...
core,class
core,cv::bgsegm::BackgroundSubtractorGMG
core,Background Subtractor module based on the algorithm given in [106] . More...
core,class
core,cv::bgsegm::BackgroundSubtractorGSOC
core,"Implementation of the different yet better algorithm which is called GSOC, as it was implemented during GSOC and was not originated from any paper. More..."
core,class
core,cv::bgsegm::BackgroundSubtractorLSBP
core,Background Subtraction using Local SVD Binary Pattern. More details about the algorithm can be found at [115]. More...
core,class
core,cv::bgsegm::BackgroundSubtractorLSBPDesc
core,This is for calculation of the LSBP descriptors. More...
core,class
core,cv::bgsegm::BackgroundSubtractorMOG
core,Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More...
core,class
core,cv::bgsegm::SyntheticSequenceGenerator
core,Synthetic frame sequence generator for testing background subtraction algorithms. More...
core,Functions
core,Ptr< BackgroundSubtractorCNT >
core,"cv::bgsegm::createBackgroundSubtractorCNT (int minPixelStability=15, bool useHistory=true, int maxPixelStability=15 *60, bool isParallel=true)"
core,Creates a CNT Background Subtractor.
core,Ptr< BackgroundSubtractorGMG >
core,"cv::bgsegm::createBackgroundSubtractorGMG (int initializationFrames=120, double decisionThreshold=0.8)"
core,Creates a GMG Background Subtractor.
core,Ptr< BackgroundSubtractorGSOC >
core,"cv::bgsegm::createBackgroundSubtractorGSOC (int mc=LSBP_CAMERA_MOTION_COMPENSATION_NONE, int nSamples=20, float replaceRate=0.003f, float propagationRate=0.01f, int hitsThreshold=32, float alpha=0.01f, float beta=0.0022f, float blinkingSupressionDecay=0.1f, float blinkingSupressionMultiplier=0.1f, float noiseRemovalThresholdFacBG=0.0004f, float noiseRemovalThresholdFacFG=0.0008f)"
core,Creates an instance of BackgroundSubtractorGSOC algorithm.
core,Ptr< BackgroundSubtractorLSBP >
core,"cv::bgsegm::createBackgroundSubtractorLSBP (int mc=LSBP_CAMERA_MOTION_COMPENSATION_NONE, int nSamples=20, int LSBPRadius=16, float Tlower=2.0f, float Tupper=32.0f, float Tinc=1.0f, float Tdec=0.05f, float Rscale=10.0f, float Rincdec=0.005f, float noiseRemovalThresholdFacBG=0.0004f, float noiseRemovalThresholdFacFG=0.0008f, int LSBPthreshold=8, int minCount=2)"
core,Creates an instance of BackgroundSubtractorLSBP algorithm.
core,Ptr< BackgroundSubtractorMOG >
core,"cv::bgsegm::createBackgroundSubtractorMOG (int history=200, int nmixtures=5, double backgroundRatio=0.7, double noiseSigma=0)"
core,Creates mixture-of-gaussian background subtractor.
core,Ptr< SyntheticSequenceGenerator >
core,"cv::bgsegm::createSyntheticSequenceGenerator (InputArray background, InputArray object, double amplitude=2.0, double wavelength=20.0, double wavespeed=0.2, double objspeed=6.0)"
core,Creates an instance of SyntheticSequenceGenerator.
core,Dense optical flow algorithms compute motion for each point:
core,cv::optflow::calcOpticalFlowSF
core,cv::optflow::createOptFlow_DeepFlow
core,Motion templates is alternative technique for detecting motion and computing its direction. See samples/motempl.py.
core,cv::motempl::updateMotionHistory
core,cv::motempl::calcMotionGradient
core,cv::motempl::calcGlobalOrientation
core,cv::motempl::segmentMotion
core,"Functions reading and writing .flo files in ""Middlebury"" format, see: http://vision.middlebury.edu/flow/code/flow-code/README.txt"
core,cv::optflow::readOpticalFlow
core,cv::optflow::writeOpticalFlow
core,Classes
core,class
core,cv::optflow::DenseRLOFOpticalFlow
core,Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme. More...
core,class
core,cv::optflow::DualTVL1OpticalFlow
core,"""Dual TV L1"" Optical Flow Algorithm. More..."
core,class
core,cv::optflow::GPCDetails
core,class
core,cv::optflow::GPCForest< T >
core,struct
core,cv::optflow::GPCMatchingParams
core,Class encapsulating matching parameters. More...
core,struct
core,cv::optflow::GPCPatchDescriptor
core,struct
core,cv::optflow::GPCPatchSample
core,struct
core,cv::optflow::GPCTrainingParams
core,Class encapsulating training parameters. More...
core,class
core,cv::optflow::GPCTrainingSamples
core,Class encapsulating training samples. More...
core,class
core,cv::optflow::GPCTree
core,Class for individual tree. More...
core,class
core,cv::optflow::OpticalFlowPCAFlow
core,PCAFlow algorithm. More...
core,class
core,cv::optflow::PCAPrior
core,"This class can be used for imposing a learned prior on the resulting optical flow. Solution will be regularized according to this prior. You need to generate appropriate prior file with ""learn_prior.py"" script beforehand. More..."
core,class
core,cv::optflow::RLOFOpticalFlowParameter
core,This is used store and set up the parameters of the robust local optical flow (RLOF) algoritm. More...
core,class
core,cv::optflow::SparseRLOFOpticalFlow
core,Class used for calculation sparse optical flow and feature tracking with robust local optical flow (RLOF) algorithms. More...
core,Functions
core,double
core,"cv::motempl::calcGlobalOrientation (InputArray orientation, InputArray mask, InputArray mhi, double timestamp, double duration)"
core,Calculates a global motion orientation in a selected region.
core,void
core,"cv::motempl::calcMotionGradient (InputArray mhi, OutputArray mask, OutputArray orientation, double delta1, double delta2, int apertureSize=3)"
core,Calculates a gradient orientation of a motion history image.
core,void
core,"cv::optflow::calcOpticalFlowDenseRLOF (InputArray I0, InputArray I1, InputOutputArray flow, Ptr< RLOFOpticalFlowParameter > rlofParam=Ptr< RLOFOpticalFlowParameter >(), float forwardBackwardThreshold=0, Size gridStep=Size(6, 6), InterpolationType interp_type=InterpolationType::INTERP_EPIC, int epicK=128, float epicSigma=0.05f, float epicLambda=100.f, int ricSPSize=15, int ricSLICType=100, bool use_post_proc=true, float fgsLambda=500.0f, float fgsSigma=1.5f, bool use_variational_refinement=false)"
core,Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme.
core,void
core,"cv::optflow::calcOpticalFlowSF (InputArray from, InputArray to, OutputArray flow, int layers, int averaging_block_size, int max_flow)"
core,void
core,"cv::optflow::calcOpticalFlowSF (InputArray from, InputArray to, OutputArray flow, int layers, int averaging_block_size, int max_flow, double sigma_dist, double sigma_color, int postprocess_window, double sigma_dist_fix, double sigma_color_fix, double occ_thr, int upscale_averaging_radius, double upscale_sigma_dist, double upscale_sigma_color, double speed_up_thr)"
core,"Calculate an optical flow using ""SimpleFlow"" algorithm."
core,void
core,"cv::optflow::calcOpticalFlowSparseRLOF (InputArray prevImg, InputArray nextImg, InputArray prevPts, InputOutputArray nextPts, OutputArray status, OutputArray err, Ptr< RLOFOpticalFlowParameter > rlofParam=Ptr< RLOFOpticalFlowParameter >(), float forwardBackwardThreshold=0)"
core,Calculates fast optical flow for a sparse feature set using the robust local optical flow (RLOF) similar to optflow::calcOpticalFlowPyrLK().
core,void
core,"cv::optflow::calcOpticalFlowSparseToDense (InputArray from, InputArray to, OutputArray flow, int grid_step=8, int k=128, float sigma=0.05f, bool use_post_proc=true, float fgs_lambda=500.0f, float fgs_sigma=1.5f)"
core,Fast dense optical flow based on PyrLK sparse matches interpolation.
core,Ptr< DenseOpticalFlow >
core,cv::optflow::createOptFlow_DeepFlow ()
core,DeepFlow optical flow algorithm implementation.
core,Ptr< DenseOpticalFlow >
core,cv::optflow::createOptFlow_DenseRLOF ()
core,Additional interface to the Dense RLOF algorithm - optflow::calcOpticalFlowDenseRLOF()
core,Ptr< DualTVL1OpticalFlow >
core,cv::optflow::createOptFlow_DualTVL1 ()
core,Creates instance of cv::DenseOpticalFlow.
core,Ptr< DenseOpticalFlow >
core,cv::optflow::createOptFlow_Farneback ()
core,Additional interface to the Farneback's algorithm - calcOpticalFlowFarneback()
core,Ptr< DenseOpticalFlow >
core,cv::optflow::createOptFlow_PCAFlow ()
core,Creates an instance of PCAFlow.
core,Ptr< DenseOpticalFlow >
core,cv::optflow::createOptFlow_SimpleFlow ()
core,Additional interface to the SimpleFlow algorithm - calcOpticalFlowSF()
core,Ptr< SparseOpticalFlow >
core,cv::optflow::createOptFlow_SparseRLOF ()
core,Additional interface to the Sparse RLOF algorithm - optflow::calcOpticalFlowSparseRLOF()
core,Ptr< DenseOpticalFlow >
core,cv::optflow::createOptFlow_SparseToDense ()
core,Additional interface to the SparseToDenseFlow algorithm - calcOpticalFlowSparseToDense()
core,void
core,"cv::optflow::GPCForest< T >::findCorrespondences (InputArray imgFrom, InputArray imgTo, std::vector< std::pair< Point2i, Point2i > > &corr, const GPCMatchingParams params=GPCMatchingParams()) const"
core,Find correspondences between two images.
core,void
core,"cv::motempl::segmentMotion (InputArray mhi, OutputArray segmask, std::vector< Rect > &boundingRects, double timestamp, double segThresh)"
core,"Splits a motion history image into a few parts corresponding to separate independent motions (for example, left hand, right hand)."
core,void
core,"cv::motempl::updateMotionHistory (InputArray silhouette, InputOutputArray mhi, double timestamp, double duration)"
core,Updates the motion history image by a moving silhouette.
core,Namespaces
core,namespace
core,cv::omnidir::internal
core,Functions
core,double
core,"cv::omnidir::calibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size size, InputOutputArray K, InputOutputArray xi, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags, TermCriteria criteria, OutputArray idx=noArray())"
core,"Perform omnidirectional camera calibration, the default depth of outputs is CV_64F."
core,void
core,"cv::omnidir::initUndistortRectifyMap (InputArray K, InputArray D, InputArray xi, InputArray R, InputArray P, const cv::Size &size, int m1type, OutputArray map1, OutputArray map2, int flags)"
core,"Computes undistortion and rectification maps for omnidirectional camera image transform by a rotation R. It output two maps that are used for cv::remap(). If D is empty then zero distortion is used, if R or P is empty then identity matrices are used."
core,void
core,"cv::omnidir::projectPoints (InputArray objectPoints, OutputArray imagePoints, const Affine3d &affine, InputArray K, double xi, InputArray D, OutputArray jacobian=noArray())"
core,void
core,"cv::omnidir::projectPoints (InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, double xi, InputArray D, OutputArray jacobian=noArray())"
core,Projects points for omnidirectional camera using CMei's model.
core,double
core,"cv::omnidir::stereoCalibrate (InputOutputArrayOfArrays objectPoints, InputOutputArrayOfArrays imagePoints1, InputOutputArrayOfArrays imagePoints2, const Size &imageSize1, const Size &imageSize2, InputOutputArray K1, InputOutputArray xi1, InputOutputArray D1, InputOutputArray K2, InputOutputArray xi2, InputOutputArray D2, OutputArray rvec, OutputArray tvec, OutputArrayOfArrays rvecsL, OutputArrayOfArrays tvecsL, int flags, TermCriteria criteria, OutputArray idx=noArray())"
core,Stereo calibration for omnidirectional camera model. It computes the intrinsic parameters for two cameras and the extrinsic parameters between two cameras. The default depth of outputs is CV_64F.
core,void
core,"cv::omnidir::stereoReconstruct (InputArray image1, InputArray image2, InputArray K1, InputArray D1, InputArray xi1, InputArray K2, InputArray D2, InputArray xi2, InputArray R, InputArray T, int flag, int numDisparities, int SADWindowSize, OutputArray disparity, OutputArray image1Rec, OutputArray image2Rec, const Size &newSize=Size(), InputArray Knew=cv::noArray(), OutputArray pointCloud=cv::noArray(), int pointType=XYZRGB)"
core,Stereo 3D reconstruction from a pair of images.
core,void
core,"cv::omnidir::stereoRectify (InputArray R, InputArray T, OutputArray R1, OutputArray R2)"
core,Stereo rectification for omnidirectional camera model. It computes the rectification rotations for two cameras.
core,void
core,"cv::omnidir::undistortImage (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray xi, int flags, InputArray Knew=cv::noArray(), const Size &new_size=Size(), InputArray R=Mat::eye(3, 3, CV_64F))"
core,Undistort omnidirectional images to perspective images.
core,void
core,"cv::omnidir::undistortPoints (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray xi, InputArray R)"
core,Undistort 2D image points for omnidirectional camera using CMei's model.
core,Information Flow algorithm implementaton for alphamatting
core,Alpha matting is used to extract a foreground object with soft boundaries from a background image.
core,"This module is dedicated to computing alpha matte of objects in images from a given input image and a greyscale trimap image that contains information about the foreground, background and unknown pixels. The unknown pixels are assumed to be a combination of foreground and background pixels. The algorithm uses a combination of multiple carefully defined pixels affinities to estimate the opacity of the foreground pixels in the unkown region."
core,The implementation is based on [7].
core,This module was developed by Muskaan Kularia and Sunita Nayak as a project for Google Summer of Code 2019 (GSoC 19).
core,Functions
core,void
core,"cv::alphamat::infoFlow (InputArray image, InputArray tmap, OutputArray result)"
core,Compute alpha matte of an object in an image.
core,Classes
core,class
core,cv::xobjdetect::WBDetector
core,WaldBoost detector. More...
core,The opencv_text module provides different algorithms for text detection and recognition in natural scene images.
core,Provide algorithms to extract the hash of images and fast way to figure out most similar images in huge data set.
core,Namespace for all functions is cv::img_hash.
core,Functions
core,void
core,"cv::img_hash::averageHash (cv::InputArray inputArr, cv::OutputArray outputArr)"
core,Calculates img_hash::AverageHash in one call.
core,void
core,"cv::img_hash::blockMeanHash (cv::InputArray inputArr, cv::OutputArray outputArr, int mode=BLOCK_MEAN_HASH_MODE_0)"
core,Computes block mean hash of the input image.
core,void
core,"cv::img_hash::colorMomentHash (cv::InputArray inputArr, cv::OutputArray outputArr)"
core,"Computes color moment hash of the input, the algorithm is come from the paper ""Perceptual Hashing for Color Images Using Invariant Moments""."
core,void
core,"cv::img_hash::marrHildrethHash (cv::InputArray inputArr, cv::OutputArray outputArr, float alpha=2.0f, float scale=1.0f)"
core,Computes average hash value of the input image.
core,void
core,"cv::img_hash::pHash (cv::InputArray inputArr, cv::OutputArray outputArr)"
core,Computes pHash value of the input image.
core,void
core,"cv::img_hash::radialVarianceHash (cv::InputArray inputArr, cv::OutputArray outputArr, double sigma=1, int numOfAngleLine=180)"
core,Computes radial variance hash of the input image.
core,Classes
core,class
core,cv::ImageCollection
core,To read multi-page images on demand. More...
core,"implements ""RAPID-a video rate object tracker"" [116] with the dynamic control point extraction of [73]"
core,Classes
core,class
core,cv::rapid::GOSTracker
core,class
core,cv::rapid::OLSTracker
core,class
core,cv::rapid::Rapid
core,wrapper around silhouette based 3D object tracking function for uniform access More...
core,class
core,cv::rapid::Tracker
core,Abstract base class for stateful silhouette trackers. More...
core,This modules is to draw UTF-8 strings with freetype/harfbuzz.
core,"If thickness parameter is negative, drawing glyph is filled."
core,"If thickness parameter is positive, drawing glyph is outlined with thickness."
core,"If line_type parameter is 16(or CV_AA), drawing glyph is smooth."
core,Classes
core,class
core,cv::freetype::FreeType2
core,"The video stabilization module contains a set of functions and classes that can be used to solve the problem of video stabilization. There are a few methods implemented, most of them are described in the papers [188] and [113] . However, there are some extensions and deviations from the original paper methods."
core,Namespaces
core,namespace
core,NcvCTprep
core,Functions
core,virtual
core,INCVMemAllocator::~INCVMemAllocator ()=0
core,Ncv32u
core,"alignUp (Ncv32u what, Ncv32u alignment)"
core,void
core,"cv::cuda::calcOpticalFlowBM (const GpuMat &prev, const GpuMat &curr, Size block_size, Size shift_size, Size max_range, bool use_previous, GpuMat &velx, GpuMat &vely, GpuMat &buf, Stream &stream=Stream::Null())"
core,Calculates optical flow for 2 images using block matching algorithm */.
core,void
core,"cv::cuda::connectivityMask (const GpuMat &image, GpuMat &mask, const cv::Scalar &lo, const cv::Scalar &hi, Stream &stream=Stream::Null())"
core,compute mask for Generalized Flood fill componetns labeling.
core,Ptr< cuda::BackgroundSubtractorFGD >
core,cv::cuda::createBackgroundSubtractorFGD (const FGDParams &params=FGDParams())
core,Creates FGD Background Subtractor.
core,Ptr< cuda::BackgroundSubtractorGMG >
core,"cv::cuda::createBackgroundSubtractorGMG (int initializationFrames=120, double decisionThreshold=0.8)"
core,Creates GMG Background Subtractor.
core,Ptr< ImagePyramid >
core,"cv::cuda::createImagePyramid (InputArray img, int nLayers=-1, Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::createOpticalFlowNeedleMap (const GpuMat &u, const GpuMat &v, GpuMat &vertex, GpuMat &colors)"
core,void
core,"cv::cuda::graphcut (GpuMat &terminals, GpuMat &leftTransp, GpuMat &rightTransp, GpuMat &top, GpuMat &bottom, GpuMat &labels, GpuMat &buf, Stream &stream=Stream::Null())"
core,performs labeling via graph cuts of a 2D regular 4-connected graph.
core,void
core,"cv::cuda::graphcut (GpuMat &terminals, GpuMat &leftTransp, GpuMat &rightTransp, GpuMat &top, GpuMat &topLeft, GpuMat &topRight, GpuMat &bottom, GpuMat &bottomLeft, GpuMat &bottomRight, GpuMat &labels, GpuMat &buf, Stream &stream=Stream::Null())"
core,performs labeling via graph cuts of a 2D regular 8-connected graph.
core,void
core,"cv::cuda::interpolateFrames (const GpuMat &frame0, const GpuMat &frame1, const GpuMat &fu, const GpuMat &fv, const GpuMat &bu, const GpuMat &bv, float pos, GpuMat &newFrame, GpuMat &buf, Stream &stream=Stream::Null())"
core,Interpolates frames (images) using provided optical flow (displacement field).
core,void
core,"cv::cuda::labelComponents (const GpuMat &mask, GpuMat &components, int flags=0, Stream &stream=Stream::Null())"
core,performs connected componnents labeling.
core,NCVStatus
core,"memSegCopyHelper (void *dst, NCVMemoryType dstType, const void *src, NCVMemoryType srcType, size_t sz, cudaStream_t cuStream)"
core,NCVStatus
core,"memSegCopyHelper2D (void *dst, Ncv32u dstPitch, NCVMemoryType dstType, const void *src, Ncv32u srcPitch, NCVMemoryType srcType, Ncv32u widthbytes, Ncv32u height, cudaStream_t cuStream)"
core,NCV_CT_ASSERT (sizeof(HaarClassifierNode128)==16)
core,NCV_CT_ASSERT (sizeof(HaarClassifierNodeDescriptor32)==4)
core,NCV_CT_ASSERT (sizeof(HaarFeature64)==8)
core,NCV_CT_ASSERT (sizeof(HaarFeatureDescriptor32)==4)
core,NCV_CT_ASSERT (sizeof(HaarStage64)==8)
core,NCVStatus
core,"ncvApplyHaarClassifierCascade_device (NCVMatrix< Ncv32u > &d_integralImage, NCVMatrix< Ncv32f > &d_weights, NCVMatrixAlloc< Ncv32u > &d_pixelMask, Ncv32u &numDetections, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarStage64 > &d_HaarStages, NCVVector< HaarClassifierNode128 > &d_HaarNodes, NCVVector< HaarFeature64 > &d_HaarFeatures, NcvBool bMaskElements, NcvSize32u anchorsRoi, Ncv32u pixelStep, Ncv32f scaleArea, INCVMemAllocator &gpuAllocator, INCVMemAllocator &cpuAllocator, cudaDeviceProp &devProp, cudaStream_t cuStream)"
core,NCVStatus
core,"ncvApplyHaarClassifierCascade_host (NCVMatrix< Ncv32u > &h_integralImage, NCVMatrix< Ncv32f > &h_weights, NCVMatrixAlloc< Ncv32u > &h_pixelMask, Ncv32u &numDetections, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarClassifierNode128 > &h_HaarNodes, NCVVector< HaarFeature64 > &h_HaarFeatures, NcvBool bMaskElements, NcvSize32u anchorsRoi, Ncv32u pixelStep, Ncv32f scaleArea)"
core,NCVStatus
core,"NCVBroxOpticalFlow (const NCVBroxOpticalFlowDescriptor desc, INCVMemAllocator &gpu_mem_allocator, const NCVMatrix< Ncv32f > &frame0, const NCVMatrix< Ncv32f > &frame1, NCVMatrix< Ncv32f > &u, NCVMatrix< Ncv32f > &v, cudaStream_t stream)"
core,Compute optical flow.
core,void
core,ncvDebugOutput (const cv::String &msg)
core,NCVStatus
core,"ncvDetectObjectsMultiScale_device (NCVMatrix< Ncv8u > &d_srcImg, NcvSize32u srcRoi, NCVVector< NcvRect32u > &d_dstRects, Ncv32u &dstNumRects, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarStage64 > &d_HaarStages, NCVVector< HaarClassifierNode128 > &d_HaarNodes, NCVVector< HaarFeature64 > &d_HaarFeatures, NcvSize32u minObjSize, Ncv32u minNeighbors, Ncv32f scaleStep, Ncv32u pixelStep, Ncv32u flags, INCVMemAllocator &gpuAllocator, INCVMemAllocator &cpuAllocator, cudaDeviceProp &devProp, cudaStream_t cuStream)"
core,NCVStatus
core,"ncvDrawRects_32u_device (Ncv32u *d_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *d_rects, Ncv32u numRects, Ncv32u color, cudaStream_t cuStream)"
core,NCVStatus
core,"ncvDrawRects_32u_host (Ncv32u *h_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *h_rects, Ncv32u numRects, Ncv32u color)"
core,NCVStatus
core,"ncvDrawRects_8u_device (Ncv8u *d_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *d_rects, Ncv32u numRects, Ncv8u color, cudaStream_t cuStream)"
core,NCVStatus
core,"ncvDrawRects_8u_host (Ncv8u *h_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *h_rects, Ncv32u numRects, Ncv8u color)"
core,double
core,ncvEndQueryTimerMs (NcvTimer t)
core,double
core,ncvEndQueryTimerUs (NcvTimer t)
core,NCVStatus
core,"ncvGroupRectangles_host (NCVVector< NcvRect32u > &hypotheses, Ncv32u &numHypotheses, Ncv32u minNeighbors, Ncv32f intersectEps, NCVVector< Ncv32u > *hypothesesWeights)"
core,NCVStatus
core,"ncvGrowDetectionsVector_device (NCVVector< Ncv32u > &pixelMask, Ncv32u numPixelMaskDetections, NCVVector< NcvRect32u > &hypotheses, Ncv32u &totalDetections, Ncv32u totalMaxDetections, Ncv32u rectWidth, Ncv32u rectHeight, Ncv32f curScale, cudaStream_t cuStream)"
core,NCVStatus
core,"ncvGrowDetectionsVector_host (NCVVector< Ncv32u > &pixelMask, Ncv32u numPixelMaskDetections, NCVVector< NcvRect32u > &hypotheses, Ncv32u &totalDetections, Ncv32u totalMaxDetections, Ncv32u rectWidth, Ncv32u rectHeight, Ncv32f curScale)"
core,NCVStatus
core,"ncvHaarGetClassifierSize (const cv::String &filename, Ncv32u &numStages, Ncv32u &numNodes, Ncv32u &numFeatures)"
core,NCVStatus
core,"ncvHaarLoadFromFile_host (const cv::String &filename, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarClassifierNode128 > &h_HaarNodes, NCVVector< HaarFeature64 > &h_HaarFeatures)"
core,NCVStatus
core,"ncvHaarStoreNVBIN_host (const cv::String &filename, HaarClassifierCascadeDescriptor haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarClassifierNode128 > &h_HaarNodes, NCVVector< HaarFeature64 > &h_HaarFeatures)"
core,void
core,ncvSetDebugOutputHandler (NCVDebugOutputHandler *func)
core,NcvTimer
core,ncvStartTimer (void)
core,void
core,"cv::cuda::projectPoints (const GpuMat &src, const Mat &rvec, const Mat &tvec, const Mat &camera_mat, const Mat &dist_coef, GpuMat &dst, Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::solvePnPRansac (const Mat &object, const Mat &image, const Mat &camera_mat, const Mat &dist_coef, Mat &rvec, Mat &tvec, bool use_extrinsic_guess=false, int num_iters=100, float max_dist=8.0, int min_inlier_count=100, std::vector< int > *inliers=NULL)"
core,Finds the object pose from 3D-2D point correspondences.
core,void
core,"cv::cuda::transformPoints (const GpuMat &src, const Mat &rvec, const Mat &tvec, GpuMat &dst, Stream &stream=Stream::Null())"
core,Classes
core,class
core,cv::dnn_objdetect::InferBbox
core,A class to post process model predictions. More...
core,struct
core,cv::dnn_objdetect::object
core,Structure to hold the details pertaining to a single bounding box. More...
core,This module contains:
core,"API for new layers creation, layers are building bricks of neural networks;"
core,set of built-in most-useful Layers;
core,API to construct and modify comprehensive neural networks from layers;
core,functionality for loading serialized networks models from different frameworks.
core,Functionality of this module is designed only for forward pass computations (i.e. network testing). A network training is in principle not supported.
core,Classes
core,class
core,cv::dnn::BackendNode
core,Derivatives of this class encapsulates functions of certain backends. More...
core,class
core,cv::dnn::BackendWrapper
core,Derivatives of this class wraps cv::Mat for different backends and targets. More...
core,class
core,cv::dnn::ClassificationModel
core,This class represents high-level API for classification models. More...
core,class
core,cv::dnn::DetectionModel
core,This class represents high-level API for object detection networks. More...
core,class
core,cv::dnn::Dict
core,"This class implements name-value dictionary, values are instances of DictValue. More..."
core,struct
core,cv::dnn::DictValue
core,"This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64. More..."
core,struct
core,cv::dnn::Image2BlobParams
core,Processing params of image to blob. More...
core,class
core,cv::dnn::KeypointsModel
core,This class represents high-level API for keypoints models. More...
core,class
core,cv::dnn::Layer
core,This interface class allows to build new Layers - are building blocks of networks. More...
core,class
core,cv::dnn::LayerParams
core,This class provides all data needed to initialize layer. More...
core,class
core,cv::dnn::Model
core,This class is presented high-level API for neural networks. More...
core,class
core,cv::dnn::Net
core,This class allows to create and manipulate comprehensive artificial neural networks. More...
core,class
core,cv::dnn::SegmentationModel
core,This class represents high-level API for segmentation models. More...
core,class
core,cv::dnn::TextDetectionModel
core,Base class for text detection networks. More...
core,class
core,cv::dnn::TextDetectionModel_DB
core,This class represents high-level API for text detection DL networks compatible with DB model. More...
core,class
core,cv::dnn::TextDetectionModel_EAST
core,This class represents high-level API for text detection DL networks compatible with EAST model. More...
core,class
core,cv::dnn::TextRecognitionModel
core,This class represents high-level API for text recognition networks. More...
core,Functions
core,Mat
core,"cv::dnn::blobFromImage (InputArray image, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
core,"Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels."
core,void
core,"cv::dnn::blobFromImage (InputArray image, OutputArray blob, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
core,Creates 4-dimensional blob from image.
core,Mat
core,"cv::dnn::blobFromImages (InputArrayOfArrays images, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
core,"Creates 4-dimensional blob from series of images. Optionally resizes and crops images from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels."
core,void
core,"cv::dnn::blobFromImages (InputArrayOfArrays images, OutputArray blob, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
core,Creates 4-dimensional blob from series of images.
core,Mat
core,"cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, const Image2BlobParams &param=Image2BlobParams())"
core,Creates 4-dimensional blob from series of images with given params.
core,void
core,"cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())"
core,Mat
core,"cv::dnn::blobFromImageWithParams (InputArray image, const Image2BlobParams &param=Image2BlobParams())"
core,Creates 4-dimensional blob from image with given params.
core,void
core,"cv::dnn::blobFromImageWithParams (InputArray image, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())"
core,void
core,cv::dnn::enableModelDiagnostics (bool isDiagnosticsMode)
core,Enables detailed logging of the DNN model loading with CV DNN API.
core,"std::vector< std::pair< Backend, Target > >"
core,cv::dnn::getAvailableBackends ()
core,std::vector< Target >
core,cv::dnn::getAvailableTargets (dnn::Backend be)
core,LayerFactory_Impl &
core,cv::dnn::getLayerFactoryImpl ()
core,Mutex &
core,cv::dnn::getLayerFactoryMutex ()
core,"Get the mutex guarding LayerFactory_Impl, see getLayerFactoryImpl() function."
core,void
core,"cv::dnn::imagesFromBlob (const cv::Mat &blob_, OutputArrayOfArrays images_)"
core,Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector<cv::Mat>).
core,void
core,"cv::dnn::NMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
core,Performs non maximum suppression given boxes and corresponding scores.
core,void
core,"cv::dnn::NMSBoxes (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
core,void
core,"cv::dnn::NMSBoxes (const std::vector< RotatedRect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
core,void
core,"cv::dnn::NMSBoxesBatched (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
core,Performs batched non maximum suppression on given boxes and corresponding scores across different classes.
core,void
core,"cv::dnn::NMSBoxesBatched (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
core,Net
core,"cv::dnn::readNet (const String &framework, const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())"
core,Read deep learning network represented in one of the supported formats.
core,Net
core,"cv::dnn::readNet (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config="""", const String &framework="""")"
core,Read deep learning network represented in one of the supported formats.
core,Net
core,"cv::dnn::readNetFromCaffe (const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)"
core,Reads a network model stored in Caffe model in memory.
core,Net
core,"cv::dnn::readNetFromCaffe (const std::vector< uchar > &bufferProto, const std::vector< uchar > &bufferModel=std::vector< uchar >())"
core,Reads a network model stored in Caffe model in memory.
core,Net
core,"cv::dnn::readNetFromCaffe (CV_WRAP_FILE_PATH const String &prototxt, CV_WRAP_FILE_PATH const String &caffeModel=String())"
core,Reads a network model stored in Caffe framework's format.
core,Net
core,"cv::dnn::readNetFromDarknet (const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)"
core,Reads a network model stored in Darknet model files.
core,Net
core,"cv::dnn::readNetFromDarknet (const std::vector< uchar > &bufferCfg, const std::vector< uchar > &bufferModel=std::vector< uchar >())"
core,Reads a network model stored in Darknet model files.
core,Net
core,"cv::dnn::readNetFromDarknet (CV_WRAP_FILE_PATH const String &cfgFile, CV_WRAP_FILE_PATH const String &darknetModel=String())"
core,Reads a network model stored in Darknet model files.
core,Net
core,"cv::dnn::readNetFromModelOptimizer (const std::vector< uchar > &bufferModelConfig, const std::vector< uchar > &bufferWeights)"
core,Load a network from Intel's Model Optimizer intermediate representation.
core,Net
core,"cv::dnn::readNetFromModelOptimizer (const uchar *bufferModelConfigPtr, size_t bufferModelConfigSize, const uchar *bufferWeightsPtr, size_t bufferWeightsSize)"
core,Load a network from Intel's Model Optimizer intermediate representation.
core,Net
core,"cv::dnn::readNetFromModelOptimizer (CV_WRAP_FILE_PATH const String &xml, CV_WRAP_FILE_PATH const String &bin="""")"
core,Load a network from Intel's Model Optimizer intermediate representation.
core,Net
core,"cv::dnn::readNetFromONNX (const char *buffer, size_t sizeBuffer)"
core,Reads a network model from ONNX in-memory buffer.
core,Net
core,cv::dnn::readNetFromONNX (const std::vector< uchar > &buffer)
core,Reads a network model from ONNX in-memory buffer.
core,Net
core,cv::dnn::readNetFromONNX (CV_WRAP_FILE_PATH const String &onnxFile)
core,Reads a network model ONNX.
core,Net
core,"cv::dnn::readNetFromTensorflow (const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)"
core,Reads a network model stored in TensorFlow framework's format.
core,Net
core,"cv::dnn::readNetFromTensorflow (const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())"
core,Reads a network model stored in TensorFlow framework's format.
core,Net
core,"cv::dnn::readNetFromTensorflow (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config=String())"
core,Reads a network model stored in TensorFlow framework's format.
core,Net
core,"cv::dnn::readNetFromTFLite (const char *bufferModel, size_t lenModel)"
core,Reads a network model stored in TFLite framework's format.
core,Net
core,cv::dnn::readNetFromTFLite (const std::vector< uchar > &bufferModel)
core,Reads a network model stored in TFLite framework's format.
core,Net
core,cv::dnn::readNetFromTFLite (CV_WRAP_FILE_PATH const String &model)
core,Reads a network model stored in TFLite framework's format.
core,Net
core,"cv::dnn::readNetFromTorch (CV_WRAP_FILE_PATH const String &model, bool isBinary=true, bool evaluate=true)"
core,Reads a network model stored in Torch7 framework's format.
core,Mat
core,cv::dnn::readTensorFromONNX (CV_WRAP_FILE_PATH const String &path)
core,Creates blob from .pb file.
core,Mat
core,"cv::dnn::readTorchBlob (const String &filename, bool isBinary=true)"
core,Loads blob which was serialized as torch.Tensor object of Torch7 framework.
core,void
core,"cv::dnn::shrinkCaffeModel (CV_WRAP_FILE_PATH const String &src, CV_WRAP_FILE_PATH const String &dst, const std::vector< String > &layersTypes=std::vector< String >())"
core,Convert all weights of Caffe network to half precision floating point.
core,void
core,"cv::dnn::softNMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, std::vector< float > &updated_scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, size_t top_k=0, const float sigma=0.5, SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN)"
core,Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503.
core,void
core,"cv::dnn::writeTextGraph (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &output)"
core,Create a text representation for a binary network stored in protocol buffer format.
core,Classes
core,class
core,cv::cuda::BackgroundSubtractorMOG
core,Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More...
core,class
core,cv::cuda::BackgroundSubtractorMOG2
core,Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More...
core,Classes
core,class
core,cv::cuda::DescriptorMatcher
core,Abstract base class for matching keypoint descriptors. More...
core,class
core,cv::cuda::FastFeatureDetector
core,Wrapping class for feature detection using the FAST method. More...
core,class
core,cv::cuda::Feature2DAsync
core,Abstract base class for CUDA asynchronous 2D image feature detectors and descriptor extractors. More...
core,class
core,cv::cuda::ORB
core,Class implementing the ORB (oriented BRIEF) keypoint detector and descriptor extractor. More...
core,"The Super Resolution module contains a set of functions and classes that can be used to solve the problem of resolution enhancement. There are a few methods implemented, most of them are described in the papers [83] and [197] ."
core,Classes
core,class
core,cv::superres::BroxOpticalFlow
core,class
core,cv::superres::DenseOpticalFlowExt
core,class
core,cv::superres::DualTVL1OpticalFlow
core,class
core,cv::superres::FarnebackOpticalFlow
core,class
core,cv::superres::FrameSource
core,class
core,cv::superres::PyrLKOpticalFlow
core,class
core,cv::superres::SuperResolution
core,Base class for Super Resolution algorithms. More...
core,Classes
core,class
core,cv::cuda::BroxOpticalFlow
core,Class computing the optical flow for two images using Brox et al Optical Flow algorithm ([42]). More...
core,class
core,cv::cuda::DenseOpticalFlow
core,Base interface for dense optical flow algorithms. More...
core,class
core,cv::cuda::DensePyrLKOpticalFlow
core,Class used for calculating a dense optical flow. More...
core,class
core,cv::cuda::FarnebackOpticalFlow
core,Class computing a dense optical flow using the Gunnar Farneback's algorithm. More...
core,class
core,cv::cuda::NvidiaHWOpticalFlow
core,Base Interface for optical flow algorithms using NVIDIA Optical Flow SDK. More...
core,class
core,cv::cuda::NvidiaOpticalFlow_1_0
core,Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 1.0. More...
core,class
core,cv::cuda::NvidiaOpticalFlow_2_0
core,Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 2.0. More...
core,class
core,cv::cuda::OpticalFlowDual_TVL1
core,"Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method. More..."
core,class
core,cv::cuda::SparseOpticalFlow
core,Base interface for sparse optical flow algorithms. More...
core,class
core,cv::cuda::SparsePyrLKOpticalFlow
core,Class used for calculating a sparse optical flow. More...
core,"Julia (https://julialang.org) is a programming language for scientific community with growing popularity. These are bindings for a subset of OpenCV functionality, based on libcxxwrap-julia and CxxWrap packages."
core,"For installation instructions, see README.md in this module or OpenCV wiki (https://github.com/opencv/opencv/wiki)"
core,Functions
core,void
core,"cv::julia::initJulia (int argc, char **argv)"
core,This module includes image-processing functions.
core,"While OpenCV was designed for use in full-scale applications and can be used within functionally rich UI frameworks (such as Qt*, WinForms*, or Cocoa*) or without any UI at all, sometimes there it is required to try functionality quickly and visualize the results. This is what the HighGUI module has been designed for."
core,It provides easy interface to:
core,"Create and manipulate windows that can display images and ""remember"" their content (no need to handle repaint events from OS)."
core,"Add trackbars to the windows, handle simple mouse events as well as keyboard commands."
core,Typedefs
core,typedef void(*
core,"cv::ButtonCallback) (int state, void *userdata)"
core,Callback function for a button created by cv::createButton.
core,typedef void(*
core,"cv::MouseCallback) (int event, int x, int y, int flags, void *userdata)"
core,Callback function for mouse events. see cv::setMouseCallback.
core,typedef void(*
core,cv::OpenGlDrawCallback) (void *userdata)
core,Callback function defined to be called every frame. See cv::setOpenGlDrawCallback.
core,typedef void(*
core,"cv::TrackbarCallback) (int pos, void *userdata)"
core,Callback function for Trackbar see cv::createTrackbar.
core,"The datasets module includes classes for working with different datasets: load data, evaluate different algorithms on them, contains benchmarks, etc."
core,It is planned to have:
core,basic: loading code for all datasets to help start work with them.
core,next stage: quick benchmarks for all datasets to show how to solve them using OpenCV and implement evaluation code.
core,"finally: implement on OpenCV state-of-the-art algorithms, which solve these tasks."
core,Classes
core,class
core,cv::datasets::Dataset
core,struct
core,cv::datasets::Object
core,"Many computer vision applications may benefit from understanding where humans focus given a scene. Other than cognitively understanding the way human perceive images and scenes, finding salient regions and objects in the images helps various tasks such as speeding up object detection, object recognition, object tracking and content-aware image editing."
core,"About the saliency, there is a rich literature but the development is very fragmented. The principal purpose of this API is to give a unique interface, a unique framework for use and plug sever saliency algorithms, also with very different nature and methodology, but they share the same purpose, organizing algorithms into three main categories:"
core,"Static Saliency**: algorithms belonging to this category, exploit different image features that allow to detect salient objects in a non dynamic scenarios."
core,"Motion Saliency**: algorithms belonging to this category, are particularly focused to detect salient objects over time (hence also over frame), then there is a temporal component sealing cosider that allows to detect ""moving"" objects as salient, meaning therefore also the more general sense of detection the changes in the scene."
core,"Objectness**: Objectness is usually represented as a value which reflects how likely an image window covers an object of any category. Algorithms belonging to this category, avoid making decisions early on, by proposing a small number of category-independent proposals, that are expected to cover all objects in an image. Being able to perceive objects before identifying them is closely related to bottom up visual attention (saliency)."
core,"To see how API works, try tracker demo: https://github.com/fpuja/opencv_contrib/blob/saliencyModuleDevelop/modules/saliency/samples/computeSaliency.cpp"
core,Classes
core,class
core,cv::saliency::MotionSaliency
core,class
core,cv::saliency::MotionSaliencyBinWangApr2014
core,the Fast Self-tuning Background Subtraction Algorithm from [291] More...
core,class
core,cv::saliency::Objectness
core,class
core,cv::saliency::ObjectnessBING
core,"Objectness algorithms based on [3] [3] Cheng, Ming-Ming, et al. ""BING: Binarized normed gradients for objectness estimation at 300fps."" IEEE CVPR. 2014. More..."
core,class
core,cv::saliency::Saliency
core,class
core,cv::saliency::StaticSaliency
core,class
core,cv::saliency::StaticSaliencyFineGrained
core,the Fine Grained Saliency approach from [198] More...
core,class
core,cv::saliency::StaticSaliencySpectralResidual
core,the Spectral Residual approach from [128] More...
core,The opencv_sfm module contains algorithms to perform 3d reconstruction from 2d images. The core of the module is based on a light version of Libmv originally developed by Sameer Agarwal and Keir Mierle.
core,"Whats is libmv? libmv, also known as the Library for Multiview Reconstruction (or LMV), is the computer vision backend for Blender's motion tracking abilities. Unlike other vision libraries with general ambitions, libmv is focused on algorithms for match moving, specifically targeting Blender as the primary customer. Dense reconstruction, reconstruction from unorganized photo collections, image recognition, and other tasks are not a focus of libmv."
core,"Development libmv is officially under the Blender umbrella, and so is developed on developer.blender.org. The source repository can get checked out independently from Blender."
core,This module has been originally developed as a project for Google Summer of Code 2012-2015.
core,"Notice that it is compiled only when Eigen, GLog and GFlags are correctly installed. Check installation instructions in the following tutorial: SFM module installation"
core,"The functions in this section use a so-called pinhole camera model. The view of a scene is obtained by projecting a scene's 3D point \(P_w\) into the image plane using a perspective transformation which forms the corresponding pixel \(p\). Both \(P_w\) and \(p\) are represented in homogeneous coordinates, i.e. as 3D and 2D homogeneous vector respectively. You will find a brief introduction to projective geometry, homogeneous vectors and homogeneous transformations at the end of this section's introduction. For more succinct notation, we often drop the 'homogeneous' and say vector instead of homogeneous vector."
core,The distortion-free projective transformation given by a pinhole camera model is shown below.
core,"\[s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w,\]"
core,"where \(P_w\) is a 3D point expressed with respect to the world coordinate system, \(p\) is a 2D pixel in the image plane, \(A\) is the camera intrinsic matrix, \(R\) and \(t\) are the rotation and translation that describe the change of coordinates from world to camera coordinate systems (or camera frame) and \(s\) is the projective transformation's arbitrary scaling and not part of the camera model."
core,"The camera intrinsic matrix \(A\) (notation used as in [319] and also generally notated as \(K\)) projects 3D points given in the camera coordinate system to 2D pixel coordinates, i.e."
core,\[p = A P_c.\]
core,"The camera intrinsic matrix \(A\) is composed of the focal lengths \(f_x\) and \(f_y\), which are expressed in pixel units, and the principal point \((c_x, c_y)\), that is usually close to the image center:"
core,"\[A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1},\]"
core,and thus
core,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \vecthree{X_c}{Y_c}{Z_c}.\]
core,"The matrix of intrinsic parameters does not depend on the scene viewed. So, once estimated, it can be re-used as long as the focal length is fixed (in case of a zoom lens). Thus, if an image from the camera is scaled by a factor, all of these parameters need to be scaled (multiplied/divided, respectively) by the same factor."
core,The joint rotation-translation matrix \([R|t]\) is the matrix product of a projective transformation and a homogeneous transformation. The 3-by-4 projective transformation maps 3D points represented in camera coordinates to 2D points in the image plane and represented in normalized camera coordinates \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\):
core,\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix} \begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix}.\]
core,"The homogeneous transformation is encoded by the extrinsic parameters \(R\) and \(t\) and represents the change of basis from world coordinate system \(w\) to the camera coordinate sytem \(c\). Thus, given the representation of the point \(P\) in world coordinates, \(P_w\), we obtain \(P\)'s representation in the camera coordinate system, \(P_c\), by"
core,"\[P_c = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_w,\]"
core,"This homogeneous transformation is composed out of \(R\), a 3-by-3 rotation matrix, and \(t\), a 3-by-1 translation vector:"
core,"\[\begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix}, \]"
core,and therefore
core,\[\begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
core,"Combining the projective transformation and the homogeneous transformation, we obtain the projective transformation that maps 3D points in world coordinates into 2D points in the image plane and in normalized camera coordinates:"
core,"\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix},\]"
core,"with \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\). Putting the equations for instrincs and extrinsics together, we can write out \(s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w\) as"
core,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
core,"If \(Z_c \ne 0\), the transformation above is equivalent to the following,"
core,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x X_c/Z_c + c_x \\ f_y Y_c/Z_c + c_y \end{bmatrix}\]
core,with
core,\[\vecthree{X_c}{Y_c}{Z_c} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
core,The following figure illustrates the pinhole camera model.
core,"Real lenses usually have some distortion, mostly radial distortion, and slight tangential distortion. So, the above model is extended as:"
core,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x'' + c_x \\ f_y y'' + c_y \end{bmatrix}\]
core,where
core,\[\begin{bmatrix} x'' \\ y'' \end{bmatrix} = \begin{bmatrix} x' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + 2 p_1 x' y' + p_2(r^2 + 2 x'^2) + s_1 r^2 + s_2 r^4 \\ y' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\ \end{bmatrix}\]
core,with
core,\[r^2 = x'^2 + y'^2\]
core,and
core,"\[\begin{bmatrix} x'\\ y' \end{bmatrix} = \begin{bmatrix} X_c/Z_c \\ Y_c/Z_c \end{bmatrix},\]"
core,if \(Z_c \ne 0\).
core,"The distortion parameters are the radial coefficients \(k_1\), \(k_2\), \(k_3\), \(k_4\), \(k_5\), and \(k_6\) , \(p_1\) and \(p_2\) are the tangential distortion coefficients, and \(s_1\), \(s_2\), \(s_3\), and \(s_4\), are the thin prism distortion coefficients. Higher-order coefficients are not considered in OpenCV."
core,"The next figures show two common types of radial distortion: barrel distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically decreasing) and pincushion distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically increasing). Radial distortion is always monotonic for real lenses, and if the estimator produces a non-monotonic result, this should be considered a calibration failure. More generally, radial distortion must be monotonic and the distortion function must be bijective. A failed estimation result may look deceptively good near the image center but will work poorly in e.g. AR/SFM applications. The optimization method used in OpenCV camera calibration does not include these constraints as the framework does not support the required integer programming and polynomial inequalities. See issue #15992 for additional information."
core,"In some cases, the image sensor may be tilted in order to focus an oblique plane in front of the camera (Scheimpflug principle). This can be useful for particle image velocimetry (PIV) or triangulation with a laser fan. The tilt causes a perspective distortion of \(x''\) and \(y''\). This distortion can be modeled in the following way, see e.g. [172]."
core,"\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x''' + c_x \\ f_y y''' + c_y \end{bmatrix},\]"
core,where
core,"\[s\vecthree{x'''}{y'''}{1} = \vecthreethree{R_{33}(\tau_x, \tau_y)}{0}{-R_{13}(\tau_x, \tau_y)} {0}{R_{33}(\tau_x, \tau_y)}{-R_{23}(\tau_x, \tau_y)} {0}{0}{1} R(\tau_x, \tau_y) \vecthree{x''}{y''}{1}\]"
core,"and the matrix \(R(\tau_x, \tau_y)\) is defined by two rotations with angular parameter \(\tau_x\) and \(\tau_y\), respectively,"
core,"\[ R(\tau_x, \tau_y) = \vecthreethree{\cos(\tau_y)}{0}{-\sin(\tau_y)}{0}{1}{0}{\sin(\tau_y)}{0}{\cos(\tau_y)} \vecthreethree{1}{0}{0}{0}{\cos(\tau_x)}{\sin(\tau_x)}{0}{-\sin(\tau_x)}{\cos(\tau_x)} = \vecthreethree{\cos(\tau_y)}{\sin(\tau_y)\sin(\tau_x)}{-\sin(\tau_y)\cos(\tau_x)} {0}{\cos(\tau_x)}{\sin(\tau_x)} {\sin(\tau_y)}{-\cos(\tau_y)\sin(\tau_x)}{\cos(\tau_y)\cos(\tau_x)}. \]"
core,In the functions below the coefficients are passed or returned as
core,"\[(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])\]"
core,"vector. That is, if the vector contains four elements, it means that \(k_3=0\) . The distortion coefficients do not depend on the scene viewed. Thus, they also belong to the intrinsic camera parameters. And they remain the same regardless of the captured image resolution. If, for example, a camera has been calibrated on images of 320 x 240 resolution, absolutely the same distortion coefficients can be used for 640 x 480 images from the same camera while \(f_x\), \(f_y\), \(c_x\), and \(c_y\) need to be scaled appropriately."
core,The functions below use the above model to do the following:
core,Project 3D points to the image plane given intrinsic and extrinsic parameters.
core,"Compute extrinsic parameters given intrinsic parameters, a few 3D points, and their projections."
core,Estimate intrinsic and extrinsic camera parameters from several views of a known calibration pattern (every view is described by several 3D-2D point correspondences).
core,"Estimate the relative position and orientation of the stereo camera ""heads"" and compute the rectification* transformation that makes the camera optical axes parallel."
core,"Homogeneous Coordinates Homogeneous Coordinates are a system of coordinates that are used in projective geometry. Their use allows to represent points at infinity by finite coordinates and simplifies formulas when compared to the cartesian counterparts, e.g. they have the advantage that affine transformations can be expressed as linear homogeneous transformation."
core,One obtains the homogeneous vector \(P_h\) by appending a 1 along an n-dimensional cartesian vector \(P\) e.g. for a 3D cartesian vector the mapping \(P \rightarrow P_h\) is:
core,\[\begin{bmatrix} X \\ Y \\ Z \end{bmatrix} \rightarrow \begin{bmatrix} X \\ Y \\ Z \\ 1 \end{bmatrix}.\]
core,"For the inverse mapping \(P_h \rightarrow P\), one divides all elements of the homogeneous vector by its last element, e.g. for a 3D homogeneous vector one gets its 2D cartesian counterpart by:"
core,"\[\begin{bmatrix} X \\ Y \\ W \end{bmatrix} \rightarrow \begin{bmatrix} X / W \\ Y / W \end{bmatrix},\]"
core,if \(W \ne 0\).
core,"Due to this mapping, all multiples \(k P_h\), for \(k \ne 0\), of a homogeneous point represent the same point \(P_h\). An intuitive understanding of this property is that under a projective transformation, all multiples of \(P_h\) are mapped to the same point. This is the physical observation one does for pinhole cameras, as all points along a ray through the camera's pinhole are projected to the same image point, e.g. all points along the red ray in the image of the pinhole camera model above would be mapped to the same image coordinate. This property is also the source for the scale ambiguity s in the equation of the pinhole camera model."
core,"As mentioned, by using homogeneous coordinates we can express any change of basis parameterized by \(R\) and \(t\) as a linear transformation, e.g. for the change of basis from coordinate system 0 to coordinate system 1 becomes:"
core,\[P_1 = R P_0 + t \rightarrow P_{h_1} = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_{h_0}.\]
core,"Many functions in this module take a camera intrinsic matrix as an input parameter. Although all functions assume the same structure of this parameter, they may name it differently. The parameter's description, however, will be clear in that a camera intrinsic matrix with the structure shown above is required."
core,A calibration sample for 3 cameras in a horizontal position can be found at opencv_source_code/samples/cpp/3calibration.cpp
core,A calibration sample based on a sequence of images can be found at opencv_source_code/samples/cpp/calibration.cpp
core,A calibration sample in order to do 3D reconstruction can be found at opencv_source_code/samples/cpp/build3dmodel.cpp
core,A calibration example on stereo calibration can be found at opencv_source_code/samples/cpp/stereo_calib.cpp
core,A calibration example on stereo matching can be found at opencv_source_code/samples/cpp/stereo_match.cpp
core,(Python) A camera calibration sample can be found at opencv_source_code/samples/python/calibrate.py
core,Classes
core,struct
core,cv::CirclesGridFinderParameters
core,class
core,cv::LMSolver
core,class
core,cv::StereoBM
core,"Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. More..."
core,class
core,cv::StereoMatcher
core,The base class for stereo correspondence algorithms. More...
core,class
core,cv::StereoSGBM
core,The class implements the modified H. Hirschmuller algorithm [126] that differs from the original one as follows: More...
core,struct
core,cv::UsacParams
core,Functions
core,double
core,"cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,double
core,"cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
core,double
core,"cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,double
core,"cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
core,void
core,"cv::calibrateHandEye (InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)"
core,Computes Hand-Eye calibration: \(_{}^{g}\textrm{T}_c\).
core,void
core,"cv::calibrateRobotWorldHandEye (InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)"
core,Computes Robot-World/Hand-Eye calibration: \(_{}^{w}\textrm{T}_b\) and \(_{}^{c}\textrm{T}_g\).
core,void
core,"cv::calibrationMatrixValues (InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &fovx, double &fovy, double &focalLength, Point2d &principalPoint, double &aspectRatio)"
core,Computes useful camera characteristics from the camera intrinsic matrix.
core,bool
core,"cv::checkChessboard (InputArray img, Size size)"
core,void
core,"cv::composeRT (InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())"
core,Combines two rotation-and-shift transformations.
core,void
core,"cv::computeCorrespondEpilines (InputArray points, int whichImage, InputArray F, OutputArray lines)"
core,"For points in an image of a stereo pair, computes the corresponding epilines in the other image."
core,void
core,"cv::convertPointsFromHomogeneous (InputArray src, OutputArray dst)"
core,Converts points from homogeneous to Euclidean space.
core,void
core,"cv::convertPointsHomogeneous (InputArray src, OutputArray dst)"
core,Converts points to/from homogeneous coordinates.
core,void
core,"cv::convertPointsToHomogeneous (InputArray src, OutputArray dst)"
core,Converts points from Euclidean to homogeneous space.
core,void
core,"cv::correctMatches (InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)"
core,Refines coordinates of corresponding points.
core,void
core,"cv::decomposeEssentialMat (InputArray E, OutputArray R1, OutputArray R2, OutputArray t)"
core,Decompose an essential matrix to possible rotations and translation.
core,int
core,"cv::decomposeHomographyMat (InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)"
core,"Decompose a homography matrix to rotation(s), translation(s) and plane normal(s)."
core,void
core,"cv::decomposeProjectionMatrix (InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())"
core,Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.
core,void
core,"cv::drawChessboardCorners (InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)"
core,Renders the detected chessboard corners.
core,void
core,"cv::drawFrameAxes (InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)"
core,Draw axes of the world/object coordinate system from pose estimation.
core,cv::Mat
core,"cv::estimateAffine2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)"
core,Computes an optimal affine transformation between two 2D point sets.
core,cv::Mat
core,"cv::estimateAffine2D (InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &params)"
core,cv::Mat
core,"cv::estimateAffine3D (InputArray src, InputArray dst, double *scale=nullptr, bool force_rotation=true)"
core,Computes an optimal affine transformation between two 3D point sets.
core,int
core,"cv::estimateAffine3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)"
core,Computes an optimal affine transformation between two 3D point sets.
core,cv::Mat
core,"cv::estimateAffinePartial2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)"
core,Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.
core,Scalar
core,"cv::estimateChessboardSharpness (InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())"
core,Estimates the sharpness of a detected chessboard.
core,int
core,"cv::estimateTranslation3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)"
core,Computes an optimal translation between two 3D point sets.
core,void
core,"cv::filterHomographyDecompByVisibleRefpoints (InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())"
core,Filters homography decompositions based on additional information.
core,void
core,"cv::filterSpeckles (InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())"
core,Filters off small noise blobs (speckles) in the disparity map.
core,bool
core,"cv::find4QuadCornerSubpix (InputArray img, InputOutputArray corners, Size region_size)"
core,finds subpixel-accurate positions of the chessboard corners
core,bool
core,"cv::findChessboardCorners (InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)"
core,Finds the positions of internal corners of the chessboard.
core,bool
core,"cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)"
core,Finds the positions of internal corners of the chessboard using a sector based approach.
core,bool
core,"cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags=0)"
core,bool
core,"cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr< FeatureDetector > &blobDetector, const CirclesGridFinderParameters &parameters)"
core,Finds centers in the grid of circles.
core,bool
core,"cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr< FeatureDetector > &blobDetector=SimpleBlobDetector::create())"
core,Mat
core,"cv::findEssentialMat (InputArray points1, InputArray points2, double focal, Point2d pp, int method, double prob, double threshold, OutputArray mask)"
core,Mat
core,"cv::findEssentialMat (InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())"
core,Mat
core,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method, double prob, double threshold, OutputArray mask)"
core,Mat
core,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())"
core,Calculates an essential matrix from the corresponding points in two images.
core,Mat
core,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &params)"
core,Mat
core,"cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())"
core,Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.
core,Mat
core,"cv::findFundamentalMat (InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())"
core,Calculates a fundamental matrix from the corresponding points in two images.
core,Mat
core,"cv::findFundamentalMat (InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())"
core,Mat
core,"cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, const UsacParams &params)"
core,Mat
core,"cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)"
core,Mat
core,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)"
core,Finds a perspective transformation between two planes.
core,Mat
core,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &params)"
core,Mat
core,"cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)"
core,Mat
core,"cv::getDefaultNewCameraMatrix (InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)"
core,Returns the default new camera matrix.
core,Mat
core,"cv::getOptimalNewCameraMatrix (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)"
core,Returns the new camera intrinsic matrix based on the free scaling parameter.
core,Rect
core,"cv::getValidDisparityROI (Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)"
core,computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by stereoRectify)
core,Mat
core,"cv::initCameraMatrix2D (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)"
core,Finds an initial camera intrinsic matrix from 3D-2D point correspondences.
core,void
core,"cv::initInverseRectificationMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, const Size &size, int m1type, OutputArray map1, OutputArray map2)"
core,"Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs."
core,void
core,"cv::initUndistortRectifyMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)"
core,Computes the undistortion and rectification transformation map.
core,float
core,"cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)"
core,initializes maps for remap for wide-angle
core,static float
core,"cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)"
core,void
core,"cv::matMulDeriv (InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)"
core,Computes partial derivatives of the matrix product for each multiplied matrix.
core,void
core,"cv::projectPoints (InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)"
core,Projects 3D points to an image plane.
core,int
core,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())"
core,int
core,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())"
core,"Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using chirality check. Returns the number of inliers that pass the check."
core,int
core,"cv::recoverPose (InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())"
core,int
core,"cv::recoverPose (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, OutputArray E, OutputArray R, OutputArray t, int method=cv::RANSAC, double prob=0.999, double threshold=1.0, InputOutputArray mask=noArray())"
core,"Recovers the relative camera rotation and the translation from corresponding points in two images from two different cameras, using cheirality check. Returns the number of inliers that pass the check."
core,float
core,"cv::rectify3Collinear (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)"
core,"computes the rectification transformations for 3-head camera, where all the heads are on the same line."
core,void
core,"cv::reprojectImageTo3D (InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)"
core,Reprojects a disparity image to 3D space.
core,void
core,"cv::Rodrigues (InputArray src, OutputArray dst, OutputArray jacobian=noArray())"
core,Converts a rotation matrix to a rotation vector or vice versa.
core,Vec3d
core,"cv::RQDecomp3x3 (InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())"
core,Computes an RQ decomposition of 3x3 matrices.
core,double
core,"cv::sampsonDistance (InputArray pt1, InputArray pt2, InputArray F)"
core,Calculates the Sampson Distance between two points.
core,int
core,"cv::solveP3P (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)"
core,Finds an object pose from 3 3D-2D point correspondences.
core,bool
core,"cv::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)"
core,Finds an object pose from 3D-2D point correspondences.
core,int
core,"cv::solvePnPGeneric (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())"
core,Finds an object pose from 3D-2D point correspondences.
core,bool
core,"cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)"
core,Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.
core,bool
core,"cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &params=UsacParams())"
core,void
core,"cv::solvePnPRefineLM (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))"
core,Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
core,void
core,"cv::solvePnPRefineVVS (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)"
core,Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
core,double
core,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
core,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
core,double
core,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
core,Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.
core,double
core,"cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))"
core,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
core,void
core,"cv::stereoRectify (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)"
core,Computes rectification transforms for each head of a calibrated stereo camera.
core,bool
core,"cv::stereoRectifyUncalibrated (InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)"
core,Computes a rectification transform for an uncalibrated stereo camera.
core,void
core,"cv::triangulatePoints (InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)"
core,This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.
core,void
core,"cv::undistort (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())"
core,Transforms an image to compensate for lens distortion.
core,void
core,"cv::undistortImagePoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, TermCriteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 0.01))"
core,Compute undistorted image points position.
core,void
core,"cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)"
core,void
core,"cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())"
core,Computes the ideal point coordinates from the observed point coordinates.
core,void
core,"cv::validateDisparity (InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)"
core,"validates disparity using the left-right check. The matrix ""cost"" should be computed by the stereo correspondence algorithm"
core,Classes
core,class
core,cv::cuda::CascadeClassifier
core,Cascade classifier class used for object detection. Supports HAAR and LBP cascades. : More...
core,class
core,cv::cuda::HOG
core,The class implements Histogram of Oriented Gradients ([63]) object detector. More...
core,"ArUco Marker Detection, module functionality was moved to objdetect module"
core,Classes
core,struct
core,cv::aruco::EstimateParameters
core,Pose estimation parameters. More...
core,Functions
core,double
core,"cv::aruco::calibrateCameraAruco (InputArrayOfArrays corners, InputArray ids, InputArray counter, const Ptr< Board > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,Calibrate a camera using aruco markers.
core,double
core,"cv::aruco::calibrateCameraAruco (InputArrayOfArrays corners, InputArray ids, InputArray counter, const Ptr< Board > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs=noArray(), OutputArrayOfArrays tvecs=noArray(), int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,It's the same function as calibrateCameraAruco but without calibration error estimation.
core,double
core,"cv::aruco::calibrateCameraCharuco (InputArrayOfArrays charucoCorners, InputArrayOfArrays charucoIds, const Ptr< CharucoBoard > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,Calibrate a camera using Charuco corners.
core,double
core,"cv::aruco::calibrateCameraCharuco (InputArrayOfArrays charucoCorners, InputArrayOfArrays charucoIds, const Ptr< CharucoBoard > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs=noArray(), OutputArrayOfArrays tvecs=noArray(), int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))"
core,It's the same function as calibrateCameraCharuco but without calibration error estimation.
core,void
core,"cv::aruco::detectCharucoDiamond (InputArray image, InputArrayOfArrays markerCorners, InputArray markerIds, float squareMarkerLengthRate, OutputArrayOfArrays diamondCorners, OutputArray diamondIds, InputArray cameraMatrix=noArray(), InputArray distCoeffs=noArray(), Ptr< Dictionary > dictionary=makePtr< Dictionary >(getPredefinedDictionary(PredefinedDictionaryType::DICT_4X4_50)))"
core,Detect ChArUco Diamond markers.
core,void
core,"cv::aruco::detectMarkers (InputArray image, const Ptr< Dictionary > &dictionary, OutputArrayOfArrays corners, OutputArray ids, const Ptr< DetectorParameters > &parameters=makePtr< DetectorParameters >(), OutputArrayOfArrays rejectedImgPoints=noArray())"
core,detect markers
core,void
core,"cv::aruco::drawCharucoDiamond (const Ptr< Dictionary > &dictionary, Vec4i ids, int squareLength, int markerLength, OutputArray img, int marginSize=0, int borderBits=1)"
core,Draw a ChArUco Diamond marker.
core,void
core,"cv::aruco::drawPlanarBoard (const Ptr< Board > &board, Size outSize, OutputArray img, int marginSize, int borderBits)"
core,draw planar board
core,int
core,"cv::aruco::estimatePoseBoard (InputArrayOfArrays corners, InputArray ids, const Ptr< Board > &board, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, bool useExtrinsicGuess=false)"
core,bool
core,"cv::aruco::estimatePoseCharucoBoard (InputArray charucoCorners, InputArray charucoIds, const Ptr< CharucoBoard > &board, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, bool useExtrinsicGuess=false)"
core,Pose estimation for a ChArUco board given some of their corners.
core,void
core,"cv::aruco::estimatePoseSingleMarkers (InputArrayOfArrays corners, float markerLength, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvecs, OutputArray tvecs, OutputArray objPoints=noArray(), const Ptr< EstimateParameters > &estimateParameters=makePtr< EstimateParameters >())"
core,void
core,"cv::aruco::getBoardObjectAndImagePoints (const Ptr< Board > &board, InputArrayOfArrays detectedCorners, InputArray detectedIds, OutputArray objPoints, OutputArray imgPoints)"
core,get board object and image points
core,int
core,"cv::aruco::interpolateCornersCharuco (InputArrayOfArrays markerCorners, InputArray markerIds, InputArray image, const Ptr< CharucoBoard > &board, OutputArray charucoCorners, OutputArray charucoIds, InputArray cameraMatrix=noArray(), InputArray distCoeffs=noArray(), int minMarkers=2)"
core,Interpolate position of ChArUco board corners.
core,void
core,"cv::aruco::refineDetectedMarkers (InputArray image, const Ptr< Board > &board, InputOutputArrayOfArrays detectedCorners, InputOutputArray detectedIds, InputOutputArrayOfArrays rejectedCorners, InputArray cameraMatrix=noArray(), InputArray distCoeffs=noArray(), float minRepDistance=10.f, float errorCorrectionRate=3.f, bool checkAllOrders=true, OutputArray recoveredIdxs=noArray(), const Ptr< DetectorParameters > &parameters=makePtr< DetectorParameters >())"
core,refine detected markers
core,bool
core,"cv::aruco::testCharucoCornersCollinear (const Ptr< CharucoBoard > &board, InputArray charucoIds)"
core,This module contains functionality for upscaling an image via convolutional neural networks. The following four models are implemented:
core,EDSR https://arxiv.org/abs/1707.02921
core,ESPCN https://arxiv.org/abs/1609.05158
core,FSRCNN https://arxiv.org/abs/1608.00367
core,LapSRN https://arxiv.org/abs/1710.01992
core,Classes
core,class
core,cv::dnn_superres::DnnSuperResImpl
core,A class to upscale images via convolutional neural networks. The following four models are implemented: More...
core,Tracking is an important issue for many computer vision applications in real world scenario. The development in this area is very fragmented and this API is an interface useful for plug several algorithms and compare them.
core,Classes
core,class
core,cv::TrackerCSRT
core,the CSRT tracker More...
core,class
core,cv::TrackerKCF
core,the KCF (Kernelized Correlation Filter) tracker More...
core,Functions
core,void
core,"cv::cuda::buildWarpAffineMaps (InputArray M, bool inverse, Size dsize, OutputArray xmap, OutputArray ymap, Stream &stream=Stream::Null())"
core,Builds transformation maps for affine transformation.
core,void
core,"cv::cuda::buildWarpAffineMaps (Mat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::buildWarpAffineMaps (UMat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::buildWarpPerspectiveMaps (InputArray M, bool inverse, Size dsize, OutputArray xmap, OutputArray ymap, Stream &stream=Stream::Null())"
core,Builds transformation maps for perspective transformation.
core,void
core,"cv::cuda::buildWarpPerspectiveMaps (Mat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::buildWarpPerspectiveMaps (UMat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::pyrDown (InputArray src, OutputArray dst, Stream &stream=Stream::Null())"
core,Smoothes an image and downsamples it.
core,void
core,"cv::cuda::pyrUp (InputArray src, OutputArray dst, Stream &stream=Stream::Null())"
core,Upsamples an image and then smoothes it.
core,void
core,"cv::cuda::remap (InputArray src, OutputArray dst, InputArray xmap, InputArray ymap, int interpolation, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,Applies a generic geometrical transformation to an image.
core,void
core,"cv::cuda::resize (InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR, Stream &stream=Stream::Null())"
core,Resizes an image.
core,void
core,"cv::cuda::rotate (InputArray src, OutputArray dst, Size dsize, double angle, double xShift=0, double yShift=0, int interpolation=INTER_LINEAR, Stream &stream=Stream::Null())"
core,"Rotates an image around the origin (0,0) and then shifts it."
core,void
core,"cv::cuda::warpAffine (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,Applies an affine transformation to an image.
core,void
core,"cv::cuda::warpAffine (InputArray src, OutputArray dst, Mat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::warpAffine (InputArray src, OutputArray dst, UMat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::warpPerspective (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,Applies a perspective transformation to an image.
core,void
core,"cv::cuda::warpPerspective (InputArray src, OutputArray dst, Mat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,void
core,"cv::cuda::warpPerspective (InputArray src, OutputArray dst, UMat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())"
core,"The Registration module implements parametric image registration. The implemented method is direct alignment, that is, it uses directly the pixel values for calculating the registration between a pair of images, as opposed to feature-based registration. The implementation follows essentially the corresponding part of [259] ."
core,"Feature based methods have some advantages over pixel based methods when we are trying to register pictures that have been shoot under different lighting conditions or exposition times, or when the images overlap only partially. On the other hand, the main advantage of pixel-based methods when compared to feature based methods is their better precision for some pictures (those shoot under similar lighting conditions and that have a significative overlap), due to the fact that we are using all the information available in the image, which allows us to achieve subpixel accuracy. This is particularly important for certain applications like multi-frame denoising or super-resolution."
core,"In fact, pixel and feature registration methods can complement each other: an application could first obtain a coarse registration using features and then refine the registration using a pixel based method on the overlapping area of the images. The code developed allows this use case."
core,"The module implements classes derived from the abstract classes cv::reg::Map or cv::reg::Mapper. The former models a coordinate transformation between two reference frames, while the later encapsulates a way of invoking a method that calculates a Map between two images. Although the objective has been to implement pixel based methods, the module can be extended to support other methods that can calculate transformations between images (feature methods, optical flow, etc.)."
core,"Each class derived from Map implements a motion model, as follows:"
core,MapShift: Models a simple translation
core,MapAffine: Models an affine transformation
core,MapProjec: Models a projective transformation
core,"MapProject can also be used to model affine motion or translations, but some operations on it are more costly, and that is the reason for defining the other two classes."
core,The classes derived from Mapper are
core,MapperGradShift: Gradient based alignment for calculating translations. It produces a MapShift (two parameters that correspond to the shift vector).
core,"MapperGradEuclid: Gradient based alignment for euclidean motions, that is, rotations and translations. It calculates three parameters (angle and shift vector), although the result is stored in a MapAffine object for convenience."
core,"MapperGradSimilar: Gradient based alignment for calculating similarities, which adds scaling to the euclidean motion. It calculates four parameters (two for the anti-symmetric matrix and two for the shift vector), although the result is stored in a MapAffine object for better convenience."
core,MapperGradAffine: Gradient based alignment for an affine motion model. The number of parameters is six and the result is stored in a MapAffine object.
core,MapperGradProj: Gradient based alignment for calculating projective transformations. The number of parameters is eight and the result is stored in a MapProject object.
core,"MapperPyramid: It implements hyerarchical motion estimation using a Gaussian pyramid. Its constructor accepts as argument any other object that implements the Mapper interface, and it is that mapper the one called by MapperPyramid for each scale of the pyramid."
core,"If the motion between the images is not very small, the normal way of using these classes is to create a MapperGrad* object and use it as input to create a MapperPyramid, which in turn is called to perform the calculation. However, if the motion between the images is small enough, we can use directly the MapperGrad* classes. Another possibility is to use first a feature based method to perform a coarse registration and then do a refinement through MapperPyramid or directly a MapperGrad* object. The ""calculate"" method of the mappers accepts an initial estimation of the motion as input."
core,"When deciding which MapperGrad to use we must take into account that mappers with more parameters can handle more complex motions, but involve more calculations and are therefore slower. Also, if we are confident on the motion model that is followed by the sequence, increasing the number of parameters beyond what we need will decrease the accuracy: it is better to use the least number of degrees of freedom that we can."
core,In the module tests there are examples that show how to register a pair of images using any of the implemented mappers.
core,Classes
core,class
core,cv::reg::Map
core,Base class for modelling a Map between two images. More...
core,class
core,cv::reg::MapAffine
core,class
core,cv::reg::Mapper
core,Base class for modelling an algorithm for calculating a map. More...
core,class
core,cv::reg::MapperGradAffine
core,class
core,cv::reg::MapperGradEuclid
core,class
core,cv::reg::MapperGradProj
core,class
core,cv::reg::MapperGradShift
core,class
core,cv::reg::MapperGradSimilar
core,class
core,cv::reg::MapperPyramid
core,class
core,cv::reg::MapProjec
core,class
core,cv::reg::MapShift
core,class
core,cv::reg::MapTypeCaster
core,This module provides storage routines for Hierarchical Data Format objects.
core,Face module changelog
core,Face Recognition with OpenCV
core,Classes
core,class
core,cv::face::BasicFaceRecognizer
core,struct
core,cv::face::CParams
core,class
core,cv::face::EigenFaceRecognizer
core,class
core,cv::face::Facemark
core,Abstract base class for all facemark models. More...
core,class
core,cv::face::FacemarkAAM
core,class
core,cv::face::FacemarkLBF
core,class
core,cv::face::FacemarkTrain
core,Abstract base class for trainable facemark models. More...
core,class
core,cv::face::FaceRecognizer
core,Abstract base class for all face recognition models. More...
core,class
core,cv::face::FisherFaceRecognizer
core,class
core,cv::face::LBPHFaceRecognizer
core,class
core,cv::face::MACE
core,"Minimum Average Correlation Energy Filter useful for authentication with (cancellable) biometrical features. (does not need many positives to train (10-50), and no negatives at all, also robust to noise/salting) More..."
core,class
core,cv::face::PredictCollector
core,Abstract base class for all strategies of prediction result handling. More...
core,class
core,cv::face::StandardCollector
core,Default predict collector. More...
core,Classes
core,class
core,cv::plot::Plot2d
core,Classes
core,class
core,cv::quality::QualityBase
core,"The opencv hfs module contains an efficient algorithm to segment an image. This module is implemented based on the paper Hierarchical Feature Selection for Efficient Image Segmentation, ECCV 2016. The original project was developed by Yun Liu(https://github.com/yun-liu/hfs)."
core,Functions and classes described in this section are used to perform various linear or non-linear filtering operations on 2D images.
core,An example containing all basic morphology operators like erode and dilate can be found at opencv_source_code/samples/gpu/morphology.cpp
core,Classes
core,class
core,cv::cuda::Filter
core,Common interface for all CUDA filters : More...
core,This section documents OpenCV's interface to the FLANN library. FLANN (Fast Library for Approximate Nearest Neighbors) is a library that contains a collection of algorithms optimized for fast nearest neighbor search in large datasets and for high dimensional features. More information about FLANN can be found in [201] .
core,Classes
core,struct
core,cv::flann::CvType< T >
core,struct
core,cv::flann::CvType< char >
core,struct
core,cv::flann::CvType< double >
core,struct
core,cv::flann::CvType< float >
core,struct
core,cv::flann::CvType< short >
core,struct
core,cv::flann::CvType< unsigned char >
core,struct
core,cv::flann::CvType< unsigned short >
core,class
core,cv::flann::GenericIndex< Distance >
core,The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built. More...
core,Namespace for all functions is cv::intensity_transform.
core,Classes
core,class
core,cv::cuda::DisparityBilateralFilter
core,Class refining a disparity map using joint bilateral filtering. : More...
core,class
core,cv::cuda::StereoBeliefPropagation
core,Class computing stereo correspondence using the belief propagation algorithm. : More...
core,class
core,cv::cuda::StereoBM
core,Class computing stereo correspondence (disparity map) using the block matching algorithm. : More...
core,class
core,cv::cuda::StereoConstantSpaceBP
core,Class computing stereo correspondence using the constant space belief propagation algorithm. : More...
core,class
core,cv::cuda::StereoSGM
core,The class implements the modified H. Hirschmuller algorithm [126]. Limitation and difference are as follows: More...
core,Classes
core,class
core,cv::wechat_qrcode::WeChatQRCode
core,WeChat QRCode includes two CNN-based models: A object detection model and a super resolution model. Object detection model is applied to detect QRCode with the bounding box. super resolution model is applied to zoom in QRCode when it is small. More...
core,Classes
core,struct
core,cv::stereo::MatchQuasiDense
core,struct
core,cv::stereo::PropagationParameters
core,class
core,cv::stereo::QuasiDenseStereo
core,Class containing the methods needed for Quasi Dense Stereo computation. More...
core,class
core,cv::stereo::StereoBinaryBM
core,"Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. More..."
core,class
core,cv::stereo::StereoBinarySGBM
core,The class implements the modified H. Hirschmuller algorithm [126] that differs from the original one as follows: More...
core,class
core,cv::stereo::StereoMatcher
core,Filters off small noise blobs (speckles) in the disparity map. More...
core,Read and write video or images sequence with OpenCV.
core,The module provides biological visual systems models (human visual system and others). It also provides derivated objects that take advantage of those bio-inspired models.
core,Bioinspired Module Retina Introduction
core,Classes
core,class
core,cv::bioinspired::Retina
core,class which allows the Gipsa/Listic Labs model to be used with OpenCV. More...
core,class
core,cv::bioinspired::RetinaFastToneMapping
core,a wrapper class which allows the tone mapping algorithm of Meylan&al(2007) to be used with OpenCV. More...
core,struct
core,cv::bioinspired::RetinaParameters
core,retina model parameters structure More...
core,struct
core,cv::bioinspired::SegmentationParameters
core,parameter structure that stores the transient events detector setup parameters More...
core,class
core,cv::bioinspired::TransientAreasSegmentationModule
core,class which provides a transient/moving areas segmentation module More...
core,"The Machine Learning Library (MLL) is a set of classes and functions for statistical classification, regression, and clustering of data."
core,"Most of the classification and regression algorithms are implemented as C++ classes. As the algorithms have different sets of features (like an ability to handle missing measurements or categorical input variables), there is a little common ground between the classes. This common ground is defined by the class cv::ml::StatModel that all the other ML classes are derived from."
core,See detailed overview here: Machine Learning Overview.
core,Classes
core,class
core,cv::ml::ANN_MLP
core,Artificial Neural Networks - Multi-Layer Perceptrons. More...
core,class
core,cv::ml::Boost
core,Boosted tree classifier derived from DTrees. More...
core,class
core,cv::ml::DTrees
core,The class represents a single decision tree or a collection of decision trees. More...
core,class
core,cv::ml::EM
core,The class implements the Expectation Maximization algorithm. More...
core,class
core,cv::ml::KNearest
core,The class implements K-Nearest Neighbors model. More...
core,class
core,cv::ml::LogisticRegression
core,Implements Logistic Regression classifier. More...
core,class
core,cv::ml::NormalBayesClassifier
core,Bayes classifier for normally distributed data. More...
core,class
core,cv::ml::ParamGrid
core,The structure represents the logarithmic grid range of statmodel parameters. More...
core,class
core,cv::ml::RTrees
core,The class implements the random forest predictor. More...
core,struct
core,cv::ml::SimulatedAnnealingSolverSystem
core,This class declares example interface for system state used in simulated annealing optimization algorithm. More...
core,class
core,cv::ml::StatModel
core,Base class for statistical models in OpenCV ML. More...
core,class
core,cv::ml::SVM
core,Support Vector Machines. More...
core,class
core,cv::ml::SVMSGD
core,Stochastic Gradient Descent SVM classifier. More...
core,class
core,cv::ml::TrainData
core,Class encapsulating training data. More...
core,Functions
core,void
core,"cv::ml::createConcentricSpheresTestSet (int nsamples, int nfeatures, int nclasses, OutputArray samples, OutputArray responses)"
core,Creates test set.
core,void
core,"cv::ml::randMVNormal (InputArray mean, InputArray cov, int nsamples, OutputArray samples)"
core,Generates sample from multivariate normal distribution.
core,template<class SimulatedAnnealingSolverSystem >
core,int
core,"cv::ml::simulatedAnnealingSolver (SimulatedAnnealingSolverSystem &solverSystem, double initialTemperature, double finalTemperature, double coolingRatio, size_t iterationsPerStep, double *lastTemperature=NULL, cv::RNG &rngEnergy=cv::theRNG())"
core,The class implements simulated annealing for optimization.
core,Classes
core,class
core,cv::xphoto::GrayworldWB
core,Gray-world white balance algorithm. More...
core,class
core,cv::xphoto::LearningBasedWB
core,More sophisticated learning-based automatic white balance algorithm. More...
core,class
core,cv::xphoto::SimpleWB
core,A simple white balance algorithm that works by independently stretching each of the input image channels to the specified range. For increased robustness it ignores the top and bottom \(p\%\) of pixel values. More...
core,class
core,cv::xphoto::TonemapDurand
core,This algorithm decomposes image into two layers: base layer and detail layer using bilateral filter and compresses contrast of the base layer thus preserving all the details. More...
core,class
core,cv::xphoto::WhiteBalancer
core,The base class for auto white balance algorithms. More...
core,Functions
core,void
core,"cv::xphoto::applyChannelGains (InputArray src, OutputArray dst, float gainB, float gainG, float gainR)"
core,"Implements an efficient fixed-point approximation for applying channel gains, which is the last step of multiple white balance algorithms."
core,void
core,"cv::xphoto::bm3dDenoising (InputArray src, InputOutputArray dstStep1, OutputArray dstStep2, float h=1, int templateWindowSize=4, int searchWindowSize=16, int blockMatchingStep1=2500, int blockMatchingStep2=400, int groupSize=8, int slidingStep=1, float beta=2.0f, int normType=cv::NORM_L2, int step=cv::xphoto::BM3D_STEPALL, int transformType=cv::xphoto::HAAR)"
core,Performs image denoising using the Block-Matching and 3D-filtering algorithm http://www.cs.tut.fi/~foi/GCF-BM3D/BM3D_TIP_2007.pdf with several computational optimizations. Noise expected to be a gaussian white noise.
core,void
core,"cv::xphoto::bm3dDenoising (InputArray src, OutputArray dst, float h=1, int templateWindowSize=4, int searchWindowSize=16, int blockMatchingStep1=2500, int blockMatchingStep2=400, int groupSize=8, int slidingStep=1, float beta=2.0f, int normType=cv::NORM_L2, int step=cv::xphoto::BM3D_STEPALL, int transformType=cv::xphoto::HAAR)"
core,Performs image denoising using the Block-Matching and 3D-filtering algorithm http://www.cs.tut.fi/~foi/GCF-BM3D/BM3D_TIP_2007.pdf with several computational optimizations. Noise expected to be a gaussian white noise.
core,Ptr< GrayworldWB >
core,cv::xphoto::createGrayworldWB ()
core,Creates an instance of GrayworldWB.
core,Ptr< LearningBasedWB >
core,cv::xphoto::createLearningBasedWB (const String &path_to_model=String())
core,Creates an instance of LearningBasedWB.
core,Ptr< SimpleWB >
core,cv::xphoto::createSimpleWB ()
core,Creates an instance of SimpleWB.
core,Ptr< TonemapDurand >
core,"cv::xphoto::createTonemapDurand (float gamma=1.0f, float contrast=4.0f, float saturation=1.0f, float sigma_color=2.0f, float sigma_space=2.0f)"
core,Creates TonemapDurand object.
core,void
core,"cv::xphoto::dctDenoising (const Mat &src, Mat &dst, const double sigma, const int psize=16)"
core,The function implements simple dct-based denoising.
core,virtual float
core,cv::xphoto::TonemapDurand::getContrast () const =0
core,virtual float
core,cv::xphoto::TonemapDurand::getSaturation () const =0
core,virtual float
core,cv::xphoto::TonemapDurand::getSigmaColor () const =0
core,virtual float
core,cv::xphoto::TonemapDurand::getSigmaSpace () const =0
core,void
core,"cv::xphoto::inpaint (const Mat &src, const Mat &mask, Mat &dst, const int algorithmType)"
core,The function implements different single-image inpainting algorithms.
core,void
core,"cv::xphoto::oilPainting (InputArray src, OutputArray dst, int size, int dynRatio)"
core,oilPainting See the book [46] for details.
core,void
core,"cv::xphoto::oilPainting (InputArray src, OutputArray dst, int size, int dynRatio, int code)"
core,oilPainting See the book [46] for details.
core,virtual void
core,cv::xphoto::TonemapDurand::setContrast (float contrast)=0
core,virtual void
core,cv::xphoto::TonemapDurand::setSaturation (float saturation)=0
core,virtual void
core,cv::xphoto::TonemapDurand::setSigmaColor (float sigma_color)=0
core,virtual void
core,cv::xphoto::TonemapDurand::setSigmaSpace (float sigma_space)=0
core,Enumerations
core,enum
core,"cv::ximgproc::LocalBinarizationMethods { cv::ximgproc::BINARIZATION_NIBLACK = 0 , cv::ximgproc::BINARIZATION_SAUVOLA = 1 , cv::ximgproc::BINARIZATION_WOLF = 2 , cv::ximgproc::BINARIZATION_NICK = 3 }"
core,Specifies the binarization method to use in cv::ximgproc::niBlackThreshold. More...
core,enum
core,"cv::ximgproc::ThinningTypes { cv::ximgproc::THINNING_ZHANGSUEN = 0 , cv::ximgproc::THINNING_GUOHALL = 1 }"
core,Functions
core,void
core,"cv::ximgproc::anisotropicDiffusion (InputArray src, OutputArray dst, float alpha, float K, int niters)"
core,Performs anisotropic diffusion on an image.
core,void
core,"cv::ximgproc::edgePreservingFilter (InputArray src, OutputArray dst, int d, double threshold)"
core,Smoothes an image using the Edge-Preserving filter.
core,void
core,"cv::ximgproc::findEllipses (InputArray image, OutputArray ellipses, float scoreThreshold=0.7f, float reliabilityThreshold=0.5f, float centerDistanceThreshold=0.05f)"
core,Finds ellipses fastly in an image using projective invariant pruning.
core,void
core,"cv::ximgproc::niBlackThreshold (InputArray _src, OutputArray _dst, double maxValue, int type, int blockSize, double k, int binarizationMethod=BINARIZATION_NIBLACK, double r=128)"
core,Performs thresholding on input images using Niblack's technique or some of the popular variations it inspired.
core,Matx23d
core,cv::ximgproc::PeiLinNormalization (InputArray I)
core,Calculates an affine transformation that normalize given image using Pei&Lin Normalization.
core,void
core,"cv::ximgproc::PeiLinNormalization (InputArray I, OutputArray T)"
core,void
core,"cv::ximgproc::thinning (InputArray src, OutputArray dst, int thinningType=THINNING_ZHANGSUEN)"
core,"Applies a binary blob thinning operation, to achieve a skeletization of the input image."
core,"Two-dimensional phase unwrapping is found in different applications like terrain elevation estimation in synthetic aperture radar (SAR), field mapping in magnetic resonance imaging or as a way of finding corresponding pixels in structured light reconstruction with sinusoidal patterns."
core,"Given a phase map, wrapped between [-pi; pi], phase unwrapping aims at finding the ""true"" phase map by adding the right number of 2*pi to each pixel."
core,"The problem is straightforward for perfect wrapped phase map, but real data are usually not noise-free. Among the different algorithms that were developed, quality-guided phase unwrapping methods are fast and efficient. They follow a path that unwraps high quality pixels first, avoiding error propagation from the start."
core,"In this module, a quality-guided phase unwrapping is implemented following the approach described in [157] ."
core,Classes
core,class
core,cv::phase_unwrapping::HistogramPhaseUnwrapping
core,"Class implementing two-dimensional phase unwrapping based on [157] This algorithm belongs to the quality-guided phase unwrapping methods. First, it computes a reliability map from second differences between a pixel and its eight neighbours. Reliability values lie between 0 and 16*pi*pi. Then, this reliability map is used to compute the reliabilities of ""edges"". An edge is an entity defined by two pixels that are connected horizontally or vertically. Its reliability is found by adding the the reliabilities of the two pixels connected through it. Edges are sorted in a histogram based on their reliability values. This histogram is then used to unwrap pixels, starting from the highest quality pixel. More..."
core,class
core,cv::phase_unwrapping::PhaseUnwrapping
core,Abstract base class for phase unwrapping. More...
core,Namespace for all functions is ft. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern FT_degree_dimension_method.
core,Enumerations
core,enum
core,"{ cv::ft::LINEAR = 1 , cv::ft::SINUS = 2 }"
core,enum
core,"{ cv::ft::ONE_STEP = 1 , cv::ft::MULTI_STEP = 2 , cv::ft::ITERATIVE = 3 }"
core,Namespaces
core,namespace
core,cv::cudev::functional_detail
core,namespace
core,cv::cudev::vec_math_detail
core,Functions
core,"cv::cudev::Texture< T, R >::Texture ()=default"
core,__host__
core,"cv::cudev::Texture< T, R >::Texture (const int rows_, const int cols_, T *data, const size_t step, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,__host__
core,"cv::cudev::Texture< T, R >::Texture (const size_t sizeInBytes, T *data, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,"cv::cudev::Texture< T, R >::Texture (const Texture &)=default"
core,__host__
core,"cv::cudev::Texture< T, R >::Texture (PtrStepSz< T > src, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,"cv::cudev::Texture< T, R >::Texture (Texture &&)=default"
core,__host__
core,"cv::cudev::TextureOff< T, R >::TextureOff (const int rows, const int cols, T *data, const size_t step, const int yoff_=0, const int xoff_=0, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,"cv::cudev::TextureOff< T, R >::TextureOff (const TextureOff &)=default"
core,__host__
core,"cv::cudev::TextureOff< T, R >::TextureOff (PtrStepSz< T > src, const int yoff_=0, const int xoff_=0, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,"cv::cudev::TextureOff< T, R >::TextureOff (TextureOff &&)=default"
core,__host__
core,"cv::cudev::TextureOffPtr< T, R >::TextureOffPtr (const cudaTextureObject_t tex_, const int yoff_, const int xoff_)"
core,__host__
core,"cv::cudev::TexturePtr< T, R >::TexturePtr ()"
core,__host__
core,"cv::cudev::TexturePtr< uint64, R >::TexturePtr ()"
core,__host__
core,"cv::cudev::TexturePtr< T, R >::TexturePtr (const cudaTextureObject_t tex_)"
core,__host__
core,"cv::cudev::TexturePtr< uint64, R >::TexturePtr (const cudaTextureObject_t tex_)"
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::UniqueTexture () noexcept"
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::UniqueTexture (const int rows, const int cols, T *data, const size_t step, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::UniqueTexture (const size_t sizeInBytes, T *data, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)"
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::UniqueTexture (UniqueTexture &&other) noexcept"
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::UniqueTexture (UniqueTexture &)=delete"
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::~UniqueTexture ()"
core,__device__ __forceinline__ char1
core,cv::cudev::abs (const char1 &a)
core,__device__ __forceinline__ char2
core,cv::cudev::abs (const char2 &a)
core,__device__ __forceinline__ char3
core,cv::cudev::abs (const char3 &a)
core,__device__ __forceinline__ char4
core,cv::cudev::abs (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::abs (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::abs (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::abs (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::abs (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::abs (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::abs (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::abs (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::abs (const float4 &a)
core,__device__ __forceinline__ int1
core,cv::cudev::abs (const int1 &a)
core,__device__ __forceinline__ int2
core,cv::cudev::abs (const int2 &a)
core,__device__ __forceinline__ int3
core,cv::cudev::abs (const int3 &a)
core,__device__ __forceinline__ int4
core,cv::cudev::abs (const int4 &a)
core,__device__ __forceinline__ short1
core,cv::cudev::abs (const short1 &a)
core,__device__ __forceinline__ short2
core,cv::cudev::abs (const short2 &a)
core,__device__ __forceinline__ short3
core,cv::cudev::abs (const short3 &a)
core,__device__ __forceinline__ short4
core,cv::cudev::abs (const short4 &a)
core,__device__ __forceinline__ uchar1
core,cv::cudev::abs (const uchar1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::abs (const uchar2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::abs (const uchar3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::abs (const uchar4 &a)
core,__device__ __forceinline__ uint1
core,cv::cudev::abs (const uint1 &a)
core,__device__ __forceinline__ uint2
core,cv::cudev::abs (const uint2 &a)
core,__device__ __forceinline__ uint3
core,cv::cudev::abs (const uint3 &a)
core,__device__ __forceinline__ uint4
core,cv::cudev::abs (const uint4 &a)
core,__device__ __forceinline__ ushort1
core,cv::cudev::abs (const ushort1 &a)
core,__device__ __forceinline__ ushort2
core,cv::cudev::abs (const ushort2 &a)
core,__device__ __forceinline__ ushort3
core,cv::cudev::abs (const ushort3 &a)
core,__device__ __forceinline__ ushort4
core,cv::cudev::abs (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, abs_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::abs_ (const SrcPtr &src)
core,"template<class SrcPtr1 , class SrcPtr2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, absdiff_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > >"
core,"cv::cudev::absdiff_ (const SrcPtr1 &src1, const SrcPtr2 &src2)"
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::acos (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::acos (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::acos (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::acos (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acos (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acos (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acos (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acos (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, acos_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::acos_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::acosh (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::acosh (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::acosh (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::acosh (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::acosh (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::acosh (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::acosh (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::acosh (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, acosh_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::acosh_ (const SrcPtr &src)
core,static __host__ AffineMapPtrSz
core,"cv::cudev::affineMap (Size dstSize, const GpuMat_< float > &warpMat)"
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::asin (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::asin (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::asin (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::asin (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asin (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asin (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asin (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asin (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, asin_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::asin_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::asinh (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::asinh (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::asinh (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::asinh (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::asinh (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::asinh (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::asinh (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::asinh (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, asinh_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::asinh_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::atan (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::atan (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::atan (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::atan (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atan (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atan (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atan (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atan (const ushort4 &a)
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const char1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const char2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const char3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const char4 &a, float s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const double4 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const float4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const int1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const int2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const int3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const int4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const short1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const short2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const short3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const short4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const uchar1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const uchar2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const uchar3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const uchar4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const uint1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const uint2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const uint3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const uint4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (const ushort1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (const ushort2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (const ushort3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (const ushort4 &a, float s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::atan2 (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::atan2 (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::atan2 (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::atan2 (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::atan2 (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::atan2 (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::atan2 (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::atan2 (float s, const ushort4 &b)"
core,"template<class SrcPtr1 , class SrcPtr2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, atan2_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > >"
core,"cv::cudev::atan2_ (const SrcPtr1 &src1, const SrcPtr2 &src2)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, atan_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::atan_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::atanh (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::atanh (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::atanh (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::atanh (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::atanh (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::atanh (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::atanh (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::atanh (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, atanh_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::atanh_ (const SrcPtr &src)
core,static __device__ double
core,"cv::cudev::atomicAdd (double *address, double val)"
core,__device__ __forceinline__ float
core,"cv::cudev::atomicAdd (float *address, float val)"
core,__device__ __forceinline__ int
core,"cv::cudev::atomicAdd (int *address, int val)"
core,__device__ __forceinline__ uint
core,"cv::cudev::atomicAdd (uint *address, uint val)"
core,static __device__ double
core,"cv::cudev::atomicMax (double *address, double val)"
core,static __device__ float
core,"cv::cudev::atomicMax (float *address, float val)"
core,__device__ __forceinline__ int
core,"cv::cudev::atomicMax (int *address, int val)"
core,__device__ __forceinline__ uint
core,"cv::cudev::atomicMax (uint *address, uint val)"
core,static __device__ double
core,"cv::cudev::atomicMin (double *address, double val)"
core,static __device__ float
core,"cv::cudev::atomicMin (float *address, float val)"
core,__device__ __forceinline__ int
core,"cv::cudev::atomicMin (int *address, int val)"
core,__device__ __forceinline__ uint
core,"cv::cudev::atomicMin (uint *address, uint val)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_GRAY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HLS4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HLS4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HLS_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HLS_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HSV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HSV4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HSV_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_HSV_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_Luv_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_XYZ4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_XYZ_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_YCrCb4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_YCrCb_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_YUV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGR_to_YUV_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_GRAY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HLS4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HLS4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HLS_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HLS_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HSV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HSV4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HSV_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_HSV_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_Luv_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_XYZ4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_XYZ_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_YCrCb4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_YCrCb_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_YUV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::BGRA_to_YUV_ (const SrcPtr &src)
core,"template<int n0, int n1, class Op >"
core,"__host__ __device__ BinaryTupleAdapter< Op, n0, n1 >"
core,cv::cudev::binaryTupleAdapter (const Op &op)
core,template<class Op >
core,__host__ __device__ Binder1st< Op >
core,"cv::cudev::bind1st (const Op &op, const typename Op::first_argument_type &arg1)"
core,template<class Op >
core,__host__ __device__ Binder2nd< Op >
core,"cv::cudev::bind2nd (const Op &op, const typename Op::second_argument_type &arg2)"
core,"template<class InIt , class OutIt >"
core,__device__ static __forceinline__ void
core,"cv::cudev::blockCopy (InIt beg, InIt end, OutIt out)"
core,"template<class It , typename T >"
core,__device__ static __forceinline__ void
core,"cv::cudev::blockFill (It beg, It end, const T &value)"
core,"template<int N, typename P0 , typename P1 , typename P2 , typename P3 , typename P4 , typename P5 , typename P6 , typename P7 , typename P8 , typename P9 , typename R0 , typename R1 , typename R2 , typename R3 , typename R4 , typename R5 , typename R6 , typename R7 , typename R8 , typename R9 , class Op0 , class Op1 , class Op2 , class Op3 , class Op4 , class Op5 , class Op6 , class Op7 , class Op8 , class Op9 >"
core,__device__ __forceinline__ void
core,"cv::cudev::blockReduce (const tuple< P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 > &smem, const tuple< R0, R1, R2, R3, R4, R5, R6, R7, R8, R9 > &val, uint tid, const tuple< Op0, Op1, Op2, Op3, Op4, Op5, Op6, Op7, Op8, Op9 > &op)"
core,"template<int N, typename T , class Op >"
core,__device__ __forceinline__ void
core,"cv::cudev::blockReduce (volatile T *smem, T &val, uint tid, const Op &op)"
core,"template<int N, typename KP0 , typename KP1 , typename KP2 , typename KP3 , typename KP4 , typename KP5 , typename KP6 , typename KP7 , typename KP8 , typename KP9 , typename KR0 , typename KR1 , typename KR2 , typename KR3 , typename KR4 , typename KR5 , typename KR6 , typename KR7 , typename KR8 , typename KR9 , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp0 , class Cmp1 , class Cmp2 , class Cmp3 , class Cmp4 , class Cmp5 , class Cmp6 , class Cmp7 , class Cmp8 , class Cmp9 >"
core,__device__ __forceinline__ void
core,"cv::cudev::blockReduceKeyVal (const tuple< KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9 > &skeys, const tuple< KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9 > &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const tuple< Cmp0, Cmp1, Cmp2, Cmp3, Cmp4, Cmp5, Cmp6, Cmp7, Cmp8, Cmp9 > &cmp)"
core,"template<int N, typename K , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp >"
core,__device__ __forceinline__ void
core,"cv::cudev::blockReduceKeyVal (volatile K *skeys, K &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const Cmp &cmp)"
core,"template<int N, typename K , typename V , class Cmp >"
core,__device__ __forceinline__ void
core,"cv::cudev::blockReduceKeyVal (volatile K *skeys, K &key, volatile V *svals, V &val, uint tid, const Cmp &cmp)"
core,"template<int THREADS_NUM, typename T >"
core,__device__ __forceinline__ T
core,"cv::cudev::blockScanExclusive (T data, volatile T *smem, uint tid)"
core,"template<int THREADS_NUM, typename T >"
core,__device__ T
core,"cv::cudev::blockScanInclusive (T data, volatile T *smem, uint tid)"
core,"template<class InIt , class OutIt , class UnOp >"
core,__device__ static __forceinline__ void
core,"cv::cudev::blockTransform (InIt beg, InIt end, OutIt out, const UnOp &op)"
core,"template<class InIt1 , class InIt2 , class OutIt , class BinOp >"
core,__device__ static __forceinline__ void
core,"cv::cudev::blockTransform (InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, const BinOp &op)"
core,"template<class OutIt , typename T >"
core,__device__ static __forceinline__ void
core,"cv::cudev::blockYota (OutIt beg, OutIt end, T value)"
core,template<class SrcPtr >
core,__host__ BrdConstant< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::brdConstant (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ BrdConstant< typename PtrTraits< SrcPtr >::ptr_type >
core,"cv::cudev::brdConstant (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type val)"
core,template<class SrcPtr >
core,"__host__ BrdBase< BrdReflect, typename PtrTraits< SrcPtr >::ptr_type >"
core,cv::cudev::brdReflect (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ BrdBase< BrdReflect101, typename PtrTraits< SrcPtr >::ptr_type >"
core,cv::cudev::brdReflect101 (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ BrdBase< BrdReplicate, typename PtrTraits< SrcPtr >::ptr_type >"
core,cv::cudev::brdReplicate (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ BrdBase< BrdWrap, typename PtrTraits< SrcPtr >::ptr_type >"
core,cv::cudev::brdWrap (const SrcPtr &src)
core,"template<typename T , typename D >"
core,__device__ __forceinline__ D
core,cv::cudev::cast_fp16 (T v)
core,template<>
core,__device__ __forceinline__ short
core,"cv::cudev::cast_fp16< float, short > (float v)"
core,template<>
core,__device__ __forceinline__ float
core,"cv::cudev::cast_fp16< short, float > (short v)"
core,__host__ __forceinline__ void
core,"cv::cudev::checkCudaError (cudaError_t err, const char *file, const int line, const char *func)"
core,template<typename T >
core,__host__ ConstantPtr< T >
core,cv::cudev::constantPtr (T value)
core,template<typename T >
core,ConstantPtrSz< T > __host__
core,"cv::cudev::constantPtr (T value, int rows, int cols)"
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::cos (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::cos (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::cos (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::cos (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cos (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cos (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cos (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cos (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, cos_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::cos_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::cosh (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::cosh (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::cosh (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::cosh (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::cosh (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::cosh (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::cosh (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::cosh (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, cosh_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::cosh_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< CountNonZeroExprBody< SrcPtr > >
core,cv::cudev::countNonZero_ (const SrcPtr &src)
core,"template<typename D , class SrcPtr >"
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, saturate_cast_func< typename PtrTraits< SrcPtr >::value_type, D > > >"
core,cv::cudev::cvt_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< DerivXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,cv::cudev::derivX_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ DerivXPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::derivXPtr (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< DerivYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,cv::cudev::derivY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ DerivYPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::derivYPtr (const SrcPtr &src)
core,__host__ __device__ __forceinline__ int
core,"cv::cudev::divUp (int total, int grain)"
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::exp (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::exp (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::exp (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::exp (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp (const ushort4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::exp10 (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::exp10 (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::exp10 (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::exp10 (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp10 (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp10 (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp10 (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp10 (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, exp10_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::exp10_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::exp2 (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::exp2 (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::exp2 (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::exp2 (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::exp2 (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::exp2 (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::exp2 (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::exp2 (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, exp2_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::exp2_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, exp_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::exp_ (const SrcPtr &src)
core,__host__ cudaTextureObject_t
core,"cv::cudev::UniqueTexture< T, R >::get () const noexcept"
core,template<class Ptr2DSz >
core,__host__ int
core,cv::cudev::getCols (const Ptr2DSz &ptr)
core,template<class Ptr2DSz >
core,__host__ int
core,cv::cudev::getRows (const Ptr2DSz &ptr)
core,template<typename T >
core,__host__ GlobPtrSz< T >
core,cv::cudev::globPtr (const GpuMat &mat)
core,template<typename T >
core,__host__ GlobPtrSz< T >
core,cv::cudev::globPtr (const GpuMat_< T > &mat)
core,template<typename T >
core,__host__ __device__ GlobPtr< T >
core,"cv::cudev::globPtr (T *data, size_t step)"
core,template<typename T >
core,__host__ __device__ GlobPtrSz< T >
core,"cv::cudev::globPtr (T *data, size_t step, int rows, int cols)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, GRAY_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::GRAY_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, GRAY_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::GRAY_to_BGRA_ (const SrcPtr &src)
core,"template<class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCalcSum (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridCalcSum (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCalcSum_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridCalcSum_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtr &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtr &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 >"
core,__host__ void
core,"cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCountNonZero (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridCountNonZero (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridCountNonZero_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridCountNonZero_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridFindMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridFindMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridFindMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridFindMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridFindMinMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridFindMinMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridFindMinMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridFindMinMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridFindMinVal (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridFindMinVal (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridFindMinVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridFindMinVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<int BIN_COUNT, class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridHistogram (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<int BIN_COUNT, class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridHistogram (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<int BIN_COUNT, class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridHistogram_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<int BIN_COUNT, class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridHistogram_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridIntegral (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMerge (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename DstType >"
core,__host__ void
core,"cv::cudev::gridMerge (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMerge (const SrcPtrTuple &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtrTuple , typename DstType >"
core,__host__ void
core,"cv::cudev::gridMerge (const SrcPtrTuple &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class ArrayType , size_t ArraySize, typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMerge (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class ArrayType , size_t ArraySize, typename DstType >"
core,__host__ void
core,"cv::cudev::gridMerge (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class ArrayType , size_t ArraySize, typename DstType >"
core,__host__ void
core,"cv::cudev::gridMerge (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMerge_ (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename DstType >"
core,__host__ void
core,"cv::cudev::gridMerge_ (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMerge_ (const SrcPtrTuple &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtrTuple , typename DstType >"
core,__host__ void
core,"cv::cudev::gridMerge_ (const SrcPtrTuple &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class ArrayType , size_t ArraySize, typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMergeArray (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class ArrayType , size_t ArraySize, typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class ArrayType , size_t ArraySize, typename DstType >"
core,__host__ void
core,"cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class ArrayType , size_t ArraySize, typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class ArrayType , size_t ArraySize, typename DstType >"
core,__host__ void
core,"cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMinMaxLoc (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridMinMaxLoc (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridMinMaxLoc_ (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridMinMaxLoc_ (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridPyrDown (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Brd , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridPyrDown_ (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridPyrUp (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Reductor , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridReduceToColumn (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Reductor , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridReduceToColumn (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Reductor , class Policy , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridReduceToColumn_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Reductor , class Policy , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridReduceToColumn_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class Reductor , class SrcPtr , typename ResType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridReduceToRow (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Reductor , class SrcPtr , typename ResType >"
core,__host__ void
core,"cv::cudev::gridReduceToRow (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , int COUNT, class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[COUNT], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , int COUNT>"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[COUNT], Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , int COUNT, class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, GpuMat_< DstType >(&dst)[COUNT], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , int COUNT>"
core,__host__ void
core,"cv::cudev::gridSplit (const SrcPtr &src, GpuMat_< DstType >(&dst)[COUNT], Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[2], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[2], Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[3], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[3], Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[4], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[4], Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[2], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[2], Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[3], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[3], Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[4], const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[4], Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const Op &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType1 > &dst1, const GlobPtrSz< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType2 > &dst1, const GlobPtrSz< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const Op &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 >"
core,__host__ void
core,"cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const BinOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const BinOp &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType1 > &dst1, const GlobPtrSz< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType1 > &dst1, const GlobPtrSz< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const BinOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const BinOp &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 >"
core,__host__ void
core,"cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple >"
core,__host__ void
core,"cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class Op , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformUnary (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class Op >"
core,__host__ void
core,"cv::cudev::gridTransformUnary (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const Op &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class Op , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformUnary (const SrcPtr &src, GpuMat_< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType , class Op >"
core,__host__ void
core,"cv::cudev::gridTransformUnary (const SrcPtr &src, GpuMat_< DstType > &dst, const Op &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class UnOp , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformUnary_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const UnOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class UnOp >"
core,__host__ void
core,"cv::cudev::gridTransformUnary_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const UnOp &op, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class UnOp , class MaskPtr >"
core,__host__ void
core,"cv::cudev::gridTransformUnary_ (const SrcPtr &src, GpuMat_< DstType > &dst, const UnOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType , class UnOp >"
core,__host__ void
core,"cv::cudev::gridTransformUnary_ (const SrcPtr &src, GpuMat_< DstType > &dst, const UnOp &op, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridTranspose (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridTranspose (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridTranspose_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<class Policy , class SrcPtr , typename DstType >"
core,__host__ void
core,"cv::cudev::gridTranspose_ (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())"
core,"template<int BIN_COUNT, class SrcPtr >"
core,"__host__ Expr< HistogramBody< BIN_COUNT, SrcPtr > >"
core,cv::cudev::histogram_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_BGR_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_BGRA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_RGB_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS4_to_RGBA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_BGR_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_BGRA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_RGB_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HLS_to_RGBA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_BGR_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_BGRA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_RGB_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV4_to_RGBA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_BGR_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_BGRA_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_RGB_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::HSV_to_RGBA_FULL_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const char1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const char2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const char3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const char4 &a, float s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const double4 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const float4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const int1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const int2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const int3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const int4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const short1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const short2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const short3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const short4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const uchar1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const uchar2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const uchar3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const uchar4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const uint1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const uint2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const uint3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const uint4 &a, float s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (const ushort1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (const ushort2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (const ushort3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (const ushort4 &a, float s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::hypot (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::hypot (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::hypot (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::hypot (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::hypot (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::hypot (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::hypot (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::hypot (float s, const ushort4 &b)"
core,"template<class SrcPtr1 , class SrcPtr2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, hypot_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > >"
core,"cv::cudev::hypot_ (const SrcPtr1 &src1, const SrcPtr2 &src2)"
core,template<class SrcPtr >
core,__host__ Expr< IntegralBody< SrcPtr > >
core,cv::cudev::integral_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ IntegerAreaInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,"cv::cudev::interArea (const SrcPtr &src, Size areaSize)"
core,template<class SrcPtr >
core,__host__ CommonAreaInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,"cv::cudev::interArea (const SrcPtr &src, Size2f areaSize)"
core,template<class SrcPtr >
core,__host__ CubicInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::interCubic (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ LinearInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::interLinear (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ NearestInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::interNearest (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_LBGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_LBGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_LRGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_LRGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_LBGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_LBGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_LRGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_LRGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Lab_to_RGBA_ (const SrcPtr &src)
core,"template<int ksize, class SrcPtr >"
core,"__host__ Expr< LaplacianPtrSz< ksize, typename PtrTraits< SrcPtr >::ptr_type > >"
core,cv::cudev::laplacian_ (const SrcPtr &src)
core,"template<int ksize, class SrcPtr >"
core,"__host__ LaplacianPtrSz< ksize, typename PtrTraits< SrcPtr >::ptr_type >"
core,cv::cudev::laplacianPtr (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGR_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGR_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGR_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGR_to_Luv_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGRA_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGRA_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGRA_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LBGRA_to_Luv_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::log (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::log (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::log (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::log (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log (const ushort4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::log10 (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::log10 (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::log10 (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::log10 (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log10 (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log10 (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log10 (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log10 (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, log10_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::log10_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::log2 (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::log2 (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::log2 (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::log2 (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::log2 (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::log2 (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::log2 (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::log2 (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, log2_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::log2_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, log_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::log_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGB_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGB_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGB_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGB_to_Luv_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGBA_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGBA_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGBA_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::LRGBA_to_Luv_ (const SrcPtr &src)
core,"template<class SrcPtr , class TablePtr >"
core,"__host__ Expr< LutPtrSz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< TablePtr >::ptr_type > >"
core,"cv::cudev::lut_ (const SrcPtr &src, const TablePtr &tbl)"
core,"template<class SrcPtr , class TablePtr >"
core,"__host__ LutPtrSz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< TablePtr >::ptr_type >"
core,"cv::cudev::lutPtr (const SrcPtr &src, const TablePtr &tbl)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_LBGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_LBGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_LRGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_LRGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_LBGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_LBGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_LRGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_LRGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::Luv_to_RGBA_ (const SrcPtr &src)
core,"template<class SrcPtr1 , class SrcPtr2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, magnitude_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > >"
core,"cv::cudev::magnitude_ (const SrcPtr1 &src1, const SrcPtr2 &src2)"
core,template<class Body >
core,__host__ Expr< Body >
core,cv::cudev::makeExpr (const Body &body)
core,__device__ __forceinline__ char1
core,"cv::cudev::max (char s, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::max (char s, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::max (char s, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::max (char s, const char4 &b)"
core,__device__ __forceinline__ char1
core,"cv::cudev::max (const char1 &a, char s)"
core,__device__ __forceinline__ char1
core,"cv::cudev::max (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const char1 &a, float s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::max (const char2 &a, char s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::max (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const char2 &a, float s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::max (const char3 &a, char s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::max (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const char3 &a, float s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::max (const char4 &a, char s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::max (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const char4 &a, float s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const double4 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const float4 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::max (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const int1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::max (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::max (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const int2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::max (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::max (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const int3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::max (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::max (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const int4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::max (const int4 &a, int s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::max (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const short1 &a, float s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::max (const short1 &a, short s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::max (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const short2 &a, float s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::max (const short2 &a, short s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::max (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const short3 &a, float s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::max (const short3 &a, short s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::max (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const short4 &a, float s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::max (const short4 &a, short s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::max (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const uchar1 &a, float s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::max (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::max (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const uchar2 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::max (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::max (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const uchar3 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::max (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::max (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const uchar4 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::max (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::max (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const uint1 &a, float s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::max (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::max (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const uint2 &a, float s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::max (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::max (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const uint3 &a, float s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::max (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::max (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const uint4 &a, float s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::max (const uint4 &a, uint s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::max (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (const ushort1 &a, float s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::max (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::max (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (const ushort2 &a, float s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::max (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::max (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (const ushort3 &a, float s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::max (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::max (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (const ushort4 &a, float s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::max (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::max (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::max (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::max (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::max (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::max (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::max (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::max (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::max (float s, const ushort4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::max (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::max (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::max (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::max (int s, const int4 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::max (short s, const short1 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::max (short s, const short2 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::max (short s, const short3 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::max (short s, const short4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::max (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::max (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::max (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::max (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::max (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::max (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::max (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::max (uint s, const uint4 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::max (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::max (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::max (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::max (ushort s, const ushort4 &b)"
core,"template<class SrcPtr1 , class SrcPtr2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, maximum< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > >"
core,"cv::cudev::max_ (const SrcPtr1 &src1, const SrcPtr2 &src2)"
core,template<class SrcPtr >
core,__host__ Expr< FindMaxValExprBody< SrcPtr > >
core,cv::cudev::maxVal_ (const SrcPtr &src)
core,__device__ __forceinline__ char1
core,"cv::cudev::min (char s, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::min (char s, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::min (char s, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::min (char s, const char4 &b)"
core,__device__ __forceinline__ char1
core,"cv::cudev::min (const char1 &a, char s)"
core,__device__ __forceinline__ char1
core,"cv::cudev::min (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const char1 &a, float s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::min (const char2 &a, char s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::min (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const char2 &a, float s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::min (const char3 &a, char s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::min (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const char3 &a, float s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::min (const char4 &a, char s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::min (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const char4 &a, float s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const double4 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const float4 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::min (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const int1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::min (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::min (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const int2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::min (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::min (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const int3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::min (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::min (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const int4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::min (const int4 &a, int s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::min (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const short1 &a, float s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::min (const short1 &a, short s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::min (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const short2 &a, float s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::min (const short2 &a, short s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::min (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const short3 &a, float s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::min (const short3 &a, short s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::min (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const short4 &a, float s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::min (const short4 &a, short s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::min (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const uchar1 &a, float s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::min (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::min (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const uchar2 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::min (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::min (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const uchar3 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::min (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::min (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const uchar4 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::min (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::min (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const uint1 &a, float s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::min (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::min (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const uint2 &a, float s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::min (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::min (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const uint3 &a, float s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::min (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::min (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const uint4 &a, float s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::min (const uint4 &a, uint s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::min (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (const ushort1 &a, float s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::min (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::min (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (const ushort2 &a, float s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::min (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::min (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (const ushort3 &a, float s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::min (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::min (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (const ushort4 &a, float s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::min (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::min (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::min (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::min (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::min (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::min (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::min (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::min (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::min (float s, const ushort4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::min (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::min (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::min (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::min (int s, const int4 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::min (short s, const short1 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::min (short s, const short2 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::min (short s, const short3 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::min (short s, const short4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::min (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::min (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::min (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::min (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::min (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::min (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::min (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::min (uint s, const uint4 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::min (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::min (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::min (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::min (ushort s, const ushort4 &b)"
core,"template<class SrcPtr1 , class SrcPtr2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, minimum< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > >"
core,"cv::cudev::min_ (const SrcPtr1 &src1, const SrcPtr2 &src2)"
core,template<class SrcPtr >
core,__host__ Expr< FindMinMaxValExprBody< SrcPtr > >
core,cv::cudev::minMaxVal_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< FindMinValExprBody< SrcPtr > >
core,cv::cudev::minVal_ (const SrcPtr &src)
core,template<class Predicate >
core,__host__ __device__ UnaryNegate< Predicate >
core,cv::cudev::not1 (const Predicate &pred)
core,template<class Predicate >
core,__host__ __device__ BinaryNegate< Predicate >
core,cv::cudev::not2 (const Predicate &pred)
core,__host__
core,"cv::cudev::UniqueTexture< T, R >::operator bool () const noexcept"
core,__host__
core,"cv::cudev::Texture< T, R >::operator bool () const noexcept"
core,__host__
core,"cv::cudev::TextureOff< T, R >::operator TextureOffPtr< T, R > () const"
core,__host__
core,"cv::cudev::Texture< T, R >::operator TexturePtr< T, R > () const"
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const char1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const char2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const char3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const char4 &a)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const double1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const double2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const double3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const double4 &a)
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, logical_not< typename Body::value_type > > >"
core,cv::cudev::operator! (const Expr< Body > &src)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const float1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const float2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const float3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const float4 &a)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_not< T > > >"
core,cv::cudev::operator! (const GlobPtrSz< T > &src)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, logical_not< T > > >"
core,cv::cudev::operator! (const GpuMat_< T > &src)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const int1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const int2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const int3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const int4 &a)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const short1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const short2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const short3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const short4 &a)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, logical_not< T > > >"
core,cv::cudev::operator! (const Texture< T > &src)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const uchar1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const uchar2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const uchar3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const uchar4 &a)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const uint1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const uint2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const uint3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const uint4 &a)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator! (const ushort1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator! (const ushort2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator! (const ushort3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator! (const ushort4 &a)
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< not_equal_to< typename Body::value_type > > > >"
core,"cv::cudev::operator!= (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator!= (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator!= (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator!= (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, not_equal_to< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator!= (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< not_equal_to< T > > > >"
core,"cv::cudev::operator!= (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator!= (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< not_equal_to< T > > > >"
core,"cv::cudev::operator!= (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator!= (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< not_equal_to< T > > > >"
core,"cv::cudev::operator!= (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator!= (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< T > > >"
core,"cv::cudev::operator!= (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< not_equal_to< T > > > >"
core,"cv::cudev::operator!= (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< not_equal_to< T > > > >"
core,"cv::cudev::operator!= (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< not_equal_to< T > > > >"
core,"cv::cudev::operator!= (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< not_equal_to< typename Body::value_type > > > >"
core,"cv::cudev::operator!= (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator!= (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator!= (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator!= (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator!= (ushort s, const ushort4 &b)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< modulus< typename Body::value_type > > > >"
core,"cv::cudev::operator% (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator% (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator% (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator% (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, modulus< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator% (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< modulus< T > > > >"
core,"cv::cudev::operator% (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator% (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< modulus< T > > > >"
core,"cv::cudev::operator% (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator% (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< modulus< T > > > >"
core,"cv::cudev::operator% (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator% (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< T > > >"
core,"cv::cudev::operator% (const Texture< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< modulus< T > > > >"
core,"cv::cudev::operator% (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< modulus< T > > > >"
core,"cv::cudev::operator% (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< modulus< T > > > >"
core,"cv::cudev::operator% (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< modulus< typename Body::value_type > > > >"
core,"cv::cudev::operator% (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator& (char s, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator& (char s, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator& (char s, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator& (char s, const char4 &b)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator& (const char1 &a, char s)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator& (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator& (const char2 &a, char s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator& (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator& (const char3 &a, char s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator& (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator& (const char4 &a, char s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator& (const char4 &a, const char4 &b)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_and< typename Body::value_type > > > >"
core,"cv::cudev::operator& (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator& (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator& (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator& (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_and< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator& (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_and< T > > > >"
core,"cv::cudev::operator& (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator& (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_and< T > > > >"
core,"cv::cudev::operator& (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator& (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator& (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator& (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator& (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator& (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator& (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator& (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator& (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator& (const int4 &a, int s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator& (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator& (const short1 &a, short s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator& (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator& (const short2 &a, short s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator& (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator& (const short3 &a, short s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator& (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator& (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_and< T > > > >"
core,"cv::cudev::operator& (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator& (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< T > > >"
core,"cv::cudev::operator& (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator& (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator& (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator& (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator& (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator& (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator& (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator& (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator& (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator& (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator& (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator& (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator& (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator& (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator& (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator& (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator& (const uint4 &a, uint s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator& (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator& (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator& (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator& (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator& (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator& (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator& (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator& (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator& (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator& (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator& (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator& (int s, const int4 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator& (short s, const short1 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator& (short s, const short2 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator& (short s, const short3 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator& (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_and< T > > > >"
core,"cv::cudev::operator& (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_and< T > > > >"
core,"cv::cudev::operator& (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_and< T > > > >"
core,"cv::cudev::operator& (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_and< typename Body::value_type > > > >"
core,"cv::cudev::operator& (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator& (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator& (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator& (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator& (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator& (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator& (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator& (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator& (uint s, const uint4 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator& (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator& (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator& (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator& (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< logical_and< typename Body::value_type > > > >"
core,"cv::cudev::operator&& (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator&& (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator&& (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator&& (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, logical_and< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator&& (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< logical_and< T > > > >"
core,"cv::cudev::operator&& (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator&& (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< logical_and< T > > > >"
core,"cv::cudev::operator&& (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator&& (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< logical_and< T > > > >"
core,"cv::cudev::operator&& (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator&& (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< T > > >"
core,"cv::cudev::operator&& (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< logical_and< T > > > >"
core,"cv::cudev::operator&& (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< logical_and< T > > > >"
core,"cv::cudev::operator&& (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< logical_and< T > > > >"
core,"cv::cudev::operator&& (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< logical_and< typename Body::value_type > > > >"
core,"cv::cudev::operator&& (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator&& (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator&& (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator&& (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator&& (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ R
core,"cv::cudev::TexturePtr< T, R >::operator() (index_type x) const"
core,__device__ __forceinline__ R
core,"cv::cudev::TexturePtr< uint64, R >::operator() (index_type x) const"
core,__device__ __forceinline__ R
core,"cv::cudev::TexturePtr< T, R >::operator() (index_type y, index_type x) const"
core,__device__ __forceinline__ R
core,"cv::cudev::TexturePtr< uint64, R >::operator() (index_type y, index_type x) const"
core,__device__ __forceinline__ R
core,"cv::cudev::TextureOffPtr< T, R >::operator() (index_type y, index_type x) const"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const char1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const char1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const char2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const char2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const char3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const char3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const char4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const char4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< multiplies< typename Body::value_type > > > >"
core,"cv::cudev::operator* (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator* (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator* (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator* (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, multiplies< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator* (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< multiplies< T > > > >"
core,"cv::cudev::operator* (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator* (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< multiplies< T > > > >"
core,"cv::cudev::operator* (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator* (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const int1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const int2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const int3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const int4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const int4 &a, int s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const short1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const short1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const short2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const short2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const short3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const short3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const short4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const short4 &a, int s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< multiplies< T > > > >"
core,"cv::cudev::operator* (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator* (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< T > > >"
core,"cv::cudev::operator* (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const uchar1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const uchar1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const uchar2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const uchar2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const uchar3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const uchar3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const uchar4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const uchar4 &a, int s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator* (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const uint1 &a, float s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator* (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator* (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const uint2 &a, float s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator* (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator* (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const uint3 &a, float s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator* (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator* (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const uint4 &a, float s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator* (const uint4 &a, uint s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (const ushort1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (const ushort1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (const ushort2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (const ushort2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (const ushort3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (const ushort3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (const ushort4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (const ushort4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator* (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator* (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator* (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator* (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator* (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator* (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator* (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator* (float s, const ushort4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (int s, const char1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (int s, const char2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (int s, const char3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (int s, const char4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (int s, const int4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (int s, const short1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (int s, const short2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (int s, const short3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (int s, const short4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (int s, const uchar1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (int s, const uchar2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (int s, const uchar3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (int s, const uchar4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator* (int s, const ushort1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator* (int s, const ushort2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator* (int s, const ushort3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator* (int s, const ushort4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< multiplies< T > > > >"
core,"cv::cudev::operator* (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< multiplies< T > > > >"
core,"cv::cudev::operator* (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< multiplies< T > > > >"
core,"cv::cudev::operator* (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< multiplies< typename Body::value_type > > > >"
core,"cv::cudev::operator* (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator* (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator* (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator* (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator* (uint s, const uint4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const char1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const char1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const char2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const char2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const char3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const char3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const char4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const char4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< plus< typename Body::value_type > > > >"
core,"cv::cudev::operator+ (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator+ (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator+ (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator+ (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, plus< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator+ (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< plus< T > > > >"
core,"cv::cudev::operator+ (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator+ (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< plus< T > > > >"
core,"cv::cudev::operator+ (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator+ (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const int1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const int2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const int3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const int4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const int4 &a, int s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const short1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const short1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const short2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const short2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const short3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const short3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const short4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const short4 &a, int s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< plus< T > > > >"
core,"cv::cudev::operator+ (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator+ (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< T > > >"
core,"cv::cudev::operator+ (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const uchar1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const uchar1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const uchar2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const uchar2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const uchar3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const uchar3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const uchar4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const uchar4 &a, int s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator+ (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const uint1 &a, float s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator+ (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator+ (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const uint2 &a, float s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator+ (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator+ (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const uint3 &a, float s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator+ (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator+ (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const uint4 &a, float s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator+ (const uint4 &a, uint s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (const ushort1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (const ushort1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (const ushort2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (const ushort2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (const ushort3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (const ushort3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (const ushort4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (const ushort4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator+ (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator+ (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator+ (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator+ (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator+ (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator+ (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator+ (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator+ (float s, const ushort4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (int s, const char1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (int s, const char2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (int s, const char3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (int s, const char4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (int s, const int4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (int s, const short1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (int s, const short2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (int s, const short3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (int s, const short4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (int s, const uchar1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (int s, const uchar2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (int s, const uchar3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (int s, const uchar4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator+ (int s, const ushort1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator+ (int s, const ushort2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator+ (int s, const ushort3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator+ (int s, const ushort4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< plus< T > > > >"
core,"cv::cudev::operator+ (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< plus< T > > > >"
core,"cv::cudev::operator+ (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< plus< T > > > >"
core,"cv::cudev::operator+ (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< plus< typename Body::value_type > > > >"
core,"cv::cudev::operator+ (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator+ (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator+ (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator+ (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator+ (uint s, const uint4 &b)"
core,__device__ __forceinline__ char1
core,cv::cudev::operator- (const char1 &a)
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const char1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const char1 &a, int s)"
core,__device__ __forceinline__ char2
core,cv::cudev::operator- (const char2 &a)
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const char2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const char2 &a, int s)"
core,__device__ __forceinline__ char3
core,cv::cudev::operator- (const char3 &a)
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const char3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const char3 &a, int s)"
core,__device__ __forceinline__ char4
core,cv::cudev::operator- (const char4 &a)
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const char4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const char4 &a, int s)"
core,__device__ __forceinline__ double1
core,cv::cudev::operator- (const double1 &a)
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,cv::cudev::operator- (const double2 &a)
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,cv::cudev::operator- (const double3 &a)
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,cv::cudev::operator- (const double4 &a)
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< minus< typename Body::value_type > > > >"
core,"cv::cudev::operator- (const Expr< Body > &a, typename Body::value_type val)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, negate< typename Body::value_type > > >"
core,cv::cudev::operator- (const Expr< Body > &src)
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator- (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator- (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator- (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, minus< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator- (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ float1
core,cv::cudev::operator- (const float1 &a)
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,cv::cudev::operator- (const float2 &a)
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,cv::cudev::operator- (const float3 &a)
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,cv::cudev::operator- (const float4 &a)
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, negate< T > > >"
core,cv::cudev::operator- (const GlobPtrSz< T > &src)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< minus< T > > > >"
core,"cv::cudev::operator- (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator- (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, negate< T > > >"
core,cv::cudev::operator- (const GpuMat_< T > &src)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< minus< T > > > >"
core,"cv::cudev::operator- (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator- (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,cv::cudev::operator- (const int1 &a)
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const int1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,cv::cudev::operator- (const int2 &a)
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const int2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,cv::cudev::operator- (const int3 &a)
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const int3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,cv::cudev::operator- (const int4 &a)
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const int4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const int4 &a, int s)"
core,__device__ __forceinline__ short1
core,cv::cudev::operator- (const short1 &a)
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const short1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const short1 &a, int s)"
core,__device__ __forceinline__ short2
core,cv::cudev::operator- (const short2 &a)
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const short2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const short2 &a, int s)"
core,__device__ __forceinline__ short3
core,cv::cudev::operator- (const short3 &a)
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const short3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const short3 &a, int s)"
core,__device__ __forceinline__ short4
core,cv::cudev::operator- (const short4 &a)
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const short4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const short4 &a, int s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, negate< T > > >"
core,cv::cudev::operator- (const Texture< T > &src)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< minus< T > > > >"
core,"cv::cudev::operator- (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator- (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< T > > >"
core,"cv::cudev::operator- (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const uchar1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const uchar1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const uchar2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const uchar2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const uchar3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const uchar3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const uchar4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const uchar4 &a, int s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator- (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const uint1 &a, float s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator- (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator- (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const uint2 &a, float s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator- (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator- (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const uint3 &a, float s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator- (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator- (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const uint4 &a, float s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator- (const uint4 &a, uint s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (const ushort1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (const ushort1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (const ushort2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (const ushort2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (const ushort3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (const ushort3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (const ushort4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (const ushort4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator- (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator- (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator- (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator- (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator- (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator- (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator- (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator- (float s, const ushort4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (int s, const char1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (int s, const char2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (int s, const char3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (int s, const char4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (int s, const int4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (int s, const short1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (int s, const short2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (int s, const short3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (int s, const short4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (int s, const uchar1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (int s, const uchar2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (int s, const uchar3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (int s, const uchar4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator- (int s, const ushort1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator- (int s, const ushort2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator- (int s, const ushort3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator- (int s, const ushort4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< minus< T > > > >"
core,"cv::cudev::operator- (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< minus< T > > > >"
core,"cv::cudev::operator- (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< minus< T > > > >"
core,"cv::cudev::operator- (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< minus< typename Body::value_type > > > >"
core,"cv::cudev::operator- (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator- (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator- (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator- (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator- (uint s, const uint4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const char1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const char1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const char1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const char2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const char2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const char2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const char3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const char3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const char3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const char4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const char4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const char4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const double1 &a, double s)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const double2 &a, double s)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const double3 &a, double s)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< divides< typename Body::value_type > > > >"
core,"cv::cudev::operator/ (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator/ (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator/ (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator/ (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, divides< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator/ (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const float1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const float1 &a, float s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const float2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const float2 &a, float s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const float3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const float3 &a, float s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const float4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< divides< T > > > >"
core,"cv::cudev::operator/ (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator/ (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< divides< T > > > >"
core,"cv::cudev::operator/ (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator/ (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const int1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const int1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const int2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const int2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const int3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const int3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const int4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const int4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const int4 &a, int s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const short1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const short1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const short1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const short2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const short2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const short2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const short3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const short3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const short3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const short4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const short4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const short4 &a, int s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< divides< T > > > >"
core,"cv::cudev::operator/ (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator/ (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< T > > >"
core,"cv::cudev::operator/ (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const uchar1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const uchar1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const uchar1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const uchar2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const uchar2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const uchar2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const uchar3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const uchar3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const uchar3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const uchar4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const uchar4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const uchar4 &a, int s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator/ (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const uint1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const uint1 &a, float s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator/ (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator/ (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const uint2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const uint2 &a, float s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator/ (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator/ (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const uint3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const uint3 &a, float s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator/ (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator/ (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const uint4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const uint4 &a, float s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator/ (const uint4 &a, uint s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (const ushort1 &a, double s)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (const ushort1 &a, float s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (const ushort1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (const ushort2 &a, double s)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (const ushort2 &a, float s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (const ushort2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (const ushort3 &a, double s)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (const ushort3 &a, float s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (const ushort3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (const ushort4 &a, double s)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (const ushort4 &a, float s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (const ushort4 &a, int s)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const char1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const char2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const char3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const char4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const double1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const double2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const double3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const double4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const float1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const float2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const float3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const float4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const int1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const int2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const int3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const int4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const short1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const short2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const short3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const short4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const uchar1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const uchar2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const uchar3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const uchar4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const uint1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const uint2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const uint3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const uint4 &b)"
core,__device__ __forceinline__ double1
core,"cv::cudev::operator/ (double s, const ushort1 &b)"
core,__device__ __forceinline__ double2
core,"cv::cudev::operator/ (double s, const ushort2 &b)"
core,__device__ __forceinline__ double3
core,"cv::cudev::operator/ (double s, const ushort3 &b)"
core,__device__ __forceinline__ double4
core,"cv::cudev::operator/ (double s, const ushort4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const char1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const char2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const char3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const char4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const float1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const float2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const float3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const float4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const int1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const int2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const int3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const int4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const short1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const short2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const short3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const short4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const uchar1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const uchar2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const uchar3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const uchar4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const uint1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const uint2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const uint3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const uint4 &b)"
core,__device__ __forceinline__ float1
core,"cv::cudev::operator/ (float s, const ushort1 &b)"
core,__device__ __forceinline__ float2
core,"cv::cudev::operator/ (float s, const ushort2 &b)"
core,__device__ __forceinline__ float3
core,"cv::cudev::operator/ (float s, const ushort3 &b)"
core,__device__ __forceinline__ float4
core,"cv::cudev::operator/ (float s, const ushort4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (int s, const char1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (int s, const char2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (int s, const char3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (int s, const char4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (int s, const int4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (int s, const short1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (int s, const short2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (int s, const short3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (int s, const short4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (int s, const uchar1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (int s, const uchar2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (int s, const uchar3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (int s, const uchar4 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator/ (int s, const ushort1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator/ (int s, const ushort2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator/ (int s, const ushort3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator/ (int s, const ushort4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< divides< T > > > >"
core,"cv::cudev::operator/ (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< divides< T > > > >"
core,"cv::cudev::operator/ (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< divides< T > > > >"
core,"cv::cudev::operator/ (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< divides< typename Body::value_type > > > >"
core,"cv::cudev::operator/ (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator/ (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator/ (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator/ (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator/ (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< less< typename Body::value_type > > > >"
core,"cv::cudev::operator< (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator< (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator< (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator< (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, less< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator< (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< less< T > > > >"
core,"cv::cudev::operator< (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator< (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< less< T > > > >"
core,"cv::cudev::operator< (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator< (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< less< T > > > >"
core,"cv::cudev::operator< (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator< (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< T > > >"
core,"cv::cudev::operator< (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< less< T > > > >"
core,"cv::cudev::operator< (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< less< T > > > >"
core,"cv::cudev::operator< (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< less< T > > > >"
core,"cv::cudev::operator< (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< less< typename Body::value_type > > > >"
core,"cv::cudev::operator< (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator< (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator< (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator< (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator< (ushort s, const ushort4 &b)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_lshift< typename Body::value_type > > > >"
core,"cv::cudev::operator<< (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<< (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<< (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<< (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_lshift< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator<< (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_lshift< T > > > >"
core,"cv::cudev::operator<< (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<< (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_lshift< T > > > >"
core,"cv::cudev::operator<< (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<< (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_lshift< T > > > >"
core,"cv::cudev::operator<< (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<< (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< T > > >"
core,"cv::cudev::operator<< (const Texture< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_lshift< T > > > >"
core,"cv::cudev::operator<< (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_lshift< T > > > >"
core,"cv::cudev::operator<< (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_lshift< T > > > >"
core,"cv::cudev::operator<< (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_lshift< typename Body::value_type > > > >"
core,"cv::cudev::operator<< (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< less_equal< typename Body::value_type > > > >"
core,"cv::cudev::operator<= (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<= (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<= (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<= (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, less_equal< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator<= (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< less_equal< T > > > >"
core,"cv::cudev::operator<= (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<= (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< less_equal< T > > > >"
core,"cv::cudev::operator<= (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<= (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< less_equal< T > > > >"
core,"cv::cudev::operator<= (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator<= (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< T > > >"
core,"cv::cudev::operator<= (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< less_equal< T > > > >"
core,"cv::cudev::operator<= (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< less_equal< T > > > >"
core,"cv::cudev::operator<= (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< less_equal< T > > > >"
core,"cv::cudev::operator<= (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< less_equal< typename Body::value_type > > > >"
core,"cv::cudev::operator<= (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator<= (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator<= (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator<= (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator<= (ushort s, const ushort4 &b)"
core,Texture &
core,"cv::cudev::Texture< T, R >::operator= (const Texture &)=default"
core,TextureOff &
core,"cv::cudev::TextureOff< T, R >::operator= (const TextureOff &)=default"
core,__host__ UniqueTexture &
core,"cv::cudev::UniqueTexture< T, R >::operator= (const UniqueTexture &)=delete"
core,Texture &
core,"cv::cudev::Texture< T, R >::operator= (Texture &&)=default"
core,TextureOff &
core,"cv::cudev::TextureOff< T, R >::operator= (TextureOff &&)=default"
core,__host__ UniqueTexture &
core,"cv::cudev::UniqueTexture< T, R >::operator= (UniqueTexture &&other) noexcept"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< equal_to< typename Body::value_type > > > >"
core,"cv::cudev::operator== (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator== (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator== (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator== (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, equal_to< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator== (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< equal_to< T > > > >"
core,"cv::cudev::operator== (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator== (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< equal_to< T > > > >"
core,"cv::cudev::operator== (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator== (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< equal_to< T > > > >"
core,"cv::cudev::operator== (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator== (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< T > > >"
core,"cv::cudev::operator== (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< equal_to< T > > > >"
core,"cv::cudev::operator== (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< equal_to< T > > > >"
core,"cv::cudev::operator== (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< equal_to< T > > > >"
core,"cv::cudev::operator== (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< equal_to< typename Body::value_type > > > >"
core,"cv::cudev::operator== (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator== (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator== (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator== (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator== (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< greater< typename Body::value_type > > > >"
core,"cv::cudev::operator> (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator> (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator> (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator> (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, greater< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator> (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< greater< T > > > >"
core,"cv::cudev::operator> (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator> (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< greater< T > > > >"
core,"cv::cudev::operator> (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator> (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< greater< T > > > >"
core,"cv::cudev::operator> (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator> (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< T > > >"
core,"cv::cudev::operator> (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< greater< T > > > >"
core,"cv::cudev::operator> (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< greater< T > > > >"
core,"cv::cudev::operator> (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< greater< T > > > >"
core,"cv::cudev::operator> (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< greater< typename Body::value_type > > > >"
core,"cv::cudev::operator> (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator> (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator> (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator> (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator> (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< greater_equal< typename Body::value_type > > > >"
core,"cv::cudev::operator>= (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>= (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>= (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>= (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, greater_equal< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator>= (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< greater_equal< T > > > >"
core,"cv::cudev::operator>= (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>= (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< greater_equal< T > > > >"
core,"cv::cudev::operator>= (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>= (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< greater_equal< T > > > >"
core,"cv::cudev::operator>= (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>= (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< T > > >"
core,"cv::cudev::operator>= (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< greater_equal< T > > > >"
core,"cv::cudev::operator>= (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< greater_equal< T > > > >"
core,"cv::cudev::operator>= (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< greater_equal< T > > > >"
core,"cv::cudev::operator>= (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< greater_equal< typename Body::value_type > > > >"
core,"cv::cudev::operator>= (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator>= (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator>= (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator>= (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator>= (ushort s, const ushort4 &b)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_rshift< typename Body::value_type > > > >"
core,"cv::cudev::operator>> (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>> (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>> (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>> (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_rshift< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator>> (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_rshift< T > > > >"
core,"cv::cudev::operator>> (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>> (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_rshift< T > > > >"
core,"cv::cudev::operator>> (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>> (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_rshift< T > > > >"
core,"cv::cudev::operator>> (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator>> (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< T > > >"
core,"cv::cudev::operator>> (const Texture< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_rshift< T > > > >"
core,"cv::cudev::operator>> (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_rshift< T > > > >"
core,"cv::cudev::operator>> (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_rshift< T > > > >"
core,"cv::cudev::operator>> (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_rshift< typename Body::value_type > > > >"
core,"cv::cudev::operator>> (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator^ (char s, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator^ (char s, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator^ (char s, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator^ (char s, const char4 &b)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator^ (const char1 &a, char s)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator^ (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator^ (const char2 &a, char s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator^ (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator^ (const char3 &a, char s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator^ (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator^ (const char4 &a, char s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator^ (const char4 &a, const char4 &b)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_xor< typename Body::value_type > > > >"
core,"cv::cudev::operator^ (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator^ (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator^ (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator^ (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_xor< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator^ (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_xor< T > > > >"
core,"cv::cudev::operator^ (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator^ (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_xor< T > > > >"
core,"cv::cudev::operator^ (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator^ (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator^ (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator^ (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator^ (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator^ (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator^ (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator^ (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator^ (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator^ (const int4 &a, int s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator^ (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator^ (const short1 &a, short s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator^ (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator^ (const short2 &a, short s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator^ (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator^ (const short3 &a, short s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator^ (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator^ (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_xor< T > > > >"
core,"cv::cudev::operator^ (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator^ (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< T > > >"
core,"cv::cudev::operator^ (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator^ (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator^ (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator^ (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator^ (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator^ (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator^ (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator^ (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator^ (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator^ (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator^ (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator^ (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator^ (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator^ (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator^ (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator^ (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator^ (const uint4 &a, uint s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator^ (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator^ (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator^ (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator^ (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator^ (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator^ (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator^ (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator^ (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator^ (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator^ (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator^ (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator^ (int s, const int4 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator^ (short s, const short1 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator^ (short s, const short2 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator^ (short s, const short3 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator^ (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_xor< T > > > >"
core,"cv::cudev::operator^ (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_xor< T > > > >"
core,"cv::cudev::operator^ (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_xor< T > > > >"
core,"cv::cudev::operator^ (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_xor< typename Body::value_type > > > >"
core,"cv::cudev::operator^ (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator^ (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator^ (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator^ (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator^ (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator^ (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator^ (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator^ (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator^ (uint s, const uint4 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator^ (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator^ (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator^ (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator^ (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator| (char s, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator| (char s, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator| (char s, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator| (char s, const char4 &b)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator| (const char1 &a, char s)"
core,__device__ __forceinline__ char1
core,"cv::cudev::operator| (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator| (const char2 &a, char s)"
core,__device__ __forceinline__ char2
core,"cv::cudev::operator| (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator| (const char3 &a, char s)"
core,__device__ __forceinline__ char3
core,"cv::cudev::operator| (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator| (const char4 &a, char s)"
core,__device__ __forceinline__ char4
core,"cv::cudev::operator| (const char4 &a, const char4 &b)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_or< typename Body::value_type > > > >"
core,"cv::cudev::operator| (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator| (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator| (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator| (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_or< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator| (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_or< T > > > >"
core,"cv::cudev::operator| (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator| (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_or< T > > > >"
core,"cv::cudev::operator| (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator| (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator| (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator| (const int1 &a, int s)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator| (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator| (const int2 &a, int s)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator| (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator| (const int3 &a, int s)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator| (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator| (const int4 &a, int s)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator| (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator| (const short1 &a, short s)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator| (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator| (const short2 &a, short s)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator| (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator| (const short3 &a, short s)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator| (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator| (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_or< T > > > >"
core,"cv::cudev::operator| (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator| (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< T > > >"
core,"cv::cudev::operator| (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator| (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator| (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator| (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator| (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator| (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator| (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator| (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator| (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator| (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator| (const uint1 &a, uint s)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator| (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator| (const uint2 &a, uint s)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator| (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator| (const uint3 &a, uint s)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator| (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator| (const uint4 &a, uint s)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator| (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator| (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator| (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator| (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator| (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator| (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator| (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator| (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ int1
core,"cv::cudev::operator| (int s, const int1 &b)"
core,__device__ __forceinline__ int2
core,"cv::cudev::operator| (int s, const int2 &b)"
core,__device__ __forceinline__ int3
core,"cv::cudev::operator| (int s, const int3 &b)"
core,__device__ __forceinline__ int4
core,"cv::cudev::operator| (int s, const int4 &b)"
core,__device__ __forceinline__ short1
core,"cv::cudev::operator| (short s, const short1 &b)"
core,__device__ __forceinline__ short2
core,"cv::cudev::operator| (short s, const short2 &b)"
core,__device__ __forceinline__ short3
core,"cv::cudev::operator| (short s, const short3 &b)"
core,__device__ __forceinline__ short4
core,"cv::cudev::operator| (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_or< T > > > >"
core,"cv::cudev::operator| (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_or< T > > > >"
core,"cv::cudev::operator| (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_or< T > > > >"
core,"cv::cudev::operator| (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_or< typename Body::value_type > > > >"
core,"cv::cudev::operator| (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator| (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator| (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator| (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator| (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uint1
core,"cv::cudev::operator| (uint s, const uint1 &b)"
core,__device__ __forceinline__ uint2
core,"cv::cudev::operator| (uint s, const uint2 &b)"
core,__device__ __forceinline__ uint3
core,"cv::cudev::operator| (uint s, const uint3 &b)"
core,__device__ __forceinline__ uint4
core,"cv::cudev::operator| (uint s, const uint4 &b)"
core,__device__ __forceinline__ ushort1
core,"cv::cudev::operator| (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ ushort2
core,"cv::cudev::operator| (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ ushort3
core,"cv::cudev::operator| (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ ushort4
core,"cv::cudev::operator| (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (char s, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (char s, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (char s, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (char s, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const char1 &a, char s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const char1 &a, const char1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const char2 &a, char s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const char2 &a, const char2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const char3 &a, char s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const char3 &a, const char3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const char4 &a, char s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const char4 &a, const char4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const double1 &a, const double1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const double1 &a, double s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const double2 &a, const double2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const double2 &a, double s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const double3 &a, const double3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const double3 &a, double s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const double4 &a, const double4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const double4 &a, double s)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< logical_or< typename Body::value_type > > > >"
core,"cv::cudev::operator|| (const Expr< Body > &a, typename Body::value_type val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator|| (const Expr< Body > &src1, const GlobPtrSz< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator|| (const Expr< Body > &src1, const GpuMat_< T > &src2)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator|| (const Expr< Body > &src1, const Texture< T > &src2)"
core,"template<class Body1 , class Body2 >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, logical_or< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > >"
core,"cv::cudev::operator|| (const Expr< Body1 > &a, const Expr< Body2 > &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const float1 &a, const float1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const float1 &a, float s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const float2 &a, const float2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const float2 &a, float s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const float3 &a, const float3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const float3 &a, float s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const float4 &a, const float4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const float4 &a, float s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< logical_or< T > > > >"
core,"cv::cudev::operator|| (const GlobPtrSz< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator|| (const GlobPtrSz< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const GlobPtrSz< T > &src1, const Texture< T > &src2)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< logical_or< T > > > >"
core,"cv::cudev::operator|| (const GpuMat_< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator|| (const GpuMat_< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const GpuMat_< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const GpuMat_< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const int1 &a, const int1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const int1 &a, int s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const int2 &a, const int2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const int2 &a, int s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const int3 &a, const int3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const int3 &a, int s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const int4 &a, const int4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const int4 &a, int s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const short1 &a, const short1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const short1 &a, short s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const short2 &a, const short2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const short2 &a, short s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const short3 &a, const short3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const short3 &a, short s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const short4 &a, const short4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const short4 &a, short s)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< logical_or< T > > > >"
core,"cv::cudev::operator|| (const Texture< T > &src, T val)"
core,"template<typename T , class Body >"
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > >"
core,"cv::cudev::operator|| (const Texture< T > &src1, const Expr< Body > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const Texture< T > &src1, const GlobPtrSz< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const Texture< T > &src1, const GpuMat_< T > &src2)"
core,template<typename T >
core,"__host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< T > > >"
core,"cv::cudev::operator|| (const Texture< T > &src1, const Texture< T > &src2)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const uchar1 &a, const uchar1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const uchar1 &a, uchar s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const uchar2 &a, const uchar2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const uchar2 &a, uchar s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const uchar3 &a, const uchar3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const uchar3 &a, uchar s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const uchar4 &a, const uchar4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const uchar4 &a, uchar s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const uint1 &a, const uint1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const uint1 &a, uint s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const uint2 &a, const uint2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const uint2 &a, uint s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const uint3 &a, const uint3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const uint3 &a, uint s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const uint4 &a, const uint4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const uint4 &a, uint s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const ushort1 &a, const ushort1 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (const ushort1 &a, ushort s)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const ushort2 &a, const ushort2 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (const ushort2 &a, ushort s)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const ushort3 &a, const ushort3 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (const ushort3 &a, ushort s)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const ushort4 &a, const ushort4 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (const ushort4 &a, ushort s)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (double s, const double1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (double s, const double2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (double s, const double3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (double s, const double4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (float s, const float1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (float s, const float2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (float s, const float3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (float s, const float4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (int s, const int1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (int s, const int2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (int s, const int3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (int s, const int4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (short s, const short1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (short s, const short2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (short s, const short3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (short s, const short4 &b)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< logical_or< T > > > >"
core,"cv::cudev::operator|| (T val, const GlobPtrSz< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< logical_or< T > > > >"
core,"cv::cudev::operator|| (T val, const GpuMat_< T > &src)"
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< logical_or< T > > > >"
core,"cv::cudev::operator|| (T val, const Texture< T > &src)"
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< logical_or< typename Body::value_type > > > >"
core,"cv::cudev::operator|| (typename Body::value_type val, const Expr< Body > &a)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (uchar s, const uchar1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (uchar s, const uchar2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (uchar s, const uchar3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (uchar s, const uchar4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (uint s, const uint1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (uint s, const uint2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (uint s, const uint3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (uint s, const uint4 &b)"
core,__device__ __forceinline__ uchar1
core,"cv::cudev::operator|| (ushort s, const ushort1 &b)"
core,__device__ __forceinline__ uchar2
core,"cv::cudev::operator|| (ushort s, const ushort2 &b)"
core,__device__ __forceinline__ uchar3
core,"cv::cudev::operator|| (ushort s, const ushort3 &b)"
core,__device__ __forceinline__ uchar4
core,"cv::cudev::operator|| (ushort s, const ushort4 &b)"
core,__device__ __forceinline__ char1
core,cv::cudev::operator~ (const char1 &a)
core,__device__ __forceinline__ char2
core,cv::cudev::operator~ (const char2 &a)
core,__device__ __forceinline__ char3
core,cv::cudev::operator~ (const char3 &a)
core,__device__ __forceinline__ char4
core,cv::cudev::operator~ (const char4 &a)
core,template<class Body >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, bit_not< typename Body::value_type > > >"
core,cv::cudev::operator~ (const Expr< Body > &src)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_not< T > > >"
core,cv::cudev::operator~ (const GlobPtrSz< T > &src)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, bit_not< T > > >"
core,cv::cudev::operator~ (const GpuMat_< T > &src)
core,__device__ __forceinline__ int1
core,cv::cudev::operator~ (const int1 &a)
core,__device__ __forceinline__ int2
core,cv::cudev::operator~ (const int2 &a)
core,__device__ __forceinline__ int3
core,cv::cudev::operator~ (const int3 &a)
core,__device__ __forceinline__ int4
core,cv::cudev::operator~ (const int4 &a)
core,__device__ __forceinline__ short1
core,cv::cudev::operator~ (const short1 &a)
core,__device__ __forceinline__ short2
core,cv::cudev::operator~ (const short2 &a)
core,__device__ __forceinline__ short3
core,cv::cudev::operator~ (const short3 &a)
core,__device__ __forceinline__ short4
core,cv::cudev::operator~ (const short4 &a)
core,template<typename T >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, bit_not< T > > >"
core,cv::cudev::operator~ (const Texture< T > &src)
core,__device__ __forceinline__ uchar1
core,cv::cudev::operator~ (const uchar1 &a)
core,__device__ __forceinline__ uchar2
core,cv::cudev::operator~ (const uchar2 &a)
core,__device__ __forceinline__ uchar3
core,cv::cudev::operator~ (const uchar3 &a)
core,__device__ __forceinline__ uchar4
core,cv::cudev::operator~ (const uchar4 &a)
core,__device__ __forceinline__ uint1
core,cv::cudev::operator~ (const uint1 &a)
core,__device__ __forceinline__ uint2
core,cv::cudev::operator~ (const uint2 &a)
core,__device__ __forceinline__ uint3
core,cv::cudev::operator~ (const uint3 &a)
core,__device__ __forceinline__ uint4
core,cv::cudev::operator~ (const uint4 &a)
core,__device__ __forceinline__ ushort1
core,cv::cudev::operator~ (const ushort1 &a)
core,__device__ __forceinline__ ushort2
core,cv::cudev::operator~ (const ushort2 &a)
core,__device__ __forceinline__ ushort3
core,cv::cudev::operator~ (const ushort3 &a)
core,__device__ __forceinline__ ushort4
core,cv::cudev::operator~ (const ushort4 &a)
core,static __host__ PerspectiveMapPtrSz
core,"cv::cudev::perspectiveMap (Size dstSize, const GpuMat_< float > &warpMat)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Binder2nd< pow_func< typename PtrTraits< SrcPtr >::value_type > > > >"
core,"cv::cudev::pow_ (const SrcPtr &src, float power)"
core,template<class SrcPtr >
core,__host__ Expr< PyrDownBody< SrcPtr > >
core,cv::cudev::pyrDown_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< PyrUpBody< SrcPtr > >
core,cv::cudev::pyrUp_ (const SrcPtr &src)
core,"template<class Reductor , class SrcPtr >"
core,"__host__ Expr< ReduceToColumnBody< Reductor, SrcPtr > >"
core,cv::cudev::reduceToColumn_ (const SrcPtr &src)
core,"template<class Reductor , class SrcPtr >"
core,"__host__ Expr< ReduceToRowBody< Reductor, SrcPtr > >"
core,cv::cudev::reduceToRow_ (const SrcPtr &src)
core,"template<class SrcPtr , class MapPtr >"
core,"__host__ Expr< RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapPtr >::ptr_type > >"
core,"cv::cudev::remap_ (const SrcPtr &src, const MapPtr &map)"
core,"template<class SrcPtr , class MapXPtr , class MapYPtr >"
core,"__host__ Expr< RemapPtr2Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapXPtr >::ptr_type, typename PtrTraits< MapYPtr >::ptr_type > >"
core,"cv::cudev::remap_ (const SrcPtr &src, const MapXPtr &mapx, const MapYPtr &mapy)"
core,"template<class SrcPtr , class MapPtr >"
core,"__host__ RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapPtr >::ptr_type >"
core,"cv::cudev::remapPtr (const SrcPtr &src, const MapPtr &map)"
core,"template<class SrcPtr , class MapXPtr , class MapYPtr >"
core,"__host__ RemapPtr2Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapXPtr >::ptr_type, typename PtrTraits< MapYPtr >::ptr_type >"
core,"cv::cudev::remapPtr (const SrcPtr &src, const MapXPtr &mapx, const MapYPtr &mapy)"
core,"template<int cn, typename T >"
core,"__host__ GpuMat_< typename MakeVec< typename VecTraits< T >::elem_type, cn >::type >"
core,"cv::cudev::reshape_ (const GpuMat_< T > &mat, int rows=0)"
core,template<class SrcPtr >
core,__host__ Expr< ResizePtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,"cv::cudev::resize_ (const SrcPtr &src, float fx, float fy)"
core,template<class SrcPtr >
core,__host__ ResizePtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,"cv::cudev::resizePtr (const SrcPtr &src, float fx, float fy)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_GRAY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HLS4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HLS4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HLS_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HLS_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HSV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HSV4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HSV_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_HSV_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_Luv_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_XYZ4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_XYZ_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_YCrCb4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_YCrCb_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_YUV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGB_to_YUV_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_GRAY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HLS4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HLS4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HLS_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HLS_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HSV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HSV4_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HSV_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_HSV_FULL_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_Lab4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_Lab_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_Luv4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_Luv_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_XYZ4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_XYZ_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_YCrCb4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_YCrCb_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_YUV4_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::RGBA_to_YUV_ (const SrcPtr &src)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const char1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const char2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const char3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const char4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const double1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const double2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const double3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const double4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const float1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const float2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const float3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const float4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const int1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const int2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const int3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const int4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const short1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const short2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const short3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const short4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uchar1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uchar2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uchar3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uchar4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uint1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uint2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uint3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const uint4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const ushort1 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const ushort2 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const ushort3 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (const ushort4 &v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (double v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (float v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (int v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (schar v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (short v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (uchar v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (uint v)
core,template<typename T >
core,__device__ __forceinline__ T
core,cv::cudev::saturate_cast (ushort v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (double v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (float v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (int v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (short v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (uchar v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (uint v)
core,template<>
core,__device__ __forceinline__ schar
core,cv::cudev::saturate_cast< schar > (ushort v)
core,template<>
core,__device__ __forceinline__ short
core,cv::cudev::saturate_cast< short > (double v)
core,template<>
core,__device__ __forceinline__ short
core,cv::cudev::saturate_cast< short > (float v)
core,template<>
core,__device__ __forceinline__ short
core,cv::cudev::saturate_cast< short > (int v)
core,template<>
core,__device__ __forceinline__ short
core,cv::cudev::saturate_cast< short > (uint v)
core,template<>
core,__device__ __forceinline__ short
core,cv::cudev::saturate_cast< short > (ushort v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (double v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (float v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (int v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (schar v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (short v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (uint v)
core,template<>
core,__device__ __forceinline__ uchar
core,cv::cudev::saturate_cast< uchar > (ushort v)
core,template<>
core,__device__ __forceinline__ uint
core,cv::cudev::saturate_cast< uint > (double v)
core,template<>
core,__device__ __forceinline__ uint
core,cv::cudev::saturate_cast< uint > (float v)
core,template<>
core,__device__ __forceinline__ uint
core,cv::cudev::saturate_cast< uint > (int v)
core,template<>
core,__device__ __forceinline__ uint
core,cv::cudev::saturate_cast< uint > (schar v)
core,template<>
core,__device__ __forceinline__ uint
core,cv::cudev::saturate_cast< uint > (short v)
core,template<>
core,__device__ __forceinline__ ushort
core,cv::cudev::saturate_cast< ushort > (double v)
core,template<>
core,__device__ __forceinline__ ushort
core,cv::cudev::saturate_cast< ushort > (float v)
core,template<>
core,__device__ __forceinline__ ushort
core,cv::cudev::saturate_cast< ushort > (int v)
core,template<>
core,__device__ __forceinline__ ushort
core,cv::cudev::saturate_cast< ushort > (schar v)
core,template<>
core,__device__ __forceinline__ ushort
core,cv::cudev::saturate_cast< ushort > (short v)
core,template<>
core,__device__ __forceinline__ ushort
core,cv::cudev::saturate_cast< ushort > (uint v)
core,template<class SrcPtr >
core,__host__ Expr< ScharrXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,cv::cudev::scharrX_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ ScharrXPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::scharrXPtr (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< ScharrYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,cv::cudev::scharrY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ ScharrYPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::scharrYPtr (const SrcPtr &src)
core,template<class Ptr2DSz >
core,__host__ PtrTraits< Ptr2DSz >::ptr_type
core,cv::cudev::shrinkPtr (const Ptr2DSz &ptr)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::sin (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::sin (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::sin (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::sin (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sin (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sin (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sin (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sin (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sin_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::sin_ (const SrcPtr &src)
core,template<class MaskPtr >
core,__host__ SingleMaskChannelsSz< typename PtrTraits< MaskPtr >::ptr_type >
core,"cv::cudev::singleMaskChannels (const MaskPtr &mask, int channels)"
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::sinh (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::sinh (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::sinh (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::sinh (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sinh (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sinh (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sinh (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sinh (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sinh_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::sinh_ (const SrcPtr &src)
core,template<typename T0 >
core,__device__ __forceinline__ tuple< volatile T0 * >
core,cv::cudev::smem_tuple (T0 *t0)
core,"template<typename T0 , typename T1 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1)"
core,"template<typename T0 , typename T1 , typename T2 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 *, volatile T7 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6, T7 *t7)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 *, volatile T7 *, volatile T8 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6, T7 *t7, T8 *t8)"
core,"template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >"
core,"__device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 *, volatile T7 *, volatile T8 *, volatile T9 * >"
core,"cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6, T7 *t7, T8 *t8, T9 *t9)"
core,template<class SrcPtr >
core,__host__ Expr< SobelXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,cv::cudev::sobelX_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ SobelXPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::sobelXPtr (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< SobelYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > >
core,cv::cudev::sobelY_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ SobelYPtrSz< typename PtrTraits< SrcPtr >::ptr_type >
core,cv::cudev::sobelYPtr (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sqr_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::sqr_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::sqrt (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::sqrt (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::sqrt (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::sqrt (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::sqrt (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::sqrt (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::sqrt (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::sqrt (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sqrt_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::sqrt_ (const SrcPtr &src)
core,template<class SrcPtr >
core,__host__ Expr< SumExprBody< SrcPtr > >
core,cv::cudev::sum_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::tan (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::tan (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::tan (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::tan (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tan (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tan (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tan (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tan (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, tan_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::tan_ (const SrcPtr &src)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const char1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const char2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const char3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const char4 &a)
core,__device__ __forceinline__ double1
core,cv::cudev::tanh (const double1 &a)
core,__device__ __forceinline__ double2
core,cv::cudev::tanh (const double2 &a)
core,__device__ __forceinline__ double3
core,cv::cudev::tanh (const double3 &a)
core,__device__ __forceinline__ double4
core,cv::cudev::tanh (const double4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const float1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const float2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const float3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const float4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const int1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const int2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const int3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const int4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const short1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const short2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const short3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const short4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const uchar1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const uchar2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const uchar3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const uchar4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const uint1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const uint2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const uint3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const uint4 &a)
core,__device__ __forceinline__ float1
core,cv::cudev::tanh (const ushort1 &a)
core,__device__ __forceinline__ float2
core,cv::cudev::tanh (const ushort2 &a)
core,__device__ __forceinline__ float3
core,cv::cudev::tanh (const ushort3 &a)
core,__device__ __forceinline__ float4
core,cv::cudev::tanh (const ushort4 &a)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, tanh_func< typename PtrTraits< SrcPtr >::value_type > > >"
core,cv::cudev::tanh_ (const SrcPtr &src)
core,template<typename T >
core,__host__ __device__ ThreshBinaryFunc< T >
core,"cv::cudev::thresh_binary_func (T thresh, T maxVal)"
core,template<typename T >
core,__host__ __device__ ThreshBinaryInvFunc< T >
core,"cv::cudev::thresh_binary_inv_func (T thresh, T maxVal)"
core,template<typename T >
core,__host__ __device__ ThreshToZeroFunc< T >
core,cv::cudev::thresh_to_zero_func (T thresh)
core,template<typename T >
core,__host__ __device__ ThreshToZeroInvFunc< T >
core,cv::cudev::thresh_to_zero_inv_func (T thresh)
core,template<typename T >
core,__host__ __device__ ThreshTruncFunc< T >
core,cv::cudev::thresh_trunc_func (T thresh)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshBinaryFunc< typename PtrTraits< SrcPtr >::value_type > > >"
core,"cv::cudev::threshBinary_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh, typename PtrTraits< SrcPtr >::value_type maxVal)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshBinaryInvFunc< typename PtrTraits< SrcPtr >::value_type > > >"
core,"cv::cudev::threshBinaryInv_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh, typename PtrTraits< SrcPtr >::value_type maxVal)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshToZeroFunc< typename PtrTraits< SrcPtr >::value_type > > >"
core,"cv::cudev::threshToZero_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshToZeroInvFunc< typename PtrTraits< SrcPtr >::value_type > > >"
core,"cv::cudev::threshToZeroInv_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshTruncFunc< typename PtrTraits< SrcPtr >::value_type > > >"
core,"cv::cudev::threshTrunc_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh)"
core,"template<class Src1Ptr , class Src2Ptr , class Op >"
core,"__host__ BinaryTransformPtrSz< typename PtrTraits< Src1Ptr >::ptr_type, typename PtrTraits< Src2Ptr >::ptr_type, Op >"
core,"cv::cudev::transformPtr (const Src1Ptr &src1, const Src2Ptr &src2, const Op &op)"
core,"template<class SrcPtr , class Op >"
core,"__host__ UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Op >"
core,"cv::cudev::transformPtr (const SrcPtr &src, const Op &op)"
core,template<class SrcPtr >
core,__host__ Expr< TransposeBody< SrcPtr > >
core,cv::cudev::transpose_ (const SrcPtr &src)
core,"template<int n, class Op >"
core,"__host__ __device__ UnaryTupleAdapter< Op, n >"
core,cv::cudev::unaryTupleAdapter (const Op &op)
core,__device__ __forceinline__ uint
core,"cv::cudev::vabsdiff2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vabsdiff4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vadd2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vadd4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vavg2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vavg4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vavrg2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vavrg4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpeq2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpeq4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpge2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpge4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpgt2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpgt4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmple2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmple4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmplt2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmplt4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpne2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vcmpne4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vmax2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vmax4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vmin2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vmin4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vseteq2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vseteq4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetge2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetge4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetgt2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetgt4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetle2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetle4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetlt2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetlt4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetne2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsetne4 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsub2 (uint a, uint b)"
core,__device__ __forceinline__ uint
core,"cv::cudev::vsub4 (uint a, uint b)"
core,template<class SrcPtr >
core,"__host__ Expr< RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, AffineMapPtr > >"
core,"cv::cudev::warpAffine_ (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)"
core,template<class SrcPtr >
core,"__host__ RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, AffineMapPtr >"
core,"cv::cudev::warpAffinePtr (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)"
core,"template<class InIt , class OutIt >"
core,__device__ __forceinline__ OutIt
core,"cv::cudev::warpCopy (InIt beg, InIt end, OutIt out)"
core,"template<class It , typename T >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpFill (It beg, It end, const T &value)"
core,template<class SrcPtr >
core,"__host__ Expr< RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, PerspectiveMapPtr > >"
core,"cv::cudev::warpPerspective_ (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)"
core,template<class SrcPtr >
core,"__host__ RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, PerspectiveMapPtr >"
core,"cv::cudev::warpPerspectivePtr (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)"
core,"template<typename P0 , typename P1 , typename P2 , typename P3 , typename P4 , typename P5 , typename P6 , typename P7 , typename P8 , typename P9 , typename R0 , typename R1 , typename R2 , typename R3 , typename R4 , typename R5 , typename R6 , typename R7 , typename R8 , typename R9 , class Op0 , class Op1 , class Op2 , class Op3 , class Op4 , class Op5 , class Op6 , class Op7 , class Op8 , class Op9 >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpReduce (const tuple< P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 > &smem, const tuple< R0, R1, R2, R3, R4, R5, R6, R7, R8, R9 > &val, uint tid, const tuple< Op0, Op1, Op2, Op3, Op4, Op5, Op6, Op7, Op8, Op9 > &op)"
core,"template<typename T , class Op >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpReduce (volatile T *smem, T &val, uint tid, const Op &op)"
core,"template<typename KP0 , typename KP1 , typename KP2 , typename KP3 , typename KP4 , typename KP5 , typename KP6 , typename KP7 , typename KP8 , typename KP9 , typename KR0 , typename KR1 , typename KR2 , typename KR3 , typename KR4 , typename KR5 , typename KR6 , typename KR7 , typename KR8 , typename KR9 , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp0 , class Cmp1 , class Cmp2 , class Cmp3 , class Cmp4 , class Cmp5 , class Cmp6 , class Cmp7 , class Cmp8 , class Cmp9 >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpReduceKeyVal (const tuple< KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9 > &skeys, const tuple< KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9 > &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const tuple< Cmp0, Cmp1, Cmp2, Cmp3, Cmp4, Cmp5, Cmp6, Cmp7, Cmp8, Cmp9 > &cmp)"
core,"template<typename K , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpReduceKeyVal (volatile K *skeys, K &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const Cmp &cmp)"
core,"template<typename K , typename V , class Cmp >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpReduceKeyVal (volatile K *skeys, K &key, volatile V *svals, V &val, uint tid, const Cmp &cmp)"
core,template<typename T >
core,__device__ __forceinline__ T
core,"cv::cudev::warpScanExclusive (T data, volatile T *smem, uint tid)"
core,template<typename T >
core,__device__ T
core,"cv::cudev::warpScanInclusive (T data, volatile T *smem, uint tid)"
core,"template<class InIt , class OutIt , class UnOp >"
core,__device__ __forceinline__ OutIt
core,"cv::cudev::warpTransform (InIt beg, InIt end, OutIt out, const UnOp &op)"
core,"template<class InIt1 , class InIt2 , class OutIt , class BinOp >"
core,__device__ __forceinline__ OutIt
core,"cv::cudev::warpTransform (InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, const BinOp &op)"
core,"template<typename OutIt , typename T >"
core,__device__ __forceinline__ void
core,"cv::cudev::warpYota (OutIt beg, OutIt end, T value)"
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::XYZ_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YCrCb_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV4_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV4_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV4_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV4_to_RGBA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV_to_BGR_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV_to_BGRA_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV_to_RGB_ (const SrcPtr &src)
core,template<class SrcPtr >
core,"__host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > >"
core,cv::cudev::YUV_to_RGBA_ (const SrcPtr &src)
core,"template<class Ptr0 , class Ptr1 >"
core,"__host__ ZipPtrSz< tuple< typename PtrTraits< Ptr0 >::ptr_type, typename PtrTraits< Ptr1 >::ptr_type > >"
core,"cv::cudev::zipPtr (const Ptr0 &ptr0, const Ptr1 &ptr1)"
core,"template<class Ptr0 , class Ptr1 , class Ptr2 >"
core,"__host__ ZipPtrSz< tuple< typename PtrTraits< Ptr0 >::ptr_type, typename PtrTraits< Ptr1 >::ptr_type, typename PtrTraits< Ptr2 >::ptr_type > >"
core,"cv::cudev::zipPtr (const Ptr0 &ptr0, const Ptr1 &ptr1, const Ptr2 &ptr2)"
core,"template<class Ptr0 , class Ptr1 , class Ptr2 , class Ptr3 >"
core,"__host__ ZipPtrSz< tuple< typename PtrTraits< Ptr0 >::ptr_type, typename PtrTraits< Ptr1 >::ptr_type, typename PtrTraits< Ptr2 >::ptr_type, typename PtrTraits< Ptr3 >::ptr_type > >"
core,"cv::cudev::zipPtr (const Ptr0 &ptr0, const Ptr1 &ptr1, const Ptr2 &ptr2, const Ptr3 &ptr3)"
core,"Namespace for all functions is cvv, i.e. cvv::showImage()."
core,Compilation:
core,"For development, i.e. for cvv GUI to show up, compile your code using cvv with g++ -DCVVISUAL_DEBUGMODE*."
core,"For release, i.e. cvv calls doing nothing, compile your code without above flag."
core,See cvv tutorial for a commented example application using cvv.
core,Namespaces
core,namespace
core,cvv::impl
dnn,This class represents high-level API for classification models.
dnn,"ClassificationModel allows to set params for preprocessing input image. ClassificationModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return top-1 prediction."
dnn,Derivatives of this class encapsulates functions of certain backends.
dnn,This interface class allows to build new Layers - are building blocks of networks.
dnn,"Each class, derived from Layer, must implement forward() method to compute outputs. Also before using the new layer into networks you must register your layer by using one of LayerFactory macros."
dnn,This class is presented high-level API for neural networks.
dnn,"Model allows to set params for preprocessing input image. Model creates net from file with trained weights and config, sets preprocessing input and runs forward pass."
dnn,This class represents high-level API for object detection networks.
dnn,"DetectionModel allows to set params for preprocessing input image. DetectionModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return result detections. For DetectionModel SSD, Faster R-CNN, YOLO topologies are supported."
dnn,Layer factory allows to create instances of registered layers.
dnn,"This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64."
dnn,Base class for text detection networks.
dnn,This module contains:
dnn,"API for new layers creation, layers are building bricks of neural networks;"
dnn,set of built-in most-useful Layers;
dnn,API to construct and modify comprehensive neural networks from layers;
dnn,functionality for loading serialized networks models from different frameworks.
dnn,Functionality of this module is designed only for forward pass computations (i.e. network testing). A network training is in principle not supported.
dnn,Classes
dnn,class
dnn,cv::dnn::BackendNode
dnn,Derivatives of this class encapsulates functions of certain backends. More...
dnn,class
dnn,cv::dnn::BackendWrapper
dnn,Derivatives of this class wraps cv::Mat for different backends and targets. More...
dnn,class
dnn,cv::dnn::ClassificationModel
dnn,This class represents high-level API for classification models. More...
dnn,class
dnn,cv::dnn::DetectionModel
dnn,This class represents high-level API for object detection networks. More...
dnn,class
dnn,cv::dnn::Dict
dnn,"This class implements name-value dictionary, values are instances of DictValue. More..."
dnn,struct
dnn,cv::dnn::DictValue
dnn,"This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64. More..."
dnn,struct
dnn,cv::dnn::Image2BlobParams
dnn,Processing params of image to blob. More...
dnn,class
dnn,cv::dnn::KeypointsModel
dnn,This class represents high-level API for keypoints models. More...
dnn,class
dnn,cv::dnn::Layer
dnn,This interface class allows to build new Layers - are building blocks of networks. More...
dnn,class
dnn,cv::dnn::LayerParams
dnn,This class provides all data needed to initialize layer. More...
dnn,class
dnn,cv::dnn::Model
dnn,This class is presented high-level API for neural networks. More...
dnn,class
dnn,cv::dnn::Net
dnn,This class allows to create and manipulate comprehensive artificial neural networks. More...
dnn,class
dnn,cv::dnn::SegmentationModel
dnn,This class represents high-level API for segmentation models. More...
dnn,class
dnn,cv::dnn::TextDetectionModel
dnn,Base class for text detection networks. More...
dnn,class
dnn,cv::dnn::TextDetectionModel_DB
dnn,This class represents high-level API for text detection DL networks compatible with DB model. More...
dnn,class
dnn,cv::dnn::TextDetectionModel_EAST
dnn,This class represents high-level API for text detection DL networks compatible with EAST model. More...
dnn,class
dnn,cv::dnn::TextRecognitionModel
dnn,This class represents high-level API for text recognition networks. More...
dnn,Functions
dnn,Mat
dnn,"cv::dnn::blobFromImage (InputArray image, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,"Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels."
dnn,void
dnn,"cv::dnn::blobFromImage (InputArray image, OutputArray blob, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,Creates 4-dimensional blob from image.
dnn,Mat
dnn,"cv::dnn::blobFromImages (InputArrayOfArrays images, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,"Creates 4-dimensional blob from series of images. Optionally resizes and crops images from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels."
dnn,void
dnn,"cv::dnn::blobFromImages (InputArrayOfArrays images, OutputArray blob, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,Creates 4-dimensional blob from series of images.
dnn,Mat
dnn,"cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, const Image2BlobParams &param=Image2BlobParams())"
dnn,Creates 4-dimensional blob from series of images with given params.
dnn,void
dnn,"cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())"
dnn,Mat
dnn,"cv::dnn::blobFromImageWithParams (InputArray image, const Image2BlobParams &param=Image2BlobParams())"
dnn,Creates 4-dimensional blob from image with given params.
dnn,void
dnn,"cv::dnn::blobFromImageWithParams (InputArray image, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())"
dnn,void
dnn,cv::dnn::enableModelDiagnostics (bool isDiagnosticsMode)
dnn,Enables detailed logging of the DNN model loading with CV DNN API.
dnn,"std::vector< std::pair< Backend, Target > >"
dnn,cv::dnn::getAvailableBackends ()
dnn,std::vector< Target >
dnn,cv::dnn::getAvailableTargets (dnn::Backend be)
dnn,LayerFactory_Impl &
dnn,cv::dnn::getLayerFactoryImpl ()
dnn,Mutex &
dnn,cv::dnn::getLayerFactoryMutex ()
dnn,"Get the mutex guarding LayerFactory_Impl, see getLayerFactoryImpl() function."
dnn,void
dnn,"cv::dnn::imagesFromBlob (const cv::Mat &blob_, OutputArrayOfArrays images_)"
dnn,Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector<cv::Mat>).
dnn,void
dnn,"cv::dnn::NMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,Performs non maximum suppression given boxes and corresponding scores.
dnn,void
dnn,"cv::dnn::NMSBoxes (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,void
dnn,"cv::dnn::NMSBoxes (const std::vector< RotatedRect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,void
dnn,"cv::dnn::NMSBoxesBatched (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,Performs batched non maximum suppression on given boxes and corresponding scores across different classes.
dnn,void
dnn,"cv::dnn::NMSBoxesBatched (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,Net
dnn,"cv::dnn::readNet (const String &framework, const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())"
dnn,Read deep learning network represented in one of the supported formats.
dnn,Net
dnn,"cv::dnn::readNet (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config="""", const String &framework="""")"
dnn,Read deep learning network represented in one of the supported formats.
dnn,Net
dnn,"cv::dnn::readNetFromCaffe (const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)"
dnn,Reads a network model stored in Caffe model in memory.
dnn,Net
dnn,"cv::dnn::readNetFromCaffe (const std::vector< uchar > &bufferProto, const std::vector< uchar > &bufferModel=std::vector< uchar >())"
dnn,Reads a network model stored in Caffe model in memory.
dnn,Net
dnn,"cv::dnn::readNetFromCaffe (CV_WRAP_FILE_PATH const String &prototxt, CV_WRAP_FILE_PATH const String &caffeModel=String())"
dnn,Reads a network model stored in Caffe framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromDarknet (const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)"
dnn,Reads a network model stored in Darknet model files.
dnn,Net
dnn,"cv::dnn::readNetFromDarknet (const std::vector< uchar > &bufferCfg, const std::vector< uchar > &bufferModel=std::vector< uchar >())"
dnn,Reads a network model stored in Darknet model files.
dnn,Net
dnn,"cv::dnn::readNetFromDarknet (CV_WRAP_FILE_PATH const String &cfgFile, CV_WRAP_FILE_PATH const String &darknetModel=String())"
dnn,Reads a network model stored in Darknet model files.
dnn,Net
dnn,"cv::dnn::readNetFromModelOptimizer (const std::vector< uchar > &bufferModelConfig, const std::vector< uchar > &bufferWeights)"
dnn,Load a network from Intel's Model Optimizer intermediate representation.
dnn,Net
dnn,"cv::dnn::readNetFromModelOptimizer (const uchar *bufferModelConfigPtr, size_t bufferModelConfigSize, const uchar *bufferWeightsPtr, size_t bufferWeightsSize)"
dnn,Load a network from Intel's Model Optimizer intermediate representation.
dnn,Net
dnn,"cv::dnn::readNetFromModelOptimizer (CV_WRAP_FILE_PATH const String &xml, CV_WRAP_FILE_PATH const String &bin="""")"
dnn,Load a network from Intel's Model Optimizer intermediate representation.
dnn,Net
dnn,"cv::dnn::readNetFromONNX (const char *buffer, size_t sizeBuffer)"
dnn,Reads a network model from ONNX in-memory buffer.
dnn,Net
dnn,cv::dnn::readNetFromONNX (const std::vector< uchar > &buffer)
dnn,Reads a network model from ONNX in-memory buffer.
dnn,Net
dnn,cv::dnn::readNetFromONNX (CV_WRAP_FILE_PATH const String &onnxFile)
dnn,Reads a network model ONNX.
dnn,Net
dnn,"cv::dnn::readNetFromTensorflow (const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)"
dnn,Reads a network model stored in TensorFlow framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTensorflow (const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())"
dnn,Reads a network model stored in TensorFlow framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTensorflow (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config=String())"
dnn,Reads a network model stored in TensorFlow framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTFLite (const char *bufferModel, size_t lenModel)"
dnn,Reads a network model stored in TFLite framework's format.
dnn,Net
dnn,cv::dnn::readNetFromTFLite (const std::vector< uchar > &bufferModel)
dnn,Reads a network model stored in TFLite framework's format.
dnn,Net
dnn,cv::dnn::readNetFromTFLite (CV_WRAP_FILE_PATH const String &model)
dnn,Reads a network model stored in TFLite framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTorch (CV_WRAP_FILE_PATH const String &model, bool isBinary=true, bool evaluate=true)"
dnn,Reads a network model stored in Torch7 framework's format.
dnn,Mat
dnn,cv::dnn::readTensorFromONNX (CV_WRAP_FILE_PATH const String &path)
dnn,Creates blob from .pb file.
dnn,Mat
dnn,"cv::dnn::readTorchBlob (const String &filename, bool isBinary=true)"
dnn,Loads blob which was serialized as torch.Tensor object of Torch7 framework.
dnn,void
dnn,"cv::dnn::shrinkCaffeModel (CV_WRAP_FILE_PATH const String &src, CV_WRAP_FILE_PATH const String &dst, const std::vector< String > &layersTypes=std::vector< String >())"
dnn,Convert all weights of Caffe network to half precision floating point.
dnn,void
dnn,"cv::dnn::softNMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, std::vector< float > &updated_scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, size_t top_k=0, const float sigma=0.5, SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN)"
dnn,Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503.
dnn,void
dnn,"cv::dnn::writeTextGraph (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &output)"
dnn,Create a text representation for a binary network stored in protocol buffer format.
dnn,This subsection of dnn module contains information about built-in layers and their descriptions.
dnn,"Classes listed here, in fact, provides C++ API for creating instances of built-in layers. In addition to this way of layers instantiation, there is a more common factory API (see Utilities for New Layers Registration), it allows to create layers dynamically (by name) and register new ones. You can use both API, but factory API is less convenient for native C++ programming and basically designed for use inside importers (see readNetFromCaffe(), readNetFromTorch(), readNetFromTensorflow())."
dnn,"Built-in layers partially reproduce functionality of corresponding Caffe and Torch7 layers. In particular, the following layers and Caffe importer were tested to reproduce Caffe functionality:"
dnn,Convolution
dnn,Deconvolution
dnn,Pooling
dnn,InnerProduct
dnn,"TanH, ReLU, Sigmoid, BNLL, Power, AbsVal"
dnn,Softmax
dnn,"Reshape, Flatten, Slice, Split"
dnn,LRN
dnn,MVN
dnn,Dropout (since it does nothing on forward pass -))
dnn,Classes
dnn,class
dnn,cv::dnn::AbsLayer
dnn,class
dnn,cv::dnn::AccumLayer
dnn,class
dnn,cv::dnn::AcoshLayer
dnn,class
dnn,cv::dnn::AcosLayer
dnn,class
dnn,cv::dnn::ActivationLayer
dnn,class
dnn,cv::dnn::ActivationLayerInt8
dnn,class
dnn,cv::dnn::ArgLayer
dnn,ArgMax/ArgMin layer. More...
dnn,class
dnn,cv::dnn::AsinhLayer
dnn,class
dnn,cv::dnn::AsinLayer
dnn,class
dnn,cv::dnn::AtanhLayer
dnn,class
dnn,cv::dnn::AtanLayer
dnn,class
dnn,cv::dnn::AttentionLayer
dnn,class
dnn,cv::dnn::BaseConvolutionLayer
dnn,class
dnn,cv::dnn::BatchNormLayer
dnn,class
dnn,cv::dnn::BatchNormLayerInt8
dnn,class
dnn,cv::dnn::BlankLayer
dnn,class
dnn,cv::dnn::BNLLLayer
dnn,class
dnn,cv::dnn::CeilLayer
dnn,class
dnn,cv::dnn::CeluLayer
dnn,class
dnn,cv::dnn::ChannelsPReLULayer
dnn,class
dnn,cv::dnn::CompareLayer
dnn,class
dnn,cv::dnn::ConcatLayer
dnn,class
dnn,cv::dnn::ConstLayer
dnn,class
dnn,cv::dnn::ConvolutionLayer
dnn,class
dnn,cv::dnn::ConvolutionLayerInt8
dnn,class
dnn,cv::dnn::CorrelationLayer
dnn,class
dnn,cv::dnn::CoshLayer
dnn,class
dnn,cv::dnn::CosLayer
dnn,class
dnn,cv::dnn::CropAndResizeLayer
dnn,class
dnn,cv::dnn::CropLayer
dnn,class
dnn,cv::dnn::CumSumLayer
dnn,class
dnn,cv::dnn::DataAugmentationLayer
dnn,class
dnn,cv::dnn::DeconvolutionLayer
dnn,class
dnn,cv::dnn::DepthToSpaceLayer
dnn,class
dnn,cv::dnn::DequantizeLayer
dnn,class
dnn,cv::dnn::DetectionOutputLayer
dnn,Detection output layer. More...
dnn,class
dnn,cv::dnn::EinsumLayer
dnn,This function performs array summation based on the Einstein summation convention. The function allows for concise expressions of various mathematical operations using subscripts. More...
dnn,class
dnn,cv::dnn::EltwiseLayer
dnn,Element wise operation on inputs. More...
dnn,class
dnn,cv::dnn::EltwiseLayerInt8
dnn,class
dnn,cv::dnn::ELULayer
dnn,class
dnn,cv::dnn::ErfLayer
dnn,class
dnn,cv::dnn::ExpandLayer
dnn,class
dnn,cv::dnn::ExpLayer
dnn,class
dnn,cv::dnn::FlattenLayer
dnn,class
dnn,cv::dnn::FloorLayer
dnn,class
dnn,cv::dnn::FlowWarpLayer
dnn,class
dnn,cv::dnn::GatherElementsLayer
dnn,GatherElements layer GatherElements takes two inputs data and indices of the same rank r >= 1 and an optional attribute axis and works such that: output[i][j][k] = data[index[i][j][k]][j][k] if axis = 0 and r = 3 output[i][j][k] = data[i][index[i][j][k]][k] if axis = 1 and r = 3 output[i][j][k] = data[i][j][index[i][j][k]] if axis = 2 and r = 3. More...
dnn,class
dnn,cv::dnn::GatherLayer
dnn,Gather layer. More...
dnn,class
dnn,cv::dnn::GeluApproximationLayer
dnn,class
dnn,cv::dnn::GeluLayer
dnn,class
dnn,cv::dnn::GemmLayer
dnn,class
dnn,cv::dnn::GroupNormLayer
dnn,class
dnn,cv::dnn::GRULayer
dnn,GRU recurrent one-layer. More...
dnn,class
dnn,cv::dnn::HardSigmoidLayer
dnn,class
dnn,cv::dnn::HardSwishLayer
dnn,class
dnn,cv::dnn::InnerProductLayer
dnn,class
dnn,cv::dnn::InnerProductLayerInt8
dnn,class
dnn,cv::dnn::InstanceNormLayer
dnn,class
dnn,cv::dnn::InterpLayer
dnn,Bilinear resize layer from https://github.com/cdmh/deeplab-public-ver2. More...
dnn,class
dnn,cv::dnn::LayerNormLayer
dnn,class
dnn,cv::dnn::LogLayer
dnn,class
dnn,cv::dnn::LRNLayer
dnn,class
dnn,cv::dnn::LSTMLayer
dnn,LSTM recurrent layer. More...
dnn,class
dnn,cv::dnn::MatMulLayer
dnn,class
dnn,cv::dnn::MaxUnpoolLayer
dnn,class
dnn,cv::dnn::MishLayer
dnn,class
dnn,cv::dnn::MVNLayer
dnn,class
dnn,cv::dnn::NaryEltwiseLayer
dnn,class
dnn,cv::dnn::NormalizeBBoxLayer
dnn,\( L_p \) - normalization layer. More...
dnn,class
dnn,cv::dnn::NotLayer
dnn,class
dnn,cv::dnn::PaddingLayer
dnn,Adds extra values for specific axes. More...
dnn,class
dnn,cv::dnn::PermuteLayer
dnn,class
dnn,cv::dnn::PoolingLayer
dnn,class
dnn,cv::dnn::PoolingLayerInt8
dnn,class
dnn,cv::dnn::PowerLayer
dnn,class
dnn,cv::dnn::PriorBoxLayer
dnn,class
dnn,cv::dnn::ProposalLayer
dnn,class
dnn,cv::dnn::QuantizeLayer
dnn,class
dnn,cv::dnn::ReciprocalLayer
dnn,class
dnn,cv::dnn::ReduceLayer
dnn,class
dnn,cv::dnn::RegionLayer
dnn,class
dnn,cv::dnn::ReLU6Layer
dnn,class
dnn,cv::dnn::ReLULayer
dnn,class
dnn,cv::dnn::ReorgLayer
dnn,class
dnn,cv::dnn::RequantizeLayer
dnn,class
dnn,cv::dnn::ReshapeLayer
dnn,class
dnn,cv::dnn::ResizeLayer
dnn,Resize input 4-dimensional blob by nearest neighbor or bilinear strategy. More...
dnn,class
dnn,cv::dnn::RNNLayer
dnn,Classical recurrent layer. More...
dnn,class
dnn,cv::dnn::RoundLayer
dnn,class
dnn,cv::dnn::ScaleLayer
dnn,class
dnn,cv::dnn::ScaleLayerInt8
dnn,class
dnn,cv::dnn::ScatterLayer
dnn,class
dnn,cv::dnn::ScatterNDLayer
dnn,class
dnn,cv::dnn::SeluLayer
dnn,class
dnn,cv::dnn::ShiftLayer
dnn,class
dnn,cv::dnn::ShiftLayerInt8
dnn,class
dnn,cv::dnn::ShrinkLayer
dnn,class
dnn,cv::dnn::ShuffleChannelLayer
dnn,class
dnn,cv::dnn::SigmoidLayer
dnn,class
dnn,cv::dnn::SignLayer
dnn,class
dnn,cv::dnn::SinhLayer
dnn,class
dnn,cv::dnn::SinLayer
dnn,class
dnn,cv::dnn::SliceLayer
dnn,class
dnn,cv::dnn::SoftmaxLayer
dnn,class
dnn,cv::dnn::SoftmaxLayerInt8
dnn,class
dnn,cv::dnn::SoftplusLayer
dnn,class
dnn,cv::dnn::SoftsignLayer
dnn,class
dnn,cv::dnn::SpaceToDepthLayer
dnn,class
dnn,cv::dnn::SplitLayer
dnn,class
dnn,cv::dnn::SqrtLayer
dnn,class
dnn,cv::dnn::SwishLayer
dnn,class
dnn,cv::dnn::TanHLayer
dnn,class
dnn,cv::dnn::TanLayer
dnn,class
dnn,cv::dnn::ThresholdedReluLayer
dnn,class
dnn,cv::dnn::TileLayer
dnn,class
dnn,cv::dnn::TopKLayer
dnn,This class represents high-level API for text detection DL networks compatible with EAST model.
dnn,Configurable parameters:
dnn,"(float) confThreshold - used to filter boxes by confidences, default: 0.5f"
dnn,"(float) nmsThreshold - used in non maximum suppression, default: 0.0f"
dnn,"This class implements name-value dictionary, values are instances of DictValue."
dnn,Processing params of image to blob.
dnn,It includes all possible image processing operations and corresponding parameters.
dnn,This class represents high-level API for segmentation models.
dnn,"SegmentationModel allows to set params for preprocessing input image. SegmentationModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and returns the class prediction for each pixel."
dnn,This class represents high-level API for text detection DL networks compatible with DB model.
dnn,"Related publications: [167] Paper: https://arxiv.org/abs/1911.08947 For more information about the hyper-parameters setting, please refer to https://github.com/MhLiao/DB"
dnn,Configurable parameters:
dnn,(float) binaryThreshold - The threshold of the binary map. It is usually set to 0.3.
dnn,"(float) polygonThreshold - The threshold of text polygons. It is usually set to 0.5, 0.6, and 0.7. Default is 0.5f"
dnn,"(double) unclipRatio - The unclip ratio of the detected text region, which determines the output size. It is usually set to 2.0."
dnn,(int) maxCandidates - The max number of the output results.
dnn,This class allows to create and manipulate comprehensive artificial neural networks.
dnn,"Neural network is presented as directed acyclic graph (DAG), where vertices are Layer instances, and edges specify relationships between layers inputs and outputs."
dnn,Each network layer has unique integer id and unique string name inside its network. LayerId can store either layer name or layer id.
dnn,"This class supports reference counting of its instances, i. e. copies point to the same instance."
dnn,This class provides all data needed to initialize layer.
dnn,"It includes dictionary with scalar params (which can be read by using Dict interface), blob params blobs and optional meta information: name and type of layer instance."
dnn,Functions
dnn,Mat
dnn,"cv::dnn::blobFromImage (InputArray image, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,"Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels."
dnn,void
dnn,"cv::dnn::blobFromImage (InputArray image, OutputArray blob, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,Creates 4-dimensional blob from image.
dnn,Mat
dnn,"cv::dnn::blobFromImages (InputArrayOfArrays images, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,"Creates 4-dimensional blob from series of images. Optionally resizes and crops images from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels."
dnn,void
dnn,"cv::dnn::blobFromImages (InputArrayOfArrays images, OutputArray blob, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)"
dnn,Creates 4-dimensional blob from series of images.
dnn,Mat
dnn,"cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, const Image2BlobParams &param=Image2BlobParams())"
dnn,Creates 4-dimensional blob from series of images with given params.
dnn,void
dnn,"cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())"
dnn,Mat
dnn,"cv::dnn::blobFromImageWithParams (InputArray image, const Image2BlobParams &param=Image2BlobParams())"
dnn,Creates 4-dimensional blob from image with given params.
dnn,void
dnn,"cv::dnn::blobFromImageWithParams (InputArray image, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())"
dnn,void
dnn,cv::dnn::enableModelDiagnostics (bool isDiagnosticsMode)
dnn,Enables detailed logging of the DNN model loading with CV DNN API.
dnn,"std::vector< std::pair< Backend, Target > >"
dnn,cv::dnn::getAvailableBackends ()
dnn,std::vector< Target >
dnn,cv::dnn::getAvailableTargets (dnn::Backend be)
dnn,void
dnn,"cv::dnn::imagesFromBlob (const cv::Mat &blob_, OutputArrayOfArrays images_)"
dnn,Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector<cv::Mat>).
dnn,void
dnn,"cv::dnn::NMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,Performs non maximum suppression given boxes and corresponding scores.
dnn,void
dnn,"cv::dnn::NMSBoxes (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,void
dnn,"cv::dnn::NMSBoxes (const std::vector< RotatedRect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,void
dnn,"cv::dnn::NMSBoxesBatched (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,Performs batched non maximum suppression on given boxes and corresponding scores across different classes.
dnn,void
dnn,"cv::dnn::NMSBoxesBatched (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)"
dnn,Net
dnn,"cv::dnn::readNet (const String &framework, const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())"
dnn,Read deep learning network represented in one of the supported formats.
dnn,Net
dnn,"cv::dnn::readNet (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config="""", const String &framework="""")"
dnn,Read deep learning network represented in one of the supported formats.
dnn,Net
dnn,"cv::dnn::readNetFromCaffe (const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)"
dnn,Reads a network model stored in Caffe model in memory.
dnn,Net
dnn,"cv::dnn::readNetFromCaffe (const std::vector< uchar > &bufferProto, const std::vector< uchar > &bufferModel=std::vector< uchar >())"
dnn,Reads a network model stored in Caffe model in memory.
dnn,Net
dnn,"cv::dnn::readNetFromCaffe (CV_WRAP_FILE_PATH const String &prototxt, CV_WRAP_FILE_PATH const String &caffeModel=String())"
dnn,Reads a network model stored in Caffe framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromDarknet (const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)"
dnn,Reads a network model stored in Darknet model files.
dnn,Net
dnn,"cv::dnn::readNetFromDarknet (const std::vector< uchar > &bufferCfg, const std::vector< uchar > &bufferModel=std::vector< uchar >())"
dnn,Reads a network model stored in Darknet model files.
dnn,Net
dnn,"cv::dnn::readNetFromDarknet (CV_WRAP_FILE_PATH const String &cfgFile, CV_WRAP_FILE_PATH const String &darknetModel=String())"
dnn,Reads a network model stored in Darknet model files.
dnn,Net
dnn,"cv::dnn::readNetFromModelOptimizer (const std::vector< uchar > &bufferModelConfig, const std::vector< uchar > &bufferWeights)"
dnn,Load a network from Intel's Model Optimizer intermediate representation.
dnn,Net
dnn,"cv::dnn::readNetFromModelOptimizer (const uchar *bufferModelConfigPtr, size_t bufferModelConfigSize, const uchar *bufferWeightsPtr, size_t bufferWeightsSize)"
dnn,Load a network from Intel's Model Optimizer intermediate representation.
dnn,Net
dnn,"cv::dnn::readNetFromModelOptimizer (CV_WRAP_FILE_PATH const String &xml, CV_WRAP_FILE_PATH const String &bin="""")"
dnn,Load a network from Intel's Model Optimizer intermediate representation.
dnn,Net
dnn,"cv::dnn::readNetFromONNX (const char *buffer, size_t sizeBuffer)"
dnn,Reads a network model from ONNX in-memory buffer.
dnn,Net
dnn,cv::dnn::readNetFromONNX (const std::vector< uchar > &buffer)
dnn,Reads a network model from ONNX in-memory buffer.
dnn,Net
dnn,cv::dnn::readNetFromONNX (CV_WRAP_FILE_PATH const String &onnxFile)
dnn,Reads a network model ONNX.
dnn,Net
dnn,"cv::dnn::readNetFromTensorflow (const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)"
dnn,Reads a network model stored in TensorFlow framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTensorflow (const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())"
dnn,Reads a network model stored in TensorFlow framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTensorflow (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config=String())"
dnn,Reads a network model stored in TensorFlow framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTFLite (const char *bufferModel, size_t lenModel)"
dnn,Reads a network model stored in TFLite framework's format.
dnn,Net
dnn,cv::dnn::readNetFromTFLite (const std::vector< uchar > &bufferModel)
dnn,Reads a network model stored in TFLite framework's format.
dnn,Net
dnn,cv::dnn::readNetFromTFLite (CV_WRAP_FILE_PATH const String &model)
dnn,Reads a network model stored in TFLite framework's format.
dnn,Net
dnn,"cv::dnn::readNetFromTorch (CV_WRAP_FILE_PATH const String &model, bool isBinary=true, bool evaluate=true)"
dnn,Reads a network model stored in Torch7 framework's format.
dnn,Mat
dnn,cv::dnn::readTensorFromONNX (CV_WRAP_FILE_PATH const String &path)
dnn,Creates blob from .pb file.
dnn,Mat
dnn,"cv::dnn::readTorchBlob (const String &filename, bool isBinary=true)"
dnn,Loads blob which was serialized as torch.Tensor object of Torch7 framework.
dnn,void
dnn,"cv::dnn::shrinkCaffeModel (CV_WRAP_FILE_PATH const String &src, CV_WRAP_FILE_PATH const String &dst, const std::vector< String > &layersTypes=std::vector< String >())"
dnn,Convert all weights of Caffe network to half precision floating point.
dnn,void
dnn,"cv::dnn::softNMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, std::vector< float > &updated_scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, size_t top_k=0, const float sigma=0.5, SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN)"
dnn,Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503.
dnn,void
dnn,"cv::dnn::writeTextGraph (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &output)"
dnn,Create a text representation for a binary network stored in protocol buffer format.
dnn,This class represents high-level API for keypoints models.
dnn,"KeypointsModel allows to set params for preprocessing input image. KeypointsModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and returns the x and y coordinates of each detected keypoint"
dnn,This class represents high-level API for text recognition networks.
dnn,"TextRecognitionModel allows to set params for preprocessing input image. TextRecognitionModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return recognition result. For TextRecognitionModel, CRNN-CTC is supported."
dnn,Derivatives of this class wraps cv::Mat for different backends and targets.
dnn,Classes
dnn,class
dnn,cv::dnn::LayerFactory
dnn,Layer factory allows to create instances of registered layers. More...
features2d,Enumerations
features2d,enum struct
features2d,"cv::DrawMatchesFlags { cv::DrawMatchesFlags::DEFAULT = 0 , cv::DrawMatchesFlags::DRAW_OVER_OUTIMG = 1 , cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS = 2 , cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS = 4 }"
features2d,Functions
features2d,void
features2d,"cv::drawKeypoints (InputArray image, const std::vector< KeyPoint > &keypoints, InputOutputArray outImage, const Scalar &color=Scalar::all(-1), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)"
features2d,Draws keypoints.
features2d,void
features2d,"cv::drawMatches (InputArray img1, const std::vector< KeyPoint > &keypoints1, InputArray img2, const std::vector< KeyPoint > &keypoints2, const std::vector< DMatch > &matches1to2, InputOutputArray outImg, const int matchesThickness, const Scalar &matchColor=Scalar::all(-1), const Scalar &singlePointColor=Scalar::all(-1), const std::vector< char > &matchesMask=std::vector< char >(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)"
features2d,void
features2d,"cv::drawMatches (InputArray img1, const std::vector< KeyPoint > &keypoints1, InputArray img2, const std::vector< KeyPoint > &keypoints2, const std::vector< DMatch > &matches1to2, InputOutputArray outImg, const Scalar &matchColor=Scalar::all(-1), const Scalar &singlePointColor=Scalar::all(-1), const std::vector< char > &matchesMask=std::vector< char >(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)"
features2d,Draws the found matches of keypoints from two images.
features2d,void
features2d,"cv::drawMatches (InputArray img1, const std::vector< KeyPoint > &keypoints1, InputArray img2, const std::vector< KeyPoint > &keypoints2, const std::vector< std::vector< DMatch > > &matches1to2, InputOutputArray outImg, const Scalar &matchColor=Scalar::all(-1), const Scalar &singlePointColor=Scalar::all(-1), const std::vector< std::vector< char > > &matchesMask=std::vector< std::vector< char > >(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)"
features2d,Classes
features2d,struct
features2d,cv::Accumulator< T >
features2d,struct
features2d,cv::Accumulator< char >
features2d,struct
features2d,cv::Accumulator< short >
features2d,struct
features2d,cv::Accumulator< unsigned char >
features2d,struct
features2d,cv::Accumulator< unsigned short >
features2d,class
features2d,cv::AffineFeature
features2d,"Class for implementing the wrapper which makes detectors and extractors to be affine invariant, described as ASIFT in [312] . More..."
features2d,class
features2d,cv::AgastFeatureDetector
features2d,Wrapping class for feature detection using the AGAST method. : More...
features2d,class
features2d,cv::AKAZE
features2d,"Class implementing the AKAZE keypoint detector and descriptor extractor, described in [10]. More..."
features2d,class
features2d,cv::BRISK
features2d,"Class implementing the BRISK keypoint detector and descriptor extractor, described in [159] . More..."
features2d,class
features2d,cv::FastFeatureDetector
features2d,Wrapping class for feature detection using the FAST method. : More...
features2d,class
features2d,cv::Feature2D
features2d,Abstract base class for 2D image feature detectors and descriptor extractors. More...
features2d,class
features2d,cv::GFTTDetector
features2d,Wrapping class for feature detection using the goodFeaturesToTrack function. : More...
features2d,class
features2d,cv::KAZE
features2d,"Class implementing the KAZE keypoint detector and descriptor extractor, described in [9] . More..."
features2d,class
features2d,cv::KeyPointsFilter
features2d,A class filters a vector of keypoints. More...
features2d,struct
features2d,cv::L1< T >
features2d,struct
features2d,cv::L2< T >
features2d,class
features2d,cv::MSER
features2d,Maximally stable extremal region extractor. More...
features2d,class
features2d,cv::ORB
features2d,Class implementing the ORB (oriented BRIEF) keypoint detector and descriptor extractor. More...
features2d,class
features2d,cv::SIFT
features2d,Class for extracting keypoints and computing descriptors using the Scale Invariant Feature Transform (SIFT) algorithm by D. Lowe [174] . More...
features2d,class
features2d,cv::SimpleBlobDetector
features2d,Class for extracting blobs from an image. : More...
features2d,struct
features2d,cv::SL2< T >
features2d,Matchers of keypoint descriptors in OpenCV have wrappers with a common interface that enables you to easily switch between different algorithms solving the same problem. This section is devoted to matching descriptors that are represented as vectors in a multidimensional space. All objects that implement vector descriptor matchers inherit the DescriptorMatcher interface.
features2d,Classes
features2d,class
features2d,cv::BFMatcher
features2d,Brute-force descriptor matcher. More...
features2d,class
features2d,cv::DescriptorMatcher
features2d,Abstract base class for matching keypoint descriptors. More...
features2d,class
features2d,cv::FlannBasedMatcher
features2d,Flann-based descriptor matcher. More...
features2d,This section describes approaches based on local 2D features and used to categorize objects.
features2d,Classes
features2d,class
features2d,cv::BOWImgDescriptorExtractor
features2d,Class to compute an image descriptor using the bag of visual words. More...
features2d,class
features2d,cv::BOWKMeansTrainer
features2d,kmeans -based class to train visual vocabulary using the bag of visual words approach. : More...
features2d,class
features2d,cv::BOWTrainer
features2d,Abstract base class for training the bag of visual words vocabulary from a set of descriptors. More...
flann,The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built.
flann,Distance functor specifies the metric to be used to calculate the distance between two points. There are several Distance functors that are readily available:
flann,"cv::cvflann::L2_Simple - Squared Euclidean distance functor. This is the simpler, unrolled version. This is preferable for very low dimensionality data (eg 3D points)"
flann,"cv::flann::L2 - Squared Euclidean distance functor, optimized version."
flann,"cv::flann::L1 - Manhattan distance functor, optimized version."
flann,cv::flann::MinkowskiDistance - The Minkowski distance functor. This is highly optimised with loop unrolling. The computation of squared root at the end is omitted for efficiency.
flann,"cv::flann::MaxDistance - The max distance functor. It computes the maximum distance between two vectors. This distance is not a valid kdtree distance, it's not dimensionwise additive."
flann,cv::flann::HammingLUT - Hamming distance functor. It counts the bit differences between two strings using a lookup table implementation.
flann,"cv::flann::Hamming - Hamming distance functor. Population count is performed using library calls, if available. Lookup table implementation is used as a fallback."
flann,cv::flann::Hamming2 - Hamming distance functor. Population count is implemented in 12 arithmetic operations (one of which is multiplication).
flann,"cv::flann::DNAmmingLUT - Adaptation of the Hamming distance functor to DNA comparison. As the four bases A, C, G, T of the DNA (or A, G, C, U for RNA) can be coded on 2 bits, it counts the bits pairs differences between two sequences using a lookup table implementation."
flann,cv::flann::DNAmming2 - Adaptation of the Hamming distance functor to DNA comparison. Bases differences count are vectorised thanks to arithmetic operations using standard registers (AVX2 and AVX-512 should come in a near future).
flann,cv::flann::HistIntersectionDistance - The histogram intersection distance functor.
flann,cv::flann::HellingerDistance - The Hellinger distance functor.
flann,cv::flann::ChiSquareDistance - The chi-square distance functor.
flann,cv::flann::KL_Divergence - The Kullback-Leibler divergence functor.
flann,"Although the provided implementations cover a vast range of cases, it is also possible to use a custom implementation. The distance functor is a class whose operator() computes the distance between two features. If the distance is also a kd-tree compatible distance, it should also provide an accum_dist() method that computes the distance between individual feature dimensions."
flann,"In addition to operator() and accum_dist(), a distance functor should also define the ElementType and the ResultType as the types of the elements it operates on and the type of the result it computes. If a distance functor can be used as a kd-tree distance (meaning that the full distance between a pair of features can be accumulated from the partial distances between the individual dimensions) a typedef is_kdtree_distance should be present inside the distance functor. If the distance is not a kd-tree distance, but it's a distance in a vector space (the individual dimensions of the elements it operates on can be accessed independently) a typedef is_vector_space_distance should be defined inside the functor. If neither typedef is defined, the distance is assumed to be a metric distance and will only be used with indexes operating on generic metric distances."
flann,This section documents OpenCV's interface to the FLANN library. FLANN (Fast Library for Approximate Nearest Neighbors) is a library that contains a collection of algorithms optimized for fast nearest neighbor search in large datasets and for high dimensional features. More information about FLANN can be found in [201] .
flann,Classes
flann,struct
flann,cv::flann::CvType< T >
flann,struct
flann,cv::flann::CvType< char >
flann,struct
flann,cv::flann::CvType< double >
flann,struct
flann,cv::flann::CvType< float >
flann,struct
flann,cv::flann::CvType< short >
flann,struct
flann,cv::flann::CvType< unsigned char >
flann,struct
flann,cv::flann::CvType< unsigned short >
flann,class
flann,cv::flann::GenericIndex< Distance >
flann,The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built. More...
gapi,Functions
gapi,GMat
gapi,"cv::gapi::BackgroundSubtractor (const GMat &src, const cv::gapi::video::BackgroundSubtractorParams &bsParams)"
gapi,Gaussian Mixture-based or K-nearest neighbours-based Background/Foreground Segmentation Algorithm. The operation generates a foreground mask.
gapi,"std::tuple< GArray< GMat >, GScalar >"
gapi,"cv::gapi::buildOpticalFlowPyramid (const GMat &img, const Size &winSize, const GScalar &maxLevel, bool withDerivatives=true, int pyrBorder=BORDER_REFLECT_101, int derivBorder=BORDER_CONSTANT, bool tryReuseInputImage=true)"
gapi,Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.
gapi,"std::tuple< GArray< Point2f >, GArray< uchar >, GArray< float > >"
gapi,"cv::gapi::calcOpticalFlowPyrLK (const GArray< GMat > &prevPyr, const GArray< GMat > &nextPyr, const GArray< Point2f > &prevPts, const GArray< Point2f > &predPts, const Size &winSize=Size(21, 21), const GScalar &maxLevel=3, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT|TermCriteria::EPS, 30, 0.01), int flags=0, double minEigThresh=1e-4)"
gapi,"std::tuple< GArray< Point2f >, GArray< uchar >, GArray< float > >"
gapi,"cv::gapi::calcOpticalFlowPyrLK (const GMat &prevImg, const GMat &nextImg, const GArray< Point2f > &prevPts, const GArray< Point2f > &predPts, const Size &winSize=Size(21, 21), const GScalar &maxLevel=3, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT|TermCriteria::EPS, 30, 0.01), int flags=0, double minEigThresh=1e-4)"
gapi,Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids.
gapi,GMat
gapi,"cv::gapi::KalmanFilter (const GMat &measurement, const GOpaque< bool > &haveMeasurement, const cv::gapi::KalmanParams &kfParams)"
gapi,GMat
gapi,"cv::gapi::KalmanFilter (const GMat &measurement, const GOpaque< bool > &haveMeasurement, const GMat &control, const cv::gapi::KalmanParams &kfParams)"
gapi,Standard Kalman filter algorithm http://en.wikipedia.org/wiki/Kalman_filter.
gapi,Functions
gapi,GMat
gapi,"cv::gapi::Canny (const GMat &image, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)"
gapi,Finds edges in an image using the Canny algorithm.
gapi,GArray< Point2f >
gapi,"cv::gapi::goodFeaturesToTrack (const GMat &image, int maxCorners, double qualityLevel, double minDistance, const Mat &mask=Mat(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)"
gapi,Determines strong corners on an image.
gapi,gapi_colorconvert
gapi,Functions
gapi,GMat
gapi,"cv::gapi::concatHor (const GMat &src1, const GMat &src2)"
gapi,Applies horizontal concatenation to given matrices.
gapi,GMat
gapi,cv::gapi::concatHor (const std::vector< GMat > &v)
gapi,GMat
gapi,"cv::gapi::concatVert (const GMat &src1, const GMat &src2)"
gapi,Applies vertical concatenation to given matrices.
gapi,GMat
gapi,cv::gapi::concatVert (const std::vector< GMat > &v)
gapi,GMat
gapi,"cv::gapi::convertTo (const GMat &src, int rdepth, double alpha=1, double beta=0)"
gapi,Converts a matrix to another data depth with optional scaling.
gapi,GFrame
gapi,cv::gapi::copy (const GFrame &in)
gapi,"Makes a copy of the input frame. Note that this copy may be not real (no actual data copied). Use this function to maintain graph contracts, e.g when graph's input needs to be passed directly to output, like in Streaming mode."
gapi,GMat
gapi,cv::gapi::copy (const GMat &in)
gapi,"Makes a copy of the input image. Note that this copy may be not real (no actual data copied). Use this function to maintain graph contracts, e.g when graph's input needs to be passed directly to output, like in Streaming mode."
gapi,GMat
gapi,"cv::gapi::crop (const GMat &src, const Rect &rect)"
gapi,Crops a 2D matrix.
gapi,GMat
gapi,"cv::gapi::flip (const GMat &src, int flipCode)"
gapi,"Flips a 2D matrix around vertical, horizontal, or both axes."
gapi,GMat
gapi,"cv::gapi::LUT (const GMat &src, const Mat &lut)"
gapi,Performs a look-up table transform of a matrix.
gapi,GMat
gapi,"cv::gapi::merge3 (const GMat &src1, const GMat &src2, const GMat &src3)"
gapi,Creates one 3-channel matrix out of 3 single-channel ones.
gapi,GMat
gapi,"cv::gapi::merge4 (const GMat &src1, const GMat &src2, const GMat &src3, const GMat &src4)"
gapi,Creates one 4-channel matrix out of 4 single-channel ones.
gapi,GMat
gapi,"cv::gapi::normalize (const GMat &src, double alpha, double beta, int norm_type, int ddepth=-1)"
gapi,Normalizes the norm or value range of an array.
gapi,GMat
gapi,"cv::gapi::remap (const GMat &src, const Mat &map1, const Mat &map2, int interpolation, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())"
gapi,Applies a generic geometrical transformation to an image.
gapi,GMat
gapi,"cv::gapi::resize (const GMat &src, const Size &dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)"
gapi,Resizes an image.
gapi,GMatP
gapi,"cv::gapi::resizeP (const GMatP &src, const Size &dsize, int interpolation=cv::INTER_LINEAR)"
gapi,Resizes a planar image.
gapi,"std::tuple< GMat, GMat, GMat >"
gapi,cv::gapi::split3 (const GMat &src)
gapi,Divides a 3-channel matrix into 3 single-channel matrices.
gapi,"std::tuple< GMat, GMat, GMat, GMat >"
gapi,cv::gapi::split4 (const GMat &src)
gapi,Divides a 4-channel matrix into 4 single-channel matrices.
gapi,GMat
gapi,"cv::gapi::warpAffine (const GMat &src, const Mat &M, const Size &dsize, int flags=cv::INTER_LINEAR, int borderMode=cv::BORDER_CONSTANT, const Scalar &borderValue=Scalar())"
gapi,Applies an affine transformation to an image.
gapi,GMat
gapi,"cv::gapi::warpPerspective (const GMat &src, const Mat &M, const Size &dsize, int flags=cv::INTER_LINEAR, int borderMode=cv::BORDER_CONSTANT, const Scalar &borderValue=Scalar())"
gapi,Applies a perspective transformation to an image.
gapi,Functions
gapi,GMat
gapi,"cv::gapi::bilateralFilter (const GMat &src, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)"
gapi,Applies the bilateral filter to an image.
gapi,GMat
gapi,"cv::gapi::blur (const GMat &src, const Size &ksize, const Point &anchor=Point(-1,-1), int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,Blurs an image using the normalized box filter.
gapi,GMat
gapi,"cv::gapi::boxFilter (const GMat &src, int dtype, const Size &ksize, const Point &anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,Blurs an image using the box filter.
gapi,GMat
gapi,"cv::gapi::dilate (const GMat &src, const Mat &kernel, const Point &anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
gapi,Dilates an image by using a specific structuring element.
gapi,GMat
gapi,"cv::gapi::dilate3x3 (const GMat &src, int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
gapi,Dilates an image by using 3 by 3 rectangular structuring element.
gapi,GMat
gapi,"cv::gapi::erode (const GMat &src, const Mat &kernel, const Point &anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
gapi,Erodes an image by using a specific structuring element.
gapi,GMat
gapi,"cv::gapi::erode3x3 (const GMat &src, int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
gapi,Erodes an image by using 3 by 3 rectangular structuring element.
gapi,GMat
gapi,"cv::gapi::filter2D (const GMat &src, int ddepth, const Mat &kernel, const Point &anchor=Point(-1,-1), const Scalar &delta=Scalar(0), int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,Convolves an image with the kernel.
gapi,GMat
gapi,"cv::gapi::gaussianBlur (const GMat &src, const Size &ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,Blurs an image using a Gaussian filter.
gapi,GMat
gapi,"cv::gapi::Laplacian (const GMat &src, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)"
gapi,Calculates the Laplacian of an image.
gapi,GMat
gapi,"cv::gapi::medianBlur (const GMat &src, int ksize)"
gapi,Blurs an image using the median filter.
gapi,GMat
gapi,"cv::gapi::morphologyEx (const GMat &src, const MorphTypes op, const Mat &kernel, const Point &anchor=Point(-1,-1), const int iterations=1, const BorderTypes borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
gapi,Performs advanced morphological transformations.
gapi,GMat
gapi,"cv::gapi::sepFilter (const GMat &src, int ddepth, const Mat &kernelX, const Mat &kernelY, const Point &anchor, const Scalar &delta, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,Applies a separable linear filter to a matrix(image).
gapi,GMat
gapi,"cv::gapi::Sobel (const GMat &src, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,"Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator."
gapi,"std::tuple< GMat, GMat >"
gapi,"cv::gapi::SobelXY (const GMat &src, int ddepth, int order, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))"
gapi,"Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator."
gapi,Functions
gapi,GMat
gapi,cv::gapi::BayerGR2RGB (const GMat &src_gr)
gapi,"Converts an image from BayerGR color space to RGB. The function converts an input image from BayerGR color space to RGB. The conventional ranges for G, R, and B channel values are 0 to 255."
gapi,GMat
gapi,cv::gapi::BGR2Gray (const GMat &src)
gapi,Converts an image from BGR color space to gray-scaled.
gapi,GMat
gapi,cv::gapi::BGR2I420 (const GMat &src)
gapi,Converts an image from BGR color space to I420 color space.
gapi,GMat
gapi,cv::gapi::BGR2LUV (const GMat &src)
gapi,Converts an image from BGR color space to LUV color space.
gapi,GMat
gapi,cv::gapi::BGR2RGB (const GMat &src)
gapi,Converts an image from BGR color space to RGB color space.
gapi,GMat
gapi,cv::gapi::BGR2YUV (const GMat &src)
gapi,Converts an image from BGR color space to YUV color space.
gapi,GMat
gapi,cv::gapi::I4202BGR (const GMat &src)
gapi,Converts an image from I420 color space to BGR color space.
gapi,GMat
gapi,cv::gapi::I4202RGB (const GMat &src)
gapi,Converts an image from I420 color space to BGR color space.
gapi,GMat
gapi,cv::gapi::LUV2BGR (const GMat &src)
gapi,Converts an image from LUV color space to BGR color space.
gapi,GMat
gapi,"cv::gapi::NV12toBGR (const GMat &src_y, const GMat &src_uv)"
gapi,"Converts an image from NV12 (YUV420p) color space to BGR. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255."
gapi,GMatP
gapi,"cv::gapi::NV12toBGRp (const GMat &src_y, const GMat &src_uv)"
gapi,"Converts an image from NV12 (YUV420p) color space to BGR. The function converts an input image from NV12 color space to BGR. The conventional ranges for Y, U, and V channel values are 0 to 255."
gapi,GMat
gapi,"cv::gapi::NV12toGray (const GMat &src_y, const GMat &src_uv)"
gapi,"Converts an image from NV12 (YUV420p) color space to gray-scaled. The function converts an input image from NV12 color space to gray-scaled. The conventional ranges for Y, U, and V channel values are 0 to 255."
gapi,GMat
gapi,"cv::gapi::NV12toRGB (const GMat &src_y, const GMat &src_uv)"
gapi,"Converts an image from NV12 (YUV420p) color space to RGB. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255."
gapi,GMatP
gapi,"cv::gapi::NV12toRGBp (const GMat &src_y, const GMat &src_uv)"
gapi,"Converts an image from NV12 (YUV420p) color space to RGB. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255."
gapi,GMat
gapi,cv::gapi::RGB2Gray (const GMat &src)
gapi,Converts an image from RGB color space to gray-scaled.
gapi,GMat
gapi,"cv::gapi::RGB2Gray (const GMat &src, float rY, float gY, float bY)"
gapi,GMat
gapi,cv::gapi::RGB2HSV (const GMat &src)
gapi,"Converts an image from RGB color space to HSV. The function converts an input image from RGB color space to HSV. The conventional ranges for R, G, and B channel values are 0 to 255."
gapi,GMat
gapi,cv::gapi::RGB2I420 (const GMat &src)
gapi,Converts an image from RGB color space to I420 color space.
gapi,GMat
gapi,cv::gapi::RGB2Lab (const GMat &src)
gapi,Converts an image from RGB color space to Lab color space.
gapi,GMat
gapi,cv::gapi::RGB2YUV (const GMat &src)
gapi,Converts an image from RGB color space to YUV color space.
gapi,GMat
gapi,cv::gapi::RGB2YUV422 (const GMat &src)
gapi,"Converts an image from RGB color space to YUV422. The function converts an input image from RGB color space to YUV422. The conventional ranges for R, G, and B channel values are 0 to 255."
gapi,GMat
gapi,cv::gapi::YUV2BGR (const GMat &src)
gapi,Converts an image from YUV color space to BGR color space.
gapi,GMat
gapi,cv::gapi::YUV2RGB (const GMat &src)
gapi,"Converts an image from YUV color space to RGB. The function converts an input image from YUV color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255."
gapi,Functions for in-graph drawing.
gapi,"G-API can do some in-graph drawing with a generic operations and a set of rendering primitives. In contrast with traditional OpenCV, in G-API user need to form a rendering list of primitives to draw. This list can be built manually or generated within a graph. This list is passed to special operations or functions where all primitives are interpreted and applied to the image."
gapi,"For example, in a complex pipeline a list of detected objects can be translated in-graph to a list of cv::gapi::wip::draw::Rect primitives to highlight those with bounding boxes, or a list of detected faces can be translated in-graph to a list of cv::gapi::wip::draw::Mosaic primitives to hide sensitive content or protect privacy."
gapi,"Like any other operations, rendering in G-API can be reimplemented by different backends. Currently only an OpenCV-based backend is available."
gapi,"In addition to the graph-level operations, there are also regular (immediate) OpenCV-like functions are available see cv::gapi::wip::draw::render(). These functions are just wrappers over regular G-API and build the rendering graphs on the fly, so take compilation arguments as parameters."
gapi,"Currently this API is more machine-oriented than human-oriented. The main purpose is to translate a set of domain-specific objects to a list of primitives to draw. For example, in order to generate a picture like this:"
gapi,Rendering list needs to be generated as follows:
highgui,Enumerations
highgui,enum
highgui,"cv::MouseEventFlags { cv::EVENT_FLAG_LBUTTON = 1 , cv::EVENT_FLAG_RBUTTON = 2 , cv::EVENT_FLAG_MBUTTON = 4 , cv::EVENT_FLAG_CTRLKEY = 8 , cv::EVENT_FLAG_SHIFTKEY = 16 , cv::EVENT_FLAG_ALTKEY = 32 }"
highgui,Mouse Event Flags see cv::MouseCallback. More...
highgui,enum
highgui,"cv::MouseEventTypes { cv::EVENT_MOUSEMOVE = 0 , cv::EVENT_LBUTTONDOWN = 1 , cv::EVENT_RBUTTONDOWN = 2 , cv::EVENT_MBUTTONDOWN = 3 , cv::EVENT_LBUTTONUP = 4 , cv::EVENT_RBUTTONUP = 5 , cv::EVENT_MBUTTONUP = 6 , cv::EVENT_LBUTTONDBLCLK = 7 , cv::EVENT_RBUTTONDBLCLK = 8 , cv::EVENT_MBUTTONDBLCLK = 9 , cv::EVENT_MOUSEWHEEL = 10 , cv::EVENT_MOUSEHWHEEL = 11 }"
highgui,Mouse Events see cv::MouseCallback. More...
highgui,enum
highgui,"cv::WindowFlags { cv::WINDOW_NORMAL = 0x00000000 , cv::WINDOW_AUTOSIZE = 0x00000001 , cv::WINDOW_OPENGL = 0x00001000 , cv::WINDOW_FULLSCREEN = 1 , cv::WINDOW_FREERATIO = 0x00000100 , cv::WINDOW_KEEPRATIO = 0x00000000 , cv::WINDOW_GUI_EXPANDED =0x00000000 , cv::WINDOW_GUI_NORMAL = 0x00000010 }"
highgui,Flags for cv::namedWindow. More...
highgui,enum
highgui,"cv::WindowPropertyFlags { cv::WND_PROP_FULLSCREEN = 0 , cv::WND_PROP_AUTOSIZE = 1 , cv::WND_PROP_ASPECT_RATIO = 2 , cv::WND_PROP_OPENGL = 3 , cv::WND_PROP_VISIBLE = 4 , cv::WND_PROP_TOPMOST = 5 , cv::WND_PROP_VSYNC = 6 }"
highgui,Flags for cv::setWindowProperty / cv::getWindowProperty. More...
highgui,Functions
highgui,void
highgui,"cv::addText (const Mat &img, const String &text, Point org, const QtFont &font)"
highgui,Draws a text on the image.
highgui,void
highgui,"cv::addText (const Mat &img, const String &text, Point org, const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)"
highgui,Draws a text on the image.
highgui,int
highgui,"cv::createButton (const String &bar_name, ButtonCallback on_change, void *userdata=0, int type=QT_PUSH_BUTTON, bool initial_button_state=false)"
highgui,Attaches a button to the control panel.
highgui,int
highgui,"cv::createTrackbar (const String &trackbarname, const String &winname, int *value, int count, TrackbarCallback onChange=0, void *userdata=0)"
highgui,Creates a trackbar and attaches it to the specified window.
highgui,const std::string
highgui,cv::currentUIFramework ()
highgui,HighGUI backend used.
highgui,void
highgui,cv::destroyAllWindows ()
highgui,Destroys all of the HighGUI windows.
highgui,void
highgui,cv::destroyWindow (const String &winname)
highgui,Destroys the specified window.
highgui,void
highgui,"cv::displayOverlay (const String &winname, const String &text, int delayms=0)"
highgui,Displays a text on a window image as an overlay for a specified duration.
highgui,void
highgui,"cv::displayStatusBar (const String &winname, const String &text, int delayms=0)"
highgui,Displays a text on the window statusbar during the specified period of time.
highgui,QtFont
highgui,"cv::fontQt (const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)"
highgui,Creates the font to draw a text on an image.
highgui,int
highgui,cv::getMouseWheelDelta (int flags)
highgui,"Gets the mouse-wheel motion delta, when handling mouse-wheel events cv::EVENT_MOUSEWHEEL and cv::EVENT_MOUSEHWHEEL."
highgui,int
highgui,"cv::getTrackbarPos (const String &trackbarname, const String &winname)"
highgui,Returns the trackbar position.
highgui,Rect
highgui,cv::getWindowImageRect (const String &winname)
highgui,Provides rectangle of image in the window.
highgui,double
highgui,"cv::getWindowProperty (const String &winname, int prop_id)"
highgui,Provides parameters of a window.
highgui,void
highgui,"cv::imshow (const String &winname, const ogl::Texture2D &tex)"
highgui,Displays OpenGL 2D texture in the specified window.
highgui,void
highgui,"cv::imshow (const String &winname, InputArray mat)"
highgui,Displays an image in the specified window.
highgui,void
highgui,cv::loadWindowParameters (const String &windowName)
highgui,Loads parameters of the specified window.
highgui,void
highgui,"cv::moveWindow (const String &winname, int x, int y)"
highgui,Moves the window to the specified position.
highgui,void
highgui,"cv::namedWindow (const String &winname, int flags=WINDOW_AUTOSIZE)"
highgui,Creates a window.
highgui,int
highgui,cv::pollKey ()
highgui,Polls for a pressed key.
highgui,void
highgui,"cv::resizeWindow (const String &winname, const cv::Size &size)"
highgui,void
highgui,"cv::resizeWindow (const String &winname, int width, int height)"
highgui,Resizes the window to the specified size.
highgui,void
highgui,cv::saveWindowParameters (const String &windowName)
highgui,Saves parameters of the specified window.
highgui,Rect
highgui,"cv::selectROI (const String &windowName, InputArray img, bool showCrosshair=true, bool fromCenter=false, bool printNotice=true)"
highgui,Allows users to select a ROI on the given image.
highgui,Rect
highgui,"cv::selectROI (InputArray img, bool showCrosshair=true, bool fromCenter=false, bool printNotice=true)"
highgui,void
highgui,"cv::selectROIs (const String &windowName, InputArray img, std::vector< Rect > &boundingBoxes, bool showCrosshair=true, bool fromCenter=false, bool printNotice=true)"
highgui,Allows users to select multiple ROIs on the given image.
highgui,void
highgui,"cv::setMouseCallback (const String &winname, MouseCallback onMouse, void *userdata=0)"
highgui,Sets mouse handler for the specified window.
highgui,void
highgui,cv::setOpenGlContext (const String &winname)
highgui,Sets the specified window as current OpenGL context.
highgui,void
highgui,"cv::setOpenGlDrawCallback (const String &winname, OpenGlDrawCallback onOpenGlDraw, void *userdata=0)"
highgui,Sets a callback function to be called to draw on top of displayed image.
highgui,void
highgui,"cv::setTrackbarMax (const String &trackbarname, const String &winname, int maxval)"
highgui,Sets the trackbar maximum position.
highgui,void
highgui,"cv::setTrackbarMin (const String &trackbarname, const String &winname, int minval)"
highgui,Sets the trackbar minimum position.
highgui,void
highgui,"cv::setTrackbarPos (const String &trackbarname, const String &winname, int pos)"
highgui,Sets the trackbar position.
highgui,void
highgui,"cv::setWindowProperty (const String &winname, int prop_id, double prop_value)"
highgui,Changes parameters of a window dynamically.
highgui,void
highgui,"cv::setWindowTitle (const String &winname, const String &title)"
highgui,Updates window title.
highgui,int
highgui,"cv::startLoop (int(*pt2Func)(int argc, char *argv[]), int argc, char *argv[])"
highgui,int
highgui,cv::startWindowThread ()
highgui,void
highgui,cv::stopLoop ()
highgui,void
highgui,cv::updateWindow (const String &winname)
highgui,Force window to redraw its context and call draw callback ( See cv::setOpenGlDrawCallback ).
highgui,int
highgui,cv::waitKey (int delay=0)
highgui,Waits for a pressed key.
highgui,int
highgui,cv::waitKeyEx (int delay=0)
highgui,"Similar to waitKey, but returns full key code."
highgui,"This figure explains new functionality implemented with WinRT GUI. The new GUI provides an Image control, and a slider panel. Slider panel holds trackbars attached to it."
highgui,Sliders are attached below the image control. Every new slider is added below the previous one.
highgui,See below the example used to generate the figure:
highgui,Functions
highgui,void
highgui,cv::winrt_initContainer (::Windows::UI::Xaml::Controls::Panel^ container)
highgui,Initializes container component that will be used to hold generated window content.
highgui,"While OpenCV was designed for use in full-scale applications and can be used within functionally rich UI frameworks (such as Qt*, WinForms*, or Cocoa*) or without any UI at all, sometimes there it is required to try functionality quickly and visualize the results. This is what the HighGUI module has been designed for."
highgui,It provides easy interface to:
highgui,"Create and manipulate windows that can display images and ""remember"" their content (no need to handle repaint events from OS)."
highgui,"Add trackbars to the windows, handle simple mouse events as well as keyboard commands."
highgui,Typedefs
highgui,typedef void(*
highgui,"cv::ButtonCallback) (int state, void *userdata)"
highgui,Callback function for a button created by cv::createButton.
highgui,typedef void(*
highgui,"cv::MouseCallback) (int event, int x, int y, int flags, void *userdata)"
highgui,Callback function for mouse events. see cv::setMouseCallback.
highgui,typedef void(*
highgui,cv::OpenGlDrawCallback) (void *userdata)
highgui,Callback function defined to be called every frame. See cv::setOpenGlDrawCallback.
highgui,typedef void(*
highgui,"cv::TrackbarCallback) (int pos, void *userdata)"
highgui,Callback function for Trackbar see cv::createTrackbar.
highgui,"This figure explains new functionality implemented with Qt* GUI. The new GUI provides a statusbar, a toolbar, and a control panel. The control panel can have trackbars and buttonbars attached to it. If you cannot see the control panel, press Ctrl+P or right-click any Qt window and select Display properties window."
highgui,"To attach a trackbar, the window name parameter must be NULL."
highgui,"To attach a buttonbar, a button must be created. If the last bar attached to the control panel is a buttonbar, the new button is added to the right of the last button. If the last bar attached to the control panel is a trackbar, or the control panel is empty, a new buttonbar is created. Then, a new button is attached to it."
highgui,See below the example used to generate the figure:
highgui,Classes
highgui,struct
highgui,cv::QtFont
highgui,QtFont available only for Qt. See cv::fontQt. More...
highgui,Functions
highgui,void
highgui,"cv::addText (const Mat &img, const String &text, Point org, const QtFont &font)"
highgui,Draws a text on the image.
highgui,void
highgui,"cv::addText (const Mat &img, const String &text, Point org, const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)"
highgui,Draws a text on the image.
highgui,int
highgui,"cv::createButton (const String &bar_name, ButtonCallback on_change, void *userdata=0, int type=QT_PUSH_BUTTON, bool initial_button_state=false)"
highgui,Attaches a button to the control panel.
highgui,void
highgui,"cv::displayOverlay (const String &winname, const String &text, int delayms=0)"
highgui,Displays a text on a window image as an overlay for a specified duration.
highgui,void
highgui,"cv::displayStatusBar (const String &winname, const String &text, int delayms=0)"
highgui,Displays a text on the window statusbar during the specified period of time.
highgui,QtFont
highgui,"cv::fontQt (const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)"
highgui,Creates the font to draw a text on an image.
highgui,void
highgui,cv::loadWindowParameters (const String &windowName)
highgui,Loads parameters of the specified window.
highgui,void
highgui,cv::saveWindowParameters (const String &windowName)
highgui,Saves parameters of the specified window.
highgui,int
highgui,"cv::startLoop (int(*pt2Func)(int argc, char *argv[]), int argc, char *argv[])"
highgui,void
highgui,cv::stopLoop ()
highgui,Functions
highgui,void
highgui,"cv::imshow (const String &winname, const ogl::Texture2D &tex)"
highgui,Displays OpenGL 2D texture in the specified window.
highgui,void
highgui,cv::setOpenGlContext (const String &winname)
highgui,Sets the specified window as current OpenGL context.
highgui,void
highgui,"cv::setOpenGlDrawCallback (const String &winname, OpenGlDrawCallback onOpenGlDraw, void *userdata=0)"
highgui,Sets a callback function to be called to draw on top of displayed image.
highgui,void
highgui,cv::updateWindow (const String &winname)
highgui,Force window to redraw its context and call draw callback ( See cv::setOpenGlDrawCallback ).
imgcodecs,Functions
imgcodecs,void
imgcodecs,"CGImageToMat (const CGImageRef image, cv::Mat &m, bool alphaExist=false)"
imgcodecs,CGImageRef
imgcodecs,MatToCGImage (const cv::Mat &image) CF_RETURNS_RETAINED
imgcodecs,UIImage *
imgcodecs,MatToUIImage (const cv::Mat &image)
imgcodecs,void
imgcodecs,"UIImageToMat (const UIImage *image, cv::Mat &m, bool alphaExist=false)"
imgcodecs,Classes
imgcodecs,class
imgcodecs,cv::ImageCollection
imgcodecs,To read multi-page images on demand. More...
imgcodecs,Functions
imgcodecs,CV_EXPORTS_W bool
imgcodecs,cv::haveImageReader (const String &filename)
imgcodecs,Checks if the specified image file can be decoded by OpenCV.
imgcodecs,CV_EXPORTS_W bool
imgcodecs,cv::haveImageWriter (const String &filename)
imgcodecs,Checks if the specified image file or specified file extension can be encoded by OpenCV.
imgcodecs,CV_EXPORTS_W size_t
imgcodecs,"cv::imcount (const String &filename, int flags=IMREAD_ANYCOLOR)"
imgcodecs,Returns the number of images inside the given file.
imgcodecs,CV_EXPORTS_W Mat
imgcodecs,"cv::imdecode (InputArray buf, int flags)"
imgcodecs,Reads an image from a buffer in memory.
imgcodecs,CV_EXPORTS Mat
imgcodecs,"cv::imdecode (InputArray buf, int flags, Mat *dst)"
imgcodecs,CV_EXPORTS_W bool
imgcodecs,"cv::imdecodemulti (InputArray buf, int flags, CV_OUT std::vector< Mat > &mats, const cv::Range &range=Range::all())"
imgcodecs,Reads a multi-page image from a buffer in memory.
imgcodecs,CV_EXPORTS_W bool
imgcodecs,"cv::imencode (const String &ext, InputArray img, CV_OUT std::vector< uchar > &buf, const std::vector< int > &params=std::vector< int >())"
imgcodecs,Encodes an image into a memory buffer.
imgcodecs,CV_EXPORTS_W Mat
imgcodecs,"cv::imread (const String &filename, int flags=IMREAD_COLOR_BGR)"
imgcodecs,Loads an image from a file.
imgcodecs,CV_EXPORTS_W void
imgcodecs,"cv::imread (const String &filename, OutputArray dst, int flags=IMREAD_COLOR_BGR)"
imgcodecs,Loads an image from a file.
imgcodecs,CV_EXPORTS_W bool
imgcodecs,"cv::imreadmulti (const String &filename, CV_OUT std::vector< Mat > &mats, int flags=IMREAD_ANYCOLOR)"
imgcodecs,Loads a multi-page image from a file.
imgcodecs,CV_EXPORTS_W bool
imgcodecs,"cv::imreadmulti (const String &filename, CV_OUT std::vector< Mat > &mats, int start, int count, int flags=IMREAD_ANYCOLOR)"
imgcodecs,Loads images of a multi-page image from a file.
imgcodecs,CV_EXPORTS_W bool
imgcodecs,"cv::imwrite (const String &filename, InputArray img, const std::vector< int > &params=std::vector< int >())"
imgcodecs,Saves an image to a specified file.
imgcodecs,static CV_WRAP bool
imgcodecs,"cv::imwritemulti (const String &filename, InputArrayOfArrays img, const std::vector< int > &params=std::vector< int >())"
imgcodecs,multi-image overload for bindings
imgcodecs,Enumerations
imgcodecs,enum
imgcodecs,"cv::ImreadModes { cv::IMREAD_UNCHANGED = -1 , cv::IMREAD_GRAYSCALE = 0 , cv::IMREAD_COLOR_BGR = 1 , cv::IMREAD_COLOR = 1 , cv::IMREAD_ANYDEPTH = 2 , cv::IMREAD_ANYCOLOR = 4 , cv::IMREAD_LOAD_GDAL = 8 , cv::IMREAD_REDUCED_GRAYSCALE_2 = 16 , cv::IMREAD_REDUCED_COLOR_2 = 17 , cv::IMREAD_REDUCED_GRAYSCALE_4 = 32 , cv::IMREAD_REDUCED_COLOR_4 = 33 , cv::IMREAD_REDUCED_GRAYSCALE_8 = 64 , cv::IMREAD_REDUCED_COLOR_8 = 65 , cv::IMREAD_IGNORE_ORIENTATION = 128 , cv::IMREAD_COLOR_RGB = 256 }"
imgcodecs,Imread flags. More...
imgcodecs,enum
imgcodecs,"cv::ImwriteEXRCompressionFlags { cv::IMWRITE_EXR_COMPRESSION_NO = 0 , cv::IMWRITE_EXR_COMPRESSION_RLE = 1 , cv::IMWRITE_EXR_COMPRESSION_ZIPS = 2 , cv::IMWRITE_EXR_COMPRESSION_ZIP = 3 , cv::IMWRITE_EXR_COMPRESSION_PIZ = 4 , cv::IMWRITE_EXR_COMPRESSION_PXR24 = 5 , cv::IMWRITE_EXR_COMPRESSION_B44 = 6 , cv::IMWRITE_EXR_COMPRESSION_B44A = 7 , cv::IMWRITE_EXR_COMPRESSION_DWAA = 8 , cv::IMWRITE_EXR_COMPRESSION_DWAB = 9 }"
imgcodecs,enum
imgcodecs,"cv::ImwriteEXRTypeFlags { cv::IMWRITE_EXR_TYPE_HALF = 1 , cv::IMWRITE_EXR_TYPE_FLOAT = 2 }"
imgcodecs,enum
imgcodecs,"cv::ImwriteFlags { cv::IMWRITE_JPEG_QUALITY = 1 , cv::IMWRITE_JPEG_PROGRESSIVE = 2 , cv::IMWRITE_JPEG_OPTIMIZE = 3 , cv::IMWRITE_JPEG_RST_INTERVAL = 4 , cv::IMWRITE_JPEG_LUMA_QUALITY = 5 , cv::IMWRITE_JPEG_CHROMA_QUALITY = 6 , cv::IMWRITE_JPEG_SAMPLING_FACTOR = 7 , cv::IMWRITE_PNG_COMPRESSION = 16 , cv::IMWRITE_PNG_STRATEGY = 17 , cv::IMWRITE_PNG_BILEVEL = 18 , cv::IMWRITE_PXM_BINARY = 32 , cv::IMWRITE_EXR_TYPE = (3 << 4) + 0 , cv::IMWRITE_EXR_COMPRESSION = (3 << 4) + 1 , cv::IMWRITE_EXR_DWA_COMPRESSION_LEVEL = (3 << 4) + 2 , cv::IMWRITE_WEBP_QUALITY = 64 , cv::IMWRITE_HDR_COMPRESSION = (5 << 4) + 0 , cv::IMWRITE_PAM_TUPLETYPE = 128 , cv::IMWRITE_TIFF_RESUNIT = 256 , cv::IMWRITE_TIFF_XDPI = 257 , cv::IMWRITE_TIFF_YDPI = 258 , cv::IMWRITE_TIFF_COMPRESSION = 259 , cv::IMWRITE_TIFF_ROWSPERSTRIP = 278 , cv::IMWRITE_TIFF_PREDICTOR = 317 , cv::IMWRITE_JPEG2000_COMPRESSION_X1000 = 272 , cv::IMWRITE_AVIF_QUALITY = 512 , cv::IMWRITE_AVIF_DEPTH = 513 , cv::IMWRITE_AVIF_SPEED = 514 }"
imgcodecs,Imwrite flags. More...
imgcodecs,enum
imgcodecs,"cv::ImwriteHDRCompressionFlags { cv::IMWRITE_HDR_COMPRESSION_NONE = 0 , cv::IMWRITE_HDR_COMPRESSION_RLE = 1 }"
imgcodecs,Imwrite HDR specific values for IMWRITE_HDR_COMPRESSION parameter key. More...
imgcodecs,enum
imgcodecs,"cv::ImwriteJPEGSamplingFactorParams { cv::IMWRITE_JPEG_SAMPLING_FACTOR_411 = 0x411111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_420 = 0x221111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_422 = 0x211111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_440 = 0x121111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_444 = 0x111111 }"
imgcodecs,enum
imgcodecs,"cv::ImwritePAMFlags { cv::IMWRITE_PAM_FORMAT_NULL = 0 , cv::IMWRITE_PAM_FORMAT_BLACKANDWHITE = 1 , cv::IMWRITE_PAM_FORMAT_GRAYSCALE = 2 , cv::IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = 3 , cv::IMWRITE_PAM_FORMAT_RGB = 4 , cv::IMWRITE_PAM_FORMAT_RGB_ALPHA = 5 }"
imgcodecs,Imwrite PAM specific tupletype flags used to define the 'TUPLETYPE' field of a PAM file. More...
imgcodecs,enum
imgcodecs,"cv::ImwritePNGFlags { cv::IMWRITE_PNG_STRATEGY_DEFAULT = 0 , cv::IMWRITE_PNG_STRATEGY_FILTERED = 1 , cv::IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = 2 , cv::IMWRITE_PNG_STRATEGY_RLE = 3 , cv::IMWRITE_PNG_STRATEGY_FIXED = 4 }"
imgcodecs,Imwrite PNG specific flags used to tune the compression algorithm. More...
imgcodecs,enum
imgcodecs,"cv::ImwriteTiffCompressionFlags { cv::IMWRITE_TIFF_COMPRESSION_NONE = 1 , cv::IMWRITE_TIFF_COMPRESSION_CCITTRLE = 2 , cv::IMWRITE_TIFF_COMPRESSION_CCITTFAX3 = 3 , cv::IMWRITE_TIFF_COMPRESSION_CCITT_T4 = 3 , cv::IMWRITE_TIFF_COMPRESSION_CCITTFAX4 = 4 , cv::IMWRITE_TIFF_COMPRESSION_CCITT_T6 = 4 , cv::IMWRITE_TIFF_COMPRESSION_LZW = 5 , cv::IMWRITE_TIFF_COMPRESSION_OJPEG = 6 , cv::IMWRITE_TIFF_COMPRESSION_JPEG = 7 , cv::IMWRITE_TIFF_COMPRESSION_T85 = 9 , cv::IMWRITE_TIFF_COMPRESSION_T43 = 10 , cv::IMWRITE_TIFF_COMPRESSION_NEXT = 32766 , cv::IMWRITE_TIFF_COMPRESSION_CCITTRLEW = 32771 , cv::IMWRITE_TIFF_COMPRESSION_PACKBITS = 32773 , cv::IMWRITE_TIFF_COMPRESSION_THUNDERSCAN = 32809 , cv::IMWRITE_TIFF_COMPRESSION_IT8CTPAD = 32895 , cv::IMWRITE_TIFF_COMPRESSION_IT8LW = 32896 , cv::IMWRITE_TIFF_COMPRESSION_IT8MP = 32897 , cv::IMWRITE_TIFF_COMPRESSION_IT8BL = 32898 , cv::IMWRITE_TIFF_COMPRESSION_PIXARFILM = 32908 , cv::IMWRITE_TIFF_COMPRESSION_PIXARLOG = 32909 , cv::IMWRITE_TIFF_COMPRESSION_DEFLATE = 32946 , cv::IMWRITE_TIFF_COMPRESSION_ADOBE_DEFLATE = 8 , cv::IMWRITE_TIFF_COMPRESSION_DCS = 32947 , cv::IMWRITE_TIFF_COMPRESSION_JBIG = 34661 , cv::IMWRITE_TIFF_COMPRESSION_SGILOG = 34676 , cv::IMWRITE_TIFF_COMPRESSION_SGILOG24 = 34677 , cv::IMWRITE_TIFF_COMPRESSION_JP2000 = 34712 , cv::IMWRITE_TIFF_COMPRESSION_LERC = 34887 , cv::IMWRITE_TIFF_COMPRESSION_LZMA = 34925 , cv::IMWRITE_TIFF_COMPRESSION_ZSTD = 50000 , cv::IMWRITE_TIFF_COMPRESSION_WEBP = 50001 , cv::IMWRITE_TIFF_COMPRESSION_JXL = 50002 }"
imgcodecs,enum
imgcodecs,"cv::ImwriteTiffPredictorFlags { cv::IMWRITE_TIFF_PREDICTOR_NONE = 1 , cv::IMWRITE_TIFF_PREDICTOR_HORIZONTAL = 2 , cv::IMWRITE_TIFF_PREDICTOR_FLOATINGPOINT = 3 }"
imgcodecs,Functions
imgcodecs,void
imgcodecs,"CGImageToMat (const CGImageRef image, cv::Mat &m, bool alphaExist=false)"
imgcodecs,CGImageRef
imgcodecs,MatToCGImage (const cv::Mat &image) CF_RETURNS_RETAINED
imgcodecs,NSImage *
imgcodecs,MatToNSImage (const cv::Mat &image)
imgcodecs,void
imgcodecs,"NSImageToMat (const NSImage *image, cv::Mat &m, bool alphaExist=false)"
imgproc,Classes
imgproc,class
imgproc,cv::segmentation::IntelligentScissorsMB
imgproc,Intelligent Scissors image segmentation. More...
imgproc,"The human perception isn't built for observing fine changes in grayscale images. Human eyes are more sensitive to observing changes between colors, so you often need to recolor your grayscale images to get a clue about them. OpenCV now comes with various colormaps to enhance the visualization in your computer vision application."
imgproc,"In OpenCV you only need applyColorMap to apply a colormap on a given image. The following sample code reads the path to an image from command line, applies a Jet colormap on it and shows the result:"
imgproc,Enumerations
imgproc,enum
imgproc,"cv::ColormapTypes { cv::COLORMAP_AUTUMN = 0 , cv::COLORMAP_BONE = 1 , cv::COLORMAP_JET = 2 , cv::COLORMAP_WINTER = 3 , cv::COLORMAP_RAINBOW = 4 , cv::COLORMAP_OCEAN = 5 , cv::COLORMAP_SUMMER = 6 , cv::COLORMAP_SPRING = 7 , cv::COLORMAP_COOL = 8 , cv::COLORMAP_HSV = 9 , cv::COLORMAP_PINK = 10 , cv::COLORMAP_HOT = 11 , cv::COLORMAP_PARULA = 12 , cv::COLORMAP_MAGMA = 13 , cv::COLORMAP_INFERNO = 14 , cv::COLORMAP_PLASMA = 15 , cv::COLORMAP_VIRIDIS = 16 , cv::COLORMAP_CIVIDIS = 17 , cv::COLORMAP_TWILIGHT = 18 , cv::COLORMAP_TWILIGHT_SHIFTED = 19 , cv::COLORMAP_TURBO = 20 , cv::COLORMAP_DEEPGREEN = 21 }"
imgproc,GNU Octave/MATLAB equivalent colormaps. More...
imgproc,Functions
imgproc,void
imgproc,"cv::applyColorMap (InputArray src, OutputArray dst, InputArray userColor)"
imgproc,Applies a user colormap on a given image.
imgproc,void
imgproc,"cv::applyColorMap (InputArray src, OutputArray dst, int colormap)"
imgproc,Applies a GNU Octave/MATLAB equivalent colormap on a given image.
imgproc,Namespaces
imgproc,namespace
imgproc,cv::traits
imgproc,Functions
imgproc,void
imgproc,"cv::approxPolyDP (InputArray curve, OutputArray approxCurve, double epsilon, bool closed)"
imgproc,Approximates a polygonal curve(s) with the specified precision.
imgproc,void
imgproc,"cv::approxPolyN (InputArray curve, OutputArray approxCurve, int nsides, float epsilon_percentage=-1.0, bool ensure_convex=true)"
imgproc,Approximates a polygon with a convex hull with a specified accuracy and number of sides.
imgproc,double
imgproc,"cv::arcLength (InputArray curve, bool closed)"
imgproc,Calculates a contour perimeter or a curve length.
imgproc,Rect
imgproc,cv::boundingRect (InputArray array)
imgproc,Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.
imgproc,void
imgproc,"cv::boxPoints (RotatedRect box, OutputArray points)"
imgproc,Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.
imgproc,int
imgproc,"cv::connectedComponents (InputArray image, OutputArray labels, int connectivity, int ltype, int ccltype)"
imgproc,computes the connected components labeled image of boolean image
imgproc,int
imgproc,"cv::connectedComponents (InputArray image, OutputArray labels, int connectivity=8, int ltype=CV_32S)"
imgproc,int
imgproc,"cv::connectedComponentsWithStats (InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, int connectivity, int ltype, int ccltype)"
imgproc,computes the connected components labeled image of boolean image and also produces a statistics output for each label
imgproc,int
imgproc,"cv::connectedComponentsWithStats (InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, int connectivity=8, int ltype=CV_32S)"
imgproc,double
imgproc,"cv::contourArea (InputArray contour, bool oriented=false)"
imgproc,Calculates a contour area.
imgproc,void
imgproc,"cv::convexHull (InputArray points, OutputArray hull, bool clockwise=false, bool returnPoints=true)"
imgproc,Finds the convex hull of a point set.
imgproc,void
imgproc,"cv::convexityDefects (InputArray contour, InputArray convexhull, OutputArray convexityDefects)"
imgproc,Finds the convexity defects of a contour.
imgproc,Ptr< GeneralizedHoughBallard >
imgproc,cv::createGeneralizedHoughBallard ()
imgproc,Creates a smart pointer to a cv::GeneralizedHoughBallard class and initializes it.
imgproc,Ptr< GeneralizedHoughGuil >
imgproc,cv::createGeneralizedHoughGuil ()
imgproc,Creates a smart pointer to a cv::GeneralizedHoughGuil class and initializes it.
imgproc,void
imgproc,"cv::findContours (InputArray image, OutputArrayOfArrays contours, int mode, int method, Point offset=Point())"
imgproc,void
imgproc,"cv::findContours (InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset=Point())"
imgproc,Finds contours in a binary image.
imgproc,void
imgproc,"cv::findContoursLinkRuns (InputArray image, OutputArrayOfArrays contours)"
imgproc,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
imgproc,void
imgproc,"cv::findContoursLinkRuns (InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy)"
imgproc,Find contours using link runs algorithm.
imgproc,RotatedRect
imgproc,cv::fitEllipse (InputArray points)
imgproc,Fits an ellipse around a set of 2D points.
imgproc,RotatedRect
imgproc,cv::fitEllipseAMS (InputArray points)
imgproc,Fits an ellipse around a set of 2D points.
imgproc,RotatedRect
imgproc,cv::fitEllipseDirect (InputArray points)
imgproc,Fits an ellipse around a set of 2D points.
imgproc,void
imgproc,"cv::fitLine (InputArray points, OutputArray line, int distType, double param, double reps, double aeps)"
imgproc,Fits a line to a 2D or 3D point set.
imgproc,void
imgproc,"cv::HuMoments (const Moments &m, OutputArray hu)"
imgproc,void
imgproc,"cv::HuMoments (const Moments &moments, double hu[7])"
imgproc,Calculates seven Hu invariants.
imgproc,float
imgproc,"cv::intersectConvexConvex (InputArray p1, InputArray p2, OutputArray p12, bool handleNested=true)"
imgproc,Finds intersection of two convex polygons.
imgproc,bool
imgproc,cv::isContourConvex (InputArray contour)
imgproc,Tests a contour convexity.
imgproc,double
imgproc,"cv::matchShapes (InputArray contour1, InputArray contour2, int method, double parameter)"
imgproc,Compares two shapes.
imgproc,RotatedRect
imgproc,cv::minAreaRect (InputArray points)
imgproc,Finds a rotated rectangle of the minimum area enclosing the input 2D point set.
imgproc,void
imgproc,"cv::minEnclosingCircle (InputArray points, Point2f &center, float &radius)"
imgproc,Finds a circle of the minimum area enclosing a 2D point set.
imgproc,double
imgproc,"cv::minEnclosingTriangle (InputArray points, OutputArray triangle)"
imgproc,Finds a triangle of minimum area enclosing a 2D point set and returns its area.
imgproc,Moments
imgproc,"cv::moments (InputArray array, bool binaryImage=false)"
imgproc,Calculates all of the moments up to the third order of a polygon or rasterized shape.
imgproc,double
imgproc,"cv::pointPolygonTest (InputArray contour, Point2f pt, bool measureDist)"
imgproc,Performs a point-in-contour test.
imgproc,int
imgproc,"cv::rotatedRectangleIntersection (const RotatedRect &rect1, const RotatedRect &rect2, OutputArray intersectingRegion)"
imgproc,Finds out if there is any intersection between two rotated rectangles.
imgproc,"Functions and classes described in this section are used to perform various linear or non-linear filtering operations on 2D images (represented as Mat's). It means that for each pixel location \((x,y)\) in the source image (normally, rectangular), its neighborhood is considered and used to compute the response. In case of a linear filter, it is a weighted sum of pixel values. In case of morphological operations, it is the minimum or maximum values, and so on. The computed response is stored in the destination image at the same location \((x,y)\). It means that the output image will be of the same size as the input image. Normally, the functions support multi-channel arrays, in which case every channel is processed independently. Therefore, the output image will also have the same number of channels as the input one."
imgproc,"Another common feature of the functions and classes described in this section is that, unlike simple arithmetic functions, they need to extrapolate values of some non-existing pixels. For example, if you want to smooth an image using a Gaussian \(3 \times 3\) filter, then, when processing the left-most pixels in each row, you need pixels to the left of them, that is, outside of the image. You can let these pixels be the same as the left-most image pixels (""replicated border"" extrapolation method), or assume that all the non-existing pixels are zeros (""constant border"" extrapolation method), and so on. OpenCV enables you to specify the extrapolation method. For details, see BorderTypes"
imgproc,Functions
imgproc,void
imgproc,"cv::bilateralFilter (InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)"
imgproc,Applies the bilateral filter to an image.
imgproc,void
imgproc,"cv::blur (InputArray src, OutputArray dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT)"
imgproc,Blurs an image using the normalized box filter.
imgproc,void
imgproc,"cv::boxFilter (InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT)"
imgproc,Blurs an image using the box filter.
imgproc,void
imgproc,"cv::buildPyramid (InputArray src, OutputArrayOfArrays dst, int maxlevel, int borderType=BORDER_DEFAULT)"
imgproc,Constructs the Gaussian pyramid for an image.
imgproc,void
imgproc,"cv::dilate (InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
imgproc,Dilates an image by using a specific structuring element.
imgproc,void
imgproc,"cv::erode (InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
imgproc,Erodes an image by using a specific structuring element.
imgproc,void
imgproc,"cv::filter2D (InputArray src, OutputArray dst, int ddepth, InputArray kernel, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)"
imgproc,Convolves an image with the kernel.
imgproc,void
imgproc,"cv::GaussianBlur (InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT, AlgorithmHint hint=cv::ALGO_HINT_DEFAULT)"
imgproc,Blurs an image using a Gaussian filter.
imgproc,void
imgproc,"cv::getDerivKernels (OutputArray kx, OutputArray ky, int dx, int dy, int ksize, bool normalize=false, int ktype=CV_32F)"
imgproc,Returns filter coefficients for computing spatial image derivatives.
imgproc,Mat
imgproc,"cv::getGaborKernel (Size ksize, double sigma, double theta, double lambd, double gamma, double psi=CV_PI *0.5, int ktype=CV_64F)"
imgproc,Returns Gabor filter coefficients.
imgproc,Mat
imgproc,"cv::getGaussianKernel (int ksize, double sigma, int ktype=CV_64F)"
imgproc,Returns Gaussian filter coefficients.
imgproc,Mat
imgproc,"cv::getStructuringElement (int shape, Size ksize, Point anchor=Point(-1,-1))"
imgproc,Returns a structuring element of the specified size and shape for morphological operations.
imgproc,void
imgproc,"cv::Laplacian (InputArray src, OutputArray dst, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)"
imgproc,Calculates the Laplacian of an image.
imgproc,void
imgproc,"cv::medianBlur (InputArray src, OutputArray dst, int ksize)"
imgproc,Blurs an image using the median filter.
imgproc,static Scalar
imgproc,cv::morphologyDefaultBorderValue ()
imgproc,"returns ""magic"" border value for erosion and dilation. It is automatically transformed to Scalar::all(-DBL_MAX) for dilation."
imgproc,void
imgproc,"cv::morphologyEx (InputArray src, OutputArray dst, int op, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())"
imgproc,Performs advanced morphological transformations.
imgproc,void
imgproc,"cv::pyrDown (InputArray src, OutputArray dst, const Size &dstsize=Size(), int borderType=BORDER_DEFAULT)"
imgproc,Blurs an image and downsamples it.
imgproc,void
imgproc,"cv::pyrMeanShiftFiltering (InputArray src, OutputArray dst, double sp, double sr, int maxLevel=1, TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1))"
imgproc,Performs initial step of meanshift segmentation of an image.
imgproc,void
imgproc,"cv::pyrUp (InputArray src, OutputArray dst, const Size &dstsize=Size(), int borderType=BORDER_DEFAULT)"
imgproc,Upsamples an image and then blurs it.
imgproc,void
imgproc,"cv::Scharr (InputArray src, OutputArray dst, int ddepth, int dx, int dy, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)"
imgproc,Calculates the first x- or y- image derivative using Scharr operator.
imgproc,void
imgproc,"cv::sepFilter2D (InputArray src, OutputArray dst, int ddepth, InputArray kernelX, InputArray kernelY, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)"
imgproc,Applies a separable linear filter to an image.
imgproc,void
imgproc,"cv::Sobel (InputArray src, OutputArray dst, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)"
imgproc,"Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator."
imgproc,void
imgproc,"cv::spatialGradient (InputArray src, OutputArray dx, OutputArray dy, int ksize=3, int borderType=BORDER_DEFAULT)"
imgproc,Calculates the first order image derivative in both x and y using a Sobel operator.
imgproc,void
imgproc,"cv::sqrBoxFilter (InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1, -1), bool normalize=true, int borderType=BORDER_DEFAULT)"
imgproc,Calculates the normalized sum of squares of the pixel values overlapping the filter.
imgproc,void
imgproc,"cv::stackBlur (InputArray src, OutputArray dst, Size ksize)"
imgproc,Blurs an image using the stackBlur.
imgproc,"Drawing functions work with matrices/images of arbitrary depth. The boundaries of the shapes can be rendered with antialiasing (implemented only for 8-bit images for now). All the functions include the parameter color that uses an RGB value (that may be constructed with the Scalar constructor ) for color images and brightness for grayscale images. For color images, the channel ordering is normally Blue, Green, Red. This is what imshow, imread, and imwrite expect. So, if you form a color using the Scalar constructor, it should look like:"
imgproc,"\[\texttt{Scalar} (blue \_ component, green \_ component, red \_ component[, alpha \_ component])\]"
imgproc,"If you are using your own image rendering and I/O functions, you can use any channel ordering. The drawing functions process each channel independently and do not depend on the channel order or even on the used color space. The whole image can be converted from BGR to RGB or to a different color space using cvtColor ."
imgproc,"If a drawn figure is partially or completely outside the image, the drawing functions clip it. Also, many drawing functions can handle pixel coordinates specified with sub-pixel accuracy. This means that the coordinates can be passed as fixed-point numbers encoded as integers. The number of fractional bits is specified by the shift parameter and the real point coordinates are calculated as \(\texttt{Point}(x,y)\rightarrow\texttt{Point2f}(x*2^{-shift},y*2^{-shift})\) . This feature is especially effective when rendering antialiased shapes."
imgproc,Classes
imgproc,class
imgproc,cv::LineIterator
imgproc,Class for iterating over all pixels on a raster line segment. More...
imgproc,Functions
imgproc,void
imgproc,"cv::arrowedLine (InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int line_type=8, int shift=0, double tipLength=0.1)"
imgproc,Draws an arrow segment pointing from the first point to the second one.
imgproc,void
imgproc,"cv::circle (InputOutputArray img, Point center, int radius, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,Draws a circle.
imgproc,bool
imgproc,"cv::clipLine (Rect imgRect, Point &pt1, Point &pt2)"
imgproc,bool
imgproc,"cv::clipLine (Size imgSize, Point &pt1, Point &pt2)"
imgproc,Clips the line against the image rectangle.
imgproc,bool
imgproc,"cv::clipLine (Size2l imgSize, Point2l &pt1, Point2l &pt2)"
imgproc,void
imgproc,"cv::drawContours (InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar &color, int thickness=1, int lineType=LINE_8, InputArray hierarchy=noArray(), int maxLevel=INT_MAX, Point offset=Point())"
imgproc,Draws contours outlines or filled contours.
imgproc,void
imgproc,"cv::drawMarker (InputOutputArray img, Point position, const Scalar &color, int markerType=MARKER_CROSS, int markerSize=20, int thickness=1, int line_type=8)"
imgproc,Draws a marker on a predefined position in an image.
imgproc,void
imgproc,"cv::ellipse (InputOutputArray img, const RotatedRect &box, const Scalar &color, int thickness=1, int lineType=LINE_8)"
imgproc,void
imgproc,"cv::ellipse (InputOutputArray img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,Draws a simple or thick elliptic arc or fills an ellipse sector.
imgproc,void
imgproc,"cv::ellipse2Poly (Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, std::vector< Point > &pts)"
imgproc,Approximates an elliptic arc with a polyline.
imgproc,void
imgproc,"cv::ellipse2Poly (Point2d center, Size2d axes, int angle, int arcStart, int arcEnd, int delta, std::vector< Point2d > &pts)"
imgproc,void
imgproc,"cv::fillConvexPoly (InputOutputArray img, const Point *pts, int npts, const Scalar &color, int lineType=LINE_8, int shift=0)"
imgproc,void
imgproc,"cv::fillConvexPoly (InputOutputArray img, InputArray points, const Scalar &color, int lineType=LINE_8, int shift=0)"
imgproc,Fills a convex polygon.
imgproc,void
imgproc,"cv::fillPoly (InputOutputArray img, const Point **pts, const int *npts, int ncontours, const Scalar &color, int lineType=LINE_8, int shift=0, Point offset=Point())"
imgproc,void
imgproc,"cv::fillPoly (InputOutputArray img, InputArrayOfArrays pts, const Scalar &color, int lineType=LINE_8, int shift=0, Point offset=Point())"
imgproc,Fills the area bounded by one or more polygons.
imgproc,double
imgproc,"cv::getFontScaleFromHeight (const int fontFace, const int pixelHeight, const int thickness=1)"
imgproc,Calculates the font-specific size to use to achieve a given height in pixels.
imgproc,Size
imgproc,"cv::getTextSize (const String &text, int fontFace, double fontScale, int thickness, int *baseLine)"
imgproc,Calculates the width and height of a text string.
imgproc,void
imgproc,"cv::line (InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,Draws a line segment connecting two points.
imgproc,void
imgproc,"cv::polylines (InputOutputArray img, const Point *const *pts, const int *npts, int ncontours, bool isClosed, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,void
imgproc,"cv::polylines (InputOutputArray img, InputArrayOfArrays pts, bool isClosed, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,Draws several polygonal curves.
imgproc,void
imgproc,"cv::putText (InputOutputArray img, const String &text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=LINE_8, bool bottomLeftOrigin=false)"
imgproc,Draws a text string.
imgproc,void
imgproc,"cv::rectangle (InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,"Draws a simple, thick, or filled up-right rectangle."
imgproc,void
imgproc,"cv::rectangle (InputOutputArray img, Rect rec, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)"
imgproc,Classes
imgproc,class
imgproc,cv::CLAHE
imgproc,Base class for Contrast Limited Adaptive Histogram Equalization. More...
imgproc,Functions
imgproc,void
imgproc,"cv::calcBackProject (const Mat *images, int nimages, const int *channels, const SparseMat &hist, OutputArray backProject, const float **ranges, double scale=1, bool uniform=true)"
imgproc,void
imgproc,"cv::calcBackProject (const Mat *images, int nimages, const int *channels, InputArray hist, OutputArray backProject, const float **ranges, double scale=1, bool uniform=true)"
imgproc,Calculates the back projection of a histogram.
imgproc,void
imgproc,"cv::calcBackProject (InputArrayOfArrays images, const std::vector< int > &channels, InputArray hist, OutputArray dst, const std::vector< float > &ranges, double scale)"
imgproc,void
imgproc,"cv::calcHist (const Mat *images, int nimages, const int *channels, InputArray mask, OutputArray hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)"
imgproc,Calculates a histogram of a set of arrays.
imgproc,void
imgproc,"cv::calcHist (const Mat *images, int nimages, const int *channels, InputArray mask, SparseMat &hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)"
imgproc,void
imgproc,"cv::calcHist (InputArrayOfArrays images, const std::vector< int > &channels, InputArray mask, OutputArray hist, const std::vector< int > &histSize, const std::vector< float > &ranges, bool accumulate=false)"
imgproc,double
imgproc,"cv::compareHist (const SparseMat &H1, const SparseMat &H2, int method)"
imgproc,double
imgproc,"cv::compareHist (InputArray H1, InputArray H2, int method)"
imgproc,Compares two histograms.
imgproc,Ptr< CLAHE >
imgproc,"cv::createCLAHE (double clipLimit=40.0, Size tileGridSize=Size(8, 8))"
imgproc,Creates a smart pointer to a cv::CLAHE class and initializes it.
imgproc,float
imgproc,"cv::EMD (InputArray signature1, InputArray signature2, int distType, InputArray cost=noArray(), float *lowerBound=0, OutputArray flow=noArray())"
imgproc,"Computes the ""minimal work"" distance between two weighted point configurations."
imgproc,void
imgproc,"cv::equalizeHist (InputArray src, OutputArray dst)"
imgproc,Equalizes the histogram of a grayscale image.
imgproc,float
imgproc,"cv::wrapperEMD (InputArray signature1, InputArray signature2, int distType, InputArray cost=noArray(), Ptr< float > lowerBound=Ptr< float >(), OutputArray flow=noArray())"
imgproc,Enumerations
imgproc,enum
imgproc,"cv::AdaptiveThresholdTypes { cv::ADAPTIVE_THRESH_MEAN_C = 0 , cv::ADAPTIVE_THRESH_GAUSSIAN_C = 1 }"
imgproc,enum
imgproc,"cv::DistanceTransformLabelTypes { cv::DIST_LABEL_CCOMP = 0 , cv::DIST_LABEL_PIXEL = 1 }"
imgproc,distanceTransform algorithm flags More...
imgproc,enum
imgproc,"cv::DistanceTransformMasks { cv::DIST_MASK_3 = 3 , cv::DIST_MASK_5 = 5 , cv::DIST_MASK_PRECISE = 0 }"
imgproc,Mask size for distance transform. More...
imgproc,enum
imgproc,"cv::DistanceTypes { cv::DIST_USER = -1 , cv::DIST_L1 = 1 , cv::DIST_L2 = 2 , cv::DIST_C = 3 , cv::DIST_L12 = 4 , cv::DIST_FAIR = 5 , cv::DIST_WELSCH = 6 , cv::DIST_HUBER = 7 }"
imgproc,enum
imgproc,"cv::FloodFillFlags { cv::FLOODFILL_FIXED_RANGE = 1 << 16 , cv::FLOODFILL_MASK_ONLY = 1 << 17 }"
imgproc,floodfill algorithm flags More...
imgproc,enum
imgproc,"cv::GrabCutClasses { cv::GC_BGD = 0 , cv::GC_FGD = 1 , cv::GC_PR_BGD = 2 , cv::GC_PR_FGD = 3 }"
imgproc,class of the pixel in GrabCut algorithm More...
imgproc,enum
imgproc,"cv::GrabCutModes { cv::GC_INIT_WITH_RECT = 0 , cv::GC_INIT_WITH_MASK = 1 , cv::GC_EVAL = 2 , cv::GC_EVAL_FREEZE_MODEL = 3 }"
imgproc,GrabCut algorithm flags. More...
imgproc,enum
imgproc,"cv::ThresholdTypes { cv::THRESH_BINARY = 0 , cv::THRESH_BINARY_INV = 1 , cv::THRESH_TRUNC = 2 , cv::THRESH_TOZERO = 3 , cv::THRESH_TOZERO_INV = 4 , cv::THRESH_MASK = 7 , cv::THRESH_OTSU = 8 , cv::THRESH_TRIANGLE = 16 }"
imgproc,Functions
imgproc,void
imgproc,"cv::adaptiveThreshold (InputArray src, OutputArray dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)"
imgproc,Applies an adaptive threshold to an array.
imgproc,void
imgproc,"cv::blendLinear (InputArray src1, InputArray src2, InputArray weights1, InputArray weights2, OutputArray dst)"
imgproc,void
imgproc,"cv::distanceTransform (InputArray src, OutputArray dst, int distanceType, int maskSize, int dstType=CV_32F)"
imgproc,void
imgproc,"cv::distanceTransform (InputArray src, OutputArray dst, OutputArray labels, int distanceType, int maskSize, int labelType=DIST_LABEL_CCOMP)"
imgproc,Calculates the distance to the closest zero pixel for each pixel of the source image.
imgproc,int
imgproc,"cv::floodFill (InputOutputArray image, InputOutputArray mask, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)"
imgproc,Fills a connected component with the given color.
imgproc,int
imgproc,"cv::floodFill (InputOutputArray image, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)"
imgproc,void
imgproc,"cv::integral (InputArray src, OutputArray sum, int sdepth=-1)"
imgproc,void
imgproc,"cv::integral (InputArray src, OutputArray sum, OutputArray sqsum, int sdepth=-1, int sqdepth=-1)"
imgproc,void
imgproc,"cv::integral (InputArray src, OutputArray sum, OutputArray sqsum, OutputArray tilted, int sdepth=-1, int sqdepth=-1)"
imgproc,Calculates the integral of an image.
imgproc,double
imgproc,"cv::threshold (InputArray src, OutputArray dst, double thresh, double maxval, int type)"
imgproc,Applies a fixed-level threshold to each array element.
imgproc,This module includes image-processing functions.
imgproc,Functions
imgproc,void
imgproc,"cv::accumulate (InputArray src, InputOutputArray dst, InputArray mask=noArray())"
imgproc,Adds an image to the accumulator image.
imgproc,void
imgproc,"cv::accumulateProduct (InputArray src1, InputArray src2, InputOutputArray dst, InputArray mask=noArray())"
imgproc,Adds the per-element product of two input images to the accumulator image.
imgproc,void
imgproc,"cv::accumulateSquare (InputArray src, InputOutputArray dst, InputArray mask=noArray())"
imgproc,Adds the square of a source image to the accumulator image.
imgproc,void
imgproc,"cv::accumulateWeighted (InputArray src, InputOutputArray dst, double alpha, InputArray mask=noArray())"
imgproc,Updates a running average.
imgproc,void
imgproc,"cv::createHanningWindow (OutputArray dst, Size winSize, int type)"
imgproc,This function computes a Hanning window coefficients in two dimensions.
imgproc,void
imgproc,"cv::divSpectrums (InputArray a, InputArray b, OutputArray c, int flags, bool conjB=false)"
imgproc,Performs the per-element division of the first Fourier spectrum by the second Fourier spectrum.
imgproc,Point2d
imgproc,"cv::phaseCorrelate (InputArray src1, InputArray src2, InputArray window=noArray(), double *response=0)"
imgproc,The function is used to detect translational shifts that occur between two images.
imgproc,Enumerations
imgproc,enum
imgproc,"cv::ColorConversionCodes { cv::COLOR_BGR2BGRA = 0 , cv::COLOR_RGB2RGBA = COLOR_BGR2BGRA , cv::COLOR_BGRA2BGR = 1 , cv::COLOR_RGBA2RGB = COLOR_BGRA2BGR , cv::COLOR_BGR2RGBA = 2 , cv::COLOR_RGB2BGRA = COLOR_BGR2RGBA , cv::COLOR_RGBA2BGR = 3 , cv::COLOR_BGRA2RGB = COLOR_RGBA2BGR , cv::COLOR_BGR2RGB = 4 , cv::COLOR_RGB2BGR = COLOR_BGR2RGB , cv::COLOR_BGRA2RGBA = 5 , cv::COLOR_RGBA2BGRA = COLOR_BGRA2RGBA , cv::COLOR_BGR2GRAY = 6 , cv::COLOR_RGB2GRAY = 7 , cv::COLOR_GRAY2BGR = 8 , cv::COLOR_GRAY2RGB = COLOR_GRAY2BGR , cv::COLOR_GRAY2BGRA = 9 , cv::COLOR_GRAY2RGBA = COLOR_GRAY2BGRA , cv::COLOR_BGRA2GRAY = 10 , cv::COLOR_RGBA2GRAY = 11 , cv::COLOR_BGR2BGR565 = 12 , cv::COLOR_RGB2BGR565 = 13 , cv::COLOR_BGR5652BGR = 14 , cv::COLOR_BGR5652RGB = 15 , cv::COLOR_BGRA2BGR565 = 16 , cv::COLOR_RGBA2BGR565 = 17 , cv::COLOR_BGR5652BGRA = 18 , cv::COLOR_BGR5652RGBA = 19 , cv::COLOR_GRAY2BGR565 = 20 , cv::COLOR_BGR5652GRAY = 21 , cv::COLOR_BGR2BGR555 = 22 , cv::COLOR_RGB2BGR555 = 23 , cv::COLOR_BGR5552BGR = 24 , cv::COLOR_BGR5552RGB = 25 , cv::COLOR_BGRA2BGR555 = 26 , cv::COLOR_RGBA2BGR555 = 27 , cv::COLOR_BGR5552BGRA = 28 , cv::COLOR_BGR5552RGBA = 29 , cv::COLOR_GRAY2BGR555 = 30 , cv::COLOR_BGR5552GRAY = 31 , cv::COLOR_BGR2XYZ = 32 , cv::COLOR_RGB2XYZ = 33 , cv::COLOR_XYZ2BGR = 34 , cv::COLOR_XYZ2RGB = 35 , cv::COLOR_BGR2YCrCb = 36 , cv::COLOR_RGB2YCrCb = 37 , cv::COLOR_YCrCb2BGR = 38 , cv::COLOR_YCrCb2RGB = 39 , cv::COLOR_BGR2HSV = 40 , cv::COLOR_RGB2HSV = 41 , cv::COLOR_BGR2Lab = 44 , cv::COLOR_RGB2Lab = 45 , cv::COLOR_BGR2Luv = 50 , cv::COLOR_RGB2Luv = 51 , cv::COLOR_BGR2HLS = 52 , cv::COLOR_RGB2HLS = 53 , cv::COLOR_HSV2BGR = 54 , cv::COLOR_HSV2RGB = 55 , cv::COLOR_Lab2BGR = 56 , cv::COLOR_Lab2RGB = 57 , cv::COLOR_Luv2BGR = 58 , cv::COLOR_Luv2RGB = 59 , cv::COLOR_HLS2BGR = 60 , cv::COLOR_HLS2RGB = 61 , cv::COLOR_BGR2HSV_FULL = 66 , cv::COLOR_RGB2HSV_FULL = 67 , cv::COLOR_BGR2HLS_FULL = 68 , cv::COLOR_RGB2HLS_FULL = 69 , cv::COLOR_HSV2BGR_FULL = 70 , cv::COLOR_HSV2RGB_FULL = 71 , cv::COLOR_HLS2BGR_FULL = 72 , cv::COLOR_HLS2RGB_FULL = 73 , cv::COLOR_LBGR2Lab = 74 , cv::COLOR_LRGB2Lab = 75 , cv::COLOR_LBGR2Luv = 76 , cv::COLOR_LRGB2Luv = 77 , cv::COLOR_Lab2LBGR = 78 , cv::COLOR_Lab2LRGB = 79 , cv::COLOR_Luv2LBGR = 80 , cv::COLOR_Luv2LRGB = 81 , cv::COLOR_BGR2YUV = 82 , cv::COLOR_RGB2YUV = 83 , cv::COLOR_YUV2BGR = 84 , cv::COLOR_YUV2RGB = 85 , cv::COLOR_YUV2RGB_NV12 = 90 , cv::COLOR_YUV2BGR_NV12 = 91 , cv::COLOR_YUV2RGB_NV21 = 92 , cv::COLOR_YUV2BGR_NV21 = 93 , cv::COLOR_YUV420sp2RGB = COLOR_YUV2RGB_NV21 , cv::COLOR_YUV420sp2BGR = COLOR_YUV2BGR_NV21 , cv::COLOR_YUV2RGBA_NV12 = 94 , cv::COLOR_YUV2BGRA_NV12 = 95 , cv::COLOR_YUV2RGBA_NV21 = 96 , cv::COLOR_YUV2BGRA_NV21 = 97 , cv::COLOR_YUV420sp2RGBA = COLOR_YUV2RGBA_NV21 , cv::COLOR_YUV420sp2BGRA = COLOR_YUV2BGRA_NV21 , cv::COLOR_YUV2RGB_YV12 = 98 , cv::COLOR_YUV2BGR_YV12 = 99 , cv::COLOR_YUV2RGB_IYUV = 100 , cv::COLOR_YUV2BGR_IYUV = 101 , cv::COLOR_YUV2RGB_I420 = COLOR_YUV2RGB_IYUV , cv::COLOR_YUV2BGR_I420 = COLOR_YUV2BGR_IYUV , cv::COLOR_YUV420p2RGB = COLOR_YUV2RGB_YV12 , cv::COLOR_YUV420p2BGR = COLOR_YUV2BGR_YV12 , cv::COLOR_YUV2RGBA_YV12 = 102 , cv::COLOR_YUV2BGRA_YV12 = 103 , cv::COLOR_YUV2RGBA_IYUV = 104 , cv::COLOR_YUV2BGRA_IYUV = 105 , cv::COLOR_YUV2RGBA_I420 = COLOR_YUV2RGBA_IYUV , cv::COLOR_YUV2BGRA_I420 = COLOR_YUV2BGRA_IYUV , cv::COLOR_YUV420p2RGBA = COLOR_YUV2RGBA_YV12 , cv::COLOR_YUV420p2BGRA = COLOR_YUV2BGRA_YV12 , cv::COLOR_YUV2GRAY_420 = 106 , cv::COLOR_YUV2GRAY_NV21 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_NV12 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_YV12 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_IYUV = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_I420 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV420sp2GRAY = COLOR_YUV2GRAY_420 , cv::COLOR_YUV420p2GRAY = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2RGB_UYVY = 107 , cv::COLOR_YUV2BGR_UYVY = 108 , cv::COLOR_YUV2RGB_Y422 = COLOR_YUV2RGB_UYVY , cv::COLOR_YUV2BGR_Y422 = COLOR_YUV2BGR_UYVY , cv::COLOR_YUV2RGB_UYNV = COLOR_YUV2RGB_UYVY , cv::COLOR_YUV2BGR_UYNV = COLOR_YUV2BGR_UYVY , cv::COLOR_YUV2RGBA_UYVY = 111 , cv::COLOR_YUV2BGRA_UYVY = 112 , cv::COLOR_YUV2RGBA_Y422 = COLOR_YUV2RGBA_UYVY , cv::COLOR_YUV2BGRA_Y422 = COLOR_YUV2BGRA_UYVY , cv::COLOR_YUV2RGBA_UYNV = COLOR_YUV2RGBA_UYVY , cv::COLOR_YUV2BGRA_UYNV = COLOR_YUV2BGRA_UYVY , cv::COLOR_YUV2RGB_YUY2 = 115 , cv::COLOR_YUV2BGR_YUY2 = 116 , cv::COLOR_YUV2RGB_YVYU = 117 , cv::COLOR_YUV2BGR_YVYU = 118 , cv::COLOR_YUV2RGB_YUYV = COLOR_YUV2RGB_YUY2 , cv::COLOR_YUV2BGR_YUYV = COLOR_YUV2BGR_YUY2 , cv::COLOR_YUV2RGB_YUNV = COLOR_YUV2RGB_YUY2 , cv::COLOR_YUV2BGR_YUNV = COLOR_YUV2BGR_YUY2 , cv::COLOR_YUV2RGBA_YUY2 = 119 , cv::COLOR_YUV2BGRA_YUY2 = 120 , cv::COLOR_YUV2RGBA_YVYU = 121 , cv::COLOR_YUV2BGRA_YVYU = 122 , cv::COLOR_YUV2RGBA_YUYV = COLOR_YUV2RGBA_YUY2 , cv::COLOR_YUV2BGRA_YUYV = COLOR_YUV2BGRA_YUY2 , cv::COLOR_YUV2RGBA_YUNV = COLOR_YUV2RGBA_YUY2 , cv::COLOR_YUV2BGRA_YUNV = COLOR_YUV2BGRA_YUY2 , cv::COLOR_YUV2GRAY_UYVY = 123 , cv::COLOR_YUV2GRAY_YUY2 = 124 , cv::COLOR_YUV2GRAY_Y422 = COLOR_YUV2GRAY_UYVY , cv::COLOR_YUV2GRAY_UYNV = COLOR_YUV2GRAY_UYVY , cv::COLOR_YUV2GRAY_YVYU = COLOR_YUV2GRAY_YUY2 , cv::COLOR_YUV2GRAY_YUYV = COLOR_YUV2GRAY_YUY2 , cv::COLOR_YUV2GRAY_YUNV = COLOR_YUV2GRAY_YUY2 , cv::COLOR_RGBA2mRGBA = 125 , cv::COLOR_mRGBA2RGBA = 126 , cv::COLOR_RGB2YUV_I420 = 127 , cv::COLOR_BGR2YUV_I420 = 128 , cv::COLOR_RGB2YUV_IYUV = COLOR_RGB2YUV_I420 , cv::COLOR_BGR2YUV_IYUV = COLOR_BGR2YUV_I420 , cv::COLOR_RGBA2YUV_I420 = 129 , cv::COLOR_BGRA2YUV_I420 = 130 , cv::COLOR_RGBA2YUV_IYUV = COLOR_RGBA2YUV_I420 , cv::COLOR_BGRA2YUV_IYUV = COLOR_BGRA2YUV_I420 , cv::COLOR_RGB2YUV_YV12 = 131 , cv::COLOR_BGR2YUV_YV12 = 132 , cv::COLOR_RGBA2YUV_YV12 = 133 , cv::COLOR_BGRA2YUV_YV12 = 134 , cv::COLOR_BayerBG2BGR = 46 , cv::COLOR_BayerGB2BGR = 47 , cv::COLOR_BayerRG2BGR = 48 , cv::COLOR_BayerGR2BGR = 49 , cv::COLOR_BayerRGGB2BGR = COLOR_BayerBG2BGR , cv::COLOR_BayerGRBG2BGR = COLOR_BayerGB2BGR , cv::COLOR_BayerBGGR2BGR = COLOR_BayerRG2BGR , cv::COLOR_BayerGBRG2BGR = COLOR_BayerGR2BGR , cv::COLOR_BayerRGGB2RGB = COLOR_BayerBGGR2BGR , cv::COLOR_BayerGRBG2RGB = COLOR_BayerGBRG2BGR , cv::COLOR_BayerBGGR2RGB = COLOR_BayerRGGB2BGR , cv::COLOR_BayerGBRG2RGB = COLOR_BayerGRBG2BGR , cv::COLOR_BayerBG2RGB = COLOR_BayerRG2BGR , cv::COLOR_BayerGB2RGB = COLOR_BayerGR2BGR , cv::COLOR_BayerRG2RGB = COLOR_BayerBG2BGR , cv::COLOR_BayerGR2RGB = COLOR_BayerGB2BGR , cv::COLOR_BayerBG2GRAY = 86 , cv::COLOR_BayerGB2GRAY = 87 , cv::COLOR_BayerRG2GRAY = 88 , cv::COLOR_BayerGR2GRAY = 89 , cv::COLOR_BayerRGGB2GRAY = COLOR_BayerBG2GRAY , cv::COLOR_BayerGRBG2GRAY = COLOR_BayerGB2GRAY , cv::COLOR_BayerBGGR2GRAY = COLOR_BayerRG2GRAY , cv::COLOR_BayerGBRG2GRAY = COLOR_BayerGR2GRAY , cv::COLOR_BayerBG2BGR_VNG = 62 , cv::COLOR_BayerGB2BGR_VNG = 63 , cv::COLOR_BayerRG2BGR_VNG = 64 , cv::COLOR_BayerGR2BGR_VNG = 65 , cv::COLOR_BayerRGGB2BGR_VNG = COLOR_BayerBG2BGR_VNG , cv::COLOR_BayerGRBG2BGR_VNG = COLOR_BayerGB2BGR_VNG , cv::COLOR_BayerBGGR2BGR_VNG = COLOR_BayerRG2BGR_VNG , cv::COLOR_BayerGBRG2BGR_VNG = COLOR_BayerGR2BGR_VNG , cv::COLOR_BayerRGGB2RGB_VNG = COLOR_BayerBGGR2BGR_VNG , cv::COLOR_BayerGRBG2RGB_VNG = COLOR_BayerGBRG2BGR_VNG , cv::COLOR_BayerBGGR2RGB_VNG = COLOR_BayerRGGB2BGR_VNG , cv::COLOR_BayerGBRG2RGB_VNG = COLOR_BayerGRBG2BGR_VNG , cv::COLOR_BayerBG2RGB_VNG = COLOR_BayerRG2BGR_VNG , cv::COLOR_BayerGB2RGB_VNG = COLOR_BayerGR2BGR_VNG , cv::COLOR_BayerRG2RGB_VNG = COLOR_BayerBG2BGR_VNG , cv::COLOR_BayerGR2RGB_VNG = COLOR_BayerGB2BGR_VNG , cv::COLOR_BayerBG2BGR_EA = 135 , cv::COLOR_BayerGB2BGR_EA = 136 , cv::COLOR_BayerRG2BGR_EA = 137 , cv::COLOR_BayerGR2BGR_EA = 138 , cv::COLOR_BayerRGGB2BGR_EA = COLOR_BayerBG2BGR_EA , cv::COLOR_BayerGRBG2BGR_EA = COLOR_BayerGB2BGR_EA , cv::COLOR_BayerBGGR2BGR_EA = COLOR_BayerRG2BGR_EA , cv::COLOR_BayerGBRG2BGR_EA = COLOR_BayerGR2BGR_EA , cv::COLOR_BayerRGGB2RGB_EA = COLOR_BayerBGGR2BGR_EA , cv::COLOR_BayerGRBG2RGB_EA = COLOR_BayerGBRG2BGR_EA , cv::COLOR_BayerBGGR2RGB_EA = COLOR_BayerRGGB2BGR_EA , cv::COLOR_BayerGBRG2RGB_EA = COLOR_BayerGRBG2BGR_EA , cv::COLOR_BayerBG2RGB_EA = COLOR_BayerRG2BGR_EA , cv::COLOR_BayerGB2RGB_EA = COLOR_BayerGR2BGR_EA , cv::COLOR_BayerRG2RGB_EA = COLOR_BayerBG2BGR_EA , cv::COLOR_BayerGR2RGB_EA = COLOR_BayerGB2BGR_EA , cv::COLOR_BayerBG2BGRA = 139 , cv::COLOR_BayerGB2BGRA = 140 , cv::COLOR_BayerRG2BGRA = 141 , cv::COLOR_BayerGR2BGRA = 142 , cv::COLOR_BayerRGGB2BGRA = COLOR_BayerBG2BGRA , cv::COLOR_BayerGRBG2BGRA = COLOR_BayerGB2BGRA , cv::COLOR_BayerBGGR2BGRA = COLOR_BayerRG2BGRA , cv::COLOR_BayerGBRG2BGRA = COLOR_BayerGR2BGRA , cv::COLOR_BayerRGGB2RGBA = COLOR_BayerBGGR2BGRA , cv::COLOR_BayerGRBG2RGBA = COLOR_BayerGBRG2BGRA , cv::COLOR_BayerBGGR2RGBA = COLOR_BayerRGGB2BGRA , cv::COLOR_BayerGBRG2RGBA = COLOR_BayerGRBG2BGRA , cv::COLOR_BayerBG2RGBA = COLOR_BayerRG2BGRA , cv::COLOR_BayerGB2RGBA = COLOR_BayerGR2BGRA , cv::COLOR_BayerRG2RGBA = COLOR_BayerBG2BGRA , cv::COLOR_BayerGR2RGBA = COLOR_BayerGB2BGRA , cv::COLOR_RGB2YUV_UYVY = 143 , cv::COLOR_BGR2YUV_UYVY = 144 , cv::COLOR_RGB2YUV_Y422 = COLOR_RGB2YUV_UYVY , cv::COLOR_BGR2YUV_Y422 = COLOR_BGR2YUV_UYVY , cv::COLOR_RGB2YUV_UYNV = COLOR_RGB2YUV_UYVY , cv::COLOR_BGR2YUV_UYNV = COLOR_BGR2YUV_UYVY , cv::COLOR_RGBA2YUV_UYVY = 145 , cv::COLOR_BGRA2YUV_UYVY = 146 , cv::COLOR_RGBA2YUV_Y422 = COLOR_RGBA2YUV_UYVY , cv::COLOR_BGRA2YUV_Y422 = COLOR_BGRA2YUV_UYVY , cv::COLOR_RGBA2YUV_UYNV = COLOR_RGBA2YUV_UYVY , cv::COLOR_BGRA2YUV_UYNV = COLOR_BGRA2YUV_UYVY , cv::COLOR_RGB2YUV_YUY2 = 147 , cv::COLOR_BGR2YUV_YUY2 = 148 , cv::COLOR_RGB2YUV_YVYU = 149 , cv::COLOR_BGR2YUV_YVYU = 150 , cv::COLOR_RGB2YUV_YUYV = COLOR_RGB2YUV_YUY2 , cv::COLOR_BGR2YUV_YUYV = COLOR_BGR2YUV_YUY2 , cv::COLOR_RGB2YUV_YUNV = COLOR_RGB2YUV_YUY2 , cv::COLOR_BGR2YUV_YUNV = COLOR_BGR2YUV_YUY2 , cv::COLOR_RGBA2YUV_YUY2 = 151 , cv::COLOR_BGRA2YUV_YUY2 = 152 , cv::COLOR_RGBA2YUV_YVYU = 153 , cv::COLOR_BGRA2YUV_YVYU = 154 , cv::COLOR_RGBA2YUV_YUYV = COLOR_RGBA2YUV_YUY2 , cv::COLOR_BGRA2YUV_YUYV = COLOR_BGRA2YUV_YUY2 , cv::COLOR_RGBA2YUV_YUNV = COLOR_RGBA2YUV_YUY2 , cv::COLOR_BGRA2YUV_YUNV = COLOR_BGRA2YUV_YUY2 , cv::COLOR_COLORCVT_MAX = 155 }"
imgproc,Functions
imgproc,void
imgproc,"cv::cvtColor (InputArray src, OutputArray dst, int code, int dstCn=0, AlgorithmHint hint=cv::ALGO_HINT_DEFAULT)"
imgproc,Converts an image from one color space to another.
imgproc,void
imgproc,"cv::cvtColorTwoPlane (InputArray src1, InputArray src2, OutputArray dst, int code, AlgorithmHint hint=cv::ALGO_HINT_DEFAULT)"
imgproc,Converts an image from one color space to another where the source image is stored in two planes.
imgproc,void
imgproc,"cv::demosaicing (InputArray src, OutputArray dst, int code, int dstCn=0)"
imgproc,main function for all demosaicing processes
imgproc,"The functions in this section perform various geometrical transformations of 2D images. They do not change the image content but deform the pixel grid and map this deformed grid to the destination image. In fact, to avoid sampling artifacts, the mapping is done in the reverse order, from destination to the source. That is, for each pixel \((x, y)\) of the destination image, the functions compute coordinates of the corresponding ""donor"" pixel in the source image and copy the pixel value:"
imgproc,"\[\texttt{dst} (x,y)= \texttt{src} (f_x(x,y), f_y(x,y))\]"
imgproc,"In case when you specify the forward mapping \(\left<g_x, g_y\right>: \texttt{src} \rightarrow \texttt{dst}\), the OpenCV functions first compute the corresponding inverse mapping \(\left<f_x, f_y\right>: \texttt{dst} \rightarrow \texttt{src}\) and then use the above formula."
imgproc,"The actual implementations of the geometrical transformations, from the most generic remap and to the simplest and the fastest resize, need to solve two main problems with the above formula:"
imgproc,"Extrapolation of non-existing pixels. Similarly to the filtering functions described in the previous section, for some \((x,y)\), either one of \(f_x(x,y)\), or \(f_y(x,y)\), or both of them may fall outside of the image. In this case, an extrapolation method needs to be used. OpenCV provides the same selection of extrapolation methods as in the filtering functions. In addition, it provides the method BORDER_TRANSPARENT. This means that the corresponding pixels in the destination image will not be modified at all."
imgproc,"Interpolation of pixel values. Usually \(f_x(x,y)\) and \(f_y(x,y)\) are floating-point numbers. This means that \(\left<f_x, f_y\right>\) can be either an affine or perspective transformation, or radial lens distortion correction, and so on. So, a pixel value at fractional coordinates needs to be retrieved. In the simplest case, the coordinates can be just rounded to the nearest integer coordinates and the corresponding pixel can be used. This is called a nearest-neighbor interpolation. However, a better result can be achieved by using more sophisticated interpolation methods , where a polynomial function is fit into some neighborhood of the computed pixel \((f_x(x,y), f_y(x,y))\), and then the value of the polynomial at \((f_x(x,y), f_y(x,y))\) is taken as the interpolated pixel value. In OpenCV, you can choose between several interpolation methods. See resize for details."
imgproc,Enumerations
imgproc,enum
imgproc,"cv::InterpolationFlags { cv::INTER_NEAREST = 0 , cv::INTER_LINEAR = 1 , cv::INTER_CUBIC = 2 , cv::INTER_AREA = 3 , cv::INTER_LANCZOS4 = 4 , cv::INTER_LINEAR_EXACT = 5 , cv::INTER_NEAREST_EXACT = 6 , cv::INTER_MAX = 7 , cv::WARP_FILL_OUTLIERS = 8 , cv::WARP_INVERSE_MAP = 16 , cv::WARP_RELATIVE_MAP = 32 }"
imgproc,interpolation algorithm More...
imgproc,enum
imgproc,"cv::InterpolationMasks { cv::INTER_BITS = 5 , cv::INTER_BITS2 = INTER_BITS * 2 , cv::INTER_TAB_SIZE = 1 << INTER_BITS , cv::INTER_TAB_SIZE2 = INTER_TAB_SIZE * INTER_TAB_SIZE }"
imgproc,enum
imgproc,"cv::WarpPolarMode { cv::WARP_POLAR_LINEAR = 0 , cv::WARP_POLAR_LOG = 256 }"
imgproc,Specify the polar mapping mode. More...
imgproc,Functions
imgproc,void
imgproc,"cv::convertMaps (InputArray map1, InputArray map2, OutputArray dstmap1, OutputArray dstmap2, int dstmap1type, bool nninterpolation=false)"
imgproc,Converts image transformation maps from one representation to another.
imgproc,Mat
imgproc,"cv::getAffineTransform (const Point2f src[], const Point2f dst[])"
imgproc,Calculates an affine transform from three pairs of the corresponding points.
imgproc,Mat
imgproc,"cv::getAffineTransform (InputArray src, InputArray dst)"
imgproc,Mat
imgproc,"cv::getPerspectiveTransform (const Point2f src[], const Point2f dst[], int solveMethod=DECOMP_LU)"
imgproc,Mat
imgproc,"cv::getPerspectiveTransform (InputArray src, InputArray dst, int solveMethod=DECOMP_LU)"
imgproc,Calculates a perspective transform from four pairs of the corresponding points.
imgproc,void
imgproc,"cv::getRectSubPix (InputArray image, Size patchSize, Point2f center, OutputArray patch, int patchType=-1)"
imgproc,Retrieves a pixel rectangle from an image with sub-pixel accuracy.
imgproc,Mat
imgproc,"cv::getRotationMatrix2D (Point2f center, double angle, double scale)"
imgproc,Calculates an affine matrix of 2D rotation.
imgproc,Matx23d
imgproc,"cv::getRotationMatrix2D_ (Point2f center, double angle, double scale)"
imgproc,void
imgproc,"cv::invertAffineTransform (InputArray M, OutputArray iM)"
imgproc,Inverts an affine transformation.
imgproc,void
imgproc,"cv::linearPolar (InputArray src, OutputArray dst, Point2f center, double maxRadius, int flags)"
imgproc,Remaps an image to polar coordinates space.
imgproc,void
imgproc,"cv::logPolar (InputArray src, OutputArray dst, Point2f center, double M, int flags)"
imgproc,Remaps an image to semilog-polar coordinates space.
imgproc,void
imgproc,"cv::remap (InputArray src, OutputArray dst, InputArray map1, InputArray map2, int interpolation, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())"
imgproc,Applies a generic geometrical transformation to an image.
imgproc,void
imgproc,"cv::resize (InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)"
imgproc,Resizes an image.
imgproc,void
imgproc,"cv::warpAffine (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())"
imgproc,Applies an affine transformation to an image.
imgproc,void
imgproc,"cv::warpPerspective (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())"
imgproc,Applies a perspective transformation to an image.
imgproc,void
imgproc,"cv::warpPolar (InputArray src, OutputArray dst, Size dsize, Point2f center, double maxRadius, int flags)"
imgproc,Remaps an image to polar or semilog-polar coordinates space.
imgproc,Classes
imgproc,class
imgproc,cv::LineSegmentDetector
imgproc,Line segment detector class. More...
imgproc,Functions
imgproc,void
imgproc,"cv::Canny (InputArray dx, InputArray dy, OutputArray edges, double threshold1, double threshold2, bool L2gradient=false)"
imgproc,void
imgproc,"cv::Canny (InputArray image, OutputArray edges, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)"
imgproc,Finds edges in an image using the Canny algorithm [48] .
imgproc,void
imgproc,"cv::cornerEigenValsAndVecs (InputArray src, OutputArray dst, int blockSize, int ksize, int borderType=BORDER_DEFAULT)"
imgproc,Calculates eigenvalues and eigenvectors of image blocks for corner detection.
imgproc,void
imgproc,"cv::cornerHarris (InputArray src, OutputArray dst, int blockSize, int ksize, double k, int borderType=BORDER_DEFAULT)"
imgproc,Harris corner detector.
imgproc,void
imgproc,"cv::cornerMinEigenVal (InputArray src, OutputArray dst, int blockSize, int ksize=3, int borderType=BORDER_DEFAULT)"
imgproc,Calculates the minimal eigenvalue of gradient matrices for corner detection.
imgproc,void
imgproc,"cv::cornerSubPix (InputArray image, InputOutputArray corners, Size winSize, Size zeroZone, TermCriteria criteria)"
imgproc,Refines the corner locations.
imgproc,Ptr< LineSegmentDetector >
imgproc,"cv::createLineSegmentDetector (int refine=LSD_REFINE_STD, double scale=0.8, double sigma_scale=0.6, double quant=2.0, double ang_th=22.5, double log_eps=0, double density_th=0.7, int n_bins=1024)"
imgproc,Creates a smart pointer to a LineSegmentDetector object and initializes it.
imgproc,void
imgproc,"cv::goodFeaturesToTrack (InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, int blockSize, int gradientSize, bool useHarrisDetector=false, double k=0.04)"
imgproc,void
imgproc,"cv::goodFeaturesToTrack (InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, OutputArray cornersQuality, int blockSize=3, int gradientSize=3, bool useHarrisDetector=false, double k=0.04)"
imgproc,"Same as above, but returns also quality measure of the detected corners."
imgproc,void
imgproc,"cv::goodFeaturesToTrack (InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask=noArray(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)"
imgproc,Determines strong corners on an image.
imgproc,void
imgproc,"cv::HoughCircles (InputArray image, OutputArray circles, int method, double dp, double minDist, double param1=100, double param2=100, int minRadius=0, int maxRadius=0)"
imgproc,Finds circles in a grayscale image using the Hough transform.
imgproc,void
imgproc,"cv::HoughLines (InputArray image, OutputArray lines, double rho, double theta, int threshold, double srn=0, double stn=0, double min_theta=0, double max_theta=CV_PI)"
imgproc,Finds lines in a binary image using the standard Hough transform.
imgproc,void
imgproc,"cv::HoughLinesP (InputArray image, OutputArray lines, double rho, double theta, int threshold, double minLineLength=0, double maxLineGap=0)"
imgproc,Finds line segments in a binary image using the probabilistic Hough transform.
imgproc,void
imgproc,"cv::HoughLinesPointSet (InputArray point, OutputArray lines, int lines_max, int threshold, double min_rho, double max_rho, double rho_step, double min_theta, double max_theta, double theta_step)"
imgproc,Finds lines in a set of points using the standard Hough transform.
imgproc,void
imgproc,"cv::preCornerDetect (InputArray src, OutputArray dst, int ksize, int borderType=BORDER_DEFAULT)"
imgproc,Calculates a feature map for corner detection.
imgproc,"The Subdiv2D class described in this section is used to perform various planar subdivision on a set of 2D points (represented as vector of Point2f). OpenCV subdivides a plane into triangles using the Delaunay's algorithm, which corresponds to the dual graph of the Voronoi diagram. In the figure below, the Delaunay's triangulation is marked with black lines and the Voronoi diagram with red lines."
imgproc,"The subdivisions can be used for the 3D piece-wise transformation of a plane, morphing, fast location of points on the plane, building special graphs (such as NNG,RNG), and so forth."
imgproc,Classes
imgproc,class
imgproc,cv::Subdiv2D
imgproc,Enumerations
imgproc,enum
imgproc,"cv::TemplateMatchModes { cv::TM_SQDIFF = 0 , cv::TM_SQDIFF_NORMED = 1 , cv::TM_CCORR = 2 , cv::TM_CCORR_NORMED = 3 , cv::TM_CCOEFF = 4 , cv::TM_CCOEFF_NORMED = 5 }"
imgproc,type of the template matching operation More...
imgproc,Functions
imgproc,void
imgproc,"cv::matchTemplate (InputArray image, InputArray templ, OutputArray result, int method, InputArray mask=noArray())"
imgproc,Compares a template against overlapped image regions.
ml,The class implements the random forest predictor.
ml,Artificial Neural Networks - Multi-Layer Perceptrons.
ml,"Unlike many other models in ML that are constructed and trained at once, in the MLP model these steps are separated. First, a network with the specified topology is created using the non-default constructor or the method ANN_MLP::create. All the weights are set to zeros. Then, the network is trained using a set of input and output vectors. The training procedure can be repeated more than once, that is, the weights can be adjusted based on the new training data."
ml,Additional flags for StatModel::train are available: ANN_MLP::TrainFlags.
ml,Support Vector Machines.
ml,Random Number Generator.
ml,"Random number generator. It encapsulates the state (currently, a 64-bit integer) and has methods to return scalar random values and to fill arrays with random values. Currently it supports uniform and Gaussian (normal) distributions. The generator uses Multiply-With-Carry algorithm, introduced by G. Marsaglia ( http://en.wikipedia.org/wiki/Multiply-with-carry ). Gaussian-distribution random numbers are generated using the Ziggurat algorithm ( http://en.wikipedia.org/wiki/Ziggurat_algorithm ), introduced by G. Marsaglia and W. W. Tsang."
ml,The class implements the Expectation Maximization algorithm.
ml,Classes
ml,class
ml,cv::LDA
ml,Linear Discriminant Analysis. More...
ml,class
ml,cv::PCA
ml,Principal Component Analysis. More...
ml,class
ml,cv::RNG
ml,Random Number Generator. More...
ml,class
ml,cv::RNG_MT19937
ml,Mersenne Twister random number generator. More...
ml,class
ml,cv::SVD
ml,Singular Value Decomposition. More...
ml,Functions
ml,void
ml,"cv::absdiff (InputArray src1, InputArray src2, OutputArray dst)"
ml,Calculates the per-element absolute difference between two arrays or between an array and a scalar.
ml,void
ml,"cv::add (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray(), int dtype=-1)"
ml,Calculates the per-element sum of two arrays or an array and a scalar.
ml,void
ml,"cv::addWeighted (InputArray src1, double alpha, InputArray src2, double beta, double gamma, OutputArray dst, int dtype=-1)"
ml,Calculates the weighted sum of two arrays.
ml,void
ml,"cv::batchDistance (InputArray src1, InputArray src2, OutputArray dist, int dtype, OutputArray nidx, int normType=NORM_L2, int K=0, InputArray mask=noArray(), int update=0, bool crosscheck=false)"
ml,naive nearest neighbor finder
ml,void
ml,"cv::bitwise_and (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())"
ml,computes bitwise conjunction of the two arrays (dst = src1 & src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.
ml,void
ml,"cv::bitwise_not (InputArray src, OutputArray dst, InputArray mask=noArray())"
ml,Inverts every bit of an array.
ml,void
ml,"cv::bitwise_or (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())"
ml,Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar.
ml,void
ml,"cv::bitwise_xor (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())"
ml,"Calculates the per-element bit-wise ""exclusive or"" operation on two arrays or an array and a scalar."
ml,int
ml,"cv::borderInterpolate (int p, int len, int borderType)"
ml,Computes the source location of an extrapolated pixel.
ml,void
ml,"cv::broadcast (InputArray src, InputArray shape, OutputArray dst)"
ml,Broadcast the given Mat to the given shape.
ml,void
ml,"cv::calcCovarMatrix (const Mat *samples, int nsamples, Mat &covar, Mat &mean, int flags, int ctype=CV_64F)"
ml,Calculates the covariance matrix of a set of vectors.
ml,void
ml,"cv::calcCovarMatrix (InputArray samples, OutputArray covar, InputOutputArray mean, int flags, int ctype=CV_64F)"
ml,void
ml,"cv::cartToPolar (InputArray x, InputArray y, OutputArray magnitude, OutputArray angle, bool angleInDegrees=false)"
ml,Calculates the magnitude and angle of 2D vectors.
ml,bool
ml,"cv::checkRange (InputArray a, bool quiet=true, Point *pos=0, double minVal=-DBL_MAX, double maxVal=DBL_MAX)"
ml,Checks every element of an input array for invalid values.
ml,void
ml,"cv::compare (InputArray src1, InputArray src2, OutputArray dst, int cmpop)"
ml,Performs the per-element comparison of two arrays or an array and scalar value.
ml,void
ml,"cv::completeSymm (InputOutputArray m, bool lowerToUpper=false)"
ml,Copies the lower or the upper half of a square matrix to its another half.
ml,void
ml,"cv::convertFp16 (InputArray src, OutputArray dst)"
ml,Converts an array to half precision floating number.
ml,void
ml,"cv::convertScaleAbs (InputArray src, OutputArray dst, double alpha=1, double beta=0)"
ml,"Scales, calculates absolute values, and converts the result to 8-bit."
ml,void
ml,"cv::copyMakeBorder (InputArray src, OutputArray dst, int top, int bottom, int left, int right, int borderType, const Scalar &value=Scalar())"
ml,Forms a border around an image.
ml,void
ml,"cv::copyTo (InputArray src, OutputArray dst, InputArray mask)"
ml,"This is an overloaded member function, provided for convenience (python) Copies the matrix to another one. When the operation mask is specified, if the Mat::create call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data."
ml,int
ml,cv::countNonZero (InputArray src)
ml,Counts non-zero array elements.
ml,void
ml,"cv::dct (InputArray src, OutputArray dst, int flags=0)"
ml,Performs a forward or inverse discrete Cosine transform of 1D or 2D array.
ml,double
ml,cv::determinant (InputArray mtx)
ml,Returns the determinant of a square floating-point matrix.
ml,void
ml,"cv::dft (InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)"
ml,Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.
ml,void
ml,"cv::divide (double scale, InputArray src2, OutputArray dst, int dtype=-1)"
ml,void
ml,"cv::divide (InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1)"
ml,Performs per-element division of two arrays or a scalar by an array.
ml,bool
ml,"cv::eigen (InputArray src, OutputArray eigenvalues, OutputArray eigenvectors=noArray())"
ml,Calculates eigenvalues and eigenvectors of a symmetric matrix.
ml,void
ml,"cv::eigenNonSymmetric (InputArray src, OutputArray eigenvalues, OutputArray eigenvectors)"
ml,Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).
ml,void
ml,"cv::exp (InputArray src, OutputArray dst)"
ml,Calculates the exponent of every array element.
ml,void
ml,"cv::extractChannel (InputArray src, OutputArray dst, int coi)"
ml,Extracts a single channel from src (coi is 0-based index)
ml,void
ml,"cv::findNonZero (InputArray src, OutputArray idx)"
ml,Returns the list of locations of non-zero pixels.
ml,void
ml,"cv::flip (InputArray src, OutputArray dst, int flipCode)"
ml,"Flips a 2D array around vertical, horizontal, or both axes."
ml,void
ml,"cv::flipND (InputArray src, OutputArray dst, int axis)"
ml,Flips a n-dimensional at given axis.
ml,void
ml,"cv::gemm (InputArray src1, InputArray src2, double alpha, InputArray src3, double beta, OutputArray dst, int flags=0)"
ml,Performs generalized matrix multiplication.
ml,int
ml,cv::getOptimalDFTSize (int vecsize)
ml,Returns the optimal DFT size for a given vector size.
ml,bool
ml,cv::hasNonZero (InputArray src)
ml,Checks for the presence of at least one non-zero array element.
ml,void
ml,"cv::hconcat (const Mat *src, size_t nsrc, OutputArray dst)"
ml,Applies horizontal concatenation to given matrices.
ml,void
ml,"cv::hconcat (InputArray src1, InputArray src2, OutputArray dst)"
ml,void
ml,"cv::hconcat (InputArrayOfArrays src, OutputArray dst)"
ml,void
ml,"cv::idct (InputArray src, OutputArray dst, int flags=0)"
ml,Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.
ml,void
ml,"cv::idft (InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)"
ml,Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.
ml,void
ml,"cv::inRange (InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)"
ml,Checks if array elements lie between the elements of two other arrays.
ml,void
ml,"cv::insertChannel (InputArray src, InputOutputArray dst, int coi)"
ml,Inserts a single channel to dst (coi is 0-based index)
ml,double
ml,"cv::invert (InputArray src, OutputArray dst, int flags=DECOMP_LU)"
ml,Finds the inverse or pseudo-inverse of a matrix.
ml,void
ml,"cv::log (InputArray src, OutputArray dst)"
ml,Calculates the natural logarithm of every array element.
ml,void
ml,"cv::LUT (InputArray src, InputArray lut, OutputArray dst)"
ml,Performs a look-up table transform of an array.
ml,void
ml,"cv::magnitude (InputArray x, InputArray y, OutputArray magnitude)"
ml,Calculates the magnitude of 2D vectors.
ml,double
ml,"cv::Mahalanobis (InputArray v1, InputArray v2, InputArray icovar)"
ml,Calculates the Mahalanobis distance between two vectors.
ml,void
ml,"cv::max (const Mat &src1, const Mat &src2, Mat &dst)"
ml,void
ml,"cv::max (const UMat &src1, const UMat &src2, UMat &dst)"
ml,void
ml,"cv::max (InputArray src1, InputArray src2, OutputArray dst)"
ml,Calculates per-element maximum of two arrays or an array and a scalar.
ml,Scalar
ml,"cv::mean (InputArray src, InputArray mask=noArray())"
ml,Calculates an average (mean) of array elements.
ml,void
ml,"cv::meanStdDev (InputArray src, OutputArray mean, OutputArray stddev, InputArray mask=noArray())"
ml,void
ml,"cv::merge (const Mat *mv, size_t count, OutputArray dst)"
ml,Creates one multi-channel array out of several single-channel ones.
ml,void
ml,"cv::merge (InputArrayOfArrays mv, OutputArray dst)"
ml,void
ml,"cv::min (const Mat &src1, const Mat &src2, Mat &dst)"
ml,void
ml,"cv::min (const UMat &src1, const UMat &src2, UMat &dst)"
ml,void
ml,"cv::min (InputArray src1, InputArray src2, OutputArray dst)"
ml,Calculates per-element minimum of two arrays or an array and a scalar.
ml,void
ml,"cv::minMaxIdx (InputArray src, double *minVal, double *maxVal=0, int *minIdx=0, int *maxIdx=0, InputArray mask=noArray())"
ml,Finds the global minimum and maximum in an array.
ml,void
ml,"cv::minMaxLoc (const SparseMat &a, double *minVal, double *maxVal, int *minIdx=0, int *maxIdx=0)"
ml,void
ml,"cv::minMaxLoc (InputArray src, double *minVal, double *maxVal=0, Point *minLoc=0, Point *maxLoc=0, InputArray mask=noArray())"
ml,Finds the global minimum and maximum in an array.
ml,void
ml,"cv::mixChannels (const Mat *src, size_t nsrcs, Mat *dst, size_t ndsts, const int *fromTo, size_t npairs)"
ml,Copies specified channels from input arrays to the specified channels of output arrays.
ml,void
ml,"cv::mixChannels (InputArrayOfArrays src, InputOutputArrayOfArrays dst, const int *fromTo, size_t npairs)"
ml,void
ml,"cv::mixChannels (InputArrayOfArrays src, InputOutputArrayOfArrays dst, const std::vector< int > &fromTo)"
ml,void
ml,"cv::mulSpectrums (InputArray a, InputArray b, OutputArray c, int flags, bool conjB=false)"
ml,Performs the per-element multiplication of two Fourier spectrums.
ml,void
ml,"cv::multiply (InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1)"
ml,Calculates the per-element scaled product of two arrays.
ml,void
ml,"cv::mulTransposed (InputArray src, OutputArray dst, bool aTa, InputArray delta=noArray(), double scale=1, int dtype=-1)"
ml,Calculates the product of a matrix and its transposition.
ml,double
ml,"cv::norm (const SparseMat &src, int normType)"
ml,double
ml,"cv::norm (InputArray src1, InputArray src2, int normType=NORM_L2, InputArray mask=noArray())"
ml,Calculates an absolute difference norm or a relative difference norm.
ml,double
ml,"cv::norm (InputArray src1, int normType=NORM_L2, InputArray mask=noArray())"
ml,Calculates the absolute norm of an array.
ml,void
ml,"cv::normalize (const SparseMat &src, SparseMat &dst, double alpha, int normType)"
ml,void
ml,"cv::normalize (InputArray src, InputOutputArray dst, double alpha=1, double beta=0, int norm_type=NORM_L2, int dtype=-1, InputArray mask=noArray())"
ml,Normalizes the norm or value range of an array.
ml,void
ml,"cv::patchNaNs (InputOutputArray a, double val=0)"
ml,Replaces NaNs by given number.
ml,void
ml,"cv::PCABackProject (InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)"
ml,void
ml,"cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, double retainedVariance)"
ml,void
ml,"cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, int maxComponents=0)"
ml,void
ml,"cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, OutputArray eigenvalues, double retainedVariance)"
ml,void
ml,"cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, OutputArray eigenvalues, int maxComponents=0)"
ml,void
ml,"cv::PCAProject (InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)"
ml,void
ml,"cv::perspectiveTransform (InputArray src, OutputArray dst, InputArray m)"
ml,Performs the perspective matrix transformation of vectors.
ml,void
ml,"cv::phase (InputArray x, InputArray y, OutputArray angle, bool angleInDegrees=false)"
ml,Calculates the rotation angle of 2D vectors.
ml,void
ml,"cv::polarToCart (InputArray magnitude, InputArray angle, OutputArray x, OutputArray y, bool angleInDegrees=false)"
ml,Calculates x and y coordinates of 2D vectors from their magnitude and angle.
ml,void
ml,"cv::pow (InputArray src, double power, OutputArray dst)"
ml,Raises every array element to a power.
ml,double
ml,"cv::PSNR (InputArray src1, InputArray src2, double R=255.)"
ml,Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.
ml,void
ml,"cv::randn (InputOutputArray dst, InputArray mean, InputArray stddev)"
ml,Fills the array with normally distributed random numbers.
ml,void
ml,"cv::randShuffle (InputOutputArray dst, double iterFactor=1., RNG *rng=0)"
ml,Shuffles the array elements randomly.
ml,void
ml,"cv::randu (InputOutputArray dst, InputArray low, InputArray high)"
ml,Generates a single uniformly-distributed random number or an array of random numbers.
ml,void
ml,"cv::reduce (InputArray src, OutputArray dst, int dim, int rtype, int dtype=-1)"
ml,Reduces a matrix to a vector.
ml,void
ml,"cv::reduceArgMax (InputArray src, OutputArray dst, int axis, bool lastIndex=false)"
ml,Finds indices of max elements along provided axis.
ml,void
ml,"cv::reduceArgMin (InputArray src, OutputArray dst, int axis, bool lastIndex=false)"
ml,Finds indices of min elements along provided axis.
ml,Mat
ml,"cv::repeat (const Mat &src, int ny, int nx)"
ml,void
ml,"cv::repeat (InputArray src, int ny, int nx, OutputArray dst)"
ml,Fills the output array with repeated copies of the input array.
ml,void
ml,"cv::rotate (InputArray src, OutputArray dst, int rotateCode)"
ml,Rotates a 2D array in multiples of 90 degrees. The function cv::rotate rotates the array in one of three different ways: Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE). Rotate by 180 degrees clockwise (rotateCode = ROTATE_180). Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).
ml,void
ml,"cv::scaleAdd (InputArray src1, double alpha, InputArray src2, OutputArray dst)"
ml,Calculates the sum of a scaled array and another array.
ml,void
ml,"cv::setIdentity (InputOutputArray mtx, const Scalar &s=Scalar(1))"
ml,Initializes a scaled identity matrix.
ml,void
ml,cv::setRNGSeed (int seed)
ml,Sets state of default random number generator.
ml,bool
ml,"cv::solve (InputArray src1, InputArray src2, OutputArray dst, int flags=DECOMP_LU)"
ml,Solves one or more linear systems or least-squares problems.
ml,int
ml,"cv::solveCubic (InputArray coeffs, OutputArray roots)"
ml,Finds the real roots of a cubic equation.
ml,double
ml,"cv::solvePoly (InputArray coeffs, OutputArray roots, int maxIters=300)"
ml,Finds the real or complex roots of a polynomial equation.
ml,void
ml,"cv::sort (InputArray src, OutputArray dst, int flags)"
ml,Sorts each row or each column of a matrix.
ml,void
ml,"cv::sortIdx (InputArray src, OutputArray dst, int flags)"
ml,Sorts each row or each column of a matrix.
ml,void
ml,"cv::split (const Mat &src, Mat *mvbegin)"
ml,Divides a multi-channel array into several single-channel arrays.
ml,void
ml,"cv::split (InputArray m, OutputArrayOfArrays mv)"
ml,void
ml,"cv::sqrt (InputArray src, OutputArray dst)"
ml,Calculates a square root of array elements.
ml,void
ml,"cv::subtract (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray(), int dtype=-1)"
ml,Calculates the per-element difference between two arrays or array and a scalar.
ml,Scalar
ml,cv::sum (InputArray src)
ml,Calculates the sum of array elements.
ml,void
ml,"cv::SVBackSubst (InputArray w, InputArray u, InputArray vt, InputArray rhs, OutputArray dst)"
ml,void
ml,"cv::SVDecomp (InputArray src, OutputArray w, OutputArray u, OutputArray vt, int flags=0)"
ml,RNG &
ml,cv::theRNG ()
ml,Returns the default random number generator.
ml,Scalar
ml,cv::trace (InputArray mtx)
ml,Returns the trace of a matrix.
ml,void
ml,"cv::transform (InputArray src, OutputArray dst, InputArray m)"
ml,Performs the matrix transformation of every array element.
ml,void
ml,"cv::transpose (InputArray src, OutputArray dst)"
ml,Transposes a matrix.
ml,void
ml,"cv::transposeND (InputArray src, const std::vector< int > &order, OutputArray dst)"
ml,Transpose for n-dimensional matrices.
ml,void
ml,"cv::vconcat (const Mat *src, size_t nsrc, OutputArray dst)"
ml,Applies vertical concatenation to given matrices.
ml,void
ml,"cv::vconcat (InputArray src1, InputArray src2, OutputArray dst)"
ml,void
ml,"cv::vconcat (InputArrayOfArrays src, OutputArray dst)"
ml,Functions
ml,void
ml,"cv::ml::createConcentricSpheresTestSet (int nsamples, int nfeatures, int nclasses, OutputArray samples, OutputArray responses)"
ml,Creates test set.
ml,void
ml,"cv::ml::randMVNormal (InputArray mean, InputArray cov, int nsamples, OutputArray samples)"
ml,Generates sample from multivariate normal distribution.
ml,template<class SimulatedAnnealingSolverSystem >
ml,int
ml,"cv::ml::simulatedAnnealingSolver (SimulatedAnnealingSolverSystem &solverSystem, double initialTemperature, double finalTemperature, double coolingRatio, size_t iterationsPerStep, double *lastTemperature=NULL, cv::RNG &rngEnergy=cv::theRNG())"
ml,The class implements simulated annealing for optimization.
ml,Bayes classifier for normally distributed data.
ml,Boosted tree classifier derived from DTrees.
ml,The structure represents the logarithmic grid range of statmodel parameters.
ml,"It is used for optimizing statmodel accuracy by varying model parameters, the accuracy estimate being computed by cross-validation."
ml,Implements Logistic Regression classifier.
ml,The class represents a single decision tree or a collection of decision trees.
ml,"The current public interface of the class allows user to train only a single decision tree, however the class is capable of storing multiple decision trees and using them for prediction (by summing responses or using a voting schemes), and the derived from DTrees classes (such as RTrees and Boost) use this capability to implement decision tree ensembles."
ml,Base class for statistical models in OpenCV ML.
ml,Class encapsulating training data.
ml,"Please note that the class only specifies the interface of training data, but not implementation. All the statistical model classes in ml module accepts Ptr<TrainData> as parameter. In other words, you can create your own class derived from TrainData and pass smart pointer to the instance of this class into StatModel::train."
ml,Namespaces
ml,namespace
ml,cv::traits
ml,Functions
ml,"template<typename _Tp , int m>"
ml,static double
ml,"cv::determinant (const Matx< _Tp, m, m > &a)"
ml,"template<typename _Tp , typename ... A1>"
ml,static Ptr< _Tp >
ml,cv::makePtr (const A1 &... a1)
ml,InputOutputArray
ml,cv::noArray ()
ml,"template<typename _Tp , int m, int n>"
ml,static double
ml,"cv::norm (const Matx< _Tp, m, n > &M)"
ml,"template<typename _Tp , int m, int n>"
ml,static double
ml,"cv::norm (const Matx< _Tp, m, n > &M, int normType)"
ml,"template<typename _Tp , int cn>"
ml,"Vec< _Tp, cn >"
ml,"cv::normalize (const Vec< _Tp, cn > &v)"
ml,"template<typename _Tp , int m, int n>"
ml,static bool
ml,"cv::operator!= (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)"
ml,"template<typename _Tp , int m, int n, int l>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (const Matx< _Tp, m, l > &a, const Matx< _Tp, l, n > &b)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Vec< _Tp, m >"
ml,"cv::operator* (const Matx< _Tp, m, n > &a, const Vec< _Tp, n > &b)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (const Matx< _Tp, m, n > &a, double alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (const Matx< _Tp, m, n > &a, float alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (const Matx< _Tp, m, n > &a, int alpha)"
ml,template<typename _Tp >
ml,"Vec< _Tp, 4 >"
ml,"cv::operator* (const Vec< _Tp, 4 > &v1, const Vec< _Tp, 4 > &v2)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator* (const Vec< _Tp, cn > &a, double alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator* (const Vec< _Tp, cn > &a, float alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator* (const Vec< _Tp, cn > &a, int alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (double alpha, const Matx< _Tp, m, n > &a)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator* (double alpha, const Vec< _Tp, cn > &a)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (float alpha, const Matx< _Tp, m, n > &a)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator* (float alpha, const Vec< _Tp, cn > &a)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator* (int alpha, const Matx< _Tp, m, n > &a)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator* (int alpha, const Vec< _Tp, cn > &a)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n > &"
ml,"cv::operator*= (Matx< _Tp, m, n > &a, double alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n > &"
ml,"cv::operator*= (Matx< _Tp, m, n > &a, float alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n > &"
ml,"cv::operator*= (Matx< _Tp, m, n > &a, int alpha)"
ml,template<typename _Tp >
ml,"Vec< _Tp, 4 > &"
ml,"cv::operator*= (Vec< _Tp, 4 > &v1, const Vec< _Tp, 4 > &v2)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn > &"
ml,"cv::operator*= (Vec< _Tp, cn > &a, double alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn > &"
ml,"cv::operator*= (Vec< _Tp, cn > &a, float alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn > &"
ml,"cv::operator*= (Vec< _Tp, cn > &a, int alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator+ (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator+ (const Vec< _Tp, cn > &a, const Vec< _Tp, cn > &b)"
ml,"template<typename _Tp1 , typename _Tp2 , int m, int n>"
ml,"static Matx< _Tp1, m, n > &"
ml,"cv::operator+= (Matx< _Tp1, m, n > &a, const Matx< _Tp2, m, n > &b)"
ml,"template<typename _Tp1 , typename _Tp2 , int cn>"
ml,"static Vec< _Tp1, cn > &"
ml,"cv::operator+= (Vec< _Tp1, cn > &a, const Vec< _Tp2, cn > &b)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator- (const Matx< _Tp, m, n > &a)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator- (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator- (const Vec< _Tp, cn > &a)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator- (const Vec< _Tp, cn > &a, const Vec< _Tp, cn > &b)"
ml,"template<typename _Tp1 , typename _Tp2 , int m, int n>"
ml,"static Matx< _Tp1, m, n > &"
ml,"cv::operator-= (Matx< _Tp1, m, n > &a, const Matx< _Tp2, m, n > &b)"
ml,"template<typename _Tp1 , typename _Tp2 , int cn>"
ml,"static Vec< _Tp1, cn > &"
ml,"cv::operator-= (Vec< _Tp1, cn > &a, const Vec< _Tp2, cn > &b)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator/ (const Matx< _Tp, m, n > &a, double alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n >"
ml,"cv::operator/ (const Matx< _Tp, m, n > &a, float alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator/ (const Vec< _Tp, cn > &a, double alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator/ (const Vec< _Tp, cn > &a, float alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn >"
ml,"cv::operator/ (const Vec< _Tp, cn > &a, int alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n > &"
ml,"cv::operator/= (Matx< _Tp, m, n > &a, double alpha)"
ml,"template<typename _Tp , int m, int n>"
ml,"static Matx< _Tp, m, n > &"
ml,"cv::operator/= (Matx< _Tp, m, n > &a, float alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn > &"
ml,"cv::operator/= (Vec< _Tp, cn > &a, double alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn > &"
ml,"cv::operator/= (Vec< _Tp, cn > &a, float alpha)"
ml,"template<typename _Tp , int cn>"
ml,"static Vec< _Tp, cn > &"
ml,"cv::operator/= (Vec< _Tp, cn > &a, int alpha)"
ml,static String &
ml,"cv::operator<< (String &out, const Mat &mtx)"
ml,static String &
ml,"cv::operator<< (String &out, Ptr< Formatted > fmtd)"
ml,"template<typename _Tp , int m, int n>"
ml,static bool
ml,"cv::operator== (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)"
ml,template<typename _Tp >
ml,static _InputArray
ml,cv::rawIn (_Tp &v)
ml,template<typename _Tp >
ml,static _InputOutputArray
ml,cv::rawInOut (_Tp &v)
ml,template<typename _Tp >
ml,static _OutputArray
ml,cv::rawOut (_Tp &v)
ml,static std::string
ml,cv::toLowerCase (const std::string &str)
ml,static std::string
ml,cv::toUpperCase (const std::string &str)
ml,"template<typename _Tp , int m, int n>"
ml,static double
ml,"cv::trace (const Matx< _Tp, m, n > &a)"
ml,This class declares example interface for system state used in simulated annealing optimization algorithm.
ml,The class implements K-Nearest Neighbors model.
ml,"The Machine Learning Library (MLL) is a set of classes and functions for statistical classification, regression, and clustering of data."
ml,"Most of the classification and regression algorithms are implemented as C++ classes. As the algorithms have different sets of features (like an ability to handle missing measurements or categorical input variables), there is a little common ground between the classes. This common ground is defined by the class cv::ml::StatModel that all the other ML classes are derived from."
ml,See detailed overview here: Machine Learning Overview.
ml,Classes
ml,class
ml,cv::ml::ANN_MLP
ml,Artificial Neural Networks - Multi-Layer Perceptrons. More...
ml,class
ml,cv::ml::Boost
ml,Boosted tree classifier derived from DTrees. More...
ml,class
ml,cv::ml::DTrees
ml,The class represents a single decision tree or a collection of decision trees. More...
ml,class
ml,cv::ml::EM
ml,The class implements the Expectation Maximization algorithm. More...
ml,class
ml,cv::ml::KNearest
ml,The class implements K-Nearest Neighbors model. More...
ml,class
ml,cv::ml::LogisticRegression
ml,Implements Logistic Regression classifier. More...
ml,class
ml,cv::ml::NormalBayesClassifier
ml,Bayes classifier for normally distributed data. More...
ml,class
ml,cv::ml::ParamGrid
ml,The structure represents the logarithmic grid range of statmodel parameters. More...
ml,class
ml,cv::ml::RTrees
ml,The class implements the random forest predictor. More...
ml,struct
ml,cv::ml::SimulatedAnnealingSolverSystem
ml,This class declares example interface for system state used in simulated annealing optimization algorithm. More...
ml,class
ml,cv::ml::StatModel
ml,Base class for statistical models in OpenCV ML. More...
ml,class
ml,cv::ml::SVM
ml,Support Vector Machines. More...
ml,class
ml,cv::ml::SVMSGD
ml,Stochastic Gradient Descent SVM classifier. More...
ml,class
ml,cv::ml::TrainData
ml,Class encapsulating training data. More...
ml,Functions
ml,void
ml,"cv::ml::createConcentricSpheresTestSet (int nsamples, int nfeatures, int nclasses, OutputArray samples, OutputArray responses)"
ml,Creates test set.
ml,void
ml,"cv::ml::randMVNormal (InputArray mean, InputArray cov, int nsamples, OutputArray samples)"
ml,Generates sample from multivariate normal distribution.
ml,template<class SimulatedAnnealingSolverSystem >
ml,int
ml,"cv::ml::simulatedAnnealingSolver (SimulatedAnnealingSolverSystem &solverSystem, double initialTemperature, double finalTemperature, double coolingRatio, size_t iterationsPerStep, double *lastTemperature=NULL, cv::RNG &rngEnergy=cv::theRNG())"
ml,The class implements simulated annealing for optimization.
ml,Stochastic Gradient Descent SVM classifier.
ml,"SVMSGD provides a fast and easy-to-use implementation of the SVM classifier using the Stochastic Gradient Descent approach, as presented in [35]."
ml,The classifier has following parameters:
ml,"model type,"
ml,"margin type,"
ml,"margin regularization ( \(\lambda\)),"
ml,"initial step size ( \(\gamma_0\)),"
ml,"step decreasing power ( \(c\)),"
ml,and termination criteria.
ml,The model type may have one of the following values: SGD and ASGD.
ml,"SGD is the classic version of SVMSGD classifier: every next step is calculated by the formula \[w_{t+1} = w_t - \gamma(t) \frac{dQ_i}{dw} |_{w = w_t}\] where \(w_t\) is the weights vector for decision function at step \(t\), \(\gamma(t)\) is the step size of model parameters at the iteration \(t\), it is decreased on each step by the formula \(\gamma(t) = \gamma_0 (1 + \lambda \gamma_0 t) ^ {-c}\) \(Q_i\) is the target functional from SVM task for sample with number \(i\), this sample is chosen stochastically on each step of the algorithm."
ml,"\(w_t\) is the weights vector for decision function at step \(t\),"
ml,"\(\gamma(t)\) is the step size of model parameters at the iteration \(t\), it is decreased on each step by the formula \(\gamma(t) = \gamma_0 (1 + \lambda \gamma_0 t) ^ {-c}\)"
ml,"\(Q_i\) is the target functional from SVM task for sample with number \(i\), this sample is chosen stochastically on each step of the algorithm."
ml,ASGD is Average Stochastic Gradient Descent SVM Classifier. ASGD classifier averages weights vector on each step of algorithm by the formula \(\widehat{w}_{t+1} = \frac{t}{1+t}\widehat{w}_{t} + \frac{1}{1+t}w_{t+1}\)
ml,\[w_{t+1} = w_t - \gamma(t) \frac{dQ_i}{dw} |_{w = w_t}\]
ml,"\(w_t\) is the weights vector for decision function at step \(t\),"
ml,"\(\gamma(t)\) is the step size of model parameters at the iteration \(t\), it is decreased on each step by the formula \(\gamma(t) = \gamma_0 (1 + \lambda \gamma_0 t) ^ {-c}\)"
ml,"\(Q_i\) is the target functional from SVM task for sample with number \(i\), this sample is chosen stochastically on each step of the algorithm."
ml,The recommended model type is ASGD (following [35]).
ml,The margin type may have one of the following values: SOFT_MARGIN or HARD_MARGIN.
ml,"You should use HARD_MARGIN type, if you have linearly separable sets."
ml,"You should use SOFT_MARGIN type, if you have non-linearly separable sets or sets with outliers."
ml,"In the general case (if you know nothing about linear separability of your sets), use SOFT_MARGIN."
ml,The other parameters may be described as follows:
ml,"Margin regularization parameter is responsible for weights decreasing at each step and for the strength of restrictions on outliers (the less the parameter, the less probability that an outlier will be ignored). Recommended value for SGD model is 0.0001, for ASGD model is 0.00001."
ml,Initial step size parameter is the initial value for the step size \(\gamma(t)\). You will have to find the best initial step for your problem.
ml,"Step decreasing power is the power parameter for \(\gamma(t)\) decreasing by the formula, mentioned above. Recommended value for SGD model is 1, for ASGD model is 0.75."
ml,"Termination criteria can be TermCriteria::COUNT, TermCriteria::EPS or TermCriteria::COUNT + TermCriteria::EPS. You will have to find the best termination criteria for your problem."
ml,"Note that the parameters margin regularization, initial step size, and step decreasing power should be positive."
ml,To use SVMSGD algorithm do as follows:
ml,"first, create the SVMSGD object. The algorithm will set optimal parameters by default, but you can set your own parameters via functions setSvmsgdType(), setMarginType(), setMarginRegularization(), setInitialStepSize(), and setStepDecreasingPower()."
ml,then the SVM model can be trained using the train features and the correspondent labels by the method train().
ml,"after that, the label of a new feature vector can be predicted using the method predict()."
objdetect,Classes
objdetect,struct
objdetect,cv::DetectionROI
objdetect,struct for detection region of interest (ROI) More...
objdetect,struct
objdetect,cv::HOGDescriptor
objdetect,Implementation of HOG (Histogram of Oriented Gradients) descriptor and object detector. More...
objdetect,Classes
objdetect,class
objdetect,cv::barcode::BarcodeDetector
objdetect,Check the corresponding tutorial for more details.
objdetect,Classes
objdetect,class
objdetect,cv::FaceDetectorYN
objdetect,DNN-based face detector. More...
objdetect,class
objdetect,cv::FaceRecognizerSF
objdetect,DNN-based face recognizer. More...
objdetect,The object detector described below has been initially proposed by Paul Viola [285] and improved by Rainer Lienhart [168] .
objdetect,"First, a classifier (namely a cascade of boosted classifiers working with haar-like features) is trained with a few hundred sample views of a particular object (i.e., a face or a car), called positive examples, that are scaled to the same size (say, 20x20), and negative examples - arbitrary images of the same size."
objdetect,"After a classifier is trained, it can be applied to a region of interest (of the same size as used during the training) in an input image. The classifier outputs a ""1"" if the region is likely to show the object (i.e., face/car), and ""0"" otherwise. To search for the object in the whole image one can move the search window across the image and check every location using the classifier. The classifier is designed so that it can be easily ""resized"" in order to be able to find the objects of interest at different sizes, which is more efficient than resizing the image itself. So, to find an object of an unknown size in the image the scan procedure should be done several times at different scales."
objdetect,"The word ""cascade"" in the classifier name means that the resultant classifier consists of several simpler classifiers (stages) that are applied subsequently to a region of interest until at some stage the candidate is rejected or all the stages are passed. The word ""boosted"" means that the classifiers at every stage of the cascade are complex themselves and they are built out of basic classifiers using one of four different boosting techniques (weighted voting). Currently Discrete Adaboost, Real Adaboost, Gentle Adaboost and Logitboost are supported. The basic classifiers are decision-tree classifiers with at least 2 leaves. Haar-like features are the input to the basic classifiers, and are calculated as described below. The current algorithm uses the following Haar-like features:"
objdetect,"The feature used in a particular classifier is specified by its shape (1a, 2b etc.), position within the region of interest and the scale (this scale is not the same as the scale used at the detection stage, though these two scales are multiplied). For example, in the case of the third line feature (2c) the response is calculated as the difference between the sum of image pixels under the rectangle covering the whole feature (including the two white stripes and the black stripe in the middle) and the sum of the image pixels under the black stripe multiplied by 3 in order to compensate for the differences in the size of areas. The sums of pixel values over a rectangular regions are calculated rapidly using integral images (see below and the integral description)."
objdetect,Check the corresponding tutorial for more details.
objdetect,The following reference is for the detection part only. There is a separate application called opencv_traincascade that can train a cascade of boosted classifiers from a set of samples.
objdetect,Classes
objdetect,class
objdetect,cv::BaseCascadeClassifier
objdetect,class
objdetect,cv::CascadeClassifier
objdetect,Cascade classifier class for object detection. More...
objdetect,struct
objdetect,cv::DefaultDeleter< CvHaarClassifierCascade >
objdetect,class
objdetect,cv::DetectionBasedTracker
objdetect,Functions
objdetect,Ptr< BaseCascadeClassifier::MaskGenerator >
objdetect,cv::createFaceDetectionMaskGenerator ()
objdetect,"ArUco Marker Detection Square fiducial markers (also known as Augmented Reality Markers) are useful for easy, fast and robust camera pose estimation."
objdetect,"The main functionality of ArucoDetector class is detection of markers in an image. If the markers are grouped as a board, then you can try to recover the missing markers with ArucoDetector::refineDetectedMarkers(). ArUco markers can also be used for advanced chessboard corner finding. To do this, group the markers in the CharucoBoard and find the corners of the chessboard with the CharucoDetector::detectBoard()."
objdetect,The implementation is based on the ArUco Library by R. Muoz-Salinas and S. Garrido-Jurado [99].
objdetect,Markers can also be detected based on the AprilTag 2 [292] fiducial detection method.
objdetect,Classes
objdetect,class
objdetect,cv::aruco::ArucoDetector
objdetect,The main functionality of ArucoDetector class is detection of markers in an image with detectMarkers() method. More...
objdetect,class
objdetect,cv::aruco::Board
objdetect,Board of ArUco markers. More...
objdetect,class
objdetect,cv::aruco::CharucoBoard
objdetect,ChArUco board is a planar chessboard where the markers are placed inside the white squares of a chessboard. More...
objdetect,class
objdetect,cv::aruco::CharucoDetector
objdetect,struct
objdetect,cv::aruco::CharucoParameters
objdetect,struct
objdetect,cv::aruco::DetectorParameters
objdetect,struct DetectorParameters is used by ArucoDetector More...
objdetect,class
objdetect,cv::aruco::Dictionary
objdetect,Dictionary is a set of unique ArUco markers of the same size. More...
objdetect,class
objdetect,cv::aruco::GridBoard
objdetect,Planar board with grid arrangement of markers. More...
objdetect,struct
objdetect,cv::aruco::RefineParameters
objdetect,struct RefineParameters is used by ArucoDetector More...
objdetect,Functions
objdetect,void
objdetect,"cv::aruco::drawDetectedCornersCharuco (InputOutputArray image, InputArray charucoCorners, InputArray charucoIds=noArray(), Scalar cornerColor=Scalar(255, 0, 0))"
objdetect,Draws a set of Charuco corners.
objdetect,void
objdetect,"cv::aruco::drawDetectedDiamonds (InputOutputArray image, InputArrayOfArrays diamondCorners, InputArray diamondIds=noArray(), Scalar borderColor=Scalar(0, 0, 255))"
objdetect,Draw a set of detected ChArUco Diamond markers.
objdetect,void
objdetect,"cv::aruco::drawDetectedMarkers (InputOutputArray image, InputArrayOfArrays corners, InputArray ids=noArray(), Scalar borderColor=Scalar(0, 255, 0))"
objdetect,Draw detected markers in image.
objdetect,Dictionary
objdetect,"cv::aruco::extendDictionary (int nMarkers, int markerSize, const Dictionary &baseDictionary=Dictionary(), int randomSeed=0)"
objdetect,Extend base dictionary by new nMarkers.
objdetect,void
objdetect,"cv::aruco::generateImageMarker (const Dictionary &dictionary, int id, int sidePixels, OutputArray img, int borderBits=1)"
objdetect,Generate a canonical marker image.
objdetect,Dictionary
objdetect,cv::aruco::getPredefinedDictionary (int dict)
objdetect,Returns one of the predefined dictionaries referenced by DICT_*.
objdetect,Dictionary
objdetect,cv::aruco::getPredefinedDictionary (PredefinedDictionaryType name)
objdetect,Returns one of the predefined dictionaries defined in PredefinedDictionaryType.
objdetect,Classes
objdetect,class
objdetect,cv::GraphicalCodeDetector
objdetect,class
objdetect,cv::SimilarRects
objdetect,"This class is used for grouping object candidates detected by Cascade Classifier, HOG etc. More..."
objdetect,Classes
objdetect,class
objdetect,cv::QRCodeDetector
objdetect,class
objdetect,cv::QRCodeDetectorAruco
objdetect,class
objdetect,cv::QRCodeEncoder
photo,This module includes photo processing algorithms
photo,Functions
photo,void
photo,"cv::denoise_TVL1 (const std::vector< Mat > &observations, Mat &result, double lambda=1.0, int niters=30)"
photo,"Primal-dual algorithm is an algorithm for solving special types of variational problems (that is, finding a function to minimize some functional). As the image denoising, in particular, may be seen as the variational problem, primal-dual algorithm then can be used to perform denoising and this is exactly what is implemented."
photo,void
photo,"cv::cuda::fastNlMeansDenoising (const GpuMat &src, GpuMat &dst, float h, int search_window=21, int block_size=7, Stream &stream=Stream::Null())"
photo,void
photo,"cv::fastNlMeansDenoising (InputArray src, OutputArray dst, const std::vector< float > &h, int templateWindowSize=7, int searchWindowSize=21, int normType=NORM_L2)"
photo,Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/ with several computational optimizations. Noise expected to be a gaussian white noise.
photo,void
photo,"cv::cuda::fastNlMeansDenoising (InputArray src, OutputArray dst, float h, int search_window=21, int block_size=7, Stream &stream=Stream::Null())"
photo,Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising with several computational optimizations. Noise expected to be a gaussian white noise.
photo,void
photo,"cv::fastNlMeansDenoising (InputArray src, OutputArray dst, float h=3, int templateWindowSize=7, int searchWindowSize=21)"
photo,Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/ with several computational optimizations. Noise expected to be a gaussian white noise.
photo,void
photo,"cv::cuda::fastNlMeansDenoisingColored (const GpuMat &src, GpuMat &dst, float h_luminance, float photo_render, int search_window=21, int block_size=7, Stream &stream=Stream::Null())"
photo,void
photo,"cv::fastNlMeansDenoisingColored (InputArray src, OutputArray dst, float h=3, float hColor=3, int templateWindowSize=7, int searchWindowSize=21)"
photo,Modification of fastNlMeansDenoising function for colored images.
photo,void
photo,"cv::cuda::fastNlMeansDenoisingColored (InputArray src, OutputArray dst, float h_luminance, float photo_render, int search_window=21, int block_size=7, Stream &stream=Stream::Null())"
photo,Modification of fastNlMeansDenoising function for colored images.
photo,void
photo,"cv::fastNlMeansDenoisingColoredMulti (InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h=3, float hColor=3, int templateWindowSize=7, int searchWindowSize=21)"
photo,Modification of fastNlMeansDenoisingMulti function for colored images sequences.
photo,void
photo,"cv::fastNlMeansDenoisingMulti (InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, const std::vector< float > &h, int templateWindowSize=7, int searchWindowSize=21, int normType=NORM_L2)"
photo,Modification of fastNlMeansDenoising function for images sequence where consecutive images have been captured in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces. See [44] for more details (open access here).
photo,void
photo,"cv::fastNlMeansDenoisingMulti (InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h=3, int templateWindowSize=7, int searchWindowSize=21)"
photo,Modification of fastNlMeansDenoising function for images sequence where consecutive images have been captured in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces. See [44] for more details (open access here).
photo,void
photo,"cv::cuda::nonLocalMeans (const GpuMat &src, GpuMat &dst, float h, int search_window=21, int block_size=7, int borderMode=BORDER_DEFAULT, Stream &stream=Stream::Null())"
photo,void
photo,"cv::cuda::nonLocalMeans (InputArray src, OutputArray dst, float h, int search_window=21, int block_size=7, int borderMode=BORDER_DEFAULT, Stream &stream=Stream::Null())"
photo,"Performs pure non local means denoising without any simplification, and thus it is not fast."
photo,Useful links:
photo,http://www.cse.cuhk.edu.hk/leojia/projects/color2gray/index.html
photo,Functions
photo,void
photo,"cv::decolor (InputArray src, OutputArray grayscale, OutputArray color_boost)"
photo,"Transforms a color image to a grayscale image. It is a basic tool in digital printing, stylized black-and-white photograph rendering, and in many single channel image processing applications [176] ."
photo,"This section describes high dynamic range imaging algorithms namely tonemapping, exposure alignment, camera calibration with multiple exposures and exposure fusion."
photo,Classes
photo,class
photo,cv::AlignExposures
photo,The base class for algorithms that align images of the same scene with different exposures. More...
photo,class
photo,cv::AlignMTB
photo,This algorithm converts images to median threshold bitmaps (1 for pixels brighter than median luminance and 0 otherwise) and than aligns the resulting bitmaps using bit operations. More...
photo,class
photo,cv::CalibrateCRF
photo,The base class for camera response calibration algorithms. More...
photo,class
photo,cv::CalibrateDebevec
photo,"Inverse camera response function is extracted for each brightness value by minimizing an objective function as linear system. Objective function is constructed using pixel values on the same position in all images, extra term is added to make the result smoother. More..."
photo,class
photo,cv::CalibrateRobertson
photo,Inverse camera response function is extracted for each brightness value by minimizing an objective function as linear system. This algorithm uses all image pixels. More...
photo,class
photo,cv::MergeDebevec
photo,The resulting HDR image is calculated as weighted average of the exposures considering exposure values and camera response. More...
photo,class
photo,cv::MergeExposures
photo,The base class algorithms that can merge exposure sequence to a single image. More...
photo,class
photo,cv::MergeMertens
photo,"Pixels are weighted using contrast, saturation and well-exposedness measures, than images are combined using laplacian pyramids. More..."
photo,class
photo,cv::MergeRobertson
photo,The resulting HDR image is calculated as weighted average of the exposures considering exposure values and camera response. More...
photo,class
photo,cv::Tonemap
photo,Base class for tonemapping algorithms - tools that are used to map HDR image to 8-bit range. More...
photo,class
photo,cv::TonemapDrago
photo,Adaptive logarithmic mapping is a fast global tonemapping algorithm that scales the image in logarithmic domain. More...
photo,class
photo,cv::TonemapMantiuk
photo,"This algorithm transforms image to contrast using gradients on all levels of gaussian pyramid, transforms contrast values to HVS response and scales the response. After this the image is reconstructed from new contrast values. More..."
photo,class
photo,cv::TonemapReinhard
photo,This is a global tonemapping operator that models human visual system. More...
photo,Functions
photo,Ptr< AlignMTB >
photo,"cv::createAlignMTB (int max_bits=6, int exclude_range=4, bool cut=true)"
photo,Creates AlignMTB object.
photo,Ptr< CalibrateDebevec >
photo,"cv::createCalibrateDebevec (int samples=70, float lambda=10.0f, bool random=false)"
photo,Creates CalibrateDebevec object.
photo,Ptr< CalibrateRobertson >
photo,"cv::createCalibrateRobertson (int max_iter=30, float threshold=0.01f)"
photo,Creates CalibrateRobertson object.
photo,Ptr< MergeDebevec >
photo,cv::createMergeDebevec ()
photo,Creates MergeDebevec object.
photo,Ptr< MergeMertens >
photo,"cv::createMergeMertens (float contrast_weight=1.0f, float saturation_weight=1.0f, float exposure_weight=0.0f)"
photo,Creates MergeMertens object.
photo,Ptr< MergeRobertson >
photo,cv::createMergeRobertson ()
photo,Creates MergeRobertson object.
photo,Ptr< Tonemap >
photo,cv::createTonemap (float gamma=1.0f)
photo,Creates simple linear mapper with gamma correction.
photo,Ptr< TonemapDrago >
photo,"cv::createTonemapDrago (float gamma=1.0f, float saturation=1.0f, float bias=0.85f)"
photo,Creates TonemapDrago object.
photo,Ptr< TonemapMantiuk >
photo,"cv::createTonemapMantiuk (float gamma=1.0f, float scale=0.7f, float saturation=1.0f)"
photo,Creates TonemapMantiuk object.
photo,Ptr< TonemapReinhard >
photo,"cv::createTonemapReinhard (float gamma=1.0f, float intensity=0.0f, float light_adapt=1.0f, float color_adapt=0.0f)"
photo,Creates TonemapReinhard object.
photo,the inpainting algorithm
photo,Enumerations
photo,enum
photo,"{ cv::INPAINT_NS = 0 , cv::INPAINT_TELEA = 1 }"
photo,Functions
photo,void
photo,"cv::inpaint (InputArray src, InputArray inpaintMask, OutputArray dst, double inpaintRadius, int flags)"
photo,Restores the selected region in an image using the region neighborhood.
photo,Useful links:
photo,https://www.learnopencv.com/seamless-cloning-using-opencv-python-cpp
photo,Enumerations
photo,enum
photo,"{ cv::NORMAL_CLONE = 1 , cv::MIXED_CLONE = 2 , cv::MONOCHROME_TRANSFER = 3 }"
photo,seamlessClone algorithm flags More...
photo,Functions
photo,void
photo,"cv::colorChange (InputArray src, InputArray mask, OutputArray dst, float red_mul=1.0f, float green_mul=1.0f, float blue_mul=1.0f)"
photo,"Given an original color image, two differently colored versions of this image can be mixed seamlessly."
photo,void
photo,"cv::illuminationChange (InputArray src, InputArray mask, OutputArray dst, float alpha=0.2f, float beta=0.4f)"
photo,"Applying an appropriate non-linear transformation to the gradient field inside the selection and then integrating back with a Poisson solver, modifies locally the apparent illumination of an image."
photo,void
photo,"cv::seamlessClone (InputArray src, InputArray dst, InputArray mask, Point p, OutputArray blend, int flags)"
photo,"Image editing tasks concern either global changes (color/intensity corrections, filters, deformations) or local changes concerned to a selection. Here we are interested in achieving local changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless manner. The extent of the changes ranges from slight distortions to complete replacement by novel content [215] ."
photo,void
photo,"cv::textureFlattening (InputArray src, InputArray mask, OutputArray dst, float low_threshold=30, float high_threshold=45, int kernel_size=3)"
photo,"By retaining only the gradients at edge locations, before integrating with the Poisson solver, one washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge Detector is used."
photo,Useful links:
photo,http://www.inf.ufrgs.br/~eslgastal/DomainTransform
photo,https://www.learnopencv.com/non-photorealistic-rendering-using-opencv-python-c/
photo,Enumerations
photo,enum
photo,"{ cv::RECURS_FILTER = 1 , cv::NORMCONV_FILTER = 2 }"
photo,Edge preserving filters. More...
photo,Functions
photo,void
photo,"cv::detailEnhance (InputArray src, OutputArray dst, float sigma_s=10, float sigma_r=0.15f)"
photo,This filter enhances the details of a particular image.
photo,void
photo,"cv::edgePreservingFilter (InputArray src, OutputArray dst, int flags=1, float sigma_s=60, float sigma_r=0.4f)"
photo,Filtering is the fundamental operation in image and video processing. Edge-preserving smoothing filters are used in many different applications [100] .
photo,void
photo,"cv::pencilSketch (InputArray src, OutputArray dst1, OutputArray dst2, float sigma_s=60, float sigma_r=0.07f, float shade_factor=0.02f)"
photo,Pencil-like non-photorealistic line drawing.
photo,void
photo,"cv::stylization (InputArray src, OutputArray dst, float sigma_s=60, float sigma_r=0.45f)"
photo,"Stylization aims to produce digital imagery with a wide variety of effects not focused on photorealism. Edge-aware filters are ideal for stylization, as they can abstract regions of low contrast while preserving, or enhancing, high-contrast features."
stitching,Classes
stitching,class
stitching,cv::detail::AffineWarper
stitching,Affine warper that uses rotations and translations. More...
stitching,class
stitching,cv::AffineWarper
stitching,Affine warper factory class. More...
stitching,struct
stitching,cv::detail::CompressedRectilinearPortraitProjector
stitching,class
stitching,cv::CompressedRectilinearPortraitWarper
stitching,class
stitching,cv::detail::CompressedRectilinearPortraitWarper
stitching,struct
stitching,cv::detail::CompressedRectilinearProjector
stitching,class
stitching,cv::CompressedRectilinearWarper
stitching,class
stitching,cv::detail::CompressedRectilinearWarper
stitching,struct
stitching,cv::detail::CylindricalPortraitProjector
stitching,class
stitching,cv::detail::CylindricalPortraitWarper
stitching,struct
stitching,cv::detail::CylindricalProjector
stitching,class
stitching,cv::detail::CylindricalWarper
stitching,Warper that maps an image onto the x*x + z*z = 1 cylinder. More...
stitching,class
stitching,cv::CylindricalWarper
stitching,Cylindrical warper factory class. More...
stitching,class
stitching,cv::detail::CylindricalWarperGpu
stitching,struct
stitching,cv::detail::FisheyeProjector
stitching,class
stitching,cv::detail::FisheyeWarper
stitching,class
stitching,cv::FisheyeWarper
stitching,struct
stitching,cv::detail::MercatorProjector
stitching,class
stitching,cv::detail::MercatorWarper
stitching,class
stitching,cv::MercatorWarper
stitching,struct
stitching,cv::detail::PaniniPortraitProjector
stitching,class
stitching,cv::PaniniPortraitWarper
stitching,class
stitching,cv::detail::PaniniPortraitWarper
stitching,struct
stitching,cv::detail::PaniniProjector
stitching,class
stitching,cv::PaniniWarper
stitching,class
stitching,cv::detail::PaniniWarper
stitching,struct
stitching,cv::detail::PlanePortraitProjector
stitching,class
stitching,cv::detail::PlanePortraitWarper
stitching,struct
stitching,cv::detail::PlaneProjector
stitching,class
stitching,cv::PlaneWarper
stitching,Plane warper factory class. More...
stitching,class
stitching,cv::detail::PlaneWarper
stitching,Warper that maps an image onto the z = 1 plane. More...
stitching,class
stitching,cv::detail::PlaneWarperGpu
stitching,struct
stitching,cv::detail::ProjectorBase
stitching,Base class for warping logic implementation. More...
stitching,class
stitching,cv::detail::RotationWarper
stitching,Rotation-only model image warper interface. More...
stitching,class
stitching,cv::detail::RotationWarperBase< P >
stitching,Base class for rotation-based warper using a detail::ProjectorBase_ derived class. More...
stitching,struct
stitching,cv::detail::SphericalPortraitProjector
stitching,class
stitching,cv::detail::SphericalPortraitWarper
stitching,struct
stitching,cv::detail::SphericalProjector
stitching,class
stitching,cv::detail::SphericalWarper
stitching,Warper that maps an image onto the unit sphere located at the origin. More...
stitching,class
stitching,cv::SphericalWarper
stitching,Spherical warper factory class. More...
stitching,class
stitching,cv::detail::SphericalWarperGpu
stitching,struct
stitching,cv::detail::StereographicProjector
stitching,class
stitching,cv::StereographicWarper
stitching,class
stitching,cv::detail::StereographicWarper
stitching,struct
stitching,cv::detail::TransverseMercatorProjector
stitching,class
stitching,cv::detail::TransverseMercatorWarper
stitching,class
stitching,cv::TransverseMercatorWarper
stitching,class
stitching,cv::WarperCreator
stitching,Image warper factories base class. More...
stitching,"This figure illustrates the stitching module pipeline implemented in the Stitcher class. Using that class it's possible to configure/remove some steps, i.e. adjust the stitching pipeline according to the particular needs. All building blocks from the pipeline are available in the detail namespace, one can combine and use them separately."
stitching,The implemented stitching pipeline is very similar to the one proposed in [41] .
stitching,Functions
stitching,bool
stitching,"cv::detail::calibrateRotatingCamera (const std::vector< Mat > &Hs, Mat &K)"
stitching,void
stitching,"cv::detail::estimateFocal (const std::vector< ImageFeatures > &features, const std::vector< MatchesInfo > &pairwise_matches, std::vector< double > &focals)"
stitching,Estimates focal lengths for each given camera.
stitching,void
stitching,"cv::detail::focalsFromHomography (const Mat &H, double &f0, double &f1, bool &f0_ok, bool &f1_ok)"
stitching,Tries to estimate focal lengths from the given homography under the assumption that the camera undergoes rotations around its centre only.
stitching,Classes
stitching,class
stitching,cv::detail::AffineBasedEstimator
stitching,Affine transformation based estimator. More...
stitching,class
stitching,cv::detail::BundleAdjusterAffine
stitching,Bundle adjuster that expects affine transformation represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares. More...
stitching,class
stitching,cv::detail::BundleAdjusterAffinePartial
stitching,Bundle adjuster that expects affine transformation with 4 DOF represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares. More...
stitching,class
stitching,cv::detail::BundleAdjusterBase
stitching,Base class for all camera parameters refinement methods. More...
stitching,class
stitching,cv::detail::BundleAdjusterRay
stitching,Implementation of the camera parameters refinement algorithm which minimizes sum of the distances between the rays passing through the camera center and a feature. : More...
stitching,class
stitching,cv::detail::BundleAdjusterReproj
stitching,Implementation of the camera parameters refinement algorithm which minimizes sum of the reprojection error squares. More...
stitching,class
stitching,cv::detail::Estimator
stitching,Rotation estimator base class. More...
stitching,class
stitching,cv::detail::HomographyBasedEstimator
stitching,Homography based rotation estimator. More...
stitching,class
stitching,cv::detail::NoBundleAdjuster
stitching,Stub bundle adjuster that does nothing. More...
stitching,Functions
stitching,WaveCorrectKind
stitching,cv::detail::autoDetectWaveCorrectKind (const std::vector< Mat > &rmats)
stitching,Tries to detect the wave correction kind depending on whether a panorama spans horizontally or vertically.
stitching,void
stitching,"cv::detail::findMaxSpanningTree (int num_images, const std::vector< MatchesInfo > &pairwise_matches, Graph &span_tree, std::vector< int > &centers)"
stitching,std::vector< int >
stitching,"cv::detail::leaveBiggestComponent (std::vector< ImageFeatures > &features, std::vector< MatchesInfo > &pairwise_matches, float conf_threshold)"
stitching,String
stitching,"cv::detail::matchesGraphAsString (std::vector< String > &paths, std::vector< MatchesInfo > &pairwise_matches, float conf_threshold)"
stitching,void
stitching,"cv::detail::waveCorrect (std::vector< Mat > &rmats, WaveCorrectKind kind)"
stitching,Tries to make panorama more horizontal (or vertical).
stitching,Classes
stitching,class
stitching,cv::detail::DpSeamFinder
stitching,class
stitching,cv::detail::GraphCutSeamFinder
stitching,Minimum graph cut-based seam estimator. See details in [153] . More...
stitching,class
stitching,cv::detail::GraphCutSeamFinderBase
stitching,Base class for all minimum graph-cut-based seam estimators. More...
stitching,class
stitching,cv::detail::NoSeamFinder
stitching,Stub seam estimator which does nothing. More...
stitching,class
stitching,cv::detail::PairwiseSeamFinder
stitching,Base class for all pairwise seam estimators. More...
stitching,class
stitching,cv::detail::SeamFinder
stitching,Base class for a seam estimator. More...
stitching,class
stitching,cv::detail::VoronoiSeamFinder
stitching,Voronoi diagram-based seam estimator. More...
stitching,Classes
stitching,class
stitching,cv::detail::Blender
stitching,Base class for all blenders. More...
stitching,class
stitching,cv::detail::FeatherBlender
stitching,Simple blender which mixes images at its borders. More...
stitching,class
stitching,cv::detail::MultiBandBlender
stitching,Blender which uses multi-band blending algorithm (see [45]). More...
stitching,Classes
stitching,class
stitching,cv::detail::BlocksChannelsCompensator
stitching,Exposure compensator which tries to remove exposure related artifacts by adjusting image block on each channel. More...
stitching,class
stitching,cv::detail::BlocksCompensator
stitching,Exposure compensator which tries to remove exposure related artifacts by adjusting image blocks. More...
stitching,class
stitching,cv::detail::BlocksGainCompensator
stitching,"Exposure compensator which tries to remove exposure related artifacts by adjusting image block intensities, see [279] for details. More..."
stitching,class
stitching,cv::detail::ChannelsCompensator
stitching,Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities on each channel independently. More...
stitching,class
stitching,cv::detail::ExposureCompensator
stitching,Base class for all exposure compensators. More...
stitching,class
stitching,cv::detail::GainCompensator
stitching,"Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities, see [41] and [305] for details. More..."
stitching,class
stitching,cv::detail::NoExposureCompensator
stitching,Stub exposure compensator which does nothing. More...
stitching,Classes
stitching,class
stitching,cv::detail::AffineBestOf2NearestMatcher
stitching,Features matcher similar to cv::detail::BestOf2NearestMatcher which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf. More...
stitching,class
stitching,cv::detail::BestOf2NearestMatcher
stitching,Features matcher which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf. More...
stitching,class
stitching,cv::detail::BestOf2NearestRangeMatcher
stitching,class
stitching,cv::detail::FeaturesMatcher
stitching,Feature matchers base class. More...
stitching,struct
stitching,cv::detail::ImageFeatures
stitching,Structure containing image keypoints and descriptors. More...
stitching,struct
stitching,cv::detail::MatchesInfo
stitching,Structure containing information about matches between two images. More...
video,Classes
video,class
video,cv::DenseOpticalFlow
video,class
video,cv::DISOpticalFlow
video,DIS optical flow algorithm. More...
video,class
video,cv::FarnebackOpticalFlow
video,Class computing a dense optical flow using the Gunnar Farneback's algorithm. More...
video,class
video,cv::KalmanFilter
video,Kalman filter class. More...
video,class
video,cv::SparseOpticalFlow
video,Base interface for sparse optical flow algorithms. More...
video,class
video,cv::SparsePyrLKOpticalFlow
video,Class used for calculating a sparse optical flow. More...
video,class
video,cv::Tracker
video,Base abstract class for the long-term tracker. More...
video,class
video,cv::TrackerDaSiamRPN
video,class
video,cv::TrackerGOTURN
video,the GOTURN (Generic Object Tracking Using Regression Networks) tracker More...
video,class
video,cv::TrackerMIL
video,The MIL algorithm trains a classifier in an online manner to separate the object from the background. More...
video,class
video,cv::TrackerNano
video,the Nano tracker is a super lightweight dnn-based general object tracking. More...
video,class
video,cv::TrackerVit
video,the VIT tracker is a super lightweight dnn-based general object tracking. More...
video,class
video,cv::VariationalRefinement
video,Variational optical flow refinement. More...
video,Functions
video,int
video,"cv::buildOpticalFlowPyramid (InputArray img, OutputArrayOfArrays pyramid, Size winSize, int maxLevel, bool withDerivatives=true, int pyrBorder=BORDER_REFLECT_101, int derivBorder=BORDER_CONSTANT, bool tryReuseInputImage=true)"
video,Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.
video,void
video,"cv::calcOpticalFlowFarneback (InputArray prev, InputArray next, InputOutputArray flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)"
video,Computes a dense optical flow using the Gunnar Farneback's algorithm.
video,void
video,"cv::calcOpticalFlowPyrLK (InputArray prevImg, InputArray nextImg, InputArray prevPts, InputOutputArray nextPts, OutputArray status, OutputArray err, Size winSize=Size(21, 21), int maxLevel=3, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), int flags=0, double minEigThreshold=1e-4)"
video,Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids.
video,RotatedRect
video,"cv::CamShift (InputArray probImage, Rect &window, TermCriteria criteria)"
video,"Finds an object center, size, and orientation."
video,double
video,"cv::computeECC (InputArray templateImage, InputArray inputImage, InputArray inputMask=noArray())"
video,Computes the Enhanced Correlation Coefficient value between two images [80] .
video,Mat
video,"cv::estimateRigidTransform (InputArray src, InputArray dst, bool fullAffine)"
video,Computes an optimal affine transformation between two 2D point sets.
video,double
video,"cv::findTransformECC (InputArray templateImage, InputArray inputImage, InputOutputArray warpMatrix, int motionType, TermCriteria criteria, InputArray inputMask, int gaussFiltSize)"
video,Finds the geometric transform (warp) between two images in terms of the ECC criterion [80] .
video,double
video,"cv::findTransformECC (InputArray templateImage, InputArray inputImage, InputOutputArray warpMatrix, int motionType=MOTION_AFFINE, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001), InputArray inputMask=noArray())"
video,int
video,"cv::meanShift (InputArray probImage, Rect &window, TermCriteria criteria)"
video,Finds an object on a back projection image.
video,Mat
video,cv::readOpticalFlow (const String &path)
video,Read a .flo file.
video,bool
video,"cv::writeOpticalFlow (const String &path, InputArray flow)"
video,Write a .flo to disk.
video,Classes
video,class
video,cv::BackgroundSubtractor
video,Base class for background/foreground segmentation. : More...
video,class
video,cv::BackgroundSubtractorKNN
video,K-nearest neighbours - based Background/Foreground Segmentation Algorithm. More...
video,class
video,cv::BackgroundSubtractorMOG2
video,Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More...
videoio,Enumerations
videoio,enum
videoio,"cv::VideoCaptureAPIs { cv::CAP_ANY = 0 , cv::CAP_VFW = 200 , cv::CAP_V4L = 200 , cv::CAP_V4L2 = CAP_V4L , cv::CAP_FIREWIRE = 300 , cv::CAP_FIREWARE = CAP_FIREWIRE , cv::CAP_IEEE1394 = CAP_FIREWIRE , cv::CAP_DC1394 = CAP_FIREWIRE , cv::CAP_CMU1394 = CAP_FIREWIRE , cv::CAP_QT = 500 , cv::CAP_UNICAP = 600 , cv::CAP_DSHOW = 700 , cv::CAP_PVAPI = 800 , cv::CAP_OPENNI = 900 , cv::CAP_OPENNI_ASUS = 910 , cv::CAP_ANDROID = 1000 , cv::CAP_XIAPI = 1100 , cv::CAP_AVFOUNDATION = 1200 , cv::CAP_GIGANETIX = 1300 , cv::CAP_MSMF = 1400 , cv::CAP_WINRT = 1410 , cv::CAP_INTELPERC = 1500 , cv::CAP_REALSENSE = 1500 , cv::CAP_OPENNI2 = 1600 , cv::CAP_OPENNI2_ASUS = 1610 , cv::CAP_OPENNI2_ASTRA = 1620 , cv::CAP_GPHOTO2 = 1700 , cv::CAP_GSTREAMER = 1800 , cv::CAP_FFMPEG = 1900 , cv::CAP_IMAGES = 2000 , cv::CAP_ARAVIS = 2100 , cv::CAP_OPENCV_MJPEG = 2200 , cv::CAP_INTEL_MFX = 2300 , cv::CAP_XINE = 2400 , cv::CAP_UEYE = 2500 , cv::CAP_OBSENSOR = 2600 }"
videoio,cv::VideoCapture API backends identifier. More...
videoio,enum
videoio,"cv::VideoCaptureProperties { cv::CAP_PROP_POS_MSEC =0 , cv::CAP_PROP_POS_FRAMES =1 , cv::CAP_PROP_POS_AVI_RATIO =2 , cv::CAP_PROP_FRAME_WIDTH =3 , cv::CAP_PROP_FRAME_HEIGHT =4 , cv::CAP_PROP_FPS =5 , cv::CAP_PROP_FOURCC =6 , cv::CAP_PROP_FRAME_COUNT =7 , cv::CAP_PROP_FORMAT =8 , cv::CAP_PROP_MODE =9 , cv::CAP_PROP_BRIGHTNESS =10 , cv::CAP_PROP_CONTRAST =11 , cv::CAP_PROP_SATURATION =12 , cv::CAP_PROP_HUE =13 , cv::CAP_PROP_GAIN =14 , cv::CAP_PROP_EXPOSURE =15 , cv::CAP_PROP_CONVERT_RGB =16 , cv::CAP_PROP_WHITE_BALANCE_BLUE_U =17 , cv::CAP_PROP_RECTIFICATION =18 , cv::CAP_PROP_MONOCHROME =19 , cv::CAP_PROP_SHARPNESS =20 , cv::CAP_PROP_AUTO_EXPOSURE =21 , cv::CAP_PROP_GAMMA =22 , cv::CAP_PROP_TEMPERATURE =23 , cv::CAP_PROP_TRIGGER =24 , cv::CAP_PROP_TRIGGER_DELAY =25 , cv::CAP_PROP_WHITE_BALANCE_RED_V =26 , cv::CAP_PROP_ZOOM =27 , cv::CAP_PROP_FOCUS =28 , cv::CAP_PROP_GUID =29 , cv::CAP_PROP_ISO_SPEED =30 , cv::CAP_PROP_BACKLIGHT =32 , cv::CAP_PROP_PAN =33 , cv::CAP_PROP_TILT =34 , cv::CAP_PROP_ROLL =35 , cv::CAP_PROP_IRIS =36 , cv::CAP_PROP_SETTINGS =37 , cv::CAP_PROP_BUFFERSIZE =38 , cv::CAP_PROP_AUTOFOCUS =39 , cv::CAP_PROP_SAR_NUM =40 , cv::CAP_PROP_SAR_DEN =41 , cv::CAP_PROP_BACKEND =42 , cv::CAP_PROP_CHANNEL =43 , cv::CAP_PROP_AUTO_WB =44 , cv::CAP_PROP_WB_TEMPERATURE =45 , cv::CAP_PROP_CODEC_PIXEL_FORMAT =46 , cv::CAP_PROP_BITRATE =47 , cv::CAP_PROP_ORIENTATION_META =48 , cv::CAP_PROP_ORIENTATION_AUTO =49 , cv::CAP_PROP_HW_ACCELERATION =50 , cv::CAP_PROP_HW_DEVICE =51 , cv::CAP_PROP_HW_ACCELERATION_USE_OPENCL =52 , cv::CAP_PROP_OPEN_TIMEOUT_MSEC =53 , cv::CAP_PROP_READ_TIMEOUT_MSEC =54 , cv::CAP_PROP_STREAM_OPEN_TIME_USEC =55 , cv::CAP_PROP_VIDEO_TOTAL_CHANNELS = 56 , cv::CAP_PROP_VIDEO_STREAM = 57 , cv::CAP_PROP_AUDIO_STREAM = 58 , cv::CAP_PROP_AUDIO_POS = 59 , cv::CAP_PROP_AUDIO_SHIFT_NSEC = 60 , cv::CAP_PROP_AUDIO_DATA_DEPTH = 61 , cv::CAP_PROP_AUDIO_SAMPLES_PER_SECOND = 62 , cv::CAP_PROP_AUDIO_BASE_INDEX = 63 , cv::CAP_PROP_AUDIO_TOTAL_CHANNELS = 64 , cv::CAP_PROP_AUDIO_TOTAL_STREAMS = 65 , cv::CAP_PROP_AUDIO_SYNCHRONIZE = 66 , cv::CAP_PROP_LRF_HAS_KEY_FRAME = 67 , cv::CAP_PROP_CODEC_EXTRADATA_INDEX = 68 , cv::CAP_PROP_FRAME_TYPE = 69 , cv::CAP_PROP_N_THREADS = 70 , cv::CAP_PROP_PTS = 71 , cv::CAP_PROP_DTS_DELAY = 72 }"
videoio,cv::VideoCapture generic properties identifier. More...
videoio,enum
videoio,"cv::VideoWriterProperties { cv::VIDEOWRITER_PROP_QUALITY = 1 , cv::VIDEOWRITER_PROP_FRAMEBYTES = 2 , cv::VIDEOWRITER_PROP_NSTRIPES = 3 , cv::VIDEOWRITER_PROP_IS_COLOR = 4 , cv::VIDEOWRITER_PROP_DEPTH = 5 , cv::VIDEOWRITER_PROP_HW_ACCELERATION = 6 , cv::VIDEOWRITER_PROP_HW_DEVICE = 7 , cv::VIDEOWRITER_PROP_HW_ACCELERATION_USE_OPENCL = 8 , cv::VIDEOWRITER_PROP_RAW_VIDEO = 9 , cv::VIDEOWRITER_PROP_KEY_INTERVAL = 10 , cv::VIDEOWRITER_PROP_KEY_FLAG = 11 , cv::VIDEOWRITER_PROP_PTS = 12 , cv::VIDEOWRITER_PROP_DTS_DELAY = 13 }"
videoio,cv::VideoWriter generic properties identifier. More...
videoio,Classes
videoio,class
videoio,CvAbstractCamera
videoio,class
videoio,CvPhotoCamera
videoio,protocol
videoio,<CvPhotoCameraDelegate>
videoio,class
videoio,CvVideoCamera
videoio,protocol
videoio,<CvVideoCameraDelegate>
videoio,Hardware acceleration support
videoio,enum
videoio,"cv::VideoAccelerationType { cv::VIDEO_ACCELERATION_NONE = 0 , cv::VIDEO_ACCELERATION_ANY = 1 , cv::VIDEO_ACCELERATION_D3D11 = 2 , cv::VIDEO_ACCELERATION_VAAPI = 3 , cv::VIDEO_ACCELERATION_MFX = 4 }"
videoio,Video Acceleration type. More...
videoio,Enumerations
videoio,enum
videoio,"{ cv::OPEN_CAMERA = 300 , cv::CLOSE_CAMERA , cv::UPDATE_IMAGE_ELEMENT , cv::SHOW_TRACKBAR }"
videoio,Functions
videoio,void
videoio,cv::winrt_imshow ()
videoio,void
videoio,cv::winrt_onVisibilityChanged (bool visible)
videoio,void
videoio,cv::winrt_setFrameContainer (::Windows::UI::Xaml::Controls::Image^ image)
videoio,template<typename ... Args>
videoio,void
videoio,"cv::winrt_startMessageLoop (std::function< void(Args...)> &&callback, Args... args)"
videoio,template<typename ... Args>
videoio,void
videoio,"cv::winrt_startMessageLoop (void callback(Args...), Args... args)"
videoio,template void
videoio,cv::winrt_startMessageLoop (void callback(void))
videoio,Read and write video or images sequence with OpenCV.
videoio,This section contains API description how to query/configure available Video I/O backends.
videoio,Runtime configuration options:
videoio,enable debug mode: OPENCV_VIDEOIO_DEBUG=1
videoio,change backend priority: OPENCV_VIDEOIO_PRIORITY_<backend>=9999
videoio,disable backend: OPENCV_VIDEOIO_PRIORITY_<backend>=0
videoio,"specify list of backends with high priority (>100000): OPENCV_VIDEOIO_PRIORITY_LIST=FFMPEG,GSTREAMER"
videoio,Functions
videoio,cv::String
videoio,cv::videoio_registry::getBackendName (VideoCaptureAPIs api)
videoio,"Returns backend API name or ""UnknownVideoAPI(xxx)""."
videoio,std::vector< VideoCaptureAPIs >
videoio,cv::videoio_registry::getBackends ()
videoio,Returns list of all available backends.
videoio,std::string
videoio,"cv::videoio_registry::getCameraBackendPluginVersion (VideoCaptureAPIs api, int &version_ABI, int &version_API)"
videoio,Returns description and ABI/API version of videoio plugin's camera interface.
videoio,std::vector< VideoCaptureAPIs >
videoio,cv::videoio_registry::getCameraBackends ()
videoio,Returns list of available backends which works via cv::VideoCapture(int index)
videoio,std::string
videoio,"cv::videoio_registry::getStreamBackendPluginVersion (VideoCaptureAPIs api, int &version_ABI, int &version_API)"
videoio,Returns description and ABI/API version of videoio plugin's stream capture interface.
videoio,std::vector< VideoCaptureAPIs >
videoio,cv::videoio_registry::getStreamBackends ()
videoio,Returns list of available backends which works via cv::VideoCapture(filename)
videoio,std::string
videoio,"cv::videoio_registry::getWriterBackendPluginVersion (VideoCaptureAPIs api, int &version_ABI, int &version_API)"
videoio,Returns description and ABI/API version of videoio plugin's writer interface.
videoio,std::vector< VideoCaptureAPIs >
videoio,cv::videoio_registry::getWriterBackends ()
videoio,Returns list of available backends which works via cv::VideoWriter()
videoio,bool
videoio,cv::videoio_registry::hasBackend (VideoCaptureAPIs api)
videoio,Returns true if backend is available.
videoio,bool
videoio,cv::videoio_registry::isBackendBuiltIn (VideoCaptureAPIs api)
videoio,Returns true if backend is built in (false if backend is used as plugin)
