Module,Text
calib3d,"Functions double cv::fisheye::calibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size &image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))  Performs camera calibration.  double cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  double cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.  double cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  double cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.  void cv::calibrateHandEye (InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)  Computes Hand-Eye calibration: \(_{}^{g}\textrm{T}_c\).  void cv::calibrateRobotWorldHandEye (InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)  Computes Robot-World/Hand-Eye calibration: \(_{}^{w}\textrm{T}_b\) and \(_{}^{c}\textrm{T}_g\).  void cv::calibrationMatrixValues (InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &fovx, double &fovy, double &focalLength, Point2d &principalPoint, double &aspectRatio)  Computes useful camera characteristics from the camera intrinsic matrix.  bool cv::checkChessboard (InputArray img, Size size)  void cv::composeRT (InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())  Combines two rotation-and-shift transformations.  void cv::computeCorrespondEpilines (InputArray points, int whichImage, InputArray F, OutputArray lines)  For points in an image of a stereo pair, computes the corresponding epilines in the other image.  void cv::convertPointsFromHomogeneous (InputArray src, OutputArray dst)  Converts points from homogeneous to Euclidean space.  void cv::convertPointsHomogeneous (InputArray src, OutputArray dst)  Converts points to/from homogeneous coordinates.  void cv::convertPointsToHomogeneous (InputArray src, OutputArray dst)  Converts points from Euclidean to homogeneous space.  void cv::correctMatches (InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)  Refines coordinates of corresponding points.  void cv::decomposeEssentialMat (InputArray E, OutputArray R1, OutputArray R2, OutputArray t)  Decompose an essential matrix to possible rotations and translation.  int cv::decomposeHomographyMat (InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)  Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).  void cv::decomposeProjectionMatrix (InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())  Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.  void cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray K, InputArray D, double alpha=0)  Distorts 2D points using fisheye model.  void cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray Kundistorted, InputArray K, InputArray D, double alpha=0)  void cv::drawChessboardCorners (InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)  Renders the detected chessboard corners.  void cv::drawFrameAxes (InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)  Draw axes of the world/object coordinate system from pose estimation.  cv::Mat cv::estimateAffine2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)  Computes an optimal affine transformation between two 2D point sets.  cv::Mat cv::estimateAffine2D (InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &params)  cv::Mat cv::estimateAffine3D (InputArray src, InputArray dst, double *scale=nullptr, bool force_rotation=true)  Computes an optimal affine transformation between two 3D point sets.  int cv::estimateAffine3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)  Computes an optimal affine transformation between two 3D point sets.  cv::Mat cv::estimateAffinePartial2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)  Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.  Scalar cv::estimateChessboardSharpness (InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())  Estimates the sharpness of a detected chessboard.  void cv::fisheye::estimateNewCameraMatrixForUndistortRectify (InputArray K, InputArray D, const Size &image_size, InputArray R, OutputArray P, double balance=0.0, const Size &new_size=Size(), double fov_scale=1.0)  Estimates new camera intrinsic matrix for undistortion or rectification.  int cv::estimateTranslation3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)  Computes an optimal translation between two 3D point sets.  void cv::filterHomographyDecompByVisibleRefpoints (InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())  Filters homography decompositions based on additional information.  void cv::filterSpeckles (InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())  Filters off small noise blobs (speckles) in the disparity map.  bool cv::find4QuadCornerSubpix (InputArray img, InputOutputArray corners, Size region_size)  finds subpixel-accurate positions of the chessboard corners  bool cv::findChessboardCorners (InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)  Finds the positions of internal corners of the chessboard.  bool cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)  Finds the positions of internal corners of the chessboard using a sector based approach.  bool cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags=0)  bool cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr< FeatureDetector > &blobDetector, const CirclesGridFinderParameters &parameters)  Finds centers in the grid of circles.  bool cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr< FeatureDetector > &blobDetector=SimpleBlobDetector::create())  Mat cv::findEssentialMat (InputArray points1, InputArray points2, double focal, Point2d pp, int method, double prob, double threshold, OutputArray mask)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method, double prob, double threshold, OutputArray mask)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())  Calculates an essential matrix from the corresponding points in two images.  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &params)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())  Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())  Calculates a fundamental matrix from the corresponding points in two images.  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, const UsacParams &params)  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)  Finds a perspective transformation between two planes.  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &params)  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)  Mat cv::getDefaultNewCameraMatrix (InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)  Returns the default new camera matrix.  Mat cv::getOptimalNewCameraMatrix (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)  Returns the new camera intrinsic matrix based on the free scaling parameter.  Rect cv::getValidDisparityROI (Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)  computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by stereoRectify)  Mat cv::initCameraMatrix2D (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)  Finds an initial camera intrinsic matrix from 3D-2D point correspondences.  void cv::initInverseRectificationMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, const Size &size, int m1type, OutputArray map1, OutputArray map2)  Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs.  void cv::initUndistortRectifyMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)  Computes the undistortion and rectification transformation map.  void cv::fisheye::initUndistortRectifyMap (InputArray K, InputArray D, InputArray R, InputArray P, const cv::Size &size, int m1type, OutputArray map1, OutputArray map2)  Computes undistortion and rectification maps for image transform by remap. If D is empty zero distortion is used, if R or P is empty identity matrixes are used.  float cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)  initializes maps for remap for wide-angle  static float cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)  void cv::matMulDeriv (InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)  Computes partial derivatives of the matrix product for each multiplied matrix.  void cv::projectPoints (InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)  Projects 3D points to an image plane.  void cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, const Affine3d &affine, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())  Projects points using fisheye model.  void cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())  Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using chirality check. Returns the number of inliers that pass the check.  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())  int cv::recoverPose (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, OutputArray E, OutputArray R, OutputArray t, int method=cv::RANSAC, double prob=0.999, double threshold=1.0, InputOutputArray mask=noArray())  Recovers the relative camera rotation and the translation from corresponding points in two images from two different cameras, using cheirality check. Returns the number of inliers that pass the check.  float cv::rectify3Collinear (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)  computes the rectification transformations for 3-head camera, where all the heads are on the same line.  void cv::reprojectImageTo3D (InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)  Reprojects a disparity image to 3D space.  void cv::Rodrigues (InputArray src, OutputArray dst, OutputArray jacobian=noArray())  Converts a rotation matrix to a rotation vector or vice versa.  Vec3d cv::RQDecomp3x3 (InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())  Computes an RQ decomposition of 3x3 matrices.  double cv::sampsonDistance (InputArray pt1, InputArray pt2, InputArray F)  Calculates the Sampson Distance between two points.  int cv::solveP3P (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)  Finds an object pose from 3 3D-2D point correspondences.  bool cv::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)  Finds an object pose from 3D-2D point correspondences.  bool cv::fisheye::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))  Finds an object pose from 3D-2D point correspondences for fisheye camera moodel.  int cv::solvePnPGeneric (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())  Finds an object pose from 3D-2D point correspondences.  bool cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)  Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.  bool cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &params=UsacParams())  void cv::solvePnPRefineLM (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))  Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.  void cv::solvePnPRefineVVS (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)  Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  double cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  double cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))  Performs stereo calibration.  void cv::stereoRectify (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)  Computes rectification transforms for each head of a calibrated stereo camera.  void cv::fisheye::stereoRectify (InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &newImageSize=Size(), double balance=0.0, double fov_scale=1.0)  Stereo rectification for fisheye camera model.  bool cv::stereoRectifyUncalibrated (InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)  Computes a rectification transform for an uncalibrated stereo camera.  void cv::triangulatePoints (InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)  This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.  void cv::undistort (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())  Transforms an image to compensate for lens distortion.  void cv::fisheye::undistortImage (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew=cv::noArray(), const Size &new_size=Size())  Transforms an image to compensate for fisheye lens distortion.  void cv::undistortImagePoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, TermCriteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 0.01))  Compute undistorted image points position.  void cv::fisheye::undistortPoints (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray R=noArray(), InputArray P=noArray(), TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))  Undistorts 2D points using fisheye model.  void cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)  void cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())  Computes the ideal point coordinates from the observed point coordinates.  void cv::validateDisparity (InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)  validates disparity using the left-right check. The matrix ""cost"" should be computed by the stereo correspondence algorithm "
calib3d,"The functions in this section use a so-called pinhole camera model. The view of a scene is obtained by projecting a scene's 3D point \(P_w\) into the image plane using a perspective transformation which forms the corresponding pixel \(p\). Both \(P_w\) and \(p\) are represented in homogeneous coordinates, i.e. as 3D and 2D homogeneous vector respectively. You will find a brief introduction to projective geometry, homogeneous vectors and homogeneous transformations at the end of this section's introduction. For more succinct notation, we often drop the 'homogeneous' and say vector instead of homogeneous vector."
calib3d,The distortion-free projective transformation given by a pinhole camera model is shown below.
calib3d,"\[s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w,\]"
calib3d,"where \(P_w\) is a 3D point expressed with respect to the world coordinate system, \(p\) is a 2D pixel in the image plane, \(A\) is the camera intrinsic matrix, \(R\) and \(t\) are the rotation and translation that describe the change of coordinates from world to camera coordinate systems (or camera frame) and \(s\) is the projective transformation's arbitrary scaling and not part of the camera model."
calib3d,"The camera intrinsic matrix \(A\) (notation used as in [319] and also generally notated as \(K\)) projects 3D points given in the camera coordinate system to 2D pixel coordinates, i.e."
calib3d,\[p = A P_c.\]
calib3d,"The camera intrinsic matrix \(A\) is composed of the focal lengths \(f_x\) and \(f_y\), which are expressed in pixel units, and the principal point \((c_x, c_y)\), that is usually close to the image center:"
calib3d,"\[A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1},\]"
calib3d,and thus
calib3d,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \vecthree{X_c}{Y_c}{Z_c}.\]
calib3d,"The matrix of intrinsic parameters does not depend on the scene viewed. So, once estimated, it can be re-used as long as the focal length is fixed (in case of a zoom lens). Thus, if an image from the camera is scaled by a factor, all of these parameters need to be scaled (multiplied/divided, respectively) by the same factor."
calib3d,The joint rotation-translation matrix \([R|t]\) is the matrix product of a projective transformation and a homogeneous transformation. The 3-by-4 projective transformation maps 3D points represented in camera coordinates to 2D points in the image plane and represented in normalized camera coordinates \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\):
calib3d,\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix} \begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix}.\]
calib3d,"The homogeneous transformation is encoded by the extrinsic parameters \(R\) and \(t\) and represents the change of basis from world coordinate system \(w\) to the camera coordinate sytem \(c\). Thus, given the representation of the point \(P\) in world coordinates, \(P_w\), we obtain \(P\)'s representation in the camera coordinate system, \(P_c\), by"
calib3d,"\[P_c = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_w,\]"
calib3d,"This homogeneous transformation is composed out of \(R\), a 3-by-3 rotation matrix, and \(t\), a 3-by-1 translation vector:"
calib3d,"\[\begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix}, \]"
calib3d,and therefore
calib3d,\[\begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
calib3d,"Combining the projective transformation and the homogeneous transformation, we obtain the projective transformation that maps 3D points in world coordinates into 2D points in the image plane and in normalized camera coordinates:"
calib3d,"\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix},\]"
calib3d,"with \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\). Putting the equations for instrincs and extrinsics together, we can write out \(s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w\) as"
calib3d,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
calib3d,"If \(Z_c \ne 0\), the transformation above is equivalent to the following,"
calib3d,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x X_c/Z_c + c_x \\ f_y Y_c/Z_c + c_y \end{bmatrix}\]
calib3d,with
calib3d,\[\vecthree{X_c}{Y_c}{Z_c} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
calib3d,The following figure illustrates the pinhole camera model.
calib3d,"Real lenses usually have some distortion, mostly radial distortion, and slight tangential distortion. So, the above model is extended as:"
calib3d,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x'' + c_x \\ f_y y'' + c_y \end{bmatrix}\]
calib3d,where
calib3d,\[\begin{bmatrix} x'' \\ y'' \end{bmatrix} = \begin{bmatrix} x' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + 2 p_1 x' y' + p_2(r^2 + 2 x'^2) + s_1 r^2 + s_2 r^4 \\ y' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\ \end{bmatrix}\]
calib3d,with
calib3d,\[r^2 = x'^2 + y'^2\]
calib3d,and
calib3d,"\[\begin{bmatrix} x'\\ y' \end{bmatrix} = \begin{bmatrix} X_c/Z_c \\ Y_c/Z_c \end{bmatrix},\]"
calib3d,if \(Z_c \ne 0\).
calib3d,"The distortion parameters are the radial coefficients \(k_1\), \(k_2\), \(k_3\), \(k_4\), \(k_5\), and \(k_6\) , \(p_1\) and \(p_2\) are the tangential distortion coefficients, and \(s_1\), \(s_2\), \(s_3\), and \(s_4\), are the thin prism distortion coefficients. Higher-order coefficients are not considered in OpenCV."
calib3d,"The next figures show two common types of radial distortion: barrel distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically decreasing) and pincushion distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically increasing). Radial distortion is always monotonic for real lenses, and if the estimator produces a non-monotonic result, this should be considered a calibration failure. More generally, radial distortion must be monotonic and the distortion function must be bijective. A failed estimation result may look deceptively good near the image center but will work poorly in e.g. AR/SFM applications. The optimization method used in OpenCV camera calibration does not include these constraints as the framework does not support the required integer programming and polynomial inequalities. See issue #15992 for additional information."
calib3d,"In some cases, the image sensor may be tilted in order to focus an oblique plane in front of the camera (Scheimpflug principle). This can be useful for particle image velocimetry (PIV) or triangulation with a laser fan. The tilt causes a perspective distortion of \(x''\) and \(y''\). This distortion can be modeled in the following way, see e.g. [172]."
calib3d,"\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x''' + c_x \\ f_y y''' + c_y \end{bmatrix},\]"
calib3d,where
calib3d,"\[s\vecthree{x'''}{y'''}{1} = \vecthreethree{R_{33}(\tau_x, \tau_y)}{0}{-R_{13}(\tau_x, \tau_y)} {0}{R_{33}(\tau_x, \tau_y)}{-R_{23}(\tau_x, \tau_y)} {0}{0}{1} R(\tau_x, \tau_y) \vecthree{x''}{y''}{1}\]"
calib3d,"and the matrix \(R(\tau_x, \tau_y)\) is defined by two rotations with angular parameter \(\tau_x\) and \(\tau_y\), respectively,"
calib3d,"\[ R(\tau_x, \tau_y) = \vecthreethree{\cos(\tau_y)}{0}{-\sin(\tau_y)}{0}{1}{0}{\sin(\tau_y)}{0}{\cos(\tau_y)} \vecthreethree{1}{0}{0}{0}{\cos(\tau_x)}{\sin(\tau_x)}{0}{-\sin(\tau_x)}{\cos(\tau_x)} = \vecthreethree{\cos(\tau_y)}{\sin(\tau_y)\sin(\tau_x)}{-\sin(\tau_y)\cos(\tau_x)} {0}{\cos(\tau_x)}{\sin(\tau_x)} {\sin(\tau_y)}{-\cos(\tau_y)\sin(\tau_x)}{\cos(\tau_y)\cos(\tau_x)}. \]"
calib3d,In the functions below the coefficients are passed or returned as
calib3d,"\[(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])\]"
calib3d,"vector. That is, if the vector contains four elements, it means that \(k_3=0\) . The distortion coefficients do not depend on the scene viewed. Thus, they also belong to the intrinsic camera parameters. And they remain the same regardless of the captured image resolution. If, for example, a camera has been calibrated on images of 320 x 240 resolution, absolutely the same distortion coefficients can be used for 640 x 480 images from the same camera while \(f_x\), \(f_y\), \(c_x\), and \(c_y\) need to be scaled appropriately."
calib3d,The functions below use the above model to do the following:
calib3d,"Project 3D points to the image plane given intrinsic and extrinsic parameters. Compute extrinsic parameters given intrinsic parameters, a few 3D points, and their projections. Estimate intrinsic and extrinsic camera parameters from several views of a known calibration pattern (every view is described by several 3D-2D point correspondences). Estimate the relative position and orientation of the stereo camera ""heads"" and compute the rectification* transformation that makes the camera optical axes parallel."
calib3d,"Homogeneous Coordinates Homogeneous Coordinates are a system of coordinates that are used in projective geometry. Their use allows to represent points at infinity by finite coordinates and simplifies formulas when compared to the cartesian counterparts, e.g. they have the advantage that affine transformations can be expressed as linear homogeneous transformation."
calib3d,One obtains the homogeneous vector \(P_h\) by appending a 1 along an n-dimensional cartesian vector \(P\) e.g. for a 3D cartesian vector the mapping \(P \rightarrow P_h\) is:
calib3d,\[\begin{bmatrix} X \\ Y \\ Z \end{bmatrix} \rightarrow \begin{bmatrix} X \\ Y \\ Z \\ 1 \end{bmatrix}.\]
calib3d,"For the inverse mapping \(P_h \rightarrow P\), one divides all elements of the homogeneous vector by its last element, e.g. for a 3D homogeneous vector one gets its 2D cartesian counterpart by:"
calib3d,"\[\begin{bmatrix} X \\ Y \\ W \end{bmatrix} \rightarrow \begin{bmatrix} X / W \\ Y / W \end{bmatrix},\]"
calib3d,if \(W \ne 0\).
calib3d,"Due to this mapping, all multiples \(k P_h\), for \(k \ne 0\), of a homogeneous point represent the same point \(P_h\). An intuitive understanding of this property is that under a projective transformation, all multiples of \(P_h\) are mapped to the same point. This is the physical observation one does for pinhole cameras, as all points along a ray through the camera's pinhole are projected to the same image point, e.g. all points along the red ray in the image of the pinhole camera model above would be mapped to the same image coordinate. This property is also the source for the scale ambiguity s in the equation of the pinhole camera model."
calib3d,"As mentioned, by using homogeneous coordinates we can express any change of basis parameterized by \(R\) and \(t\) as a linear transformation, e.g. for the change of basis from coordinate system 0 to coordinate system 1 becomes:"
calib3d,\[P_1 = R P_0 + t \rightarrow P_{h_1} = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_{h_0}.\]
calib3d,"Many functions in this module take a camera intrinsic matrix as an input parameter. Although all functions assume the same structure of this parameter, they may name it differently. The parameter's description, however, will be clear in that a camera intrinsic matrix with the structure shown above is required. A calibration sample for 3 cameras in a horizontal position can be found at opencv_source_code/samples/cpp/3calibration.cpp A calibration sample based on a sequence of images can be found at opencv_source_code/samples/cpp/calibration.cpp A calibration sample in order to do 3D reconstruction can be found at opencv_source_code/samples/cpp/build3dmodel.cpp A calibration example on stereo calibration can be found at opencv_source_code/samples/cpp/stereo_calib.cpp A calibration example on stereo matching can be found at opencv_source_code/samples/cpp/stereo_match.cpp (Python) A camera calibration sample can be found at opencv_source_code/samples/python/calibrate.py"
calib3d,"Classes struct cv::CirclesGridFinderParameters  class cv::LMSolver  class cv::StereoBM  Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. More...  class cv::StereoMatcher  The base class for stereo correspondence algorithms. More...  class cv::StereoSGBM  The class implements the modified H. Hirschmuller algorithm [126] that differs from the original one as follows: More...  struct cv::UsacParams "
calib3d,"Functions double cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  double cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.  double cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  double cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.  void cv::calibrateHandEye (InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)  Computes Hand-Eye calibration: \(_{}^{g}\textrm{T}_c\).  void cv::calibrateRobotWorldHandEye (InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)  Computes Robot-World/Hand-Eye calibration: \(_{}^{w}\textrm{T}_b\) and \(_{}^{c}\textrm{T}_g\).  void cv::calibrationMatrixValues (InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &fovx, double &fovy, double &focalLength, Point2d &principalPoint, double &aspectRatio)  Computes useful camera characteristics from the camera intrinsic matrix.  bool cv::checkChessboard (InputArray img, Size size)  void cv::composeRT (InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())  Combines two rotation-and-shift transformations.  void cv::computeCorrespondEpilines (InputArray points, int whichImage, InputArray F, OutputArray lines)  For points in an image of a stereo pair, computes the corresponding epilines in the other image.  void cv::convertPointsFromHomogeneous (InputArray src, OutputArray dst)  Converts points from homogeneous to Euclidean space.  void cv::convertPointsHomogeneous (InputArray src, OutputArray dst)  Converts points to/from homogeneous coordinates.  void cv::convertPointsToHomogeneous (InputArray src, OutputArray dst)  Converts points from Euclidean to homogeneous space.  void cv::correctMatches (InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)  Refines coordinates of corresponding points.  void cv::decomposeEssentialMat (InputArray E, OutputArray R1, OutputArray R2, OutputArray t)  Decompose an essential matrix to possible rotations and translation.  int cv::decomposeHomographyMat (InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)  Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).  void cv::decomposeProjectionMatrix (InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())  Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.  void cv::drawChessboardCorners (InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)  Renders the detected chessboard corners.  void cv::drawFrameAxes (InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)  Draw axes of the world/object coordinate system from pose estimation.  cv::Mat cv::estimateAffine2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)  Computes an optimal affine transformation between two 2D point sets.  cv::Mat cv::estimateAffine2D (InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &params)  cv::Mat cv::estimateAffine3D (InputArray src, InputArray dst, double *scale=nullptr, bool force_rotation=true)  Computes an optimal affine transformation between two 3D point sets.  int cv::estimateAffine3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)  Computes an optimal affine transformation between two 3D point sets.  cv::Mat cv::estimateAffinePartial2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)  Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.  Scalar cv::estimateChessboardSharpness (InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())  Estimates the sharpness of a detected chessboard.  int cv::estimateTranslation3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)  Computes an optimal translation between two 3D point sets.  void cv::filterHomographyDecompByVisibleRefpoints (InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())  Filters homography decompositions based on additional information.  void cv::filterSpeckles (InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())  Filters off small noise blobs (speckles) in the disparity map.  bool cv::find4QuadCornerSubpix (InputArray img, InputOutputArray corners, Size region_size)  finds subpixel-accurate positions of the chessboard corners  bool cv::findChessboardCorners (InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)  Finds the positions of internal corners of the chessboard.  bool cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)  Finds the positions of internal corners of the chessboard using a sector based approach.  bool cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags=0)  bool cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr< FeatureDetector > &blobDetector, const CirclesGridFinderParameters &parameters)  Finds centers in the grid of circles.  bool cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr< FeatureDetector > &blobDetector=SimpleBlobDetector::create())  Mat cv::findEssentialMat (InputArray points1, InputArray points2, double focal, Point2d pp, int method, double prob, double threshold, OutputArray mask)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method, double prob, double threshold, OutputArray mask)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())  Calculates an essential matrix from the corresponding points in two images.  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &params)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())  Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())  Calculates a fundamental matrix from the corresponding points in two images.  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, const UsacParams &params)  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)  Finds a perspective transformation between two planes.  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &params)  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)  Mat cv::getDefaultNewCameraMatrix (InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)  Returns the default new camera matrix.  Mat cv::getOptimalNewCameraMatrix (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)  Returns the new camera intrinsic matrix based on the free scaling parameter.  Rect cv::getValidDisparityROI (Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)  computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by stereoRectify)  Mat cv::initCameraMatrix2D (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)  Finds an initial camera intrinsic matrix from 3D-2D point correspondences.  void cv::initInverseRectificationMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, const Size &size, int m1type, OutputArray map1, OutputArray map2)  Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs.  void cv::initUndistortRectifyMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)  Computes the undistortion and rectification transformation map.  float cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)  initializes maps for remap for wide-angle  static float cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)  void cv::matMulDeriv (InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)  Computes partial derivatives of the matrix product for each multiplied matrix.  void cv::projectPoints (InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)  Projects 3D points to an image plane.  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())  Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using chirality check. Returns the number of inliers that pass the check.  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())  int cv::recoverPose (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, OutputArray E, OutputArray R, OutputArray t, int method=cv::RANSAC, double prob=0.999, double threshold=1.0, InputOutputArray mask=noArray())  Recovers the relative camera rotation and the translation from corresponding points in two images from two different cameras, using cheirality check. Returns the number of inliers that pass the check.  float cv::rectify3Collinear (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)  computes the rectification transformations for 3-head camera, where all the heads are on the same line.  void cv::reprojectImageTo3D (InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)  Reprojects a disparity image to 3D space.  void cv::Rodrigues (InputArray src, OutputArray dst, OutputArray jacobian=noArray())  Converts a rotation matrix to a rotation vector or vice versa.  Vec3d cv::RQDecomp3x3 (InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())  Computes an RQ decomposition of 3x3 matrices.  double cv::sampsonDistance (InputArray pt1, InputArray pt2, InputArray F)  Calculates the Sampson Distance between two points.  int cv::solveP3P (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)  Finds an object pose from 3 3D-2D point correspondences.  bool cv::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)  Finds an object pose from 3D-2D point correspondences.  int cv::solvePnPGeneric (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())  Finds an object pose from 3D-2D point correspondences.  bool cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)  Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.  bool cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &params=UsacParams())  void cv::solvePnPRefineLM (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))  Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.  void cv::solvePnPRefineVVS (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)  Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  void cv::stereoRectify (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)  Computes rectification transforms for each head of a calibrated stereo camera.  bool cv::stereoRectifyUncalibrated (InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)  Computes a rectification transform for an uncalibrated stereo camera.  void cv::triangulatePoints (InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)  This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.  void cv::undistort (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())  Transforms an image to compensate for lens distortion.  void cv::undistortImagePoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, TermCriteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 0.01))  Compute undistorted image points position.  void cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)  void cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())  Computes the ideal point coordinates from the observed point coordinates.  void cv::validateDisparity (InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)  validates disparity using the left-right check. The matrix ""cost"" should be computed by the stereo correspondence algorithm "
calib3d,Definitions: Let P be a point in 3D of coordinates X in the world reference frame (stored in the matrix X) The coordinate vector of P in the camera reference frame is:
calib3d,\[Xc = R X + T\]
calib3d,"where R is the rotation matrix corresponding to the rotation vector om: R = rodrigues(om); call x, y and z the 3 coordinates of Xc:"
calib3d,\[\begin{array}{l} x = Xc_1 \\ y = Xc_2 \\ z = Xc_3 \end{array} \]
calib3d,The pinhole projection coordinates of P is [a; b] where
calib3d,\[\begin{array}{l} a = x / z \ and \ b = y / z \\ r^2 = a^2 + b^2 \\ \theta = atan(r) \end{array} \]
calib3d,Fisheye distortion:
calib3d,\[\theta_d = \theta (1 + k_1 \theta^2 + k_2 \theta^4 + k_3 \theta^6 + k_4 \theta^8)\]
calib3d,The distorted point coordinates are [x'; y'] where
calib3d,\[\begin{array}{l} x' = (\theta_d / r) a \\ y' = (\theta_d / r) b \end{array} \]
calib3d,"Finally, conversion into pixel coordinates: The final pixel coordinates vector [u; v] where:"
calib3d,\[\begin{array}{l} u = f_x (x' + \alpha y') + c_x \\ v = f_y y' + c_y \end{array} \]
calib3d,Summary: Generic camera model [143] with perspective projection and without distortion correction
calib3d,Namespaces namespace cv::fisheye  The methods in this namespace use a so-called fisheye camera model. 
calib3d,"Functions double cv::fisheye::calibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size &image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))  Performs camera calibration.  void cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray K, InputArray D, double alpha=0)  Distorts 2D points using fisheye model.  void cv::fisheye::distortPoints (InputArray undistorted, OutputArray distorted, InputArray Kundistorted, InputArray K, InputArray D, double alpha=0)  void cv::fisheye::estimateNewCameraMatrixForUndistortRectify (InputArray K, InputArray D, const Size &image_size, InputArray R, OutputArray P, double balance=0.0, const Size &new_size=Size(), double fov_scale=1.0)  Estimates new camera intrinsic matrix for undistortion or rectification.  void cv::fisheye::initUndistortRectifyMap (InputArray K, InputArray D, InputArray R, InputArray P, const cv::Size &size, int m1type, OutputArray map1, OutputArray map2)  Computes undistortion and rectification maps for image transform by remap. If D is empty zero distortion is used, if R or P is empty identity matrixes are used.  void cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, const Affine3d &affine, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())  Projects points using fisheye model.  void cv::fisheye::projectPoints (InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, InputArray D, double alpha=0, OutputArray jacobian=noArray())  bool cv::fisheye::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))  Finds an object pose from 3D-2D point correspondences for fisheye camera moodel.  double cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  double cv::fisheye::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=fisheye::CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 100, DBL_EPSILON))  Performs stereo calibration.  void cv::fisheye::stereoRectify (InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &newImageSize=Size(), double balance=0.0, double fov_scale=1.0)  Stereo rectification for fisheye camera model.  void cv::fisheye::undistortImage (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew=cv::noArray(), const Size &new_size=Size())  Transforms an image to compensate for fisheye lens distortion.  void cv::fisheye::undistortPoints (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray R=noArray(), InputArray P=noArray(), TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 10, 1e-8))  Undistorts 2D points using fisheye model. "
core,Classes class cv::cuda::CannyEdgeDetector  Base class for Canny Edge Detector. : More...  class cv::cuda::TemplateMatching  Base class for Template Matching. : More... 
core,"Functions void cv::cuda::bilateralFilter (InputArray src, OutputArray dst, int kernel_size, float sigma_color, float sigma_spatial, int borderMode=BORDER_DEFAULT, Stream &stream=Stream::Null())  Performs bilateral filtering of passed image.  void cv::cuda::blendLinear (InputArray img1, InputArray img2, InputArray weights1, InputArray weights2, OutputArray result, Stream &stream=Stream::Null())  Performs linear blending of two images.  void cv::cuda::connectedComponents (InputArray image, OutputArray labels, int connectivity, int ltype, cv::cuda::ConnectedComponentsAlgorithmsTypes ccltype)  Computes the Connected Components Labeled image of a binary image.  void cv::cuda::connectedComponents (InputArray image, OutputArray labels, int connectivity=8, int ltype=CV_32S)  Ptr< CannyEdgeDetector > cv::cuda::createCannyEdgeDetector (double low_thresh, double high_thresh, int apperture_size=3, bool L2gradient=false)  Creates implementation for cuda::CannyEdgeDetector .  Ptr< TemplateMatching > cv::cuda::createTemplateMatching (int srcType, int method, Size user_block_size=Size())  Creates implementation for cuda::TemplateMatching .  void cv::cuda::meanShiftFiltering (InputArray src, OutputArray dst, int sp, int sr, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &stream=Stream::Null())  Performs mean-shift filtering for each point of the source image.  void cv::cuda::meanShiftProc (InputArray src, OutputArray dstr, OutputArray dstsp, int sp, int sr, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &stream=Stream::Null())  Performs a mean-shift procedure and stores information about processed points (their colors and positions) in two images.  void cv::cuda::meanShiftSegmentation (InputArray src, OutputArray dst, int sp, int sr, int minsize, TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1), Stream &stream=Stream::Null())  Performs a mean-shift segmentation of the source image and eliminates small segments. "
core,"Classes struct cv::cudacodec::EncodeQp  class cv::cudacodec::EncoderCallback  Interface for encoder callbacks. More...  struct cv::cudacodec::EncoderParams  Different parameters for CUDA video encoder. More...  struct cv::cudacodec::FormatInfo  Struct providing information about video file format. : More...  class cv::cudacodec::RawVideoSource  Interface for video demultiplexing. : More...  class cv::cudacodec::VideoReader  Video reader interface, see createVideoReader(). More...  struct cv::cudacodec::VideoReaderInitParams  VideoReader initialization parameters. More...  class cv::cudacodec::VideoWriter  Video writer interface, see createVideoWriter(). More... "
core,"Functions Ptr< VideoReader > cv::cudacodec::createVideoReader (const Ptr< RawVideoSource > &source, const VideoReaderInitParams params=VideoReaderInitParams())  Ptr< VideoReader > cv::cudacodec::createVideoReader (const String &filename, const std::vector< int > &sourceParams={}, const VideoReaderInitParams params=VideoReaderInitParams())  Creates video reader.  Ptr< cudacodec::VideoWriter > cv::cudacodec::createVideoWriter (const String &fileName, const Size frameSize, const Codec codec, const double fps, const ColorFormat colorFormat, const EncoderParams &params, Ptr< EncoderCallback > encoderCallback=0, const cuda::Stream &stream=cuda::Stream::Null())  Creates video writer.  Ptr< cudacodec::VideoWriter > cv::cudacodec::createVideoWriter (const String &fileName, const Size frameSize, const Codec codec=Codec::H264, const double fps=25.0, const ColorFormat colorFormat=ColorFormat::BGR, Ptr< EncoderCallback > encoderCallback=0, const cuda::Stream &stream=cuda::Stream::Null())  Creates video writer.  void cv::cudacodec::MapHist (const cuda::GpuMat &hist, Mat &histFull)  Utility function demonstrating how to map the luma histogram when FormatInfo::videoFullRangeFlag == false.  bool cv::cudacodec::operator== (const EncoderParams &lhs, const EncoderParams &rhs) "
core,Namespaces namespace cv::traits 
core,"Functions template<typename T > Quat< T > cv::acos (const Quat< T > &q)  template<typename T > Quat< T > cv::acosh (const Quat< T > &q)  template<typename T > Quat< T > cv::asin (const Quat< T > &q)  template<typename T > Quat< T > cv::asinh (const Quat< T > &q)  template<typename T > Quat< T > cv::atan (const Quat< T > &q)  template<typename T > Quat< T > cv::atanh (const Quat< T > &q)  template<typename T > Quat< T > cv::cos (const Quat< T > &q)  template<typename T > Quat< T > cv::cosh (const Quat< T > &q)  template<typename T > Quat< T > cv::crossProduct (const Quat< T > &p, const Quat< T > &q)  template<typename T > Quat< T > cv::exp (const Quat< T > &q)  template<typename T > Quat< T > cv::inv (const Quat< T > &q, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)  template<typename T > Quat< T > cv::log (const Quat< T > &q, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)  template<typename T , typename V > static V cv::operator* (const Affine3< T > &affine, const V &vector)  V is a 3-element vector with member fields x, y and z.  template<typename T > static Affine3< T > cv::operator* (const Affine3< T > &affine1, const Affine3< T > &affine2)  static Vec3d cv::operator* (const Affine3d &affine, const Vec3d &vector)  static Vec3f cv::operator* (const Affine3f &affine, const Vec3f &vector)  template<typename T > Quat< T > cv::operator* (const Quat< T > &, const T)  template<typename T > Quat< T > cv::operator* (const T, const Quat< T > &)  template<typename _Tp > std::ostream & cv::operator<< (std::ostream &, const DualQuat< _Tp > &)  template<typename _Tp > std::ostream & cv::operator<< (std::ostream &, const Quat< _Tp > &)  template<typename S > std::ostream & cv::operator<< (std::ostream &, const Quat< S > &)  template<typename T > Quat< T > cv::power (const Quat< T > &q, const Quat< T > &p, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)  template<typename T > Quat< T > cv::power (const Quat< T > &q, const T x, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)  template<typename T > Quat< T > cv::sin (const Quat< T > &q)  template<typename T > Quat< T > cv::sinh (const Quat< T > &q)  template<typename S > Quat< S > cv::sqrt (const Quat< S > &q, QuatAssumeType assumeUnit=QUAT_ASSUME_NOT_UNIT)  void cv::swap (Mat &a, Mat &b)  Swaps two matrices.  void cv::swap (UMat &a, UMat &b)  template<typename T > Quat< T > cv::tan (const Quat< T > &q)  template<typename T > Quat< T > cv::tanh (const Quat< T > &q) "
core,This module includes photo processing algorithms
core,This section describes 3D visualization window as well as classes and methods that are used to interact with it.
core,"3D visualization window (see Viz3d) is used to display widgets (see Widget), and it provides several methods to interact with scene and widgets."
core,"Classes class cv::viz::Camera  This class wraps intrinsic parameters of a camera. More...  class cv::viz::Color  This class represents color in BGR order. More...  class cv::viz::KeyboardEvent  This class represents a keyboard event. More...  class cv::viz::Mesh  This class wraps mesh attributes, and it can load a mesh from a ply file. : More...  class cv::viz::MouseEvent  This class represents a mouse event. More...  class cv::viz::Viz3d  The Viz3d class represents a 3D visualizer window. This class is implicitly shared. More... "
core,"This figure illustrates the stitching module pipeline implemented in the Stitcher class. Using that class it's possible to configure/remove some steps, i.e. adjust the stitching pipeline according to the particular needs. All building blocks from the pipeline are available in the detail namespace, one can combine and use them separately."
core,The implemented stitching pipeline is very similar to the one proposed in [41] .
core,Classes class cv::AffineTransformer  Wrapper class for the OpenCV Affine Transformation algorithm. : More...  class cv::ChiHistogramCostExtractor  An Chi based cost extraction. : More...  class cv::EMDHistogramCostExtractor  An EMD based cost extraction. : More...  class cv::EMDL1HistogramCostExtractor  An EMD-L1 based cost extraction. : More...  class cv::HausdorffDistanceExtractor  A simple Hausdorff distance measure between shapes defined by contours. More...  class cv::HistogramCostExtractor  Abstract base class for histogram cost algorithms. More...  class cv::NormHistogramCostExtractor  A norm based cost extraction. : More...  class cv::ShapeContextDistanceExtractor  Implementation of the Shape Context descriptor and matching algorithm. More...  class cv::ShapeDistanceExtractor  Abstract base class for shape distance algorithms. More...  class cv::ShapeTransformer  Abstract base class for shape transformation algorithms. More...  class cv::ThinPlateSplineShapeTransformer  Definition of the transformation. More... 
core,"Structured light is considered one of the most effective techniques to acquire 3D models. This technique is based on projecting a light pattern and capturing the illuminated scene from one or more points of view. Since the pattern is coded, correspondences between image points and points of the projected pattern can be quickly found and 3D information easily retrieved."
core,"One of the most commonly exploited coding strategies is based on trmatime-multiplexing. In this case, a set of patterns are successively projected onto the measuring surface. The codeword for a given pixel is usually formed by the sequence of illuminance values for that pixel across the projected patterns. Thus, the codification is called temporal because the bits of the codewords are multiplexed in time [233] ."
core,"In this module a time-multiplexing coding strategy based on Gray encoding is implemented following the (stereo) approach described in 3DUNDERWORLD algorithm [124] . For more details, see Structured Light tutorials."
core,"Classes class cv::structured_light::GrayCodePattern  Class implementing the Gray-code pattern, based on [124]. More...  class cv::structured_light::SinusoidalPattern  Class implementing Fourier transform profilometry (FTP) , phase-shifting profilometry (PSP) and Fourier-assisted phase-shifting profilometry (FAPS) based on [62]. More...  class cv::structured_light::StructuredLightPattern  Abstract base class for generating and decoding structured light patterns. More... "
core,ovis is a simplified rendering wrapper around ogre3d. The Ogre terminology is used in the API and Ogre Script is assumed to be used for advanced customization.
core,"Besides the API you see here, there are several environment variables that control the behavior of ovis. They are documented in createWindow."
core,"Functions void cv::ovis::addResourceLocation (const String &path)  void cv::ovis::createGridMesh (const String &name, const Size2f &size, const Size &segments=Size(1, 1))  void cv::ovis::createPlaneMesh (const String &name, const Size2f &size, InputArray image=noArray())  void cv::ovis::createPointCloudMesh (const String &name, InputArray vertices, InputArray colors=noArray())  void cv::ovis::createTriangleMesh (const String &name, InputArray vertices, InputArray normals=noArray(), InputArray indices=noArray())  Ptr< WindowScene > cv::ovis::createWindow (const String &title, const Size &size, int flags=SCENE_INTERACTIVE|SCENE_AA)  void cv::ovis::setMaterialProperty (const String &name, const String &prop, const Scalar &value)  void cv::ovis::setMaterialProperty (const String &name, int prop, const Scalar &value)  void cv::ovis::setMaterialProperty (const String &name, int prop, const String &value)  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  void cv::ovis::setMaterialProperty (const String &name, int prop, InputArray value)  void cv::ovis::updateTexture (const String &name, InputArray image)  int cv::ovis::waitKey (int delay=0) "
core,This module includes signal processing algorithms.
core,"Functions void cv::signal::resampleSignal (InputArray inputSignal, OutputArray outSignal, const int inFreq, const int outFreq)  Signal resampling. "
core,ICP point-to-plane odometry algorithm
core,Classes class cv::linemod::ColorGradient  Modality that computes quantized gradient orientations from a color image. More...  class cv::rgbd::DepthCleaner  class cv::linemod::DepthNormal  Modality that computes quantized surface normals from a dense depth map. More...  class cv::linemod::Detector  Object detector using the LINE template matching algorithm with any set of modalities. More...  class cv::rgbd::FastICPOdometry  struct cv::linemod::Feature  Discriminant feature described by its location and label. More...  class cv::rgbd::ICPOdometry  struct cv::linemod::Match  Represents a successful template match. More...  class cv::linemod::Modality  Interface for modalities that plug into the LINE template matching representation. More...  class cv::rgbd::Odometry  struct cv::rgbd::OdometryFrame  class cv::linemod::QuantizedPyramid  Represents a modality operating over an image pyramid. More...  struct cv::rgbd::RgbdFrame  class cv::rgbd::RgbdICPOdometry  class cv::rgbd::RgbdNormals  class cv::rgbd::RgbdOdometry  class cv::rgbd::RgbdPlane  struct cv::linemod::Template 
core,"Classes class cv::bgsegm::BackgroundSubtractorCNT  Background subtraction based on counting. More...  class cv::bgsegm::BackgroundSubtractorGMG  Background Subtractor module based on the algorithm given in [106] . More...  class cv::bgsegm::BackgroundSubtractorGSOC  Implementation of the different yet better algorithm which is called GSOC, as it was implemented during GSOC and was not originated from any paper. More...  class cv::bgsegm::BackgroundSubtractorLSBP  Background Subtraction using Local SVD Binary Pattern. More details about the algorithm can be found at [115]. More...  class cv::bgsegm::BackgroundSubtractorLSBPDesc  This is for calculation of the LSBP descriptors. More...  class cv::bgsegm::BackgroundSubtractorMOG  Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More...  class cv::bgsegm::SyntheticSequenceGenerator  Synthetic frame sequence generator for testing background subtraction algorithms. More... "
core,"Functions Ptr< BackgroundSubtractorCNT > cv::bgsegm::createBackgroundSubtractorCNT (int minPixelStability=15, bool useHistory=true, int maxPixelStability=15 *60, bool isParallel=true)  Creates a CNT Background Subtractor.  Ptr< BackgroundSubtractorGMG > cv::bgsegm::createBackgroundSubtractorGMG (int initializationFrames=120, double decisionThreshold=0.8)  Creates a GMG Background Subtractor.  Ptr< BackgroundSubtractorGSOC > cv::bgsegm::createBackgroundSubtractorGSOC (int mc=LSBP_CAMERA_MOTION_COMPENSATION_NONE, int nSamples=20, float replaceRate=0.003f, float propagationRate=0.01f, int hitsThreshold=32, float alpha=0.01f, float beta=0.0022f, float blinkingSupressionDecay=0.1f, float blinkingSupressionMultiplier=0.1f, float noiseRemovalThresholdFacBG=0.0004f, float noiseRemovalThresholdFacFG=0.0008f)  Creates an instance of BackgroundSubtractorGSOC algorithm.  Ptr< BackgroundSubtractorLSBP > cv::bgsegm::createBackgroundSubtractorLSBP (int mc=LSBP_CAMERA_MOTION_COMPENSATION_NONE, int nSamples=20, int LSBPRadius=16, float Tlower=2.0f, float Tupper=32.0f, float Tinc=1.0f, float Tdec=0.05f, float Rscale=10.0f, float Rincdec=0.005f, float noiseRemovalThresholdFacBG=0.0004f, float noiseRemovalThresholdFacFG=0.0008f, int LSBPthreshold=8, int minCount=2)  Creates an instance of BackgroundSubtractorLSBP algorithm.  Ptr< BackgroundSubtractorMOG > cv::bgsegm::createBackgroundSubtractorMOG (int history=200, int nmixtures=5, double backgroundRatio=0.7, double noiseSigma=0)  Creates mixture-of-gaussian background subtractor.  Ptr< SyntheticSequenceGenerator > cv::bgsegm::createSyntheticSequenceGenerator (InputArray background, InputArray object, double amplitude=2.0, double wavelength=20.0, double wavespeed=0.2, double objspeed=6.0)  Creates an instance of SyntheticSequenceGenerator. "
core,Dense optical flow algorithms compute motion for each point:
core,cv::optflow::calcOpticalFlowSF cv::optflow::createOptFlow_DeepFlow
core,Motion templates is alternative technique for detecting motion and computing its direction. See samples/motempl.py.
core,cv::motempl::updateMotionHistory cv::motempl::calcMotionGradient cv::motempl::calcGlobalOrientation cv::motempl::segmentMotion
core,"Functions reading and writing .flo files in ""Middlebury"" format, see: http://vision.middlebury.edu/flow/code/flow-code/README.txt"
core,cv::optflow::readOpticalFlow cv::optflow::writeOpticalFlow
core,"Classes class cv::optflow::DenseRLOFOpticalFlow  Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme. More...  class cv::optflow::DualTVL1OpticalFlow  ""Dual TV L1"" Optical Flow Algorithm. More...  class cv::optflow::GPCDetails  class cv::optflow::GPCForest< T >  struct cv::optflow::GPCMatchingParams  Class encapsulating matching parameters. More...  struct cv::optflow::GPCPatchDescriptor  struct cv::optflow::GPCPatchSample  struct cv::optflow::GPCTrainingParams  Class encapsulating training parameters. More...  class cv::optflow::GPCTrainingSamples  Class encapsulating training samples. More...  class cv::optflow::GPCTree  Class for individual tree. More...  class cv::optflow::OpticalFlowPCAFlow  PCAFlow algorithm. More...  class cv::optflow::PCAPrior  This class can be used for imposing a learned prior on the resulting optical flow. Solution will be regularized according to this prior. You need to generate appropriate prior file with ""learn_prior.py"" script beforehand. More...  class cv::optflow::RLOFOpticalFlowParameter  This is used store and set up the parameters of the robust local optical flow (RLOF) algoritm. More...  class cv::optflow::SparseRLOFOpticalFlow  Class used for calculation sparse optical flow and feature tracking with robust local optical flow (RLOF) algorithms. More... "
core,"Functions double cv::motempl::calcGlobalOrientation (InputArray orientation, InputArray mask, InputArray mhi, double timestamp, double duration)  Calculates a global motion orientation in a selected region.  void cv::motempl::calcMotionGradient (InputArray mhi, OutputArray mask, OutputArray orientation, double delta1, double delta2, int apertureSize=3)  Calculates a gradient orientation of a motion history image.  void cv::optflow::calcOpticalFlowDenseRLOF (InputArray I0, InputArray I1, InputOutputArray flow, Ptr< RLOFOpticalFlowParameter > rlofParam=Ptr< RLOFOpticalFlowParameter >(), float forwardBackwardThreshold=0, Size gridStep=Size(6, 6), InterpolationType interp_type=InterpolationType::INTERP_EPIC, int epicK=128, float epicSigma=0.05f, float epicLambda=100.f, int ricSPSize=15, int ricSLICType=100, bool use_post_proc=true, float fgsLambda=500.0f, float fgsSigma=1.5f, bool use_variational_refinement=false)  Fast dense optical flow computation based on robust local optical flow (RLOF) algorithms and sparse-to-dense interpolation scheme.  void cv::optflow::calcOpticalFlowSF (InputArray from, InputArray to, OutputArray flow, int layers, int averaging_block_size, int max_flow)  void cv::optflow::calcOpticalFlowSF (InputArray from, InputArray to, OutputArray flow, int layers, int averaging_block_size, int max_flow, double sigma_dist, double sigma_color, int postprocess_window, double sigma_dist_fix, double sigma_color_fix, double occ_thr, int upscale_averaging_radius, double upscale_sigma_dist, double upscale_sigma_color, double speed_up_thr)  Calculate an optical flow using ""SimpleFlow"" algorithm.  void cv::optflow::calcOpticalFlowSparseRLOF (InputArray prevImg, InputArray nextImg, InputArray prevPts, InputOutputArray nextPts, OutputArray status, OutputArray err, Ptr< RLOFOpticalFlowParameter > rlofParam=Ptr< RLOFOpticalFlowParameter >(), float forwardBackwardThreshold=0)  Calculates fast optical flow for a sparse feature set using the robust local optical flow (RLOF) similar to optflow::calcOpticalFlowPyrLK().  void cv::optflow::calcOpticalFlowSparseToDense (InputArray from, InputArray to, OutputArray flow, int grid_step=8, int k=128, float sigma=0.05f, bool use_post_proc=true, float fgs_lambda=500.0f, float fgs_sigma=1.5f)  Fast dense optical flow based on PyrLK sparse matches interpolation.  Ptr< DenseOpticalFlow > cv::optflow::createOptFlow_DeepFlow ()  DeepFlow optical flow algorithm implementation.  Ptr< DenseOpticalFlow > cv::optflow::createOptFlow_DenseRLOF ()  Additional interface to the Dense RLOF algorithm - optflow::calcOpticalFlowDenseRLOF()  Ptr< DualTVL1OpticalFlow > cv::optflow::createOptFlow_DualTVL1 ()  Creates instance of cv::DenseOpticalFlow.  Ptr< DenseOpticalFlow > cv::optflow::createOptFlow_Farneback ()  Additional interface to the Farneback's algorithm - calcOpticalFlowFarneback()  Ptr< DenseOpticalFlow > cv::optflow::createOptFlow_PCAFlow ()  Creates an instance of PCAFlow.  Ptr< DenseOpticalFlow > cv::optflow::createOptFlow_SimpleFlow ()  Additional interface to the SimpleFlow algorithm - calcOpticalFlowSF()  Ptr< SparseOpticalFlow > cv::optflow::createOptFlow_SparseRLOF ()  Additional interface to the Sparse RLOF algorithm - optflow::calcOpticalFlowSparseRLOF()  Ptr< DenseOpticalFlow > cv::optflow::createOptFlow_SparseToDense ()  Additional interface to the SparseToDenseFlow algorithm - calcOpticalFlowSparseToDense()  void cv::optflow::GPCForest< T >::findCorrespondences (InputArray imgFrom, InputArray imgTo, std::vector< std::pair< Point2i, Point2i > > &corr, const GPCMatchingParams params=GPCMatchingParams()) const  Find correspondences between two images.  void cv::motempl::segmentMotion (InputArray mhi, OutputArray segmask, std::vector< Rect > &boundingRects, double timestamp, double segThresh)  Splits a motion history image into a few parts corresponding to separate independent motions (for example, left hand, right hand).  void cv::motempl::updateMotionHistory (InputArray silhouette, InputOutputArray mhi, double timestamp, double duration)  Updates the motion history image by a moving silhouette. "
core,Namespaces namespace cv::omnidir::internal 
core,"Functions double cv::omnidir::calibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size size, InputOutputArray K, InputOutputArray xi, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags, TermCriteria criteria, OutputArray idx=noArray())  Perform omnidirectional camera calibration, the default depth of outputs is CV_64F.  void cv::omnidir::initUndistortRectifyMap (InputArray K, InputArray D, InputArray xi, InputArray R, InputArray P, const cv::Size &size, int m1type, OutputArray map1, OutputArray map2, int flags)  Computes undistortion and rectification maps for omnidirectional camera image transform by a rotation R. It output two maps that are used for cv::remap(). If D is empty then zero distortion is used, if R or P is empty then identity matrices are used.  void cv::omnidir::projectPoints (InputArray objectPoints, OutputArray imagePoints, const Affine3d &affine, InputArray K, double xi, InputArray D, OutputArray jacobian=noArray())  void cv::omnidir::projectPoints (InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, double xi, InputArray D, OutputArray jacobian=noArray())  Projects points for omnidirectional camera using CMei's model.  double cv::omnidir::stereoCalibrate (InputOutputArrayOfArrays objectPoints, InputOutputArrayOfArrays imagePoints1, InputOutputArrayOfArrays imagePoints2, const Size &imageSize1, const Size &imageSize2, InputOutputArray K1, InputOutputArray xi1, InputOutputArray D1, InputOutputArray K2, InputOutputArray xi2, InputOutputArray D2, OutputArray rvec, OutputArray tvec, OutputArrayOfArrays rvecsL, OutputArrayOfArrays tvecsL, int flags, TermCriteria criteria, OutputArray idx=noArray())  Stereo calibration for omnidirectional camera model. It computes the intrinsic parameters for two cameras and the extrinsic parameters between two cameras. The default depth of outputs is CV_64F.  void cv::omnidir::stereoReconstruct (InputArray image1, InputArray image2, InputArray K1, InputArray D1, InputArray xi1, InputArray K2, InputArray D2, InputArray xi2, InputArray R, InputArray T, int flag, int numDisparities, int SADWindowSize, OutputArray disparity, OutputArray image1Rec, OutputArray image2Rec, const Size &newSize=Size(), InputArray Knew=cv::noArray(), OutputArray pointCloud=cv::noArray(), int pointType=XYZRGB)  Stereo 3D reconstruction from a pair of images.  void cv::omnidir::stereoRectify (InputArray R, InputArray T, OutputArray R1, OutputArray R2)  Stereo rectification for omnidirectional camera model. It computes the rectification rotations for two cameras.  void cv::omnidir::undistortImage (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray xi, int flags, InputArray Knew=cv::noArray(), const Size &new_size=Size(), InputArray R=Mat::eye(3, 3, CV_64F))  Undistort omnidirectional images to perspective images.  void cv::omnidir::undistortPoints (InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray xi, InputArray R)  Undistort 2D image points for omnidirectional camera using CMei's model. "
core,Information Flow algorithm implementaton for alphamatting
core,Alpha matting is used to extract a foreground object with soft boundaries from a background image.
core,"This module is dedicated to computing alpha matte of objects in images from a given input image and a greyscale trimap image that contains information about the foreground, background and unknown pixels. The unknown pixels are assumed to be a combination of foreground and background pixels. The algorithm uses a combination of multiple carefully defined pixels affinities to estimate the opacity of the foreground pixels in the unkown region."
core,The implementation is based on [7].
core,This module was developed by Muskaan Kularia and Sunita Nayak as a project for Google Summer of Code 2019 (GSoC 19).
core,"Functions void cv::alphamat::infoFlow (InputArray image, InputArray tmap, OutputArray result)  Compute alpha matte of an object in an image. "
core,Classes class cv::xobjdetect::WBDetector  WaldBoost detector. More... 
core,The opencv_text module provides different algorithms for text detection and recognition in natural scene images.
core,Provide algorithms to extract the hash of images and fast way to figure out most similar images in huge data set.
core,Namespace for all functions is cv::img_hash.
core,"Functions void cv::img_hash::averageHash (cv::InputArray inputArr, cv::OutputArray outputArr)  Calculates img_hash::AverageHash in one call.  void cv::img_hash::blockMeanHash (cv::InputArray inputArr, cv::OutputArray outputArr, int mode=BLOCK_MEAN_HASH_MODE_0)  Computes block mean hash of the input image.  void cv::img_hash::colorMomentHash (cv::InputArray inputArr, cv::OutputArray outputArr)  Computes color moment hash of the input, the algorithm is come from the paper ""Perceptual Hashing for Color Images Using Invariant Moments"".  void cv::img_hash::marrHildrethHash (cv::InputArray inputArr, cv::OutputArray outputArr, float alpha=2.0f, float scale=1.0f)  Computes average hash value of the input image.  void cv::img_hash::pHash (cv::InputArray inputArr, cv::OutputArray outputArr)  Computes pHash value of the input image.  void cv::img_hash::radialVarianceHash (cv::InputArray inputArr, cv::OutputArray outputArr, double sigma=1, int numOfAngleLine=180)  Computes radial variance hash of the input image. "
core,Classes class cv::ImageCollection  To read multi-page images on demand. More... 
core,"implements ""RAPID-a video rate object tracker"" [116] with the dynamic control point extraction of [73]"
core,Classes class cv::rapid::GOSTracker  class cv::rapid::OLSTracker  class cv::rapid::Rapid  wrapper around silhouette based 3D object tracking function for uniform access More...  class cv::rapid::Tracker  Abstract base class for stateful silhouette trackers. More... 
core,This modules is to draw UTF-8 strings with freetype/harfbuzz.
core,"If thickness parameter is negative, drawing glyph is filled. If thickness parameter is positive, drawing glyph is outlined with thickness. If line_type parameter is 16(or CV_AA), drawing glyph is smooth."
core,Classes class cv::freetype::FreeType2 
core,"The video stabilization module contains a set of functions and classes that can be used to solve the problem of video stabilization. There are a few methods implemented, most of them are described in the papers [188] and [113] . However, there are some extensions and deviations from the original paper methods."
core,Namespaces namespace NcvCTprep 
core,"Functions virtual INCVMemAllocator::~INCVMemAllocator ()=0  Ncv32u alignUp (Ncv32u what, Ncv32u alignment)  void cv::cuda::calcOpticalFlowBM (const GpuMat &prev, const GpuMat &curr, Size block_size, Size shift_size, Size max_range, bool use_previous, GpuMat &velx, GpuMat &vely, GpuMat &buf, Stream &stream=Stream::Null())  Calculates optical flow for 2 images using block matching algorithm */.  void cv::cuda::connectivityMask (const GpuMat &image, GpuMat &mask, const cv::Scalar &lo, const cv::Scalar &hi, Stream &stream=Stream::Null())  compute mask for Generalized Flood fill componetns labeling.  Ptr< cuda::BackgroundSubtractorFGD > cv::cuda::createBackgroundSubtractorFGD (const FGDParams &params=FGDParams())  Creates FGD Background Subtractor.  Ptr< cuda::BackgroundSubtractorGMG > cv::cuda::createBackgroundSubtractorGMG (int initializationFrames=120, double decisionThreshold=0.8)  Creates GMG Background Subtractor.  Ptr< ImagePyramid > cv::cuda::createImagePyramid (InputArray img, int nLayers=-1, Stream &stream=Stream::Null())  void cv::cuda::createOpticalFlowNeedleMap (const GpuMat &u, const GpuMat &v, GpuMat &vertex, GpuMat &colors)  void cv::cuda::graphcut (GpuMat &terminals, GpuMat &leftTransp, GpuMat &rightTransp, GpuMat &top, GpuMat &bottom, GpuMat &labels, GpuMat &buf, Stream &stream=Stream::Null())  performs labeling via graph cuts of a 2D regular 4-connected graph.  void cv::cuda::graphcut (GpuMat &terminals, GpuMat &leftTransp, GpuMat &rightTransp, GpuMat &top, GpuMat &topLeft, GpuMat &topRight, GpuMat &bottom, GpuMat &bottomLeft, GpuMat &bottomRight, GpuMat &labels, GpuMat &buf, Stream &stream=Stream::Null())  performs labeling via graph cuts of a 2D regular 8-connected graph.  void cv::cuda::interpolateFrames (const GpuMat &frame0, const GpuMat &frame1, const GpuMat &fu, const GpuMat &fv, const GpuMat &bu, const GpuMat &bv, float pos, GpuMat &newFrame, GpuMat &buf, Stream &stream=Stream::Null())  Interpolates frames (images) using provided optical flow (displacement field).  void cv::cuda::labelComponents (const GpuMat &mask, GpuMat &components, int flags=0, Stream &stream=Stream::Null())  performs connected componnents labeling.  NCVStatus memSegCopyHelper (void *dst, NCVMemoryType dstType, const void *src, NCVMemoryType srcType, size_t sz, cudaStream_t cuStream)  NCVStatus memSegCopyHelper2D (void *dst, Ncv32u dstPitch, NCVMemoryType dstType, const void *src, Ncv32u srcPitch, NCVMemoryType srcType, Ncv32u widthbytes, Ncv32u height, cudaStream_t cuStream)   NCV_CT_ASSERT (sizeof(HaarClassifierNode128)==16)   NCV_CT_ASSERT (sizeof(HaarClassifierNodeDescriptor32)==4)   NCV_CT_ASSERT (sizeof(HaarFeature64)==8)   NCV_CT_ASSERT (sizeof(HaarFeatureDescriptor32)==4)   NCV_CT_ASSERT (sizeof(HaarStage64)==8)  NCVStatus ncvApplyHaarClassifierCascade_device (NCVMatrix< Ncv32u > &d_integralImage, NCVMatrix< Ncv32f > &d_weights, NCVMatrixAlloc< Ncv32u > &d_pixelMask, Ncv32u &numDetections, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarStage64 > &d_HaarStages, NCVVector< HaarClassifierNode128 > &d_HaarNodes, NCVVector< HaarFeature64 > &d_HaarFeatures, NcvBool bMaskElements, NcvSize32u anchorsRoi, Ncv32u pixelStep, Ncv32f scaleArea, INCVMemAllocator &gpuAllocator, INCVMemAllocator &cpuAllocator, cudaDeviceProp &devProp, cudaStream_t cuStream)  NCVStatus ncvApplyHaarClassifierCascade_host (NCVMatrix< Ncv32u > &h_integralImage, NCVMatrix< Ncv32f > &h_weights, NCVMatrixAlloc< Ncv32u > &h_pixelMask, Ncv32u &numDetections, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarClassifierNode128 > &h_HaarNodes, NCVVector< HaarFeature64 > &h_HaarFeatures, NcvBool bMaskElements, NcvSize32u anchorsRoi, Ncv32u pixelStep, Ncv32f scaleArea)  NCVStatus NCVBroxOpticalFlow (const NCVBroxOpticalFlowDescriptor desc, INCVMemAllocator &gpu_mem_allocator, const NCVMatrix< Ncv32f > &frame0, const NCVMatrix< Ncv32f > &frame1, NCVMatrix< Ncv32f > &u, NCVMatrix< Ncv32f > &v, cudaStream_t stream)  Compute optical flow.  void ncvDebugOutput (const cv::String &msg)  NCVStatus ncvDetectObjectsMultiScale_device (NCVMatrix< Ncv8u > &d_srcImg, NcvSize32u srcRoi, NCVVector< NcvRect32u > &d_dstRects, Ncv32u &dstNumRects, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarStage64 > &d_HaarStages, NCVVector< HaarClassifierNode128 > &d_HaarNodes, NCVVector< HaarFeature64 > &d_HaarFeatures, NcvSize32u minObjSize, Ncv32u minNeighbors, Ncv32f scaleStep, Ncv32u pixelStep, Ncv32u flags, INCVMemAllocator &gpuAllocator, INCVMemAllocator &cpuAllocator, cudaDeviceProp &devProp, cudaStream_t cuStream)  NCVStatus ncvDrawRects_32u_device (Ncv32u *d_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *d_rects, Ncv32u numRects, Ncv32u color, cudaStream_t cuStream)  NCVStatus ncvDrawRects_32u_host (Ncv32u *h_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *h_rects, Ncv32u numRects, Ncv32u color)  NCVStatus ncvDrawRects_8u_device (Ncv8u *d_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *d_rects, Ncv32u numRects, Ncv8u color, cudaStream_t cuStream)  NCVStatus ncvDrawRects_8u_host (Ncv8u *h_dst, Ncv32u dstStride, Ncv32u dstWidth, Ncv32u dstHeight, NcvRect32u *h_rects, Ncv32u numRects, Ncv8u color)  double ncvEndQueryTimerMs (NcvTimer t)  double ncvEndQueryTimerUs (NcvTimer t)  NCVStatus ncvGroupRectangles_host (NCVVector< NcvRect32u > &hypotheses, Ncv32u &numHypotheses, Ncv32u minNeighbors, Ncv32f intersectEps, NCVVector< Ncv32u > *hypothesesWeights)  NCVStatus ncvGrowDetectionsVector_device (NCVVector< Ncv32u > &pixelMask, Ncv32u numPixelMaskDetections, NCVVector< NcvRect32u > &hypotheses, Ncv32u &totalDetections, Ncv32u totalMaxDetections, Ncv32u rectWidth, Ncv32u rectHeight, Ncv32f curScale, cudaStream_t cuStream)  NCVStatus ncvGrowDetectionsVector_host (NCVVector< Ncv32u > &pixelMask, Ncv32u numPixelMaskDetections, NCVVector< NcvRect32u > &hypotheses, Ncv32u &totalDetections, Ncv32u totalMaxDetections, Ncv32u rectWidth, Ncv32u rectHeight, Ncv32f curScale)  NCVStatus ncvHaarGetClassifierSize (const cv::String &filename, Ncv32u &numStages, Ncv32u &numNodes, Ncv32u &numFeatures)  NCVStatus ncvHaarLoadFromFile_host (const cv::String &filename, HaarClassifierCascadeDescriptor &haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarClassifierNode128 > &h_HaarNodes, NCVVector< HaarFeature64 > &h_HaarFeatures)  NCVStatus ncvHaarStoreNVBIN_host (const cv::String &filename, HaarClassifierCascadeDescriptor haar, NCVVector< HaarStage64 > &h_HaarStages, NCVVector< HaarClassifierNode128 > &h_HaarNodes, NCVVector< HaarFeature64 > &h_HaarFeatures)  void ncvSetDebugOutputHandler (NCVDebugOutputHandler *func)  NcvTimer ncvStartTimer (void)  void cv::cuda::projectPoints (const GpuMat &src, const Mat &rvec, const Mat &tvec, const Mat &camera_mat, const Mat &dist_coef, GpuMat &dst, Stream &stream=Stream::Null())  void cv::cuda::solvePnPRansac (const Mat &object, const Mat &image, const Mat &camera_mat, const Mat &dist_coef, Mat &rvec, Mat &tvec, bool use_extrinsic_guess=false, int num_iters=100, float max_dist=8.0, int min_inlier_count=100, std::vector< int > *inliers=NULL)  Finds the object pose from 3D-2D point correspondences.  void cv::cuda::transformPoints (const GpuMat &src, const Mat &rvec, const Mat &tvec, GpuMat &dst, Stream &stream=Stream::Null()) "
core,Classes class cv::dnn_objdetect::InferBbox  A class to post process model predictions. More...  struct cv::dnn_objdetect::object  Structure to hold the details pertaining to a single bounding box. More... 
core,This module contains:
core,"API for new layers creation, layers are building bricks of neural networks; set of built-in most-useful Layers; API to construct and modify comprehensive neural networks from layers; functionality for loading serialized networks models from different frameworks."
core,Functionality of this module is designed only for forward pass computations (i.e. network testing). A network training is in principle not supported.
core,"Classes class cv::dnn::BackendNode  Derivatives of this class encapsulates functions of certain backends. More...  class cv::dnn::BackendWrapper  Derivatives of this class wraps cv::Mat for different backends and targets. More...  class cv::dnn::ClassificationModel  This class represents high-level API for classification models. More...  class cv::dnn::DetectionModel  This class represents high-level API for object detection networks. More...  class cv::dnn::Dict  This class implements name-value dictionary, values are instances of DictValue. More...  struct cv::dnn::DictValue  This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64. More...  struct cv::dnn::Image2BlobParams  Processing params of image to blob. More...  class cv::dnn::KeypointsModel  This class represents high-level API for keypoints models. More...  class cv::dnn::Layer  This interface class allows to build new Layers - are building blocks of networks. More...  class cv::dnn::LayerParams  This class provides all data needed to initialize layer. More...  class cv::dnn::Model  This class is presented high-level API for neural networks. More...  class cv::dnn::Net  This class allows to create and manipulate comprehensive artificial neural networks. More...  class cv::dnn::SegmentationModel  This class represents high-level API for segmentation models. More...  class cv::dnn::TextDetectionModel  Base class for text detection networks. More...  class cv::dnn::TextDetectionModel_DB  This class represents high-level API for text detection DL networks compatible with DB model. More...  class cv::dnn::TextDetectionModel_EAST  This class represents high-level API for text detection DL networks compatible with EAST model. More...  class cv::dnn::TextRecognitionModel  This class represents high-level API for text recognition networks. More... "
core,"Functions Mat cv::dnn::blobFromImage (InputArray image, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.  void cv::dnn::blobFromImage (InputArray image, OutputArray blob, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from image.  Mat cv::dnn::blobFromImages (InputArrayOfArrays images, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from series of images. Optionally resizes and crops images from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.  void cv::dnn::blobFromImages (InputArrayOfArrays images, OutputArray blob, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from series of images.  Mat cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, const Image2BlobParams &param=Image2BlobParams())  Creates 4-dimensional blob from series of images with given params.  void cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())  Mat cv::dnn::blobFromImageWithParams (InputArray image, const Image2BlobParams &param=Image2BlobParams())  Creates 4-dimensional blob from image with given params.  void cv::dnn::blobFromImageWithParams (InputArray image, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())  void cv::dnn::enableModelDiagnostics (bool isDiagnosticsMode)  Enables detailed logging of the DNN model loading with CV DNN API.  std::vector< std::pair< Backend, Target > > cv::dnn::getAvailableBackends ()  std::vector< Target > cv::dnn::getAvailableTargets (dnn::Backend be)  LayerFactory_Impl & cv::dnn::getLayerFactoryImpl ()  Mutex & cv::dnn::getLayerFactoryMutex ()  Get the mutex guarding LayerFactory_Impl, see getLayerFactoryImpl() function.  void cv::dnn::imagesFromBlob (const cv::Mat &blob_, OutputArrayOfArrays images_)  Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector<cv::Mat>).  void cv::dnn::NMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Performs non maximum suppression given boxes and corresponding scores.  void cv::dnn::NMSBoxes (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  void cv::dnn::NMSBoxes (const std::vector< RotatedRect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  void cv::dnn::NMSBoxesBatched (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Performs batched non maximum suppression on given boxes and corresponding scores across different classes.  void cv::dnn::NMSBoxesBatched (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Net cv::dnn::readNet (const String &framework, const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())  Read deep learning network represented in one of the supported formats.  Net cv::dnn::readNet (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config="""", const String &framework="""")  Read deep learning network represented in one of the supported formats.  Net cv::dnn::readNetFromCaffe (const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)  Reads a network model stored in Caffe model in memory.  Net cv::dnn::readNetFromCaffe (const std::vector< uchar > &bufferProto, const std::vector< uchar > &bufferModel=std::vector< uchar >())  Reads a network model stored in Caffe model in memory.  Net cv::dnn::readNetFromCaffe (CV_WRAP_FILE_PATH const String &prototxt, CV_WRAP_FILE_PATH const String &caffeModel=String())  Reads a network model stored in Caffe framework's format.  Net cv::dnn::readNetFromDarknet (const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromDarknet (const std::vector< uchar > &bufferCfg, const std::vector< uchar > &bufferModel=std::vector< uchar >())  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromDarknet (CV_WRAP_FILE_PATH const String &cfgFile, CV_WRAP_FILE_PATH const String &darknetModel=String())  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromModelOptimizer (const std::vector< uchar > &bufferModelConfig, const std::vector< uchar > &bufferWeights)  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromModelOptimizer (const uchar *bufferModelConfigPtr, size_t bufferModelConfigSize, const uchar *bufferWeightsPtr, size_t bufferWeightsSize)  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromModelOptimizer (CV_WRAP_FILE_PATH const String &xml, CV_WRAP_FILE_PATH const String &bin="""")  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromONNX (const char *buffer, size_t sizeBuffer)  Reads a network model from ONNX in-memory buffer.  Net cv::dnn::readNetFromONNX (const std::vector< uchar > &buffer)  Reads a network model from ONNX in-memory buffer.  Net cv::dnn::readNetFromONNX (CV_WRAP_FILE_PATH const String &onnxFile)  Reads a network model ONNX.  Net cv::dnn::readNetFromTensorflow (const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTensorflow (const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTensorflow (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config=String())  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTFLite (const char *bufferModel, size_t lenModel)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTFLite (const std::vector< uchar > &bufferModel)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTFLite (CV_WRAP_FILE_PATH const String &model)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTorch (CV_WRAP_FILE_PATH const String &model, bool isBinary=true, bool evaluate=true)  Reads a network model stored in Torch7 framework's format.  Mat cv::dnn::readTensorFromONNX (CV_WRAP_FILE_PATH const String &path)  Creates blob from .pb file.  Mat cv::dnn::readTorchBlob (const String &filename, bool isBinary=true)  Loads blob which was serialized as torch.Tensor object of Torch7 framework.  void cv::dnn::shrinkCaffeModel (CV_WRAP_FILE_PATH const String &src, CV_WRAP_FILE_PATH const String &dst, const std::vector< String > &layersTypes=std::vector< String >())  Convert all weights of Caffe network to half precision floating point.  void cv::dnn::softNMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, std::vector< float > &updated_scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, size_t top_k=0, const float sigma=0.5, SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN)  Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503.  void cv::dnn::writeTextGraph (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &output)  Create a text representation for a binary network stored in protocol buffer format. "
core,Classes class cv::cuda::BackgroundSubtractorMOG  Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More...  class cv::cuda::BackgroundSubtractorMOG2  Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More... 
core,Classes class cv::cuda::DescriptorMatcher  Abstract base class for matching keypoint descriptors. More...  class cv::cuda::FastFeatureDetector  Wrapping class for feature detection using the FAST method. More...  class cv::cuda::Feature2DAsync  Abstract base class for CUDA asynchronous 2D image feature detectors and descriptor extractors. More...  class cv::cuda::ORB  Class implementing the ORB (oriented BRIEF) keypoint detector and descriptor extractor. More... 
core,"The Super Resolution module contains a set of functions and classes that can be used to solve the problem of resolution enhancement. There are a few methods implemented, most of them are described in the papers [83] and [197] ."
core,Classes class cv::superres::BroxOpticalFlow  class cv::superres::DenseOpticalFlowExt  class cv::superres::DualTVL1OpticalFlow  class cv::superres::FarnebackOpticalFlow  class cv::superres::FrameSource  class cv::superres::PyrLKOpticalFlow  class cv::superres::SuperResolution  Base class for Super Resolution algorithms. More... 
core,"Classes class cv::cuda::BroxOpticalFlow  Class computing the optical flow for two images using Brox et al Optical Flow algorithm ([42]). More...  class cv::cuda::DenseOpticalFlow  Base interface for dense optical flow algorithms. More...  class cv::cuda::DensePyrLKOpticalFlow  Class used for calculating a dense optical flow. More...  class cv::cuda::FarnebackOpticalFlow  Class computing a dense optical flow using the Gunnar Farneback's algorithm. More...  class cv::cuda::NvidiaHWOpticalFlow  Base Interface for optical flow algorithms using NVIDIA Optical Flow SDK. More...  class cv::cuda::NvidiaOpticalFlow_1_0  Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 1.0. More...  class cv::cuda::NvidiaOpticalFlow_2_0  Class for computing the optical flow vectors between two images using NVIDIA Optical Flow hardware and Optical Flow SDK 2.0. More...  class cv::cuda::OpticalFlowDual_TVL1  Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method. More...  class cv::cuda::SparseOpticalFlow  Base interface for sparse optical flow algorithms. More...  class cv::cuda::SparsePyrLKOpticalFlow  Class used for calculating a sparse optical flow. More... "
core,"Julia (https://julialang.org) is a programming language for scientific community with growing popularity. These are bindings for a subset of OpenCV functionality, based on libcxxwrap-julia and CxxWrap packages."
core,"For installation instructions, see README.md in this module or OpenCV wiki (https://github.com/opencv/opencv/wiki)"
core,"Functions void cv::julia::initJulia (int argc, char **argv) "
core,This module includes image-processing functions.
core,"While OpenCV was designed for use in full-scale applications and can be used within functionally rich UI frameworks (such as Qt*, WinForms*, or Cocoa*) or without any UI at all, sometimes there it is required to try functionality quickly and visualize the results. This is what the HighGUI module has been designed for."
core,It provides easy interface to:
core,"Create and manipulate windows that can display images and ""remember"" their content (no need to handle repaint events from OS). Add trackbars to the windows, handle simple mouse events as well as keyboard commands."
core,"Typedefs typedef void(* cv::ButtonCallback) (int state, void *userdata)  Callback function for a button created by cv::createButton.  typedef void(* cv::MouseCallback) (int event, int x, int y, int flags, void *userdata)  Callback function for mouse events. see cv::setMouseCallback.  typedef void(* cv::OpenGlDrawCallback) (void *userdata)  Callback function defined to be called every frame. See cv::setOpenGlDrawCallback.  typedef void(* cv::TrackbarCallback) (int pos, void *userdata)  Callback function for Trackbar see cv::createTrackbar. "
core,"The datasets module includes classes for working with different datasets: load data, evaluate different algorithms on them, contains benchmarks, etc."
core,It is planned to have:
core,"basic: loading code for all datasets to help start work with them. next stage: quick benchmarks for all datasets to show how to solve them using OpenCV and implement evaluation code. finally: implement on OpenCV state-of-the-art algorithms, which solve these tasks."
core,Classes class cv::datasets::Dataset  struct cv::datasets::Object 
core,"Many computer vision applications may benefit from understanding where humans focus given a scene. Other than cognitively understanding the way human perceive images and scenes, finding salient regions and objects in the images helps various tasks such as speeding up object detection, object recognition, object tracking and content-aware image editing."
core,"About the saliency, there is a rich literature but the development is very fragmented. The principal purpose of this API is to give a unique interface, a unique framework for use and plug sever saliency algorithms, also with very different nature and methodology, but they share the same purpose, organizing algorithms into three main categories:"
core,"Static Saliency**: algorithms belonging to this category, exploit different image features that allow to detect salient objects in a non dynamic scenarios."
core,"Motion Saliency**: algorithms belonging to this category, are particularly focused to detect salient objects over time (hence also over frame), then there is a temporal component sealing cosider that allows to detect ""moving"" objects as salient, meaning therefore also the more general sense of detection the changes in the scene."
core,"Objectness**: Objectness is usually represented as a value which reflects how likely an image window covers an object of any category. Algorithms belonging to this category, avoid making decisions early on, by proposing a small number of category-independent proposals, that are expected to cover all objects in an image. Being able to perceive objects before identifying them is closely related to bottom up visual attention (saliency)."
core,"To see how API works, try tracker demo: https://github.com/fpuja/opencv_contrib/blob/saliencyModuleDevelop/modules/saliency/samples/computeSaliency.cpp"
core,"Classes class cv::saliency::MotionSaliency  class cv::saliency::MotionSaliencyBinWangApr2014  the Fast Self-tuning Background Subtraction Algorithm from [291] More...  class cv::saliency::Objectness  class cv::saliency::ObjectnessBING  Objectness algorithms based on [3] [3] Cheng, Ming-Ming, et al. ""BING: Binarized normed gradients for objectness estimation at 300fps."" IEEE CVPR. 2014. More...  class cv::saliency::Saliency  class cv::saliency::StaticSaliency  class cv::saliency::StaticSaliencyFineGrained  the Fine Grained Saliency approach from [198] More...  class cv::saliency::StaticSaliencySpectralResidual  the Spectral Residual approach from [128] More... "
core,The opencv_sfm module contains algorithms to perform 3d reconstruction from 2d images. The core of the module is based on a light version of Libmv originally developed by Sameer Agarwal and Keir Mierle.
core,"Whats is libmv? libmv, also known as the Library for Multiview Reconstruction (or LMV), is the computer vision backend for Blender's motion tracking abilities. Unlike other vision libraries with general ambitions, libmv is focused on algorithms for match moving, specifically targeting Blender as the primary customer. Dense reconstruction, reconstruction from unorganized photo collections, image recognition, and other tasks are not a focus of libmv."
core,"Development libmv is officially under the Blender umbrella, and so is developed on developer.blender.org. The source repository can get checked out independently from Blender."
core,This module has been originally developed as a project for Google Summer of Code 2012-2015.
core,"Notice that it is compiled only when Eigen, GLog and GFlags are correctly installed. Check installation instructions in the following tutorial: SFM module installation"
core,"The functions in this section use a so-called pinhole camera model. The view of a scene is obtained by projecting a scene's 3D point \(P_w\) into the image plane using a perspective transformation which forms the corresponding pixel \(p\). Both \(P_w\) and \(p\) are represented in homogeneous coordinates, i.e. as 3D and 2D homogeneous vector respectively. You will find a brief introduction to projective geometry, homogeneous vectors and homogeneous transformations at the end of this section's introduction. For more succinct notation, we often drop the 'homogeneous' and say vector instead of homogeneous vector."
core,The distortion-free projective transformation given by a pinhole camera model is shown below.
core,"\[s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w,\]"
core,"where \(P_w\) is a 3D point expressed with respect to the world coordinate system, \(p\) is a 2D pixel in the image plane, \(A\) is the camera intrinsic matrix, \(R\) and \(t\) are the rotation and translation that describe the change of coordinates from world to camera coordinate systems (or camera frame) and \(s\) is the projective transformation's arbitrary scaling and not part of the camera model."
core,"The camera intrinsic matrix \(A\) (notation used as in [319] and also generally notated as \(K\)) projects 3D points given in the camera coordinate system to 2D pixel coordinates, i.e."
core,\[p = A P_c.\]
core,"The camera intrinsic matrix \(A\) is composed of the focal lengths \(f_x\) and \(f_y\), which are expressed in pixel units, and the principal point \((c_x, c_y)\), that is usually close to the image center:"
core,"\[A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1},\]"
core,and thus
core,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \vecthree{X_c}{Y_c}{Z_c}.\]
core,"The matrix of intrinsic parameters does not depend on the scene viewed. So, once estimated, it can be re-used as long as the focal length is fixed (in case of a zoom lens). Thus, if an image from the camera is scaled by a factor, all of these parameters need to be scaled (multiplied/divided, respectively) by the same factor."
core,The joint rotation-translation matrix \([R|t]\) is the matrix product of a projective transformation and a homogeneous transformation. The 3-by-4 projective transformation maps 3D points represented in camera coordinates to 2D points in the image plane and represented in normalized camera coordinates \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\):
core,\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix} \begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix}.\]
core,"The homogeneous transformation is encoded by the extrinsic parameters \(R\) and \(t\) and represents the change of basis from world coordinate system \(w\) to the camera coordinate sytem \(c\). Thus, given the representation of the point \(P\) in world coordinates, \(P_w\), we obtain \(P\)'s representation in the camera coordinate system, \(P_c\), by"
core,"\[P_c = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_w,\]"
core,"This homogeneous transformation is composed out of \(R\), a 3-by-3 rotation matrix, and \(t\), a 3-by-1 translation vector:"
core,"\[\begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix}, \]"
core,and therefore
core,\[\begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \\ 0 & 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
core,"Combining the projective transformation and the homogeneous transformation, we obtain the projective transformation that maps 3D points in world coordinates into 2D points in the image plane and in normalized camera coordinates:"
core,"\[Z_c \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix} = \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix},\]"
core,"with \(x' = X_c / Z_c\) and \(y' = Y_c / Z_c\). Putting the equations for instrincs and extrinsics together, we can write out \(s \; p = A \begin{bmatrix} R|t \end{bmatrix} P_w\) as"
core,\[s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_x \\ r_{21} & r_{22} & r_{23} & t_y \\ r_{31} & r_{32} & r_{33} & t_z \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
core,"If \(Z_c \ne 0\), the transformation above is equivalent to the following,"
core,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x X_c/Z_c + c_x \\ f_y Y_c/Z_c + c_y \end{bmatrix}\]
core,with
core,\[\vecthree{X_c}{Y_c}{Z_c} = \begin{bmatrix} R|t \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}.\]
core,The following figure illustrates the pinhole camera model.
core,"Real lenses usually have some distortion, mostly radial distortion, and slight tangential distortion. So, the above model is extended as:"
core,\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x'' + c_x \\ f_y y'' + c_y \end{bmatrix}\]
core,where
core,\[\begin{bmatrix} x'' \\ y'' \end{bmatrix} = \begin{bmatrix} x' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + 2 p_1 x' y' + p_2(r^2 + 2 x'^2) + s_1 r^2 + s_2 r^4 \\ y' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\ \end{bmatrix}\]
core,with
core,\[r^2 = x'^2 + y'^2\]
core,and
core,"\[\begin{bmatrix} x'\\ y' \end{bmatrix} = \begin{bmatrix} X_c/Z_c \\ Y_c/Z_c \end{bmatrix},\]"
core,if \(Z_c \ne 0\).
core,"The distortion parameters are the radial coefficients \(k_1\), \(k_2\), \(k_3\), \(k_4\), \(k_5\), and \(k_6\) , \(p_1\) and \(p_2\) are the tangential distortion coefficients, and \(s_1\), \(s_2\), \(s_3\), and \(s_4\), are the thin prism distortion coefficients. Higher-order coefficients are not considered in OpenCV."
core,"The next figures show two common types of radial distortion: barrel distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically decreasing) and pincushion distortion ( \( 1 + k_1 r^2 + k_2 r^4 + k_3 r^6 \) monotonically increasing). Radial distortion is always monotonic for real lenses, and if the estimator produces a non-monotonic result, this should be considered a calibration failure. More generally, radial distortion must be monotonic and the distortion function must be bijective. A failed estimation result may look deceptively good near the image center but will work poorly in e.g. AR/SFM applications. The optimization method used in OpenCV camera calibration does not include these constraints as the framework does not support the required integer programming and polynomial inequalities. See issue #15992 for additional information."
core,"In some cases, the image sensor may be tilted in order to focus an oblique plane in front of the camera (Scheimpflug principle). This can be useful for particle image velocimetry (PIV) or triangulation with a laser fan. The tilt causes a perspective distortion of \(x''\) and \(y''\). This distortion can be modeled in the following way, see e.g. [172]."
core,"\[\begin{bmatrix} u \\ v \end{bmatrix} = \begin{bmatrix} f_x x''' + c_x \\ f_y y''' + c_y \end{bmatrix},\]"
core,where
core,"\[s\vecthree{x'''}{y'''}{1} = \vecthreethree{R_{33}(\tau_x, \tau_y)}{0}{-R_{13}(\tau_x, \tau_y)} {0}{R_{33}(\tau_x, \tau_y)}{-R_{23}(\tau_x, \tau_y)} {0}{0}{1} R(\tau_x, \tau_y) \vecthree{x''}{y''}{1}\]"
core,"and the matrix \(R(\tau_x, \tau_y)\) is defined by two rotations with angular parameter \(\tau_x\) and \(\tau_y\), respectively,"
core,"\[ R(\tau_x, \tau_y) = \vecthreethree{\cos(\tau_y)}{0}{-\sin(\tau_y)}{0}{1}{0}{\sin(\tau_y)}{0}{\cos(\tau_y)} \vecthreethree{1}{0}{0}{0}{\cos(\tau_x)}{\sin(\tau_x)}{0}{-\sin(\tau_x)}{\cos(\tau_x)} = \vecthreethree{\cos(\tau_y)}{\sin(\tau_y)\sin(\tau_x)}{-\sin(\tau_y)\cos(\tau_x)} {0}{\cos(\tau_x)}{\sin(\tau_x)} {\sin(\tau_y)}{-\cos(\tau_y)\sin(\tau_x)}{\cos(\tau_y)\cos(\tau_x)}. \]"
core,In the functions below the coefficients are passed or returned as
core,"\[(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])\]"
core,"vector. That is, if the vector contains four elements, it means that \(k_3=0\) . The distortion coefficients do not depend on the scene viewed. Thus, they also belong to the intrinsic camera parameters. And they remain the same regardless of the captured image resolution. If, for example, a camera has been calibrated on images of 320 x 240 resolution, absolutely the same distortion coefficients can be used for 640 x 480 images from the same camera while \(f_x\), \(f_y\), \(c_x\), and \(c_y\) need to be scaled appropriately."
core,The functions below use the above model to do the following:
core,"Project 3D points to the image plane given intrinsic and extrinsic parameters. Compute extrinsic parameters given intrinsic parameters, a few 3D points, and their projections. Estimate intrinsic and extrinsic camera parameters from several views of a known calibration pattern (every view is described by several 3D-2D point correspondences). Estimate the relative position and orientation of the stereo camera ""heads"" and compute the rectification* transformation that makes the camera optical axes parallel."
core,"Homogeneous Coordinates Homogeneous Coordinates are a system of coordinates that are used in projective geometry. Their use allows to represent points at infinity by finite coordinates and simplifies formulas when compared to the cartesian counterparts, e.g. they have the advantage that affine transformations can be expressed as linear homogeneous transformation."
core,One obtains the homogeneous vector \(P_h\) by appending a 1 along an n-dimensional cartesian vector \(P\) e.g. for a 3D cartesian vector the mapping \(P \rightarrow P_h\) is:
core,\[\begin{bmatrix} X \\ Y \\ Z \end{bmatrix} \rightarrow \begin{bmatrix} X \\ Y \\ Z \\ 1 \end{bmatrix}.\]
core,"For the inverse mapping \(P_h \rightarrow P\), one divides all elements of the homogeneous vector by its last element, e.g. for a 3D homogeneous vector one gets its 2D cartesian counterpart by:"
core,"\[\begin{bmatrix} X \\ Y \\ W \end{bmatrix} \rightarrow \begin{bmatrix} X / W \\ Y / W \end{bmatrix},\]"
core,if \(W \ne 0\).
core,"Due to this mapping, all multiples \(k P_h\), for \(k \ne 0\), of a homogeneous point represent the same point \(P_h\). An intuitive understanding of this property is that under a projective transformation, all multiples of \(P_h\) are mapped to the same point. This is the physical observation one does for pinhole cameras, as all points along a ray through the camera's pinhole are projected to the same image point, e.g. all points along the red ray in the image of the pinhole camera model above would be mapped to the same image coordinate. This property is also the source for the scale ambiguity s in the equation of the pinhole camera model."
core,"As mentioned, by using homogeneous coordinates we can express any change of basis parameterized by \(R\) and \(t\) as a linear transformation, e.g. for the change of basis from coordinate system 0 to coordinate system 1 becomes:"
core,\[P_1 = R P_0 + t \rightarrow P_{h_1} = \begin{bmatrix} R & t \\ 0 & 1 \end{bmatrix} P_{h_0}.\]
core,"Many functions in this module take a camera intrinsic matrix as an input parameter. Although all functions assume the same structure of this parameter, they may name it differently. The parameter's description, however, will be clear in that a camera intrinsic matrix with the structure shown above is required. A calibration sample for 3 cameras in a horizontal position can be found at opencv_source_code/samples/cpp/3calibration.cpp A calibration sample based on a sequence of images can be found at opencv_source_code/samples/cpp/calibration.cpp A calibration sample in order to do 3D reconstruction can be found at opencv_source_code/samples/cpp/build3dmodel.cpp A calibration example on stereo calibration can be found at opencv_source_code/samples/cpp/stereo_calib.cpp A calibration example on stereo matching can be found at opencv_source_code/samples/cpp/stereo_match.cpp (Python) A camera calibration sample can be found at opencv_source_code/samples/python/calibrate.py"
core,"Classes struct cv::CirclesGridFinderParameters  class cv::LMSolver  class cv::StereoBM  Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. More...  class cv::StereoMatcher  The base class for stereo correspondence algorithms. More...  class cv::StereoSGBM  The class implements the modified H. Hirschmuller algorithm [126] that differs from the original one as follows: More...  struct cv::UsacParams "
core,"Functions double cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  double cv::calibrateCamera (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.  double cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  double cv::calibrateCameraRO (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, int iFixedPoint, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray newObjPoints, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray stdDeviationsObjPoints, OutputArray perViewErrors, int flags=0, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.  void cv::calibrateHandEye (InputArrayOfArrays R_gripper2base, InputArrayOfArrays t_gripper2base, InputArrayOfArrays R_target2cam, InputArrayOfArrays t_target2cam, OutputArray R_cam2gripper, OutputArray t_cam2gripper, HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI)  Computes Hand-Eye calibration: \(_{}^{g}\textrm{T}_c\).  void cv::calibrateRobotWorldHandEye (InputArrayOfArrays R_world2cam, InputArrayOfArrays t_world2cam, InputArrayOfArrays R_base2gripper, InputArrayOfArrays t_base2gripper, OutputArray R_base2world, OutputArray t_base2world, OutputArray R_gripper2cam, OutputArray t_gripper2cam, RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH)  Computes Robot-World/Hand-Eye calibration: \(_{}^{w}\textrm{T}_b\) and \(_{}^{c}\textrm{T}_g\).  void cv::calibrationMatrixValues (InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &fovx, double &fovy, double &focalLength, Point2d &principalPoint, double &aspectRatio)  Computes useful camera characteristics from the camera intrinsic matrix.  bool cv::checkChessboard (InputArray img, Size size)  void cv::composeRT (InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1=noArray(), OutputArray dr3dt1=noArray(), OutputArray dr3dr2=noArray(), OutputArray dr3dt2=noArray(), OutputArray dt3dr1=noArray(), OutputArray dt3dt1=noArray(), OutputArray dt3dr2=noArray(), OutputArray dt3dt2=noArray())  Combines two rotation-and-shift transformations.  void cv::computeCorrespondEpilines (InputArray points, int whichImage, InputArray F, OutputArray lines)  For points in an image of a stereo pair, computes the corresponding epilines in the other image.  void cv::convertPointsFromHomogeneous (InputArray src, OutputArray dst)  Converts points from homogeneous to Euclidean space.  void cv::convertPointsHomogeneous (InputArray src, OutputArray dst)  Converts points to/from homogeneous coordinates.  void cv::convertPointsToHomogeneous (InputArray src, OutputArray dst)  Converts points from Euclidean to homogeneous space.  void cv::correctMatches (InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)  Refines coordinates of corresponding points.  void cv::decomposeEssentialMat (InputArray E, OutputArray R1, OutputArray R2, OutputArray t)  Decompose an essential matrix to possible rotations and translation.  int cv::decomposeHomographyMat (InputArray H, InputArray K, OutputArrayOfArrays rotations, OutputArrayOfArrays translations, OutputArrayOfArrays normals)  Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).  void cv::decomposeProjectionMatrix (InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX=noArray(), OutputArray rotMatrixY=noArray(), OutputArray rotMatrixZ=noArray(), OutputArray eulerAngles=noArray())  Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.  void cv::drawChessboardCorners (InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)  Renders the detected chessboard corners.  void cv::drawFrameAxes (InputOutputArray image, InputArray cameraMatrix, InputArray distCoeffs, InputArray rvec, InputArray tvec, float length, int thickness=3)  Draw axes of the world/object coordinate system from pose estimation.  cv::Mat cv::estimateAffine2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)  Computes an optimal affine transformation between two 2D point sets.  cv::Mat cv::estimateAffine2D (InputArray pts1, InputArray pts2, OutputArray inliers, const UsacParams &params)  cv::Mat cv::estimateAffine3D (InputArray src, InputArray dst, double *scale=nullptr, bool force_rotation=true)  Computes an optimal affine transformation between two 3D point sets.  int cv::estimateAffine3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)  Computes an optimal affine transformation between two 3D point sets.  cv::Mat cv::estimateAffinePartial2D (InputArray from, InputArray to, OutputArray inliers=noArray(), int method=RANSAC, double ransacReprojThreshold=3, size_t maxIters=2000, double confidence=0.99, size_t refineIters=10)  Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.  Scalar cv::estimateChessboardSharpness (InputArray image, Size patternSize, InputArray corners, float rise_distance=0.8F, bool vertical=false, OutputArray sharpness=noArray())  Estimates the sharpness of a detected chessboard.  int cv::estimateTranslation3D (InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold=3, double confidence=0.99)  Computes an optimal translation between two 3D point sets.  void cv::filterHomographyDecompByVisibleRefpoints (InputArrayOfArrays rotations, InputArrayOfArrays normals, InputArray beforePoints, InputArray afterPoints, OutputArray possibleSolutions, InputArray pointsMask=noArray())  Filters homography decompositions based on additional information.  void cv::filterSpeckles (InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf=noArray())  Filters off small noise blobs (speckles) in the disparity map.  bool cv::find4QuadCornerSubpix (InputArray img, InputOutputArray corners, Size region_size)  finds subpixel-accurate positions of the chessboard corners  bool cv::findChessboardCorners (InputArray image, Size patternSize, OutputArray corners, int flags=CALIB_CB_ADAPTIVE_THRESH+CALIB_CB_NORMALIZE_IMAGE)  Finds the positions of internal corners of the chessboard.  bool cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags, OutputArray meta)  Finds the positions of internal corners of the chessboard using a sector based approach.  bool cv::findChessboardCornersSB (InputArray image, Size patternSize, OutputArray corners, int flags=0)  bool cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr< FeatureDetector > &blobDetector, const CirclesGridFinderParameters &parameters)  Finds centers in the grid of circles.  bool cv::findCirclesGrid (InputArray image, Size patternSize, OutputArray centers, int flags=CALIB_CB_SYMMETRIC_GRID, const Ptr< FeatureDetector > &blobDetector=SimpleBlobDetector::create())  Mat cv::findEssentialMat (InputArray points1, InputArray points2, double focal, Point2d pp, int method, double prob, double threshold, OutputArray mask)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, double focal=1.0, Point2d pp=Point2d(0, 0), int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method, double prob, double threshold, OutputArray mask)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix, int method=RANSAC, double prob=0.999, double threshold=1.0, int maxIters=1000, OutputArray mask=noArray())  Calculates an essential matrix from the corresponding points in two images.  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray cameraMatrix2, InputArray dist_coeff1, InputArray dist_coeff2, OutputArray mask, const UsacParams &params)  Mat cv::findEssentialMat (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, int method=RANSAC, double prob=0.999, double threshold=1.0, OutputArray mask=noArray())  Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, int method, double ransacReprojThreshold, double confidence, int maxIters, OutputArray mask=noArray())  Calculates a fundamental matrix from the corresponding points in two images.  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99, OutputArray mask=noArray())  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, const UsacParams &params)  Mat cv::findFundamentalMat (InputArray points1, InputArray points2, OutputArray mask, int method=FM_RANSAC, double ransacReprojThreshold=3., double confidence=0.99)  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, int method=0, double ransacReprojThreshold=3, OutputArray mask=noArray(), const int maxIters=2000, const double confidence=0.995)  Finds a perspective transformation between two planes.  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, const UsacParams &params)  Mat cv::findHomography (InputArray srcPoints, InputArray dstPoints, OutputArray mask, int method=0, double ransacReprojThreshold=3)  Mat cv::getDefaultNewCameraMatrix (InputArray cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)  Returns the default new camera matrix.  Mat cv::getOptimalNewCameraMatrix (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0, bool centerPrincipalPoint=false)  Returns the new camera intrinsic matrix based on the free scaling parameter.  Rect cv::getValidDisparityROI (Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)  computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by stereoRectify)  Mat cv::initCameraMatrix2D (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio=1.0)  Finds an initial camera intrinsic matrix from 3D-2D point correspondences.  void cv::initInverseRectificationMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, const Size &size, int m1type, OutputArray map1, OutputArray map2)  Computes the projection and inverse-rectification transformation map. In essense, this is the inverse of initUndistortRectifyMap to accomodate stereo-rectification of projectors ('inverse-cameras') in projector-camera pairs.  void cv::initUndistortRectifyMap (InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)  Computes the undistortion and rectification transformation map.  float cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, enum UndistortTypes projType=PROJ_SPHERICAL_EQRECT, double alpha=0)  initializes maps for remap for wide-angle  static float cv::initWideAngleProjMap (InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, int m1type, OutputArray map1, OutputArray map2, int projType, double alpha=0)  void cv::matMulDeriv (InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)  Computes partial derivatives of the matrix product for each multiplied matrix.  void cv::projectPoints (InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian=noArray(), double aspectRatio=0)  Projects 3D points to an image plane.  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, double distanceThresh, InputOutputArray mask=noArray(), OutputArray triangulatedPoints=noArray())  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, InputArray cameraMatrix, OutputArray R, OutputArray t, InputOutputArray mask=noArray())  Recovers the relative camera rotation and the translation from an estimated essential matrix and the corresponding points in two images, using chirality check. Returns the number of inliers that pass the check.  int cv::recoverPose (InputArray E, InputArray points1, InputArray points2, OutputArray R, OutputArray t, double focal=1.0, Point2d pp=Point2d(0, 0), InputOutputArray mask=noArray())  int cv::recoverPose (InputArray points1, InputArray points2, InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, OutputArray E, OutputArray R, OutputArray t, int method=cv::RANSAC, double prob=0.999, double threshold=1.0, InputOutputArray mask=noArray())  Recovers the relative camera rotation and the translation from corresponding points in two images from two different cameras, using cheirality check. Returns the number of inliers that pass the check.  float cv::rectify3Collinear (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, InputArrayOfArrays imgpt1, InputArrayOfArrays imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, Rect *roi1, Rect *roi2, int flags)  computes the rectification transformations for 3-head camera, where all the heads are on the same line.  void cv::reprojectImageTo3D (InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues=false, int ddepth=-1)  Reprojects a disparity image to 3D space.  void cv::Rodrigues (InputArray src, OutputArray dst, OutputArray jacobian=noArray())  Converts a rotation matrix to a rotation vector or vice versa.  Vec3d cv::RQDecomp3x3 (InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx=noArray(), OutputArray Qy=noArray(), OutputArray Qz=noArray())  Computes an RQ decomposition of 3x3 matrices.  double cv::sampsonDistance (InputArray pt1, InputArray pt2, InputArray F)  Calculates the Sampson Distance between two points.  int cv::solveP3P (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags)  Finds an object pose from 3 3D-2D point correspondences.  bool cv::solvePnP (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int flags=SOLVEPNP_ITERATIVE)  Finds an object pose from 3D-2D point correspondences.  int cv::solvePnPGeneric (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, bool useExtrinsicGuess=false, SolvePnPMethod flags=SOLVEPNP_ITERATIVE, InputArray rvec=noArray(), InputArray tvec=noArray(), OutputArray reprojectionError=noArray())  Finds an object pose from 3D-2D point correspondences.  bool cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess=false, int iterationsCount=100, float reprojectionError=8.0, double confidence=0.99, OutputArray inliers=noArray(), int flags=SOLVEPNP_ITERATIVE)  Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.  bool cv::solvePnPRansac (InputArray objectPoints, InputArray imagePoints, InputOutputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, OutputArray inliers, const UsacParams &params=UsacParams())  void cv::solvePnPRefineLM (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON))  Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.  void cv::solvePnPRefineVVS (InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, TermCriteria criteria=TermCriteria(TermCriteria::EPS+TermCriteria::COUNT, 20, FLT_EPSILON), double VVSlambda=1)  Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, InputOutputArray R, InputOutputArray T, OutputArray E, OutputArray F, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray perViewErrors, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  Calibrates a stereo camera set up. This function finds the intrinsic parameters for each of the two cameras and the extrinsic parameters between the two cameras.  double cv::stereoCalibrate (InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6))  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  void cv::stereoRectify (InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0)  Computes rectification transforms for each head of a calibrated stereo camera.  bool cv::stereoRectifyUncalibrated (InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold=5)  Computes a rectification transform for an uncalibrated stereo camera.  void cv::triangulatePoints (InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)  This function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera.  void cv::undistort (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix=noArray())  Transforms an image to compensate for lens distortion.  void cv::undistortImagePoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, TermCriteria=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 0.01))  Compute undistorted image points position.  void cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P, TermCriteria criteria)  void cv::undistortPoints (InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R=noArray(), InputArray P=noArray())  Computes the ideal point coordinates from the observed point coordinates.  void cv::validateDisparity (InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp=1)  validates disparity using the left-right check. The matrix ""cost"" should be computed by the stereo correspondence algorithm "
core,Classes class cv::cuda::CascadeClassifier  Cascade classifier class used for object detection. Supports HAAR and LBP cascades. : More...  class cv::cuda::HOG  The class implements Histogram of Oriented Gradients ([63]) object detector. More... 
core,"ArUco Marker Detection, module functionality was moved to objdetect module"
core,Classes struct cv::aruco::EstimateParameters  Pose estimation parameters. More... 
core,"Functions double cv::aruco::calibrateCameraAruco (InputArrayOfArrays corners, InputArray ids, InputArray counter, const Ptr< Board > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Calibrate a camera using aruco markers.  double cv::aruco::calibrateCameraAruco (InputArrayOfArrays corners, InputArray ids, InputArray counter, const Ptr< Board > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs=noArray(), OutputArrayOfArrays tvecs=noArray(), int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  It's the same function as calibrateCameraAruco but without calibration error estimation.  double cv::aruco::calibrateCameraCharuco (InputArrayOfArrays charucoCorners, InputArrayOfArrays charucoIds, const Ptr< CharucoBoard > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, OutputArray stdDeviationsIntrinsics, OutputArray stdDeviationsExtrinsics, OutputArray perViewErrors, int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  Calibrate a camera using Charuco corners.  double cv::aruco::calibrateCameraCharuco (InputArrayOfArrays charucoCorners, InputArrayOfArrays charucoIds, const Ptr< CharucoBoard > &board, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs=noArray(), OutputArrayOfArrays tvecs=noArray(), int flags=0, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, DBL_EPSILON))  It's the same function as calibrateCameraCharuco but without calibration error estimation.  void cv::aruco::detectCharucoDiamond (InputArray image, InputArrayOfArrays markerCorners, InputArray markerIds, float squareMarkerLengthRate, OutputArrayOfArrays diamondCorners, OutputArray diamondIds, InputArray cameraMatrix=noArray(), InputArray distCoeffs=noArray(), Ptr< Dictionary > dictionary=makePtr< Dictionary >(getPredefinedDictionary(PredefinedDictionaryType::DICT_4X4_50)))  Detect ChArUco Diamond markers.  void cv::aruco::detectMarkers (InputArray image, const Ptr< Dictionary > &dictionary, OutputArrayOfArrays corners, OutputArray ids, const Ptr< DetectorParameters > &parameters=makePtr< DetectorParameters >(), OutputArrayOfArrays rejectedImgPoints=noArray())  detect markers  void cv::aruco::drawCharucoDiamond (const Ptr< Dictionary > &dictionary, Vec4i ids, int squareLength, int markerLength, OutputArray img, int marginSize=0, int borderBits=1)  Draw a ChArUco Diamond marker.  void cv::aruco::drawPlanarBoard (const Ptr< Board > &board, Size outSize, OutputArray img, int marginSize, int borderBits)  draw planar board  int cv::aruco::estimatePoseBoard (InputArrayOfArrays corners, InputArray ids, const Ptr< Board > &board, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, bool useExtrinsicGuess=false)  bool cv::aruco::estimatePoseCharucoBoard (InputArray charucoCorners, InputArray charucoIds, const Ptr< CharucoBoard > &board, InputArray cameraMatrix, InputArray distCoeffs, InputOutputArray rvec, InputOutputArray tvec, bool useExtrinsicGuess=false)  Pose estimation for a ChArUco board given some of their corners.  void cv::aruco::estimatePoseSingleMarkers (InputArrayOfArrays corners, float markerLength, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvecs, OutputArray tvecs, OutputArray objPoints=noArray(), const Ptr< EstimateParameters > &estimateParameters=makePtr< EstimateParameters >())  void cv::aruco::getBoardObjectAndImagePoints (const Ptr< Board > &board, InputArrayOfArrays detectedCorners, InputArray detectedIds, OutputArray objPoints, OutputArray imgPoints)  get board object and image points  int cv::aruco::interpolateCornersCharuco (InputArrayOfArrays markerCorners, InputArray markerIds, InputArray image, const Ptr< CharucoBoard > &board, OutputArray charucoCorners, OutputArray charucoIds, InputArray cameraMatrix=noArray(), InputArray distCoeffs=noArray(), int minMarkers=2)  Interpolate position of ChArUco board corners.  void cv::aruco::refineDetectedMarkers (InputArray image, const Ptr< Board > &board, InputOutputArrayOfArrays detectedCorners, InputOutputArray detectedIds, InputOutputArrayOfArrays rejectedCorners, InputArray cameraMatrix=noArray(), InputArray distCoeffs=noArray(), float minRepDistance=10.f, float errorCorrectionRate=3.f, bool checkAllOrders=true, OutputArray recoveredIdxs=noArray(), const Ptr< DetectorParameters > &parameters=makePtr< DetectorParameters >())  refine detected markers  bool cv::aruco::testCharucoCornersCollinear (const Ptr< CharucoBoard > &board, InputArray charucoIds) "
core,This module contains functionality for upscaling an image via convolutional neural networks. The following four models are implemented:
core,EDSR https://arxiv.org/abs/1707.02921 ESPCN https://arxiv.org/abs/1609.05158 FSRCNN https://arxiv.org/abs/1608.00367 LapSRN https://arxiv.org/abs/1710.01992
core,Classes class cv::dnn_superres::DnnSuperResImpl  A class to upscale images via convolutional neural networks. The following four models are implemented: More... 
core,Tracking is an important issue for many computer vision applications in real world scenario. The development in this area is very fragmented and this API is an interface useful for plug several algorithms and compare them.
core,Classes class cv::TrackerCSRT  the CSRT tracker More...  class cv::TrackerKCF  the KCF (Kernelized Correlation Filter) tracker More... 
core,"Functions void cv::cuda::buildWarpAffineMaps (InputArray M, bool inverse, Size dsize, OutputArray xmap, OutputArray ymap, Stream &stream=Stream::Null())  Builds transformation maps for affine transformation.  void cv::cuda::buildWarpAffineMaps (Mat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())  void cv::cuda::buildWarpAffineMaps (UMat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())  void cv::cuda::buildWarpPerspectiveMaps (InputArray M, bool inverse, Size dsize, OutputArray xmap, OutputArray ymap, Stream &stream=Stream::Null())  Builds transformation maps for perspective transformation.  void cv::cuda::buildWarpPerspectiveMaps (Mat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())  void cv::cuda::buildWarpPerspectiveMaps (UMat M, bool inverse, Size dsize, GpuMat &xmap, GpuMat &ymap, Stream &stream=Stream::Null())  void cv::cuda::pyrDown (InputArray src, OutputArray dst, Stream &stream=Stream::Null())  Smoothes an image and downsamples it.  void cv::cuda::pyrUp (InputArray src, OutputArray dst, Stream &stream=Stream::Null())  Upsamples an image and then smoothes it.  void cv::cuda::remap (InputArray src, OutputArray dst, InputArray xmap, InputArray ymap, int interpolation, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())  Applies a generic geometrical transformation to an image.  void cv::cuda::resize (InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR, Stream &stream=Stream::Null())  Resizes an image.  void cv::cuda::rotate (InputArray src, OutputArray dst, Size dsize, double angle, double xShift=0, double yShift=0, int interpolation=INTER_LINEAR, Stream &stream=Stream::Null())  Rotates an image around the origin (0,0) and then shifts it.  void cv::cuda::warpAffine (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())  Applies an affine transformation to an image.  void cv::cuda::warpAffine (InputArray src, OutputArray dst, Mat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())  void cv::cuda::warpAffine (InputArray src, OutputArray dst, UMat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())  void cv::cuda::warpPerspective (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())  Applies a perspective transformation to an image.  void cv::cuda::warpPerspective (InputArray src, OutputArray dst, Mat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null())  void cv::cuda::warpPerspective (InputArray src, OutputArray dst, UMat M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, Scalar borderValue=Scalar(), Stream &stream=Stream::Null()) "
core,"The Registration module implements parametric image registration. The implemented method is direct alignment, that is, it uses directly the pixel values for calculating the registration between a pair of images, as opposed to feature-based registration. The implementation follows essentially the corresponding part of [259] ."
core,"Feature based methods have some advantages over pixel based methods when we are trying to register pictures that have been shoot under different lighting conditions or exposition times, or when the images overlap only partially. On the other hand, the main advantage of pixel-based methods when compared to feature based methods is their better precision for some pictures (those shoot under similar lighting conditions and that have a significative overlap), due to the fact that we are using all the information available in the image, which allows us to achieve subpixel accuracy. This is particularly important for certain applications like multi-frame denoising or super-resolution."
core,"In fact, pixel and feature registration methods can complement each other: an application could first obtain a coarse registration using features and then refine the registration using a pixel based method on the overlapping area of the images. The code developed allows this use case."
core,"The module implements classes derived from the abstract classes cv::reg::Map or cv::reg::Mapper. The former models a coordinate transformation between two reference frames, while the later encapsulates a way of invoking a method that calculates a Map between two images. Although the objective has been to implement pixel based methods, the module can be extended to support other methods that can calculate transformations between images (feature methods, optical flow, etc.)."
core,"Each class derived from Map implements a motion model, as follows:"
core,MapShift: Models a simple translation MapAffine: Models an affine transformation MapProjec: Models a projective transformation
core,"MapProject can also be used to model affine motion or translations, but some operations on it are more costly, and that is the reason for defining the other two classes."
core,The classes derived from Mapper are
core,"MapperGradShift: Gradient based alignment for calculating translations. It produces a MapShift (two parameters that correspond to the shift vector). MapperGradEuclid: Gradient based alignment for euclidean motions, that is, rotations and translations. It calculates three parameters (angle and shift vector), although the result is stored in a MapAffine object for convenience. MapperGradSimilar: Gradient based alignment for calculating similarities, which adds scaling to the euclidean motion. It calculates four parameters (two for the anti-symmetric matrix and two for the shift vector), although the result is stored in a MapAffine object for better convenience. MapperGradAffine: Gradient based alignment for an affine motion model. The number of parameters is six and the result is stored in a MapAffine object. MapperGradProj: Gradient based alignment for calculating projective transformations. The number of parameters is eight and the result is stored in a MapProject object. MapperPyramid: It implements hyerarchical motion estimation using a Gaussian pyramid. Its constructor accepts as argument any other object that implements the Mapper interface, and it is that mapper the one called by MapperPyramid for each scale of the pyramid."
core,"If the motion between the images is not very small, the normal way of using these classes is to create a MapperGrad* object and use it as input to create a MapperPyramid, which in turn is called to perform the calculation. However, if the motion between the images is small enough, we can use directly the MapperGrad* classes. Another possibility is to use first a feature based method to perform a coarse registration and then do a refinement through MapperPyramid or directly a MapperGrad* object. The ""calculate"" method of the mappers accepts an initial estimation of the motion as input."
core,"When deciding which MapperGrad to use we must take into account that mappers with more parameters can handle more complex motions, but involve more calculations and are therefore slower. Also, if we are confident on the motion model that is followed by the sequence, increasing the number of parameters beyond what we need will decrease the accuracy: it is better to use the least number of degrees of freedom that we can."
core,In the module tests there are examples that show how to register a pair of images using any of the implemented mappers.
core,Classes class cv::reg::Map  Base class for modelling a Map between two images. More...  class cv::reg::MapAffine  class cv::reg::Mapper  Base class for modelling an algorithm for calculating a map. More...  class cv::reg::MapperGradAffine  class cv::reg::MapperGradEuclid  class cv::reg::MapperGradProj  class cv::reg::MapperGradShift  class cv::reg::MapperGradSimilar  class cv::reg::MapperPyramid  class cv::reg::MapProjec  class cv::reg::MapShift  class cv::reg::MapTypeCaster 
core,This module provides storage routines for Hierarchical Data Format objects.
core,Face module changelog Face Recognition with OpenCV
core,"Classes class cv::face::BasicFaceRecognizer  struct cv::face::CParams  class cv::face::EigenFaceRecognizer  class cv::face::Facemark  Abstract base class for all facemark models. More...  class cv::face::FacemarkAAM  class cv::face::FacemarkLBF  class cv::face::FacemarkTrain  Abstract base class for trainable facemark models. More...  class cv::face::FaceRecognizer  Abstract base class for all face recognition models. More...  class cv::face::FisherFaceRecognizer  class cv::face::LBPHFaceRecognizer  class cv::face::MACE  Minimum Average Correlation Energy Filter useful for authentication with (cancellable) biometrical features. (does not need many positives to train (10-50), and no negatives at all, also robust to noise/salting) More...  class cv::face::PredictCollector  Abstract base class for all strategies of prediction result handling. More...  class cv::face::StandardCollector  Default predict collector. More... "
core,Classes class cv::plot::Plot2d 
core,Classes class cv::quality::QualityBase 
core,"The opencv hfs module contains an efficient algorithm to segment an image. This module is implemented based on the paper Hierarchical Feature Selection for Efficient Image Segmentation, ECCV 2016. The original project was developed by Yun Liu(https://github.com/yun-liu/hfs)."
core,Functions and classes described in this section are used to perform various linear or non-linear filtering operations on 2D images.
core,An example containing all basic morphology operators like erode and dilate can be found at opencv_source_code/samples/gpu/morphology.cpp
core,Classes class cv::cuda::Filter  Common interface for all CUDA filters : More... 
core,This section documents OpenCV's interface to the FLANN library. FLANN (Fast Library for Approximate Nearest Neighbors) is a library that contains a collection of algorithms optimized for fast nearest neighbor search in large datasets and for high dimensional features. More information about FLANN can be found in [201] .
core,Classes struct cv::flann::CvType< T >  struct cv::flann::CvType< char >  struct cv::flann::CvType< double >  struct cv::flann::CvType< float >  struct cv::flann::CvType< short >  struct cv::flann::CvType< unsigned char >  struct cv::flann::CvType< unsigned short >  class cv::flann::GenericIndex< Distance >  The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built. More... 
core,Namespace for all functions is cv::intensity_transform.
core,Classes class cv::cuda::DisparityBilateralFilter  Class refining a disparity map using joint bilateral filtering. : More...  class cv::cuda::StereoBeliefPropagation  Class computing stereo correspondence using the belief propagation algorithm. : More...  class cv::cuda::StereoBM  Class computing stereo correspondence (disparity map) using the block matching algorithm. : More...  class cv::cuda::StereoConstantSpaceBP  Class computing stereo correspondence using the constant space belief propagation algorithm. : More...  class cv::cuda::StereoSGM  The class implements the modified H. Hirschmuller algorithm [126]. Limitation and difference are as follows: More... 
core,Classes class cv::wechat_qrcode::WeChatQRCode  WeChat QRCode includes two CNN-based models: A object detection model and a super resolution model. Object detection model is applied to detect QRCode with the bounding box. super resolution model is applied to zoom in QRCode when it is small. More... 
core,"Classes struct cv::stereo::MatchQuasiDense  struct cv::stereo::PropagationParameters  class cv::stereo::QuasiDenseStereo  Class containing the methods needed for Quasi Dense Stereo computation. More...  class cv::stereo::StereoBinaryBM  Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. More...  class cv::stereo::StereoBinarySGBM  The class implements the modified H. Hirschmuller algorithm [126] that differs from the original one as follows: More...  class cv::stereo::StereoMatcher  Filters off small noise blobs (speckles) in the disparity map. More... "
core,Read and write video or images sequence with OpenCV.
core,The module provides biological visual systems models (human visual system and others). It also provides derivated objects that take advantage of those bio-inspired models.
core,Bioinspired Module Retina Introduction
core,Classes class cv::bioinspired::Retina  class which allows the Gipsa/Listic Labs model to be used with OpenCV. More...  class cv::bioinspired::RetinaFastToneMapping  a wrapper class which allows the tone mapping algorithm of Meylan&al(2007) to be used with OpenCV. More...  struct cv::bioinspired::RetinaParameters  retina model parameters structure More...  struct cv::bioinspired::SegmentationParameters  parameter structure that stores the transient events detector setup parameters More...  class cv::bioinspired::TransientAreasSegmentationModule  class which provides a transient/moving areas segmentation module More... 
core,"The Machine Learning Library (MLL) is a set of classes and functions for statistical classification, regression, and clustering of data."
core,"Most of the classification and regression algorithms are implemented as C++ classes. As the algorithms have different sets of features (like an ability to handle missing measurements or categorical input variables), there is a little common ground between the classes. This common ground is defined by the class cv::ml::StatModel that all the other ML classes are derived from."
core,See detailed overview here: Machine Learning Overview.
core,Classes class cv::ml::ANN_MLP  Artificial Neural Networks - Multi-Layer Perceptrons. More...  class cv::ml::Boost  Boosted tree classifier derived from DTrees. More...  class cv::ml::DTrees  The class represents a single decision tree or a collection of decision trees. More...  class cv::ml::EM  The class implements the Expectation Maximization algorithm. More...  class cv::ml::KNearest  The class implements K-Nearest Neighbors model. More...  class cv::ml::LogisticRegression  Implements Logistic Regression classifier. More...  class cv::ml::NormalBayesClassifier  Bayes classifier for normally distributed data. More...  class cv::ml::ParamGrid  The structure represents the logarithmic grid range of statmodel parameters. More...  class cv::ml::RTrees  The class implements the random forest predictor. More...  struct cv::ml::SimulatedAnnealingSolverSystem  This class declares example interface for system state used in simulated annealing optimization algorithm. More...  class cv::ml::StatModel  Base class for statistical models in OpenCV ML. More...  class cv::ml::SVM  Support Vector Machines. More...  class cv::ml::SVMSGD  Stochastic Gradient Descent SVM classifier. More...  class cv::ml::TrainData  Class encapsulating training data. More... 
core,"Functions void cv::ml::createConcentricSpheresTestSet (int nsamples, int nfeatures, int nclasses, OutputArray samples, OutputArray responses)  Creates test set.  void cv::ml::randMVNormal (InputArray mean, InputArray cov, int nsamples, OutputArray samples)  Generates sample from multivariate normal distribution.  template<class SimulatedAnnealingSolverSystem > int cv::ml::simulatedAnnealingSolver (SimulatedAnnealingSolverSystem &solverSystem, double initialTemperature, double finalTemperature, double coolingRatio, size_t iterationsPerStep, double *lastTemperature=NULL, cv::RNG &rngEnergy=cv::theRNG())  The class implements simulated annealing for optimization. "
core,Classes class cv::xphoto::GrayworldWB  Gray-world white balance algorithm. More...  class cv::xphoto::LearningBasedWB  More sophisticated learning-based automatic white balance algorithm. More...  class cv::xphoto::SimpleWB  A simple white balance algorithm that works by independently stretching each of the input image channels to the specified range. For increased robustness it ignores the top and bottom \(p\%\) of pixel values. More...  class cv::xphoto::TonemapDurand  This algorithm decomposes image into two layers: base layer and detail layer using bilateral filter and compresses contrast of the base layer thus preserving all the details. More...  class cv::xphoto::WhiteBalancer  The base class for auto white balance algorithms. More... 
core,"Functions void cv::xphoto::applyChannelGains (InputArray src, OutputArray dst, float gainB, float gainG, float gainR)  Implements an efficient fixed-point approximation for applying channel gains, which is the last step of multiple white balance algorithms.  void cv::xphoto::bm3dDenoising (InputArray src, InputOutputArray dstStep1, OutputArray dstStep2, float h=1, int templateWindowSize=4, int searchWindowSize=16, int blockMatchingStep1=2500, int blockMatchingStep2=400, int groupSize=8, int slidingStep=1, float beta=2.0f, int normType=cv::NORM_L2, int step=cv::xphoto::BM3D_STEPALL, int transformType=cv::xphoto::HAAR)  Performs image denoising using the Block-Matching and 3D-filtering algorithm http://www.cs.tut.fi/~foi/GCF-BM3D/BM3D_TIP_2007.pdf with several computational optimizations. Noise expected to be a gaussian white noise.  void cv::xphoto::bm3dDenoising (InputArray src, OutputArray dst, float h=1, int templateWindowSize=4, int searchWindowSize=16, int blockMatchingStep1=2500, int blockMatchingStep2=400, int groupSize=8, int slidingStep=1, float beta=2.0f, int normType=cv::NORM_L2, int step=cv::xphoto::BM3D_STEPALL, int transformType=cv::xphoto::HAAR)  Performs image denoising using the Block-Matching and 3D-filtering algorithm http://www.cs.tut.fi/~foi/GCF-BM3D/BM3D_TIP_2007.pdf with several computational optimizations. Noise expected to be a gaussian white noise.  Ptr< GrayworldWB > cv::xphoto::createGrayworldWB ()  Creates an instance of GrayworldWB.  Ptr< LearningBasedWB > cv::xphoto::createLearningBasedWB (const String &path_to_model=String())  Creates an instance of LearningBasedWB.  Ptr< SimpleWB > cv::xphoto::createSimpleWB ()  Creates an instance of SimpleWB.  Ptr< TonemapDurand > cv::xphoto::createTonemapDurand (float gamma=1.0f, float contrast=4.0f, float saturation=1.0f, float sigma_color=2.0f, float sigma_space=2.0f)  Creates TonemapDurand object.  void cv::xphoto::dctDenoising (const Mat &src, Mat &dst, const double sigma, const int psize=16)  The function implements simple dct-based denoising.  virtual float cv::xphoto::TonemapDurand::getContrast () const =0  virtual float cv::xphoto::TonemapDurand::getSaturation () const =0  virtual float cv::xphoto::TonemapDurand::getSigmaColor () const =0  virtual float cv::xphoto::TonemapDurand::getSigmaSpace () const =0  void cv::xphoto::inpaint (const Mat &src, const Mat &mask, Mat &dst, const int algorithmType)  The function implements different single-image inpainting algorithms.  void cv::xphoto::oilPainting (InputArray src, OutputArray dst, int size, int dynRatio)  oilPainting See the book [46] for details.  void cv::xphoto::oilPainting (InputArray src, OutputArray dst, int size, int dynRatio, int code)  oilPainting See the book [46] for details.  virtual void cv::xphoto::TonemapDurand::setContrast (float contrast)=0  virtual void cv::xphoto::TonemapDurand::setSaturation (float saturation)=0  virtual void cv::xphoto::TonemapDurand::setSigmaColor (float sigma_color)=0  virtual void cv::xphoto::TonemapDurand::setSigmaSpace (float sigma_space)=0 "
core,"Enumerations enum cv::ximgproc::LocalBinarizationMethods { cv::ximgproc::BINARIZATION_NIBLACK = 0 , cv::ximgproc::BINARIZATION_SAUVOLA = 1 , cv::ximgproc::BINARIZATION_WOLF = 2 , cv::ximgproc::BINARIZATION_NICK = 3 }  Specifies the binarization method to use in cv::ximgproc::niBlackThreshold. More...  enum cv::ximgproc::ThinningTypes { cv::ximgproc::THINNING_ZHANGSUEN = 0 , cv::ximgproc::THINNING_GUOHALL = 1 } "
core,"Functions void cv::ximgproc::anisotropicDiffusion (InputArray src, OutputArray dst, float alpha, float K, int niters)  Performs anisotropic diffusion on an image.  void cv::ximgproc::edgePreservingFilter (InputArray src, OutputArray dst, int d, double threshold)  Smoothes an image using the Edge-Preserving filter.  void cv::ximgproc::findEllipses (InputArray image, OutputArray ellipses, float scoreThreshold=0.7f, float reliabilityThreshold=0.5f, float centerDistanceThreshold=0.05f)  Finds ellipses fastly in an image using projective invariant pruning.  void cv::ximgproc::niBlackThreshold (InputArray _src, OutputArray _dst, double maxValue, int type, int blockSize, double k, int binarizationMethod=BINARIZATION_NIBLACK, double r=128)  Performs thresholding on input images using Niblack's technique or some of the popular variations it inspired.  Matx23d cv::ximgproc::PeiLinNormalization (InputArray I)  Calculates an affine transformation that normalize given image using Pei&Lin Normalization.  void cv::ximgproc::PeiLinNormalization (InputArray I, OutputArray T)  void cv::ximgproc::thinning (InputArray src, OutputArray dst, int thinningType=THINNING_ZHANGSUEN)  Applies a binary blob thinning operation, to achieve a skeletization of the input image. "
core,"Two-dimensional phase unwrapping is found in different applications like terrain elevation estimation in synthetic aperture radar (SAR), field mapping in magnetic resonance imaging or as a way of finding corresponding pixels in structured light reconstruction with sinusoidal patterns."
core,"Given a phase map, wrapped between [-pi; pi], phase unwrapping aims at finding the ""true"" phase map by adding the right number of 2*pi to each pixel."
core,"The problem is straightforward for perfect wrapped phase map, but real data are usually not noise-free. Among the different algorithms that were developed, quality-guided phase unwrapping methods are fast and efficient. They follow a path that unwraps high quality pixels first, avoiding error propagation from the start."
core,"In this module, a quality-guided phase unwrapping is implemented following the approach described in [157] ."
core,"Classes class cv::phase_unwrapping::HistogramPhaseUnwrapping  Class implementing two-dimensional phase unwrapping based on [157] This algorithm belongs to the quality-guided phase unwrapping methods. First, it computes a reliability map from second differences between a pixel and its eight neighbours. Reliability values lie between 0 and 16*pi*pi. Then, this reliability map is used to compute the reliabilities of ""edges"". An edge is an entity defined by two pixels that are connected horizontally or vertically. Its reliability is found by adding the the reliabilities of the two pixels connected through it. Edges are sorted in a histogram based on their reliability values. This histogram is then used to unwrap pixels, starting from the highest quality pixel. More...  class cv::phase_unwrapping::PhaseUnwrapping  Abstract base class for phase unwrapping. More... "
core,Namespace for all functions is ft. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern FT_degree_dimension_method.
core,"Enumerations enum { cv::ft::LINEAR = 1 , cv::ft::SINUS = 2 }  enum { cv::ft::ONE_STEP = 1 , cv::ft::MULTI_STEP = 2 , cv::ft::ITERATIVE = 3 } "
core,Namespaces namespace cv::cudev::functional_detail  namespace cv::cudev::vec_math_detail 
core,"Functions  cv::cudev::Texture< T, R >::Texture ()=default  __host__ cv::cudev::Texture< T, R >::Texture (const int rows_, const int cols_, T *data, const size_t step, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)  __host__ cv::cudev::Texture< T, R >::Texture (const size_t sizeInBytes, T *data, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)   cv::cudev::Texture< T, R >::Texture (const Texture &)=default  __host__ cv::cudev::Texture< T, R >::Texture (PtrStepSz< T > src, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)   cv::cudev::Texture< T, R >::Texture (Texture &&)=default  __host__ cv::cudev::TextureOff< T, R >::TextureOff (const int rows, const int cols, T *data, const size_t step, const int yoff_=0, const int xoff_=0, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)   cv::cudev::TextureOff< T, R >::TextureOff (const TextureOff &)=default  __host__ cv::cudev::TextureOff< T, R >::TextureOff (PtrStepSz< T > src, const int yoff_=0, const int xoff_=0, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)   cv::cudev::TextureOff< T, R >::TextureOff (TextureOff &&)=default  __host__ cv::cudev::TextureOffPtr< T, R >::TextureOffPtr (const cudaTextureObject_t tex_, const int yoff_, const int xoff_)  __host__ cv::cudev::TexturePtr< T, R >::TexturePtr ()  __host__ cv::cudev::TexturePtr< uint64, R >::TexturePtr ()  __host__ cv::cudev::TexturePtr< T, R >::TexturePtr (const cudaTextureObject_t tex_)  __host__ cv::cudev::TexturePtr< uint64, R >::TexturePtr (const cudaTextureObject_t tex_)  __host__ cv::cudev::UniqueTexture< T, R >::UniqueTexture () noexcept  __host__ cv::cudev::UniqueTexture< T, R >::UniqueTexture (const int rows, const int cols, T *data, const size_t step, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)  __host__ cv::cudev::UniqueTexture< T, R >::UniqueTexture (const size_t sizeInBytes, T *data, const bool normalizedCoords=false, const cudaTextureFilterMode filterMode=cudaFilterModePoint, const cudaTextureAddressMode addressMode=cudaAddressModeClamp, const cudaTextureReadMode readMode=cudaReadModeElementType)  __host__ cv::cudev::UniqueTexture< T, R >::UniqueTexture (UniqueTexture &&other) noexcept  __host__ cv::cudev::UniqueTexture< T, R >::UniqueTexture (UniqueTexture &)=delete  __host__ cv::cudev::UniqueTexture< T, R >::~UniqueTexture ()  __device__ __forceinline__ char1 cv::cudev::abs (const char1 &a)  __device__ __forceinline__ char2 cv::cudev::abs (const char2 &a)  __device__ __forceinline__ char3 cv::cudev::abs (const char3 &a)  __device__ __forceinline__ char4 cv::cudev::abs (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::abs (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::abs (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::abs (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::abs (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::abs (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::abs (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::abs (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::abs (const float4 &a)  __device__ __forceinline__ int1 cv::cudev::abs (const int1 &a)  __device__ __forceinline__ int2 cv::cudev::abs (const int2 &a)  __device__ __forceinline__ int3 cv::cudev::abs (const int3 &a)  __device__ __forceinline__ int4 cv::cudev::abs (const int4 &a)  __device__ __forceinline__ short1 cv::cudev::abs (const short1 &a)  __device__ __forceinline__ short2 cv::cudev::abs (const short2 &a)  __device__ __forceinline__ short3 cv::cudev::abs (const short3 &a)  __device__ __forceinline__ short4 cv::cudev::abs (const short4 &a)  __device__ __forceinline__ uchar1 cv::cudev::abs (const uchar1 &a)  __device__ __forceinline__ uchar2 cv::cudev::abs (const uchar2 &a)  __device__ __forceinline__ uchar3 cv::cudev::abs (const uchar3 &a)  __device__ __forceinline__ uchar4 cv::cudev::abs (const uchar4 &a)  __device__ __forceinline__ uint1 cv::cudev::abs (const uint1 &a)  __device__ __forceinline__ uint2 cv::cudev::abs (const uint2 &a)  __device__ __forceinline__ uint3 cv::cudev::abs (const uint3 &a)  __device__ __forceinline__ uint4 cv::cudev::abs (const uint4 &a)  __device__ __forceinline__ ushort1 cv::cudev::abs (const ushort1 &a)  __device__ __forceinline__ ushort2 cv::cudev::abs (const ushort2 &a)  __device__ __forceinline__ ushort3 cv::cudev::abs (const ushort3 &a)  __device__ __forceinline__ ushort4 cv::cudev::abs (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, abs_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::abs_ (const SrcPtr &src)  template<class SrcPtr1 , class SrcPtr2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, absdiff_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > > cv::cudev::absdiff_ (const SrcPtr1 &src1, const SrcPtr2 &src2)  __device__ __forceinline__ float1 cv::cudev::acos (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::acos (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::acos (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::acos (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::acos (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::acos (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::acos (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::acos (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::acos (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::acos (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::acos (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::acos (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::acos (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::acos (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, acos_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::acos_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::acosh (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::acosh (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::acosh (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::acosh (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::acosh (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::acosh (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::acosh (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::acosh (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::acosh (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::acosh (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::acosh (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::acosh (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::acosh (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::acosh (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, acosh_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::acosh_ (const SrcPtr &src)  static __host__ AffineMapPtrSz cv::cudev::affineMap (Size dstSize, const GpuMat_< float > &warpMat)  __device__ __forceinline__ float1 cv::cudev::asin (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::asin (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::asin (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::asin (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::asin (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::asin (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::asin (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::asin (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::asin (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::asin (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::asin (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::asin (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::asin (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::asin (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, asin_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::asin_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::asinh (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::asinh (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::asinh (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::asinh (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::asinh (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::asinh (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::asinh (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::asinh (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::asinh (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::asinh (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::asinh (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::asinh (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::asinh (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::asinh (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, asinh_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::asinh_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::atan (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::atan (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::atan (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::atan (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::atan (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::atan (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::atan (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::atan (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::atan (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::atan (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::atan (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::atan (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::atan (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::atan (const ushort4 &a)  __device__ __forceinline__ float1 cv::cudev::atan2 (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const char1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const char2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const char3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const char4 &a, float s)  __device__ __forceinline__ double1 cv::cudev::atan2 (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::atan2 (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::atan2 (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::atan2 (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const double4 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const float4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const int1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const int2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const int3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const int4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const short1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const short2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const short3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const short4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const uchar1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const uchar2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const uchar3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const uchar4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const uint1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const uint2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const uint3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const uint4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::atan2 (const ushort1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::atan2 (const ushort2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::atan2 (const ushort3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::atan2 (const ushort4 &a, float s)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::atan2 (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::atan2 (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::atan2 (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::atan2 (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::atan2 (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::atan2 (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::atan2 (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::atan2 (float s, const ushort4 &b)  template<class SrcPtr1 , class SrcPtr2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, atan2_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > > cv::cudev::atan2_ (const SrcPtr1 &src1, const SrcPtr2 &src2)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, atan_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::atan_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::atanh (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::atanh (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::atanh (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::atanh (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::atanh (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::atanh (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::atanh (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::atanh (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::atanh (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::atanh (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::atanh (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::atanh (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::atanh (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::atanh (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, atanh_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::atanh_ (const SrcPtr &src)  static __device__ double cv::cudev::atomicAdd (double *address, double val)  __device__ __forceinline__ float cv::cudev::atomicAdd (float *address, float val)  __device__ __forceinline__ int cv::cudev::atomicAdd (int *address, int val)  __device__ __forceinline__ uint cv::cudev::atomicAdd (uint *address, uint val)  static __device__ double cv::cudev::atomicMax (double *address, double val)  static __device__ float cv::cudev::atomicMax (float *address, float val)  __device__ __forceinline__ int cv::cudev::atomicMax (int *address, int val)  __device__ __forceinline__ uint cv::cudev::atomicMax (uint *address, uint val)  static __device__ double cv::cudev::atomicMin (double *address, double val)  static __device__ float cv::cudev::atomicMin (float *address, float val)  __device__ __forceinline__ int cv::cudev::atomicMin (int *address, int val)  __device__ __forceinline__ uint cv::cudev::atomicMin (uint *address, uint val)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_GRAY_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HLS4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HLS4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HLS_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HLS_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HSV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HSV4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HSV_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_HSV_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_Luv_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_XYZ4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_XYZ_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_YCrCb4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_YCrCb_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_YUV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGR_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGR_to_YUV_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_GRAY_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HLS4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HLS4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HLS_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HLS_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HSV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HSV4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HSV_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_HSV_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_Luv_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_XYZ4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_XYZ_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_YCrCb4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_YCrCb_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_YUV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, BGRA_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::BGRA_to_YUV_ (const SrcPtr &src)  template<int n0, int n1, class Op > __host__ __device__ BinaryTupleAdapter< Op, n0, n1 > cv::cudev::binaryTupleAdapter (const Op &op)  template<class Op > __host__ __device__ Binder1st< Op > cv::cudev::bind1st (const Op &op, const typename Op::first_argument_type &arg1)  template<class Op > __host__ __device__ Binder2nd< Op > cv::cudev::bind2nd (const Op &op, const typename Op::second_argument_type &arg2)  template<class InIt , class OutIt > __device__ static __forceinline__ void cv::cudev::blockCopy (InIt beg, InIt end, OutIt out)  template<class It , typename T > __device__ static __forceinline__ void cv::cudev::blockFill (It beg, It end, const T &value)  template<int N, typename P0 , typename P1 , typename P2 , typename P3 , typename P4 , typename P5 , typename P6 , typename P7 , typename P8 , typename P9 , typename R0 , typename R1 , typename R2 , typename R3 , typename R4 , typename R5 , typename R6 , typename R7 , typename R8 , typename R9 , class Op0 , class Op1 , class Op2 , class Op3 , class Op4 , class Op5 , class Op6 , class Op7 , class Op8 , class Op9 > __device__ __forceinline__ void cv::cudev::blockReduce (const tuple< P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 > &smem, const tuple< R0, R1, R2, R3, R4, R5, R6, R7, R8, R9 > &val, uint tid, const tuple< Op0, Op1, Op2, Op3, Op4, Op5, Op6, Op7, Op8, Op9 > &op)  template<int N, typename T , class Op > __device__ __forceinline__ void cv::cudev::blockReduce (volatile T *smem, T &val, uint tid, const Op &op)  template<int N, typename KP0 , typename KP1 , typename KP2 , typename KP3 , typename KP4 , typename KP5 , typename KP6 , typename KP7 , typename KP8 , typename KP9 , typename KR0 , typename KR1 , typename KR2 , typename KR3 , typename KR4 , typename KR5 , typename KR6 , typename KR7 , typename KR8 , typename KR9 , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp0 , class Cmp1 , class Cmp2 , class Cmp3 , class Cmp4 , class Cmp5 , class Cmp6 , class Cmp7 , class Cmp8 , class Cmp9 > __device__ __forceinline__ void cv::cudev::blockReduceKeyVal (const tuple< KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9 > &skeys, const tuple< KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9 > &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const tuple< Cmp0, Cmp1, Cmp2, Cmp3, Cmp4, Cmp5, Cmp6, Cmp7, Cmp8, Cmp9 > &cmp)  template<int N, typename K , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp > __device__ __forceinline__ void cv::cudev::blockReduceKeyVal (volatile K *skeys, K &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const Cmp &cmp)  template<int N, typename K , typename V , class Cmp > __device__ __forceinline__ void cv::cudev::blockReduceKeyVal (volatile K *skeys, K &key, volatile V *svals, V &val, uint tid, const Cmp &cmp)  template<int THREADS_NUM, typename T > __device__ __forceinline__ T cv::cudev::blockScanExclusive (T data, volatile T *smem, uint tid)  template<int THREADS_NUM, typename T > __device__ T cv::cudev::blockScanInclusive (T data, volatile T *smem, uint tid)  template<class InIt , class OutIt , class UnOp > __device__ static __forceinline__ void cv::cudev::blockTransform (InIt beg, InIt end, OutIt out, const UnOp &op)  template<class InIt1 , class InIt2 , class OutIt , class BinOp > __device__ static __forceinline__ void cv::cudev::blockTransform (InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, const BinOp &op)  template<class OutIt , typename T > __device__ static __forceinline__ void cv::cudev::blockYota (OutIt beg, OutIt end, T value)  template<class SrcPtr > __host__ BrdConstant< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::brdConstant (const SrcPtr &src)  template<class SrcPtr > __host__ BrdConstant< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::brdConstant (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type val)  template<class SrcPtr > __host__ BrdBase< BrdReflect, typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::brdReflect (const SrcPtr &src)  template<class SrcPtr > __host__ BrdBase< BrdReflect101, typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::brdReflect101 (const SrcPtr &src)  template<class SrcPtr > __host__ BrdBase< BrdReplicate, typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::brdReplicate (const SrcPtr &src)  template<class SrcPtr > __host__ BrdBase< BrdWrap, typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::brdWrap (const SrcPtr &src)  template<typename T , typename D > __device__ __forceinline__ D cv::cudev::cast_fp16 (T v)  template<> __device__ __forceinline__ short cv::cudev::cast_fp16< float, short > (float v)  template<> __device__ __forceinline__ float cv::cudev::cast_fp16< short, float > (short v)  __host__ __forceinline__ void cv::cudev::checkCudaError (cudaError_t err, const char *file, const int line, const char *func)  template<typename T > __host__ ConstantPtr< T > cv::cudev::constantPtr (T value)  template<typename T > ConstantPtrSz< T > __host__ cv::cudev::constantPtr (T value, int rows, int cols)  __device__ __forceinline__ float1 cv::cudev::cos (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::cos (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::cos (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::cos (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::cos (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::cos (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::cos (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::cos (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::cos (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::cos (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::cos (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::cos (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::cos (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::cos (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, cos_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::cos_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::cosh (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::cosh (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::cosh (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::cosh (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::cosh (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::cosh (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::cosh (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::cosh (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::cosh (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::cosh (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::cosh (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::cosh (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::cosh (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::cosh (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, cosh_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::cosh_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< CountNonZeroExprBody< SrcPtr > > cv::cudev::countNonZero_ (const SrcPtr &src)  template<typename D , class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, saturate_cast_func< typename PtrTraits< SrcPtr >::value_type, D > > > cv::cudev::cvt_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< DerivXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::derivX_ (const SrcPtr &src)  template<class SrcPtr > __host__ DerivXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::derivXPtr (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< DerivYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::derivY_ (const SrcPtr &src)  template<class SrcPtr > __host__ DerivYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::derivYPtr (const SrcPtr &src)  __host__ __device__ __forceinline__ int cv::cudev::divUp (int total, int grain)  __device__ __forceinline__ float1 cv::cudev::exp (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::exp (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::exp (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::exp (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::exp (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::exp (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::exp (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::exp (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::exp (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::exp (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::exp (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::exp (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::exp (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::exp (const ushort4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::exp10 (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::exp10 (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::exp10 (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::exp10 (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::exp10 (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::exp10 (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::exp10 (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::exp10 (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, exp10_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::exp10_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::exp2 (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::exp2 (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::exp2 (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::exp2 (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::exp2 (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::exp2 (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::exp2 (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::exp2 (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::exp2 (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::exp2 (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::exp2 (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::exp2 (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::exp2 (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::exp2 (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, exp2_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::exp2_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, exp_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::exp_ (const SrcPtr &src)  __host__ cudaTextureObject_t cv::cudev::UniqueTexture< T, R >::get () const noexcept  template<class Ptr2DSz > __host__ int cv::cudev::getCols (const Ptr2DSz &ptr)  template<class Ptr2DSz > __host__ int cv::cudev::getRows (const Ptr2DSz &ptr)  template<typename T > __host__ GlobPtrSz< T > cv::cudev::globPtr (const GpuMat &mat)  template<typename T > __host__ GlobPtrSz< T > cv::cudev::globPtr (const GpuMat_< T > &mat)  template<typename T > __host__ __device__ GlobPtr< T > cv::cudev::globPtr (T *data, size_t step)  template<typename T > __host__ __device__ GlobPtrSz< T > cv::cudev::globPtr (T *data, size_t step, int rows, int cols)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, GRAY_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::GRAY_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, GRAY_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::GRAY_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridCalcSum (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType > __host__ void cv::cudev::gridCalcSum (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridCalcSum_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridCalcSum_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridCopy (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtr &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridCopy (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr > __host__ void cv::cudev::gridCopy (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridCopy_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtr &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridCopy_ (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 , class MaskPtr > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename D0 , typename D1 , typename D2 , typename D3 > __host__ void cv::cudev::gridCopy_ (const SrcPtrTuple &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridCountNonZero (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType > __host__ void cv::cudev::gridCountNonZero (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridCountNonZero_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridCountNonZero_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridFindMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType > __host__ void cv::cudev::gridFindMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridFindMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridFindMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridFindMinMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType > __host__ void cv::cudev::gridFindMinMaxVal (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridFindMinMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridFindMinMaxVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridFindMinVal (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType > __host__ void cv::cudev::gridFindMinVal (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridFindMinVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridFindMinVal_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<int BIN_COUNT, class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridHistogram (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<int BIN_COUNT, class SrcPtr , typename ResType > __host__ void cv::cudev::gridHistogram (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<int BIN_COUNT, class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridHistogram_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<int BIN_COUNT, class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridHistogram_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridIntegral (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename DstType , class MaskPtr > __host__ void cv::cudev::gridMerge (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename DstType > __host__ void cv::cudev::gridMerge (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename DstType , class MaskPtr > __host__ void cv::cudev::gridMerge (const SrcPtrTuple &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtrTuple , typename DstType > __host__ void cv::cudev::gridMerge (const SrcPtrTuple &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class ArrayType , size_t ArraySize, typename DstType , class MaskPtr > __host__ void cv::cudev::gridMerge (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class ArrayType , size_t ArraySize, typename DstType > __host__ void cv::cudev::gridMerge (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class ArrayType , size_t ArraySize, typename DstType > __host__ void cv::cudev::gridMerge (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename DstType , class MaskPtr > __host__ void cv::cudev::gridMerge_ (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename DstType > __host__ void cv::cudev::gridMerge_ (const SrcPtrTuple &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename DstType , class MaskPtr > __host__ void cv::cudev::gridMerge_ (const SrcPtrTuple &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtrTuple , typename DstType > __host__ void cv::cudev::gridMerge_ (const SrcPtrTuple &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class ArrayType , size_t ArraySize, typename DstType , class MaskPtr > __host__ void cv::cudev::gridMergeArray (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class ArrayType , size_t ArraySize, typename DstType , class MaskPtr > __host__ void cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class ArrayType , size_t ArraySize, typename DstType > __host__ void cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class ArrayType , size_t ArraySize, typename DstType , class MaskPtr > __host__ void cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class ArrayType , size_t ArraySize, typename DstType > __host__ void cv::cudev::gridMergeArray_ (const std::array< ArrayType, ArraySize > &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridMinMaxLoc (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename ResType > __host__ void cv::cudev::gridMinMaxLoc (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridMinMaxLoc_ (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridMinMaxLoc_ (const SrcPtr &src, GpuMat_< ResType > &valBuf, GpuMat_< int > &locBuf, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridPyrDown (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class Brd , class SrcPtr , typename DstType > __host__ void cv::cudev::gridPyrDown_ (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridPyrUp (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class Reductor , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridReduceToColumn (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Reductor , class SrcPtr , typename ResType > __host__ void cv::cudev::gridReduceToColumn (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Reductor , class Policy , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridReduceToColumn_ (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Reductor , class Policy , class SrcPtr , typename ResType > __host__ void cv::cudev::gridReduceToColumn_ (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class Reductor , class SrcPtr , typename ResType , class MaskPtr > __host__ void cv::cudev::gridReduceToRow (const SrcPtr &src, GpuMat_< ResType > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Reductor , class SrcPtr , typename ResType > __host__ void cv::cudev::gridReduceToRow (const SrcPtr &src, GpuMat_< ResType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , int COUNT, class MaskPtr > __host__ void cv::cudev::gridSplit (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[COUNT], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , int COUNT> __host__ void cv::cudev::gridSplit (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[COUNT], Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , int COUNT, class MaskPtr > __host__ void cv::cudev::gridSplit (const SrcPtr &src, GpuMat_< DstType >(&dst)[COUNT], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , int COUNT> __host__ void cv::cudev::gridSplit (const SrcPtr &src, GpuMat_< DstType >(&dst)[COUNT], Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, const tuple< GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > &, GpuMat_< DstType > & > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[2], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[2], Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[3], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[3], Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[4], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GlobPtrSz< DstType >(&dst)[4], Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[2], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[2], Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[3], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[3], Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class MaskPtr > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[4], const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridSplit_ (const SrcPtr &src, GpuMat_< DstType >(&dst)[4], Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op , class MaskPtr > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const Op &op, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType1 > &dst1, const GlobPtrSz< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 , class MaskPtr > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType2 > &dst1, const GlobPtrSz< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op , class MaskPtr > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType , class Op > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const Op &op, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 , class MaskPtr > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class Op1 , class Op2 > __host__ void cv::cudev::gridTransformBinary (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const Op1 &op1, const Op2 &op2, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp , class MaskPtr > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const BinOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType > &dst, const BinOp &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 , class MaskPtr > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType1 > &dst1, const GlobPtrSz< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, const GlobPtrSz< DstType1 > &dst1, const GlobPtrSz< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp , class MaskPtr > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const BinOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType , class BinOp > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType > &dst, const BinOp &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 , class MaskPtr > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr1 , class SrcPtr2 , typename DstType1 , typename DstType2 , class BinOp1 , class BinOp2 > __host__ void cv::cudev::gridTransformBinary_ (const SrcPtr1 &src1, const SrcPtr2 &src2, GpuMat_< DstType1 > &dst1, GpuMat_< DstType2 > &dst2, const BinOp1 &op1, const BinOp2 &op2, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , class OpTuple > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , class OpTuple > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple > __host__ void cv::cudev::gridTransformTuple (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GlobPtrSz< D0 >, GlobPtrSz< D1 >, GlobPtrSz< D2 >, GlobPtrSz< D3 > > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , class OpTuple > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , class OpTuple > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple , class MaskPtr > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename D0 , typename D1 , typename D2 , typename D3 , class OpTuple > __host__ void cv::cudev::gridTransformTuple_ (const SrcPtr &src, const tuple< GpuMat_< D0 > &, GpuMat_< D1 > &, GpuMat_< D2 > &, GpuMat_< D3 > & > &dst, const OpTuple &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class Op , class MaskPtr > __host__ void cv::cudev::gridTransformUnary (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class Op > __host__ void cv::cudev::gridTransformUnary (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const Op &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class Op , class MaskPtr > __host__ void cv::cudev::gridTransformUnary (const SrcPtr &src, GpuMat_< DstType > &dst, const Op &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType , class Op > __host__ void cv::cudev::gridTransformUnary (const SrcPtr &src, GpuMat_< DstType > &dst, const Op &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class UnOp , class MaskPtr > __host__ void cv::cudev::gridTransformUnary_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const UnOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class UnOp > __host__ void cv::cudev::gridTransformUnary_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, const UnOp &op, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class UnOp , class MaskPtr > __host__ void cv::cudev::gridTransformUnary_ (const SrcPtr &src, GpuMat_< DstType > &dst, const UnOp &op, const MaskPtr &mask, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType , class UnOp > __host__ void cv::cudev::gridTransformUnary_ (const SrcPtr &src, GpuMat_< DstType > &dst, const UnOp &op, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridTranspose (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class SrcPtr , typename DstType > __host__ void cv::cudev::gridTranspose (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridTranspose_ (const SrcPtr &src, const GlobPtrSz< DstType > &dst, Stream &stream=Stream::Null())  template<class Policy , class SrcPtr , typename DstType > __host__ void cv::cudev::gridTranspose_ (const SrcPtr &src, GpuMat_< DstType > &dst, Stream &stream=Stream::Null())  template<int BIN_COUNT, class SrcPtr > __host__ Expr< HistogramBody< BIN_COUNT, SrcPtr > > cv::cudev::histogram_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_BGR_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_BGRA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_RGB_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS4_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS4_to_RGBA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_BGR_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_BGRA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_RGB_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HLS_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HLS_to_RGBA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_BGR_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_BGRA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_RGB_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV4_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV4_to_RGBA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGR_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_BGR_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_BGRA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_BGRA_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGB_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_RGB_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, HSV_to_RGBA_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::HSV_to_RGBA_FULL_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::hypot (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const char1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const char2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const char3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const char4 &a, float s)  __device__ __forceinline__ double1 cv::cudev::hypot (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::hypot (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::hypot (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::hypot (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const double4 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const float4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::hypot (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const int1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const int2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const int3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const int4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::hypot (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const short1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const short2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const short3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const short4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::hypot (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const uchar1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const uchar2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const uchar3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const uchar4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::hypot (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const uint1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const uint2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const uint3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const uint4 &a, float s)  __device__ __forceinline__ float1 cv::cudev::hypot (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::hypot (const ushort1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::hypot (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::hypot (const ushort2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::hypot (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::hypot (const ushort3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::hypot (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::hypot (const ushort4 &a, float s)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::hypot (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::hypot (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::hypot (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::hypot (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::hypot (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::hypot (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::hypot (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::hypot (float s, const ushort4 &b)  template<class SrcPtr1 , class SrcPtr2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, hypot_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > > cv::cudev::hypot_ (const SrcPtr1 &src1, const SrcPtr2 &src2)  template<class SrcPtr > __host__ Expr< IntegralBody< SrcPtr > > cv::cudev::integral_ (const SrcPtr &src)  template<class SrcPtr > __host__ IntegerAreaInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::interArea (const SrcPtr &src, Size areaSize)  template<class SrcPtr > __host__ CommonAreaInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::interArea (const SrcPtr &src, Size2f areaSize)  template<class SrcPtr > __host__ CubicInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::interCubic (const SrcPtr &src)  template<class SrcPtr > __host__ LinearInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::interLinear (const SrcPtr &src)  template<class SrcPtr > __host__ NearestInterPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::interNearest (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_LBGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_LBGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_LRGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_LRGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_LBGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_LBGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_LRGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_LRGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Lab_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Lab_to_RGBA_ (const SrcPtr &src)  template<int ksize, class SrcPtr > __host__ Expr< LaplacianPtrSz< ksize, typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::laplacian_ (const SrcPtr &src)  template<int ksize, class SrcPtr > __host__ LaplacianPtrSz< ksize, typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::laplacianPtr (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGR_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGR_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGR_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGR_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGR_to_Luv_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGRA_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGRA_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGRA_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LBGRA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LBGRA_to_Luv_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::log (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::log (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::log (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::log (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::log (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::log (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::log (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::log (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::log (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::log (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::log (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::log (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::log (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::log (const ushort4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::log10 (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::log10 (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::log10 (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::log10 (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::log10 (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::log10 (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::log10 (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::log10 (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, log10_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::log10_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::log2 (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::log2 (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::log2 (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::log2 (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::log2 (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::log2 (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::log2 (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::log2 (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::log2 (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::log2 (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::log2 (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::log2 (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::log2 (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::log2 (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, log2_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::log2_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, log_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::log_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGB_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGB_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGB_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGB_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGB_to_Luv_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGBA_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGBA_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGBA_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, LRGBA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::LRGBA_to_Luv_ (const SrcPtr &src)  template<class SrcPtr , class TablePtr > __host__ Expr< LutPtrSz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< TablePtr >::ptr_type > > cv::cudev::lut_ (const SrcPtr &src, const TablePtr &tbl)  template<class SrcPtr , class TablePtr > __host__ LutPtrSz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< TablePtr >::ptr_type > cv::cudev::lutPtr (const SrcPtr &src, const TablePtr &tbl)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_LBGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_LBGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_LRGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_LRGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LBGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_LBGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LBGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_LBGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LRGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_LRGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_LRGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_LRGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Luv_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::Luv_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr1 , class SrcPtr2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, magnitude_func< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > > cv::cudev::magnitude_ (const SrcPtr1 &src1, const SrcPtr2 &src2)  template<class Body > __host__ Expr< Body > cv::cudev::makeExpr (const Body &body)  __device__ __forceinline__ char1 cv::cudev::max (char s, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::max (char s, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::max (char s, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::max (char s, const char4 &b)  __device__ __forceinline__ char1 cv::cudev::max (const char1 &a, char s)  __device__ __forceinline__ char1 cv::cudev::max (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const char1 &a, float s)  __device__ __forceinline__ char2 cv::cudev::max (const char2 &a, char s)  __device__ __forceinline__ char2 cv::cudev::max (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const char2 &a, float s)  __device__ __forceinline__ char3 cv::cudev::max (const char3 &a, char s)  __device__ __forceinline__ char3 cv::cudev::max (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const char3 &a, float s)  __device__ __forceinline__ char4 cv::cudev::max (const char4 &a, char s)  __device__ __forceinline__ char4 cv::cudev::max (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const char4 &a, float s)  __device__ __forceinline__ double1 cv::cudev::max (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::max (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::max (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::max (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const double4 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::max (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::max (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::max (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const float4 &a, float s)  __device__ __forceinline__ int1 cv::cudev::max (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const int1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::max (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::max (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const int2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::max (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::max (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const int3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::max (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::max (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const int4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::max (const int4 &a, int s)  __device__ __forceinline__ short1 cv::cudev::max (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const short1 &a, float s)  __device__ __forceinline__ short1 cv::cudev::max (const short1 &a, short s)  __device__ __forceinline__ short2 cv::cudev::max (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const short2 &a, float s)  __device__ __forceinline__ short2 cv::cudev::max (const short2 &a, short s)  __device__ __forceinline__ short3 cv::cudev::max (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const short3 &a, float s)  __device__ __forceinline__ short3 cv::cudev::max (const short3 &a, short s)  __device__ __forceinline__ short4 cv::cudev::max (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const short4 &a, float s)  __device__ __forceinline__ short4 cv::cudev::max (const short4 &a, short s)  __device__ __forceinline__ uchar1 cv::cudev::max (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const uchar1 &a, float s)  __device__ __forceinline__ uchar1 cv::cudev::max (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::max (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const uchar2 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::max (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::max (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const uchar3 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::max (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::max (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const uchar4 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::max (const uchar4 &a, uchar s)  __device__ __forceinline__ uint1 cv::cudev::max (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const uint1 &a, float s)  __device__ __forceinline__ uint1 cv::cudev::max (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::max (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const uint2 &a, float s)  __device__ __forceinline__ uint2 cv::cudev::max (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::max (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const uint3 &a, float s)  __device__ __forceinline__ uint3 cv::cudev::max (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::max (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const uint4 &a, float s)  __device__ __forceinline__ uint4 cv::cudev::max (const uint4 &a, uint s)  __device__ __forceinline__ ushort1 cv::cudev::max (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::max (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::max (const ushort1 &a, float s)  __device__ __forceinline__ ushort1 cv::cudev::max (const ushort1 &a, ushort s)  __device__ __forceinline__ ushort2 cv::cudev::max (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::max (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::max (const ushort2 &a, float s)  __device__ __forceinline__ ushort2 cv::cudev::max (const ushort2 &a, ushort s)  __device__ __forceinline__ ushort3 cv::cudev::max (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::max (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::max (const ushort3 &a, float s)  __device__ __forceinline__ ushort3 cv::cudev::max (const ushort3 &a, ushort s)  __device__ __forceinline__ ushort4 cv::cudev::max (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::max (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::max (const ushort4 &a, float s)  __device__ __forceinline__ ushort4 cv::cudev::max (const ushort4 &a, ushort s)  __device__ __forceinline__ double1 cv::cudev::max (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::max (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::max (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::max (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::max (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::max (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::max (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::max (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::max (float s, const ushort4 &b)  __device__ __forceinline__ int1 cv::cudev::max (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::max (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::max (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::max (int s, const int4 &b)  __device__ __forceinline__ short1 cv::cudev::max (short s, const short1 &b)  __device__ __forceinline__ short2 cv::cudev::max (short s, const short2 &b)  __device__ __forceinline__ short3 cv::cudev::max (short s, const short3 &b)  __device__ __forceinline__ short4 cv::cudev::max (short s, const short4 &b)  __device__ __forceinline__ uchar1 cv::cudev::max (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::max (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::max (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::max (uchar s, const uchar4 &b)  __device__ __forceinline__ uint1 cv::cudev::max (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::max (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::max (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::max (uint s, const uint4 &b)  __device__ __forceinline__ ushort1 cv::cudev::max (ushort s, const ushort1 &b)  __device__ __forceinline__ ushort2 cv::cudev::max (ushort s, const ushort2 &b)  __device__ __forceinline__ ushort3 cv::cudev::max (ushort s, const ushort3 &b)  __device__ __forceinline__ ushort4 cv::cudev::max (ushort s, const ushort4 &b)  template<class SrcPtr1 , class SrcPtr2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, maximum< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > > cv::cudev::max_ (const SrcPtr1 &src1, const SrcPtr2 &src2)  template<class SrcPtr > __host__ Expr< FindMaxValExprBody< SrcPtr > > cv::cudev::maxVal_ (const SrcPtr &src)  __device__ __forceinline__ char1 cv::cudev::min (char s, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::min (char s, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::min (char s, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::min (char s, const char4 &b)  __device__ __forceinline__ char1 cv::cudev::min (const char1 &a, char s)  __device__ __forceinline__ char1 cv::cudev::min (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const char1 &a, float s)  __device__ __forceinline__ char2 cv::cudev::min (const char2 &a, char s)  __device__ __forceinline__ char2 cv::cudev::min (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const char2 &a, float s)  __device__ __forceinline__ char3 cv::cudev::min (const char3 &a, char s)  __device__ __forceinline__ char3 cv::cudev::min (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const char3 &a, float s)  __device__ __forceinline__ char4 cv::cudev::min (const char4 &a, char s)  __device__ __forceinline__ char4 cv::cudev::min (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const char4 &a, float s)  __device__ __forceinline__ double1 cv::cudev::min (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::min (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::min (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::min (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const double4 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::min (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::min (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::min (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const float4 &a, float s)  __device__ __forceinline__ int1 cv::cudev::min (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const int1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::min (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::min (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const int2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::min (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::min (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const int3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::min (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::min (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const int4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::min (const int4 &a, int s)  __device__ __forceinline__ short1 cv::cudev::min (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const short1 &a, float s)  __device__ __forceinline__ short1 cv::cudev::min (const short1 &a, short s)  __device__ __forceinline__ short2 cv::cudev::min (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const short2 &a, float s)  __device__ __forceinline__ short2 cv::cudev::min (const short2 &a, short s)  __device__ __forceinline__ short3 cv::cudev::min (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const short3 &a, float s)  __device__ __forceinline__ short3 cv::cudev::min (const short3 &a, short s)  __device__ __forceinline__ short4 cv::cudev::min (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const short4 &a, float s)  __device__ __forceinline__ short4 cv::cudev::min (const short4 &a, short s)  __device__ __forceinline__ uchar1 cv::cudev::min (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const uchar1 &a, float s)  __device__ __forceinline__ uchar1 cv::cudev::min (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::min (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const uchar2 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::min (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::min (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const uchar3 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::min (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::min (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const uchar4 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::min (const uchar4 &a, uchar s)  __device__ __forceinline__ uint1 cv::cudev::min (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const uint1 &a, float s)  __device__ __forceinline__ uint1 cv::cudev::min (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::min (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const uint2 &a, float s)  __device__ __forceinline__ uint2 cv::cudev::min (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::min (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const uint3 &a, float s)  __device__ __forceinline__ uint3 cv::cudev::min (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::min (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const uint4 &a, float s)  __device__ __forceinline__ uint4 cv::cudev::min (const uint4 &a, uint s)  __device__ __forceinline__ ushort1 cv::cudev::min (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::min (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::min (const ushort1 &a, float s)  __device__ __forceinline__ ushort1 cv::cudev::min (const ushort1 &a, ushort s)  __device__ __forceinline__ ushort2 cv::cudev::min (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::min (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::min (const ushort2 &a, float s)  __device__ __forceinline__ ushort2 cv::cudev::min (const ushort2 &a, ushort s)  __device__ __forceinline__ ushort3 cv::cudev::min (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::min (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::min (const ushort3 &a, float s)  __device__ __forceinline__ ushort3 cv::cudev::min (const ushort3 &a, ushort s)  __device__ __forceinline__ ushort4 cv::cudev::min (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::min (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::min (const ushort4 &a, float s)  __device__ __forceinline__ ushort4 cv::cudev::min (const ushort4 &a, ushort s)  __device__ __forceinline__ double1 cv::cudev::min (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::min (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::min (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::min (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::min (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::min (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::min (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::min (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::min (float s, const ushort4 &b)  __device__ __forceinline__ int1 cv::cudev::min (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::min (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::min (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::min (int s, const int4 &b)  __device__ __forceinline__ short1 cv::cudev::min (short s, const short1 &b)  __device__ __forceinline__ short2 cv::cudev::min (short s, const short2 &b)  __device__ __forceinline__ short3 cv::cudev::min (short s, const short3 &b)  __device__ __forceinline__ short4 cv::cudev::min (short s, const short4 &b)  __device__ __forceinline__ uchar1 cv::cudev::min (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::min (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::min (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::min (uchar s, const uchar4 &b)  __device__ __forceinline__ uint1 cv::cudev::min (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::min (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::min (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::min (uint s, const uint4 &b)  __device__ __forceinline__ ushort1 cv::cudev::min (ushort s, const ushort1 &b)  __device__ __forceinline__ ushort2 cv::cudev::min (ushort s, const ushort2 &b)  __device__ __forceinline__ ushort3 cv::cudev::min (ushort s, const ushort3 &b)  __device__ __forceinline__ ushort4 cv::cudev::min (ushort s, const ushort4 &b)  template<class SrcPtr1 , class SrcPtr2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< SrcPtr1 >::ptr_type, typename PtrTraits< SrcPtr2 >::ptr_type, minimum< typename LargerType< typename PtrTraits< SrcPtr1 >::value_type, typename PtrTraits< SrcPtr2 >::value_type >::type > > > cv::cudev::min_ (const SrcPtr1 &src1, const SrcPtr2 &src2)  template<class SrcPtr > __host__ Expr< FindMinMaxValExprBody< SrcPtr > > cv::cudev::minMaxVal_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< FindMinValExprBody< SrcPtr > > cv::cudev::minVal_ (const SrcPtr &src)  template<class Predicate > __host__ __device__ UnaryNegate< Predicate > cv::cudev::not1 (const Predicate &pred)  template<class Predicate > __host__ __device__ BinaryNegate< Predicate > cv::cudev::not2 (const Predicate &pred)  __host__ cv::cudev::UniqueTexture< T, R >::operator bool () const noexcept  __host__ cv::cudev::Texture< T, R >::operator bool () const noexcept  __host__ cv::cudev::TextureOff< T, R >::operator TextureOffPtr< T, R > () const  __host__ cv::cudev::Texture< T, R >::operator TexturePtr< T, R > () const  __device__ __forceinline__ uchar1 cv::cudev::operator! (const char1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const char2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const char3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const char4 &a)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const double1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const double2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const double3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const double4 &a)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, logical_not< typename Body::value_type > > > cv::cudev::operator! (const Expr< Body > &src)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const float1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const float2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const float3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const float4 &a)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_not< T > > > cv::cudev::operator! (const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, logical_not< T > > > cv::cudev::operator! (const GpuMat_< T > &src)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const int1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const int2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const int3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const int4 &a)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const short1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const short2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const short3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const short4 &a)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, logical_not< T > > > cv::cudev::operator! (const Texture< T > &src)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const uchar1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const uchar2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const uchar3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const uchar4 &a)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const uint1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const uint2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const uint3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const uint4 &a)  __device__ __forceinline__ uchar1 cv::cudev::operator! (const ushort1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator! (const ushort2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator! (const ushort3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator! (const ushort4 &a)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< not_equal_to< typename Body::value_type > > > > cv::cudev::operator!= (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator!= (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator!= (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator!= (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, not_equal_to< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator!= (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< not_equal_to< T > > > > cv::cudev::operator!= (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator!= (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< not_equal_to< T > > > > cv::cudev::operator!= (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator!= (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< not_equal_to< T > > > > cv::cudev::operator!= (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, not_equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator!= (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, not_equal_to< T > > > cv::cudev::operator!= (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< not_equal_to< T > > > > cv::cudev::operator!= (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< not_equal_to< T > > > > cv::cudev::operator!= (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< not_equal_to< T > > > > cv::cudev::operator!= (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< not_equal_to< typename Body::value_type > > > > cv::cudev::operator!= (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator!= (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator!= (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator!= (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator!= (ushort s, const ushort4 &b)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< modulus< typename Body::value_type > > > > cv::cudev::operator% (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator% (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator% (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator% (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, modulus< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator% (const Expr< Body1 > &a, const Expr< Body2 > &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< modulus< T > > > > cv::cudev::operator% (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator% (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< modulus< T > > > > cv::cudev::operator% (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator% (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const GpuMat_< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< modulus< T > > > > cv::cudev::operator% (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, modulus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator% (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, modulus< T > > > cv::cudev::operator% (const Texture< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< modulus< T > > > > cv::cudev::operator% (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< modulus< T > > > > cv::cudev::operator% (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< modulus< T > > > > cv::cudev::operator% (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< modulus< typename Body::value_type > > > > cv::cudev::operator% (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ char1 cv::cudev::operator& (char s, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::operator& (char s, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::operator& (char s, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::operator& (char s, const char4 &b)  __device__ __forceinline__ char1 cv::cudev::operator& (const char1 &a, char s)  __device__ __forceinline__ char1 cv::cudev::operator& (const char1 &a, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::operator& (const char2 &a, char s)  __device__ __forceinline__ char2 cv::cudev::operator& (const char2 &a, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::operator& (const char3 &a, char s)  __device__ __forceinline__ char3 cv::cudev::operator& (const char3 &a, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::operator& (const char4 &a, char s)  __device__ __forceinline__ char4 cv::cudev::operator& (const char4 &a, const char4 &b)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_and< typename Body::value_type > > > > cv::cudev::operator& (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator& (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator& (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator& (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_and< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator& (const Expr< Body1 > &a, const Expr< Body2 > &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_and< T > > > > cv::cudev::operator& (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator& (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_and< T > > > > cv::cudev::operator& (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator& (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator& (const int1 &a, const int1 &b)  __device__ __forceinline__ int1 cv::cudev::operator& (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator& (const int2 &a, const int2 &b)  __device__ __forceinline__ int2 cv::cudev::operator& (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator& (const int3 &a, const int3 &b)  __device__ __forceinline__ int3 cv::cudev::operator& (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator& (const int4 &a, const int4 &b)  __device__ __forceinline__ int4 cv::cudev::operator& (const int4 &a, int s)  __device__ __forceinline__ short1 cv::cudev::operator& (const short1 &a, const short1 &b)  __device__ __forceinline__ short1 cv::cudev::operator& (const short1 &a, short s)  __device__ __forceinline__ short2 cv::cudev::operator& (const short2 &a, const short2 &b)  __device__ __forceinline__ short2 cv::cudev::operator& (const short2 &a, short s)  __device__ __forceinline__ short3 cv::cudev::operator& (const short3 &a, const short3 &b)  __device__ __forceinline__ short3 cv::cudev::operator& (const short3 &a, short s)  __device__ __forceinline__ short4 cv::cudev::operator& (const short4 &a, const short4 &b)  __device__ __forceinline__ short4 cv::cudev::operator& (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_and< T > > > > cv::cudev::operator& (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator& (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_and< T > > > cv::cudev::operator& (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator& (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator& (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator& (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator& (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator& (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator& (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator& (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator& (const uchar4 &a, uchar s)  __device__ __forceinline__ uint1 cv::cudev::operator& (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uint1 cv::cudev::operator& (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator& (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uint2 cv::cudev::operator& (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator& (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uint3 cv::cudev::operator& (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator& (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uint4 cv::cudev::operator& (const uint4 &a, uint s)  __device__ __forceinline__ ushort1 cv::cudev::operator& (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ ushort1 cv::cudev::operator& (const ushort1 &a, ushort s)  __device__ __forceinline__ ushort2 cv::cudev::operator& (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ ushort2 cv::cudev::operator& (const ushort2 &a, ushort s)  __device__ __forceinline__ ushort3 cv::cudev::operator& (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ ushort3 cv::cudev::operator& (const ushort3 &a, ushort s)  __device__ __forceinline__ ushort4 cv::cudev::operator& (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ ushort4 cv::cudev::operator& (const ushort4 &a, ushort s)  __device__ __forceinline__ int1 cv::cudev::operator& (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator& (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator& (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator& (int s, const int4 &b)  __device__ __forceinline__ short1 cv::cudev::operator& (short s, const short1 &b)  __device__ __forceinline__ short2 cv::cudev::operator& (short s, const short2 &b)  __device__ __forceinline__ short3 cv::cudev::operator& (short s, const short3 &b)  __device__ __forceinline__ short4 cv::cudev::operator& (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_and< T > > > > cv::cudev::operator& (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_and< T > > > > cv::cudev::operator& (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_and< T > > > > cv::cudev::operator& (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_and< typename Body::value_type > > > > cv::cudev::operator& (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator& (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator& (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator& (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator& (uchar s, const uchar4 &b)  __device__ __forceinline__ uint1 cv::cudev::operator& (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator& (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator& (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator& (uint s, const uint4 &b)  __device__ __forceinline__ ushort1 cv::cudev::operator& (ushort s, const ushort1 &b)  __device__ __forceinline__ ushort2 cv::cudev::operator& (ushort s, const ushort2 &b)  __device__ __forceinline__ ushort3 cv::cudev::operator& (ushort s, const ushort3 &b)  __device__ __forceinline__ ushort4 cv::cudev::operator& (ushort s, const ushort4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< logical_and< typename Body::value_type > > > > cv::cudev::operator&& (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator&& (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator&& (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator&& (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, logical_and< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator&& (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< logical_and< T > > > > cv::cudev::operator&& (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator&& (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< logical_and< T > > > > cv::cudev::operator&& (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator&& (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< logical_and< T > > > > cv::cudev::operator&& (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_and< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator&& (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_and< T > > > cv::cudev::operator&& (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< logical_and< T > > > > cv::cudev::operator&& (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< logical_and< T > > > > cv::cudev::operator&& (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< logical_and< T > > > > cv::cudev::operator&& (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< logical_and< typename Body::value_type > > > > cv::cudev::operator&& (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator&& (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator&& (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator&& (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator&& (ushort s, const ushort4 &b)  __device__ __forceinline__ R cv::cudev::TexturePtr< T, R >::operator() (index_type x) const  __device__ __forceinline__ R cv::cudev::TexturePtr< uint64, R >::operator() (index_type x) const  __device__ __forceinline__ R cv::cudev::TexturePtr< T, R >::operator() (index_type y, index_type x) const  __device__ __forceinline__ R cv::cudev::TexturePtr< uint64, R >::operator() (index_type y, index_type x) const  __device__ __forceinline__ R cv::cudev::TextureOffPtr< T, R >::operator() (index_type y, index_type x) const  __device__ __forceinline__ int1 cv::cudev::operator* (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const char1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator* (const char1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator* (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const char2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator* (const char2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator* (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const char3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator* (const char3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator* (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const char4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator* (const char4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator* (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::operator* (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::operator* (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::operator* (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< multiplies< typename Body::value_type > > > > cv::cudev::operator* (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator* (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator* (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator* (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, multiplies< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator* (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ float1 cv::cudev::operator* (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::operator* (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::operator* (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::operator* (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< multiplies< T > > > > cv::cudev::operator* (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator* (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< multiplies< T > > > > cv::cudev::operator* (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator* (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator* (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const int1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator* (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator* (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const int2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator* (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator* (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const int3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator* (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator* (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const int4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator* (const int4 &a, int s)  __device__ __forceinline__ int1 cv::cudev::operator* (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const short1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator* (const short1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator* (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const short2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator* (const short2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator* (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const short3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator* (const short3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator* (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const short4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator* (const short4 &a, int s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< multiplies< T > > > > cv::cudev::operator* (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, multiplies< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator* (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, multiplies< T > > > cv::cudev::operator* (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator* (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const uchar1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator* (const uchar1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator* (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const uchar2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator* (const uchar2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator* (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const uchar3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator* (const uchar3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator* (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const uchar4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator* (const uchar4 &a, int s)  __device__ __forceinline__ uint1 cv::cudev::operator* (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const uint1 &a, float s)  __device__ __forceinline__ uint1 cv::cudev::operator* (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator* (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const uint2 &a, float s)  __device__ __forceinline__ uint2 cv::cudev::operator* (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator* (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const uint3 &a, float s)  __device__ __forceinline__ uint3 cv::cudev::operator* (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator* (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const uint4 &a, float s)  __device__ __forceinline__ uint4 cv::cudev::operator* (const uint4 &a, uint s)  __device__ __forceinline__ int1 cv::cudev::operator* (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator* (const ushort1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator* (const ushort1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator* (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator* (const ushort2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator* (const ushort2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator* (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator* (const ushort3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator* (const ushort3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator* (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator* (const ushort4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator* (const ushort4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::operator* (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::operator* (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::operator* (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::operator* (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::operator* (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::operator* (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::operator* (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::operator* (float s, const ushort4 &b)  __device__ __forceinline__ int1 cv::cudev::operator* (int s, const char1 &b)  __device__ __forceinline__ int2 cv::cudev::operator* (int s, const char2 &b)  __device__ __forceinline__ int3 cv::cudev::operator* (int s, const char3 &b)  __device__ __forceinline__ int4 cv::cudev::operator* (int s, const char4 &b)  __device__ __forceinline__ int1 cv::cudev::operator* (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator* (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator* (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator* (int s, const int4 &b)  __device__ __forceinline__ int1 cv::cudev::operator* (int s, const short1 &b)  __device__ __forceinline__ int2 cv::cudev::operator* (int s, const short2 &b)  __device__ __forceinline__ int3 cv::cudev::operator* (int s, const short3 &b)  __device__ __forceinline__ int4 cv::cudev::operator* (int s, const short4 &b)  __device__ __forceinline__ int1 cv::cudev::operator* (int s, const uchar1 &b)  __device__ __forceinline__ int2 cv::cudev::operator* (int s, const uchar2 &b)  __device__ __forceinline__ int3 cv::cudev::operator* (int s, const uchar3 &b)  __device__ __forceinline__ int4 cv::cudev::operator* (int s, const uchar4 &b)  __device__ __forceinline__ int1 cv::cudev::operator* (int s, const ushort1 &b)  __device__ __forceinline__ int2 cv::cudev::operator* (int s, const ushort2 &b)  __device__ __forceinline__ int3 cv::cudev::operator* (int s, const ushort3 &b)  __device__ __forceinline__ int4 cv::cudev::operator* (int s, const ushort4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< multiplies< T > > > > cv::cudev::operator* (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< multiplies< T > > > > cv::cudev::operator* (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< multiplies< T > > > > cv::cudev::operator* (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< multiplies< typename Body::value_type > > > > cv::cudev::operator* (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uint1 cv::cudev::operator* (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator* (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator* (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator* (uint s, const uint4 &b)  __device__ __forceinline__ int1 cv::cudev::operator+ (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const char1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const char1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const char2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const char2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const char3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const char3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const char4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const char4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator+ (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::operator+ (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::operator+ (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::operator+ (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< plus< typename Body::value_type > > > > cv::cudev::operator+ (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator+ (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator+ (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator+ (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, plus< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator+ (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< plus< T > > > > cv::cudev::operator+ (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator+ (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< plus< T > > > > cv::cudev::operator+ (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator+ (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator+ (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const int1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const int2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const int3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const int4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const int4 &a, int s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const short1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const short1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const short2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const short2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const short3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const short3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const short4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const short4 &a, int s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< plus< T > > > > cv::cudev::operator+ (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, plus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator+ (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, plus< T > > > cv::cudev::operator+ (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator+ (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const uchar1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const uchar1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const uchar2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const uchar2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const uchar3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const uchar3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const uchar4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const uchar4 &a, int s)  __device__ __forceinline__ uint1 cv::cudev::operator+ (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const uint1 &a, float s)  __device__ __forceinline__ uint1 cv::cudev::operator+ (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator+ (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const uint2 &a, float s)  __device__ __forceinline__ uint2 cv::cudev::operator+ (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator+ (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const uint3 &a, float s)  __device__ __forceinline__ uint3 cv::cudev::operator+ (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator+ (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const uint4 &a, float s)  __device__ __forceinline__ uint4 cv::cudev::operator+ (const uint4 &a, uint s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator+ (const ushort1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator+ (const ushort1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator+ (const ushort2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator+ (const ushort2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator+ (const ushort3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator+ (const ushort3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator+ (const ushort4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator+ (const ushort4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::operator+ (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::operator+ (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::operator+ (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::operator+ (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::operator+ (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::operator+ (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::operator+ (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::operator+ (float s, const ushort4 &b)  __device__ __forceinline__ int1 cv::cudev::operator+ (int s, const char1 &b)  __device__ __forceinline__ int2 cv::cudev::operator+ (int s, const char2 &b)  __device__ __forceinline__ int3 cv::cudev::operator+ (int s, const char3 &b)  __device__ __forceinline__ int4 cv::cudev::operator+ (int s, const char4 &b)  __device__ __forceinline__ int1 cv::cudev::operator+ (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator+ (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator+ (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator+ (int s, const int4 &b)  __device__ __forceinline__ int1 cv::cudev::operator+ (int s, const short1 &b)  __device__ __forceinline__ int2 cv::cudev::operator+ (int s, const short2 &b)  __device__ __forceinline__ int3 cv::cudev::operator+ (int s, const short3 &b)  __device__ __forceinline__ int4 cv::cudev::operator+ (int s, const short4 &b)  __device__ __forceinline__ int1 cv::cudev::operator+ (int s, const uchar1 &b)  __device__ __forceinline__ int2 cv::cudev::operator+ (int s, const uchar2 &b)  __device__ __forceinline__ int3 cv::cudev::operator+ (int s, const uchar3 &b)  __device__ __forceinline__ int4 cv::cudev::operator+ (int s, const uchar4 &b)  __device__ __forceinline__ int1 cv::cudev::operator+ (int s, const ushort1 &b)  __device__ __forceinline__ int2 cv::cudev::operator+ (int s, const ushort2 &b)  __device__ __forceinline__ int3 cv::cudev::operator+ (int s, const ushort3 &b)  __device__ __forceinline__ int4 cv::cudev::operator+ (int s, const ushort4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< plus< T > > > > cv::cudev::operator+ (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< plus< T > > > > cv::cudev::operator+ (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< plus< T > > > > cv::cudev::operator+ (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< plus< typename Body::value_type > > > > cv::cudev::operator+ (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uint1 cv::cudev::operator+ (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator+ (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator+ (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator+ (uint s, const uint4 &b)  __device__ __forceinline__ char1 cv::cudev::operator- (const char1 &a)  __device__ __forceinline__ int1 cv::cudev::operator- (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const char1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator- (const char1 &a, int s)  __device__ __forceinline__ char2 cv::cudev::operator- (const char2 &a)  __device__ __forceinline__ int2 cv::cudev::operator- (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const char2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator- (const char2 &a, int s)  __device__ __forceinline__ char3 cv::cudev::operator- (const char3 &a)  __device__ __forceinline__ int3 cv::cudev::operator- (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const char3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator- (const char3 &a, int s)  __device__ __forceinline__ char4 cv::cudev::operator- (const char4 &a)  __device__ __forceinline__ int4 cv::cudev::operator- (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const char4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator- (const char4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator- (const double1 &a)  __device__ __forceinline__ double1 cv::cudev::operator- (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::operator- (const double2 &a)  __device__ __forceinline__ double2 cv::cudev::operator- (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::operator- (const double3 &a)  __device__ __forceinline__ double3 cv::cudev::operator- (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::operator- (const double4 &a)  __device__ __forceinline__ double4 cv::cudev::operator- (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< minus< typename Body::value_type > > > > cv::cudev::operator- (const Expr< Body > &a, typename Body::value_type val)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, negate< typename Body::value_type > > > cv::cudev::operator- (const Expr< Body > &src)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator- (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator- (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator- (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, minus< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator- (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ float1 cv::cudev::operator- (const float1 &a)  __device__ __forceinline__ float1 cv::cudev::operator- (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::operator- (const float2 &a)  __device__ __forceinline__ float2 cv::cudev::operator- (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::operator- (const float3 &a)  __device__ __forceinline__ float3 cv::cudev::operator- (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::operator- (const float4 &a)  __device__ __forceinline__ float4 cv::cudev::operator- (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, negate< T > > > cv::cudev::operator- (const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< minus< T > > > > cv::cudev::operator- (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator- (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, negate< T > > > cv::cudev::operator- (const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< minus< T > > > > cv::cudev::operator- (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator- (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator- (const int1 &a)  __device__ __forceinline__ int1 cv::cudev::operator- (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const int1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator- (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator- (const int2 &a)  __device__ __forceinline__ int2 cv::cudev::operator- (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const int2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator- (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator- (const int3 &a)  __device__ __forceinline__ int3 cv::cudev::operator- (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const int3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator- (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator- (const int4 &a)  __device__ __forceinline__ int4 cv::cudev::operator- (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const int4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator- (const int4 &a, int s)  __device__ __forceinline__ short1 cv::cudev::operator- (const short1 &a)  __device__ __forceinline__ int1 cv::cudev::operator- (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const short1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator- (const short1 &a, int s)  __device__ __forceinline__ short2 cv::cudev::operator- (const short2 &a)  __device__ __forceinline__ int2 cv::cudev::operator- (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const short2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator- (const short2 &a, int s)  __device__ __forceinline__ short3 cv::cudev::operator- (const short3 &a)  __device__ __forceinline__ int3 cv::cudev::operator- (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const short3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator- (const short3 &a, int s)  __device__ __forceinline__ short4 cv::cudev::operator- (const short4 &a)  __device__ __forceinline__ int4 cv::cudev::operator- (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const short4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator- (const short4 &a, int s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, negate< T > > > cv::cudev::operator- (const Texture< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< minus< T > > > > cv::cudev::operator- (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, minus< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator- (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, minus< T > > > cv::cudev::operator- (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator- (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const uchar1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator- (const uchar1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator- (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const uchar2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator- (const uchar2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator- (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const uchar3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator- (const uchar3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator- (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const uchar4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator- (const uchar4 &a, int s)  __device__ __forceinline__ uint1 cv::cudev::operator- (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const uint1 &a, float s)  __device__ __forceinline__ uint1 cv::cudev::operator- (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator- (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const uint2 &a, float s)  __device__ __forceinline__ uint2 cv::cudev::operator- (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator- (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const uint3 &a, float s)  __device__ __forceinline__ uint3 cv::cudev::operator- (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator- (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const uint4 &a, float s)  __device__ __forceinline__ uint4 cv::cudev::operator- (const uint4 &a, uint s)  __device__ __forceinline__ int1 cv::cudev::operator- (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator- (const ushort1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator- (const ushort1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator- (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator- (const ushort2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator- (const ushort2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator- (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator- (const ushort3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator- (const ushort3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator- (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator- (const ushort4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator- (const ushort4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::operator- (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::operator- (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::operator- (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::operator- (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::operator- (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::operator- (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::operator- (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::operator- (float s, const ushort4 &b)  __device__ __forceinline__ int1 cv::cudev::operator- (int s, const char1 &b)  __device__ __forceinline__ int2 cv::cudev::operator- (int s, const char2 &b)  __device__ __forceinline__ int3 cv::cudev::operator- (int s, const char3 &b)  __device__ __forceinline__ int4 cv::cudev::operator- (int s, const char4 &b)  __device__ __forceinline__ int1 cv::cudev::operator- (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator- (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator- (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator- (int s, const int4 &b)  __device__ __forceinline__ int1 cv::cudev::operator- (int s, const short1 &b)  __device__ __forceinline__ int2 cv::cudev::operator- (int s, const short2 &b)  __device__ __forceinline__ int3 cv::cudev::operator- (int s, const short3 &b)  __device__ __forceinline__ int4 cv::cudev::operator- (int s, const short4 &b)  __device__ __forceinline__ int1 cv::cudev::operator- (int s, const uchar1 &b)  __device__ __forceinline__ int2 cv::cudev::operator- (int s, const uchar2 &b)  __device__ __forceinline__ int3 cv::cudev::operator- (int s, const uchar3 &b)  __device__ __forceinline__ int4 cv::cudev::operator- (int s, const uchar4 &b)  __device__ __forceinline__ int1 cv::cudev::operator- (int s, const ushort1 &b)  __device__ __forceinline__ int2 cv::cudev::operator- (int s, const ushort2 &b)  __device__ __forceinline__ int3 cv::cudev::operator- (int s, const ushort3 &b)  __device__ __forceinline__ int4 cv::cudev::operator- (int s, const ushort4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< minus< T > > > > cv::cudev::operator- (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< minus< T > > > > cv::cudev::operator- (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< minus< T > > > > cv::cudev::operator- (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< minus< typename Body::value_type > > > > cv::cudev::operator- (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uint1 cv::cudev::operator- (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator- (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator- (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator- (uint s, const uint4 &b)  __device__ __forceinline__ int1 cv::cudev::operator/ (const char1 &a, const char1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const char1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const char1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const char1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const char2 &a, const char2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const char2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const char2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const char2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const char3 &a, const char3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const char3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const char3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const char3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const char4 &a, const char4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const char4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const char4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const char4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator/ (const double1 &a, const double1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const double1 &a, double s)  __device__ __forceinline__ double2 cv::cudev::operator/ (const double2 &a, const double2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const double2 &a, double s)  __device__ __forceinline__ double3 cv::cudev::operator/ (const double3 &a, const double3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const double3 &a, double s)  __device__ __forceinline__ double4 cv::cudev::operator/ (const double4 &a, const double4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< divides< typename Body::value_type > > > > cv::cudev::operator/ (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator/ (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator/ (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator/ (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, divides< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator/ (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (const float1 &a, const float1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const float1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const float1 &a, float s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const float2 &a, const float2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const float2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const float2 &a, float s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const float3 &a, const float3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const float3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const float3 &a, float s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const float4 &a, const float4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const float4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< divides< T > > > > cv::cudev::operator/ (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator/ (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< divides< T > > > > cv::cudev::operator/ (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator/ (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator/ (const int1 &a, const int1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const int1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const int1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const int2 &a, const int2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const int2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const int2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const int3 &a, const int3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const int3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const int3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const int4 &a, const int4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const int4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const int4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const int4 &a, int s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const short1 &a, const short1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const short1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const short1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const short1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const short2 &a, const short2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const short2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const short2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const short2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const short3 &a, const short3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const short3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const short3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const short3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const short4 &a, const short4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const short4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const short4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const short4 &a, int s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< divides< T > > > > cv::cudev::operator/ (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, divides< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator/ (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, divides< T > > > cv::cudev::operator/ (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator/ (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const uchar1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const uchar1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const uchar1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const uchar2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const uchar2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const uchar2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const uchar3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const uchar3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const uchar3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const uchar4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const uchar4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const uchar4 &a, int s)  __device__ __forceinline__ uint1 cv::cudev::operator/ (const uint1 &a, const uint1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const uint1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const uint1 &a, float s)  __device__ __forceinline__ uint1 cv::cudev::operator/ (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator/ (const uint2 &a, const uint2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const uint2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const uint2 &a, float s)  __device__ __forceinline__ uint2 cv::cudev::operator/ (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator/ (const uint3 &a, const uint3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const uint3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const uint3 &a, float s)  __device__ __forceinline__ uint3 cv::cudev::operator/ (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator/ (const uint4 &a, const uint4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const uint4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const uint4 &a, float s)  __device__ __forceinline__ uint4 cv::cudev::operator/ (const uint4 &a, uint s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (const ushort1 &a, double s)  __device__ __forceinline__ float1 cv::cudev::operator/ (const ushort1 &a, float s)  __device__ __forceinline__ int1 cv::cudev::operator/ (const ushort1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (const ushort2 &a, double s)  __device__ __forceinline__ float2 cv::cudev::operator/ (const ushort2 &a, float s)  __device__ __forceinline__ int2 cv::cudev::operator/ (const ushort2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (const ushort3 &a, double s)  __device__ __forceinline__ float3 cv::cudev::operator/ (const ushort3 &a, float s)  __device__ __forceinline__ int3 cv::cudev::operator/ (const ushort3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (const ushort4 &a, double s)  __device__ __forceinline__ float4 cv::cudev::operator/ (const ushort4 &a, float s)  __device__ __forceinline__ int4 cv::cudev::operator/ (const ushort4 &a, int s)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const char1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const char2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const char3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const char4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const double1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const double2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const double3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const double4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const float1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const float2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const float3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const float4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const int1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const int2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const int3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const int4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const short1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const short2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const short3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const short4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const uchar1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const uchar2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const uchar3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const uchar4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const uint1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const uint2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const uint3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const uint4 &b)  __device__ __forceinline__ double1 cv::cudev::operator/ (double s, const ushort1 &b)  __device__ __forceinline__ double2 cv::cudev::operator/ (double s, const ushort2 &b)  __device__ __forceinline__ double3 cv::cudev::operator/ (double s, const ushort3 &b)  __device__ __forceinline__ double4 cv::cudev::operator/ (double s, const ushort4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const char1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const char2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const char3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const char4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const float1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const float2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const float3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const float4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const int1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const int2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const int3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const int4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const short1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const short2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const short3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const short4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const uchar1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const uchar2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const uchar3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const uchar4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const uint1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const uint2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const uint3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const uint4 &b)  __device__ __forceinline__ float1 cv::cudev::operator/ (float s, const ushort1 &b)  __device__ __forceinline__ float2 cv::cudev::operator/ (float s, const ushort2 &b)  __device__ __forceinline__ float3 cv::cudev::operator/ (float s, const ushort3 &b)  __device__ __forceinline__ float4 cv::cudev::operator/ (float s, const ushort4 &b)  __device__ __forceinline__ int1 cv::cudev::operator/ (int s, const char1 &b)  __device__ __forceinline__ int2 cv::cudev::operator/ (int s, const char2 &b)  __device__ __forceinline__ int3 cv::cudev::operator/ (int s, const char3 &b)  __device__ __forceinline__ int4 cv::cudev::operator/ (int s, const char4 &b)  __device__ __forceinline__ int1 cv::cudev::operator/ (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator/ (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator/ (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator/ (int s, const int4 &b)  __device__ __forceinline__ int1 cv::cudev::operator/ (int s, const short1 &b)  __device__ __forceinline__ int2 cv::cudev::operator/ (int s, const short2 &b)  __device__ __forceinline__ int3 cv::cudev::operator/ (int s, const short3 &b)  __device__ __forceinline__ int4 cv::cudev::operator/ (int s, const short4 &b)  __device__ __forceinline__ int1 cv::cudev::operator/ (int s, const uchar1 &b)  __device__ __forceinline__ int2 cv::cudev::operator/ (int s, const uchar2 &b)  __device__ __forceinline__ int3 cv::cudev::operator/ (int s, const uchar3 &b)  __device__ __forceinline__ int4 cv::cudev::operator/ (int s, const uchar4 &b)  __device__ __forceinline__ int1 cv::cudev::operator/ (int s, const ushort1 &b)  __device__ __forceinline__ int2 cv::cudev::operator/ (int s, const ushort2 &b)  __device__ __forceinline__ int3 cv::cudev::operator/ (int s, const ushort3 &b)  __device__ __forceinline__ int4 cv::cudev::operator/ (int s, const ushort4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< divides< T > > > > cv::cudev::operator/ (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< divides< T > > > > cv::cudev::operator/ (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< divides< T > > > > cv::cudev::operator/ (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< divides< typename Body::value_type > > > > cv::cudev::operator/ (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uint1 cv::cudev::operator/ (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator/ (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator/ (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator/ (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< less< typename Body::value_type > > > > cv::cudev::operator< (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator< (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator< (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator< (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, less< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator< (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< less< T > > > > cv::cudev::operator< (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator< (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< T > > > cv::cudev::operator< (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< T > > > cv::cudev::operator< (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< T > > > cv::cudev::operator< (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< less< T > > > > cv::cudev::operator< (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator< (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< T > > > cv::cudev::operator< (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< T > > > cv::cudev::operator< (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< T > > > cv::cudev::operator< (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< less< T > > > > cv::cudev::operator< (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator< (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less< T > > > cv::cudev::operator< (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less< T > > > cv::cudev::operator< (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less< T > > > cv::cudev::operator< (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator< (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< less< T > > > > cv::cudev::operator< (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< less< T > > > > cv::cudev::operator< (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< less< T > > > > cv::cudev::operator< (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< less< typename Body::value_type > > > > cv::cudev::operator< (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator< (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator< (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator< (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator< (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator< (ushort s, const ushort4 &b)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_lshift< typename Body::value_type > > > > cv::cudev::operator<< (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<< (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<< (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<< (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_lshift< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator<< (const Expr< Body1 > &a, const Expr< Body2 > &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_lshift< T > > > > cv::cudev::operator<< (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<< (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_lshift< T > > > > cv::cudev::operator<< (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<< (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const GpuMat_< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_lshift< T > > > > cv::cudev::operator<< (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_lshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<< (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_lshift< T > > > cv::cudev::operator<< (const Texture< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_lshift< T > > > > cv::cudev::operator<< (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_lshift< T > > > > cv::cudev::operator<< (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_lshift< T > > > > cv::cudev::operator<< (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_lshift< typename Body::value_type > > > > cv::cudev::operator<< (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< less_equal< typename Body::value_type > > > > cv::cudev::operator<= (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<= (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<= (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<= (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, less_equal< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator<= (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< less_equal< T > > > > cv::cudev::operator<= (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<= (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< less_equal< T > > > > cv::cudev::operator<= (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<= (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< less_equal< T > > > > cv::cudev::operator<= (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, less_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator<= (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, less_equal< T > > > cv::cudev::operator<= (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< less_equal< T > > > > cv::cudev::operator<= (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< less_equal< T > > > > cv::cudev::operator<= (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< less_equal< T > > > > cv::cudev::operator<= (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< less_equal< typename Body::value_type > > > > cv::cudev::operator<= (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator<= (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator<= (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator<= (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator<= (ushort s, const ushort4 &b)  Texture & cv::cudev::Texture< T, R >::operator= (const Texture &)=default  TextureOff & cv::cudev::TextureOff< T, R >::operator= (const TextureOff &)=default  __host__ UniqueTexture & cv::cudev::UniqueTexture< T, R >::operator= (const UniqueTexture &)=delete  Texture & cv::cudev::Texture< T, R >::operator= (Texture &&)=default  TextureOff & cv::cudev::TextureOff< T, R >::operator= (TextureOff &&)=default  __host__ UniqueTexture & cv::cudev::UniqueTexture< T, R >::operator= (UniqueTexture &&other) noexcept  __device__ __forceinline__ uchar1 cv::cudev::operator== (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< equal_to< typename Body::value_type > > > > cv::cudev::operator== (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator== (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator== (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator== (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, equal_to< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator== (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< equal_to< T > > > > cv::cudev::operator== (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator== (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< equal_to< T > > > > cv::cudev::operator== (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator== (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< equal_to< T > > > > cv::cudev::operator== (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, equal_to< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator== (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, equal_to< T > > > cv::cudev::operator== (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator== (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< equal_to< T > > > > cv::cudev::operator== (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< equal_to< T > > > > cv::cudev::operator== (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< equal_to< T > > > > cv::cudev::operator== (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< equal_to< typename Body::value_type > > > > cv::cudev::operator== (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator== (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator== (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator== (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator== (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator== (ushort s, const ushort4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< greater< typename Body::value_type > > > > cv::cudev::operator> (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator> (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator> (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator> (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, greater< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator> (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< greater< T > > > > cv::cudev::operator> (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator> (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< greater< T > > > > cv::cudev::operator> (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator> (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< greater< T > > > > cv::cudev::operator> (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator> (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater< T > > > cv::cudev::operator> (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator> (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< greater< T > > > > cv::cudev::operator> (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< greater< T > > > > cv::cudev::operator> (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< greater< T > > > > cv::cudev::operator> (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< greater< typename Body::value_type > > > > cv::cudev::operator> (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator> (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator> (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator> (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator> (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator> (ushort s, const ushort4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< greater_equal< typename Body::value_type > > > > cv::cudev::operator>= (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>= (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>= (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>= (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, greater_equal< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator>= (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< greater_equal< T > > > > cv::cudev::operator>= (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>= (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< greater_equal< T > > > > cv::cudev::operator>= (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>= (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< greater_equal< T > > > > cv::cudev::operator>= (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, greater_equal< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>= (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, greater_equal< T > > > cv::cudev::operator>= (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< greater_equal< T > > > > cv::cudev::operator>= (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< greater_equal< T > > > > cv::cudev::operator>= (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< greater_equal< T > > > > cv::cudev::operator>= (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< greater_equal< typename Body::value_type > > > > cv::cudev::operator>= (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator>= (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator>= (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator>= (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator>= (ushort s, const ushort4 &b)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_rshift< typename Body::value_type > > > > cv::cudev::operator>> (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>> (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>> (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>> (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_rshift< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator>> (const Expr< Body1 > &a, const Expr< Body2 > &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_rshift< T > > > > cv::cudev::operator>> (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>> (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_rshift< T > > > > cv::cudev::operator>> (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>> (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const GpuMat_< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_rshift< T > > > > cv::cudev::operator>> (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_rshift< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator>> (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_rshift< T > > > cv::cudev::operator>> (const Texture< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_rshift< T > > > > cv::cudev::operator>> (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_rshift< T > > > > cv::cudev::operator>> (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_rshift< T > > > > cv::cudev::operator>> (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_rshift< typename Body::value_type > > > > cv::cudev::operator>> (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ char1 cv::cudev::operator^ (char s, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::operator^ (char s, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::operator^ (char s, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::operator^ (char s, const char4 &b)  __device__ __forceinline__ char1 cv::cudev::operator^ (const char1 &a, char s)  __device__ __forceinline__ char1 cv::cudev::operator^ (const char1 &a, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::operator^ (const char2 &a, char s)  __device__ __forceinline__ char2 cv::cudev::operator^ (const char2 &a, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::operator^ (const char3 &a, char s)  __device__ __forceinline__ char3 cv::cudev::operator^ (const char3 &a, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::operator^ (const char4 &a, char s)  __device__ __forceinline__ char4 cv::cudev::operator^ (const char4 &a, const char4 &b)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_xor< typename Body::value_type > > > > cv::cudev::operator^ (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator^ (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator^ (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator^ (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_xor< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator^ (const Expr< Body1 > &a, const Expr< Body2 > &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_xor< T > > > > cv::cudev::operator^ (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator^ (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_xor< T > > > > cv::cudev::operator^ (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator^ (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator^ (const int1 &a, const int1 &b)  __device__ __forceinline__ int1 cv::cudev::operator^ (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator^ (const int2 &a, const int2 &b)  __device__ __forceinline__ int2 cv::cudev::operator^ (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator^ (const int3 &a, const int3 &b)  __device__ __forceinline__ int3 cv::cudev::operator^ (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator^ (const int4 &a, const int4 &b)  __device__ __forceinline__ int4 cv::cudev::operator^ (const int4 &a, int s)  __device__ __forceinline__ short1 cv::cudev::operator^ (const short1 &a, const short1 &b)  __device__ __forceinline__ short1 cv::cudev::operator^ (const short1 &a, short s)  __device__ __forceinline__ short2 cv::cudev::operator^ (const short2 &a, const short2 &b)  __device__ __forceinline__ short2 cv::cudev::operator^ (const short2 &a, short s)  __device__ __forceinline__ short3 cv::cudev::operator^ (const short3 &a, const short3 &b)  __device__ __forceinline__ short3 cv::cudev::operator^ (const short3 &a, short s)  __device__ __forceinline__ short4 cv::cudev::operator^ (const short4 &a, const short4 &b)  __device__ __forceinline__ short4 cv::cudev::operator^ (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_xor< T > > > > cv::cudev::operator^ (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_xor< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator^ (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_xor< T > > > cv::cudev::operator^ (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator^ (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator^ (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator^ (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator^ (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator^ (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator^ (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator^ (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator^ (const uchar4 &a, uchar s)  __device__ __forceinline__ uint1 cv::cudev::operator^ (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uint1 cv::cudev::operator^ (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator^ (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uint2 cv::cudev::operator^ (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator^ (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uint3 cv::cudev::operator^ (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator^ (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uint4 cv::cudev::operator^ (const uint4 &a, uint s)  __device__ __forceinline__ ushort1 cv::cudev::operator^ (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ ushort1 cv::cudev::operator^ (const ushort1 &a, ushort s)  __device__ __forceinline__ ushort2 cv::cudev::operator^ (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ ushort2 cv::cudev::operator^ (const ushort2 &a, ushort s)  __device__ __forceinline__ ushort3 cv::cudev::operator^ (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ ushort3 cv::cudev::operator^ (const ushort3 &a, ushort s)  __device__ __forceinline__ ushort4 cv::cudev::operator^ (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ ushort4 cv::cudev::operator^ (const ushort4 &a, ushort s)  __device__ __forceinline__ int1 cv::cudev::operator^ (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator^ (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator^ (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator^ (int s, const int4 &b)  __device__ __forceinline__ short1 cv::cudev::operator^ (short s, const short1 &b)  __device__ __forceinline__ short2 cv::cudev::operator^ (short s, const short2 &b)  __device__ __forceinline__ short3 cv::cudev::operator^ (short s, const short3 &b)  __device__ __forceinline__ short4 cv::cudev::operator^ (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_xor< T > > > > cv::cudev::operator^ (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_xor< T > > > > cv::cudev::operator^ (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_xor< T > > > > cv::cudev::operator^ (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_xor< typename Body::value_type > > > > cv::cudev::operator^ (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator^ (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator^ (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator^ (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator^ (uchar s, const uchar4 &b)  __device__ __forceinline__ uint1 cv::cudev::operator^ (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator^ (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator^ (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator^ (uint s, const uint4 &b)  __device__ __forceinline__ ushort1 cv::cudev::operator^ (ushort s, const ushort1 &b)  __device__ __forceinline__ ushort2 cv::cudev::operator^ (ushort s, const ushort2 &b)  __device__ __forceinline__ ushort3 cv::cudev::operator^ (ushort s, const ushort3 &b)  __device__ __forceinline__ ushort4 cv::cudev::operator^ (ushort s, const ushort4 &b)  __device__ __forceinline__ char1 cv::cudev::operator| (char s, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::operator| (char s, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::operator| (char s, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::operator| (char s, const char4 &b)  __device__ __forceinline__ char1 cv::cudev::operator| (const char1 &a, char s)  __device__ __forceinline__ char1 cv::cudev::operator| (const char1 &a, const char1 &b)  __device__ __forceinline__ char2 cv::cudev::operator| (const char2 &a, char s)  __device__ __forceinline__ char2 cv::cudev::operator| (const char2 &a, const char2 &b)  __device__ __forceinline__ char3 cv::cudev::operator| (const char3 &a, char s)  __device__ __forceinline__ char3 cv::cudev::operator| (const char3 &a, const char3 &b)  __device__ __forceinline__ char4 cv::cudev::operator| (const char4 &a, char s)  __device__ __forceinline__ char4 cv::cudev::operator| (const char4 &a, const char4 &b)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< bit_or< typename Body::value_type > > > > cv::cudev::operator| (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator| (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator| (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator| (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, bit_or< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator| (const Expr< Body1 > &a, const Expr< Body2 > &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< bit_or< T > > > > cv::cudev::operator| (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator| (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< bit_or< T > > > > cv::cudev::operator| (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator| (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ int1 cv::cudev::operator| (const int1 &a, const int1 &b)  __device__ __forceinline__ int1 cv::cudev::operator| (const int1 &a, int s)  __device__ __forceinline__ int2 cv::cudev::operator| (const int2 &a, const int2 &b)  __device__ __forceinline__ int2 cv::cudev::operator| (const int2 &a, int s)  __device__ __forceinline__ int3 cv::cudev::operator| (const int3 &a, const int3 &b)  __device__ __forceinline__ int3 cv::cudev::operator| (const int3 &a, int s)  __device__ __forceinline__ int4 cv::cudev::operator| (const int4 &a, const int4 &b)  __device__ __forceinline__ int4 cv::cudev::operator| (const int4 &a, int s)  __device__ __forceinline__ short1 cv::cudev::operator| (const short1 &a, const short1 &b)  __device__ __forceinline__ short1 cv::cudev::operator| (const short1 &a, short s)  __device__ __forceinline__ short2 cv::cudev::operator| (const short2 &a, const short2 &b)  __device__ __forceinline__ short2 cv::cudev::operator| (const short2 &a, short s)  __device__ __forceinline__ short3 cv::cudev::operator| (const short3 &a, const short3 &b)  __device__ __forceinline__ short3 cv::cudev::operator| (const short3 &a, short s)  __device__ __forceinline__ short4 cv::cudev::operator| (const short4 &a, const short4 &b)  __device__ __forceinline__ short4 cv::cudev::operator| (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< bit_or< T > > > > cv::cudev::operator| (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, bit_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator| (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, bit_or< T > > > cv::cudev::operator| (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator| (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator| (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator| (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator| (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator| (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator| (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator| (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator| (const uchar4 &a, uchar s)  __device__ __forceinline__ uint1 cv::cudev::operator| (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uint1 cv::cudev::operator| (const uint1 &a, uint s)  __device__ __forceinline__ uint2 cv::cudev::operator| (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uint2 cv::cudev::operator| (const uint2 &a, uint s)  __device__ __forceinline__ uint3 cv::cudev::operator| (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uint3 cv::cudev::operator| (const uint3 &a, uint s)  __device__ __forceinline__ uint4 cv::cudev::operator| (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uint4 cv::cudev::operator| (const uint4 &a, uint s)  __device__ __forceinline__ ushort1 cv::cudev::operator| (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ ushort1 cv::cudev::operator| (const ushort1 &a, ushort s)  __device__ __forceinline__ ushort2 cv::cudev::operator| (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ ushort2 cv::cudev::operator| (const ushort2 &a, ushort s)  __device__ __forceinline__ ushort3 cv::cudev::operator| (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ ushort3 cv::cudev::operator| (const ushort3 &a, ushort s)  __device__ __forceinline__ ushort4 cv::cudev::operator| (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ ushort4 cv::cudev::operator| (const ushort4 &a, ushort s)  __device__ __forceinline__ int1 cv::cudev::operator| (int s, const int1 &b)  __device__ __forceinline__ int2 cv::cudev::operator| (int s, const int2 &b)  __device__ __forceinline__ int3 cv::cudev::operator| (int s, const int3 &b)  __device__ __forceinline__ int4 cv::cudev::operator| (int s, const int4 &b)  __device__ __forceinline__ short1 cv::cudev::operator| (short s, const short1 &b)  __device__ __forceinline__ short2 cv::cudev::operator| (short s, const short2 &b)  __device__ __forceinline__ short3 cv::cudev::operator| (short s, const short3 &b)  __device__ __forceinline__ short4 cv::cudev::operator| (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< bit_or< T > > > > cv::cudev::operator| (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< bit_or< T > > > > cv::cudev::operator| (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< bit_or< T > > > > cv::cudev::operator| (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< bit_or< typename Body::value_type > > > > cv::cudev::operator| (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator| (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator| (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator| (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator| (uchar s, const uchar4 &b)  __device__ __forceinline__ uint1 cv::cudev::operator| (uint s, const uint1 &b)  __device__ __forceinline__ uint2 cv::cudev::operator| (uint s, const uint2 &b)  __device__ __forceinline__ uint3 cv::cudev::operator| (uint s, const uint3 &b)  __device__ __forceinline__ uint4 cv::cudev::operator| (uint s, const uint4 &b)  __device__ __forceinline__ ushort1 cv::cudev::operator| (ushort s, const ushort1 &b)  __device__ __forceinline__ ushort2 cv::cudev::operator| (ushort s, const ushort2 &b)  __device__ __forceinline__ ushort3 cv::cudev::operator| (ushort s, const ushort3 &b)  __device__ __forceinline__ ushort4 cv::cudev::operator| (ushort s, const ushort4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (char s, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (char s, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (char s, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (char s, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const char1 &a, char s)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const char1 &a, const char1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const char2 &a, char s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const char2 &a, const char2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const char3 &a, char s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const char3 &a, const char3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const char4 &a, char s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const char4 &a, const char4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const double1 &a, const double1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const double1 &a, double s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const double2 &a, const double2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const double2 &a, double s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const double3 &a, const double3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const double3 &a, double s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const double4 &a, const double4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const double4 &a, double s)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder2nd< logical_or< typename Body::value_type > > > > cv::cudev::operator|| (const Expr< Body > &a, typename Body::value_type val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator|| (const Expr< Body > &src1, const GlobPtrSz< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator|| (const Expr< Body > &src1, const GpuMat_< T > &src2)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator|| (const Expr< Body > &src1, const Texture< T > &src2)  template<class Body1 , class Body2 > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Body1 >::ptr_type, typename PtrTraits< Body2 >::ptr_type, logical_or< typename LargerType< typename PtrTraits< Body1 >::value_type, typename PtrTraits< Body2 >::value_type >::type > > > cv::cudev::operator|| (const Expr< Body1 > &a, const Expr< Body2 > &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const float1 &a, const float1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const float1 &a, float s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const float2 &a, const float2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const float2 &a, float s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const float3 &a, const float3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const float3 &a, float s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const float4 &a, const float4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const float4 &a, float s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder2nd< logical_or< T > > > > cv::cudev::operator|| (const GlobPtrSz< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator|| (const GlobPtrSz< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const GlobPtrSz< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const GlobPtrSz< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const GlobPtrSz< T > &src1, const Texture< T > &src2)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder2nd< logical_or< T > > > > cv::cudev::operator|| (const GpuMat_< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator|| (const GpuMat_< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const GpuMat_< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const GpuMat_< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const GpuMat_< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const int1 &a, const int1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const int1 &a, int s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const int2 &a, const int2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const int2 &a, int s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const int3 &a, const int3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const int3 &a, int s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const int4 &a, const int4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const int4 &a, int s)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const short1 &a, const short1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const short1 &a, short s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const short2 &a, const short2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const short2 &a, short s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const short3 &a, const short3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const short3 &a, short s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const short4 &a, const short4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const short4 &a, short s)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder2nd< logical_or< T > > > > cv::cudev::operator|| (const Texture< T > &src, T val)  template<typename T , class Body > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Body >::ptr_type, logical_or< typename LargerType< T, typename PtrTraits< Body >::value_type >::type > > > cv::cudev::operator|| (const Texture< T > &src1, const Expr< Body > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GlobPtrSz< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const Texture< T > &src1, const GlobPtrSz< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< GpuMat_< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const Texture< T > &src1, const GpuMat_< T > &src2)  template<typename T > __host__ Expr< BinaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, typename PtrTraits< Texture< T > >::ptr_type, logical_or< T > > > cv::cudev::operator|| (const Texture< T > &src1, const Texture< T > &src2)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const uchar1 &a, const uchar1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const uchar1 &a, uchar s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const uchar2 &a, const uchar2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const uchar2 &a, uchar s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const uchar3 &a, const uchar3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const uchar3 &a, uchar s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const uchar4 &a, const uchar4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const uchar4 &a, uchar s)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const uint1 &a, const uint1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const uint1 &a, uint s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const uint2 &a, const uint2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const uint2 &a, uint s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const uint3 &a, const uint3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const uint3 &a, uint s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const uint4 &a, const uint4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const uint4 &a, uint s)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const ushort1 &a, const ushort1 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (const ushort1 &a, ushort s)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const ushort2 &a, const ushort2 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (const ushort2 &a, ushort s)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const ushort3 &a, const ushort3 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (const ushort3 &a, ushort s)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const ushort4 &a, const ushort4 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (const ushort4 &a, ushort s)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (double s, const double1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (double s, const double2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (double s, const double3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (double s, const double4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (float s, const float1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (float s, const float2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (float s, const float3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (float s, const float4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (int s, const int1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (int s, const int2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (int s, const int3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (int s, const int4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (short s, const short1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (short s, const short2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (short s, const short3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (short s, const short4 &b)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, Binder1st< logical_or< T > > > > cv::cudev::operator|| (T val, const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, Binder1st< logical_or< T > > > > cv::cudev::operator|| (T val, const GpuMat_< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, Binder1st< logical_or< T > > > > cv::cudev::operator|| (T val, const Texture< T > &src)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, Binder1st< logical_or< typename Body::value_type > > > > cv::cudev::operator|| (typename Body::value_type val, const Expr< Body > &a)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (uchar s, const uchar1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (uchar s, const uchar2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (uchar s, const uchar3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (uchar s, const uchar4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (uint s, const uint1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (uint s, const uint2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (uint s, const uint3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (uint s, const uint4 &b)  __device__ __forceinline__ uchar1 cv::cudev::operator|| (ushort s, const ushort1 &b)  __device__ __forceinline__ uchar2 cv::cudev::operator|| (ushort s, const ushort2 &b)  __device__ __forceinline__ uchar3 cv::cudev::operator|| (ushort s, const ushort3 &b)  __device__ __forceinline__ uchar4 cv::cudev::operator|| (ushort s, const ushort4 &b)  __device__ __forceinline__ char1 cv::cudev::operator~ (const char1 &a)  __device__ __forceinline__ char2 cv::cudev::operator~ (const char2 &a)  __device__ __forceinline__ char3 cv::cudev::operator~ (const char3 &a)  __device__ __forceinline__ char4 cv::cudev::operator~ (const char4 &a)  template<class Body > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Body >::ptr_type, bit_not< typename Body::value_type > > > cv::cudev::operator~ (const Expr< Body > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GlobPtrSz< T > >::ptr_type, bit_not< T > > > cv::cudev::operator~ (const GlobPtrSz< T > &src)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< GpuMat_< T > >::ptr_type, bit_not< T > > > cv::cudev::operator~ (const GpuMat_< T > &src)  __device__ __forceinline__ int1 cv::cudev::operator~ (const int1 &a)  __device__ __forceinline__ int2 cv::cudev::operator~ (const int2 &a)  __device__ __forceinline__ int3 cv::cudev::operator~ (const int3 &a)  __device__ __forceinline__ int4 cv::cudev::operator~ (const int4 &a)  __device__ __forceinline__ short1 cv::cudev::operator~ (const short1 &a)  __device__ __forceinline__ short2 cv::cudev::operator~ (const short2 &a)  __device__ __forceinline__ short3 cv::cudev::operator~ (const short3 &a)  __device__ __forceinline__ short4 cv::cudev::operator~ (const short4 &a)  template<typename T > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< Texture< T > >::ptr_type, bit_not< T > > > cv::cudev::operator~ (const Texture< T > &src)  __device__ __forceinline__ uchar1 cv::cudev::operator~ (const uchar1 &a)  __device__ __forceinline__ uchar2 cv::cudev::operator~ (const uchar2 &a)  __device__ __forceinline__ uchar3 cv::cudev::operator~ (const uchar3 &a)  __device__ __forceinline__ uchar4 cv::cudev::operator~ (const uchar4 &a)  __device__ __forceinline__ uint1 cv::cudev::operator~ (const uint1 &a)  __device__ __forceinline__ uint2 cv::cudev::operator~ (const uint2 &a)  __device__ __forceinline__ uint3 cv::cudev::operator~ (const uint3 &a)  __device__ __forceinline__ uint4 cv::cudev::operator~ (const uint4 &a)  __device__ __forceinline__ ushort1 cv::cudev::operator~ (const ushort1 &a)  __device__ __forceinline__ ushort2 cv::cudev::operator~ (const ushort2 &a)  __device__ __forceinline__ ushort3 cv::cudev::operator~ (const ushort3 &a)  __device__ __forceinline__ ushort4 cv::cudev::operator~ (const ushort4 &a)  static __host__ PerspectiveMapPtrSz cv::cudev::perspectiveMap (Size dstSize, const GpuMat_< float > &warpMat)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Binder2nd< pow_func< typename PtrTraits< SrcPtr >::value_type > > > > cv::cudev::pow_ (const SrcPtr &src, float power)  template<class SrcPtr > __host__ Expr< PyrDownBody< SrcPtr > > cv::cudev::pyrDown_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< PyrUpBody< SrcPtr > > cv::cudev::pyrUp_ (const SrcPtr &src)  template<class Reductor , class SrcPtr > __host__ Expr< ReduceToColumnBody< Reductor, SrcPtr > > cv::cudev::reduceToColumn_ (const SrcPtr &src)  template<class Reductor , class SrcPtr > __host__ Expr< ReduceToRowBody< Reductor, SrcPtr > > cv::cudev::reduceToRow_ (const SrcPtr &src)  template<class SrcPtr , class MapPtr > __host__ Expr< RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapPtr >::ptr_type > > cv::cudev::remap_ (const SrcPtr &src, const MapPtr &map)  template<class SrcPtr , class MapXPtr , class MapYPtr > __host__ Expr< RemapPtr2Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapXPtr >::ptr_type, typename PtrTraits< MapYPtr >::ptr_type > > cv::cudev::remap_ (const SrcPtr &src, const MapXPtr &mapx, const MapYPtr &mapy)  template<class SrcPtr , class MapPtr > __host__ RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapPtr >::ptr_type > cv::cudev::remapPtr (const SrcPtr &src, const MapPtr &map)  template<class SrcPtr , class MapXPtr , class MapYPtr > __host__ RemapPtr2Sz< typename PtrTraits< SrcPtr >::ptr_type, typename PtrTraits< MapXPtr >::ptr_type, typename PtrTraits< MapYPtr >::ptr_type > cv::cudev::remapPtr (const SrcPtr &src, const MapXPtr &mapx, const MapYPtr &mapy)  template<int cn, typename T > __host__ GpuMat_< typename MakeVec< typename VecTraits< T >::elem_type, cn >::type > cv::cudev::reshape_ (const GpuMat_< T > &mat, int rows=0)  template<class SrcPtr > __host__ Expr< ResizePtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::resize_ (const SrcPtr &src, float fx, float fy)  template<class SrcPtr > __host__ ResizePtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::resizePtr (const SrcPtr &src, float fx, float fy)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_GRAY_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HLS4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HLS4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HLS_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HLS_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HSV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HSV4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HSV_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_HSV_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_Luv_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_XYZ4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_XYZ_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_YCrCb4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_YCrCb_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_YUV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGB_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGB_to_YUV_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_GRAY_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_GRAY_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HLS4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HLS4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HLS_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HLS_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HLS_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HSV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV4_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HSV4_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HSV_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_HSV_FULL_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_HSV_FULL_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Lab4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_Lab4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Lab_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_Lab_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Luv4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_Luv4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_Luv_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_Luv_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_XYZ4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_XYZ4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_XYZ_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_XYZ_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YCrCb4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_YCrCb4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YCrCb_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_YCrCb_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YUV4_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_YUV4_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, RGBA_to_YUV_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::RGBA_to_YUV_ (const SrcPtr &src)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const char1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const char2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const char3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const char4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const double1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const double2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const double3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const double4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const float1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const float2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const float3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const float4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const int1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const int2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const int3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const int4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const short1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const short2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const short3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const short4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uchar1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uchar2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uchar3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uchar4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uint1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uint2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uint3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const uint4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const ushort1 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const ushort2 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const ushort3 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (const ushort4 &v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (double v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (float v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (int v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (schar v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (short v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (uchar v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (uint v)  template<typename T > __device__ __forceinline__ T cv::cudev::saturate_cast (ushort v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (double v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (float v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (int v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (short v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (uchar v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (uint v)  template<> __device__ __forceinline__ schar cv::cudev::saturate_cast< schar > (ushort v)  template<> __device__ __forceinline__ short cv::cudev::saturate_cast< short > (double v)  template<> __device__ __forceinline__ short cv::cudev::saturate_cast< short > (float v)  template<> __device__ __forceinline__ short cv::cudev::saturate_cast< short > (int v)  template<> __device__ __forceinline__ short cv::cudev::saturate_cast< short > (uint v)  template<> __device__ __forceinline__ short cv::cudev::saturate_cast< short > (ushort v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (double v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (float v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (int v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (schar v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (short v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (uint v)  template<> __device__ __forceinline__ uchar cv::cudev::saturate_cast< uchar > (ushort v)  template<> __device__ __forceinline__ uint cv::cudev::saturate_cast< uint > (double v)  template<> __device__ __forceinline__ uint cv::cudev::saturate_cast< uint > (float v)  template<> __device__ __forceinline__ uint cv::cudev::saturate_cast< uint > (int v)  template<> __device__ __forceinline__ uint cv::cudev::saturate_cast< uint > (schar v)  template<> __device__ __forceinline__ uint cv::cudev::saturate_cast< uint > (short v)  template<> __device__ __forceinline__ ushort cv::cudev::saturate_cast< ushort > (double v)  template<> __device__ __forceinline__ ushort cv::cudev::saturate_cast< ushort > (float v)  template<> __device__ __forceinline__ ushort cv::cudev::saturate_cast< ushort > (int v)  template<> __device__ __forceinline__ ushort cv::cudev::saturate_cast< ushort > (schar v)  template<> __device__ __forceinline__ ushort cv::cudev::saturate_cast< ushort > (short v)  template<> __device__ __forceinline__ ushort cv::cudev::saturate_cast< ushort > (uint v)  template<class SrcPtr > __host__ Expr< ScharrXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::scharrX_ (const SrcPtr &src)  template<class SrcPtr > __host__ ScharrXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::scharrXPtr (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< ScharrYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::scharrY_ (const SrcPtr &src)  template<class SrcPtr > __host__ ScharrYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::scharrYPtr (const SrcPtr &src)  template<class Ptr2DSz > __host__ PtrTraits< Ptr2DSz >::ptr_type cv::cudev::shrinkPtr (const Ptr2DSz &ptr)  __device__ __forceinline__ float1 cv::cudev::sin (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::sin (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::sin (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::sin (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::sin (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::sin (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::sin (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::sin (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::sin (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::sin (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::sin (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::sin (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::sin (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::sin (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sin_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::sin_ (const SrcPtr &src)  template<class MaskPtr > __host__ SingleMaskChannelsSz< typename PtrTraits< MaskPtr >::ptr_type > cv::cudev::singleMaskChannels (const MaskPtr &mask, int channels)  __device__ __forceinline__ float1 cv::cudev::sinh (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::sinh (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::sinh (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::sinh (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::sinh (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::sinh (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::sinh (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::sinh (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::sinh (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::sinh (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::sinh (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::sinh (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::sinh (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::sinh (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sinh_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::sinh_ (const SrcPtr &src)  template<typename T0 > __device__ __forceinline__ tuple< volatile T0 * > cv::cudev::smem_tuple (T0 *t0)  template<typename T0 , typename T1 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1)  template<typename T0 , typename T1 , typename T2 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2)  template<typename T0 , typename T1 , typename T2 , typename T3 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3)  template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4)  template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5)  template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6)  template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 *, volatile T7 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6, T7 *t7)  template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 *, volatile T7 *, volatile T8 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6, T7 *t7, T8 *t8)  template<typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > __device__ __forceinline__ tuple< volatile T0 *, volatile T1 *, volatile T2 *, volatile T3 *, volatile T4 *, volatile T5 *, volatile T6 *, volatile T7 *, volatile T8 *, volatile T9 * > cv::cudev::smem_tuple (T0 *t0, T1 *t1, T2 *t2, T3 *t3, T4 *t4, T5 *t5, T6 *t6, T7 *t7, T8 *t8, T9 *t9)  template<class SrcPtr > __host__ Expr< SobelXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::sobelX_ (const SrcPtr &src)  template<class SrcPtr > __host__ SobelXPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::sobelXPtr (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< SobelYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > > cv::cudev::sobelY_ (const SrcPtr &src)  template<class SrcPtr > __host__ SobelYPtrSz< typename PtrTraits< SrcPtr >::ptr_type > cv::cudev::sobelYPtr (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sqr_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::sqr_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::sqrt (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::sqrt (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::sqrt (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::sqrt (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::sqrt (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::sqrt (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::sqrt (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::sqrt (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::sqrt (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::sqrt (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::sqrt (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::sqrt (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::sqrt (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::sqrt (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, sqrt_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::sqrt_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< SumExprBody< SrcPtr > > cv::cudev::sum_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::tan (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::tan (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::tan (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::tan (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::tan (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::tan (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::tan (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::tan (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::tan (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::tan (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::tan (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::tan (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::tan (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::tan (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, tan_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::tan_ (const SrcPtr &src)  __device__ __forceinline__ float1 cv::cudev::tanh (const char1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const char2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const char3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const char4 &a)  __device__ __forceinline__ double1 cv::cudev::tanh (const double1 &a)  __device__ __forceinline__ double2 cv::cudev::tanh (const double2 &a)  __device__ __forceinline__ double3 cv::cudev::tanh (const double3 &a)  __device__ __forceinline__ double4 cv::cudev::tanh (const double4 &a)  __device__ __forceinline__ float1 cv::cudev::tanh (const float1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const float2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const float3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const float4 &a)  __device__ __forceinline__ float1 cv::cudev::tanh (const int1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const int2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const int3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const int4 &a)  __device__ __forceinline__ float1 cv::cudev::tanh (const short1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const short2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const short3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const short4 &a)  __device__ __forceinline__ float1 cv::cudev::tanh (const uchar1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const uchar2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const uchar3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const uchar4 &a)  __device__ __forceinline__ float1 cv::cudev::tanh (const uint1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const uint2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const uint3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const uint4 &a)  __device__ __forceinline__ float1 cv::cudev::tanh (const ushort1 &a)  __device__ __forceinline__ float2 cv::cudev::tanh (const ushort2 &a)  __device__ __forceinline__ float3 cv::cudev::tanh (const ushort3 &a)  __device__ __forceinline__ float4 cv::cudev::tanh (const ushort4 &a)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, tanh_func< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::tanh_ (const SrcPtr &src)  template<typename T > __host__ __device__ ThreshBinaryFunc< T > cv::cudev::thresh_binary_func (T thresh, T maxVal)  template<typename T > __host__ __device__ ThreshBinaryInvFunc< T > cv::cudev::thresh_binary_inv_func (T thresh, T maxVal)  template<typename T > __host__ __device__ ThreshToZeroFunc< T > cv::cudev::thresh_to_zero_func (T thresh)  template<typename T > __host__ __device__ ThreshToZeroInvFunc< T > cv::cudev::thresh_to_zero_inv_func (T thresh)  template<typename T > __host__ __device__ ThreshTruncFunc< T > cv::cudev::thresh_trunc_func (T thresh)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshBinaryFunc< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::threshBinary_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh, typename PtrTraits< SrcPtr >::value_type maxVal)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshBinaryInvFunc< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::threshBinaryInv_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh, typename PtrTraits< SrcPtr >::value_type maxVal)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshToZeroFunc< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::threshToZero_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshToZeroInvFunc< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::threshToZeroInv_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, ThreshTruncFunc< typename PtrTraits< SrcPtr >::value_type > > > cv::cudev::threshTrunc_ (const SrcPtr &src, typename PtrTraits< SrcPtr >::value_type thresh)  template<class Src1Ptr , class Src2Ptr , class Op > __host__ BinaryTransformPtrSz< typename PtrTraits< Src1Ptr >::ptr_type, typename PtrTraits< Src2Ptr >::ptr_type, Op > cv::cudev::transformPtr (const Src1Ptr &src1, const Src2Ptr &src2, const Op &op)  template<class SrcPtr , class Op > __host__ UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, Op > cv::cudev::transformPtr (const SrcPtr &src, const Op &op)  template<class SrcPtr > __host__ Expr< TransposeBody< SrcPtr > > cv::cudev::transpose_ (const SrcPtr &src)  template<int n, class Op > __host__ __device__ UnaryTupleAdapter< Op, n > cv::cudev::unaryTupleAdapter (const Op &op)  __device__ __forceinline__ uint cv::cudev::vabsdiff2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vabsdiff4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vadd2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vadd4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vavg2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vavg4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vavrg2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vavrg4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpeq2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpeq4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpge2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpge4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpgt2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpgt4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmple2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmple4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmplt2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmplt4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpne2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vcmpne4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vmax2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vmax4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vmin2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vmin4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vseteq2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vseteq4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetge2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetge4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetgt2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetgt4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetle2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetle4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetlt2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetlt4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetne2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsetne4 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsub2 (uint a, uint b)  __device__ __forceinline__ uint cv::cudev::vsub4 (uint a, uint b)  template<class SrcPtr > __host__ Expr< RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, AffineMapPtr > > cv::cudev::warpAffine_ (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)  template<class SrcPtr > __host__ RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, AffineMapPtr > cv::cudev::warpAffinePtr (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)  template<class InIt , class OutIt > __device__ __forceinline__ OutIt cv::cudev::warpCopy (InIt beg, InIt end, OutIt out)  template<class It , typename T > __device__ __forceinline__ void cv::cudev::warpFill (It beg, It end, const T &value)  template<class SrcPtr > __host__ Expr< RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, PerspectiveMapPtr > > cv::cudev::warpPerspective_ (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)  template<class SrcPtr > __host__ RemapPtr1Sz< typename PtrTraits< SrcPtr >::ptr_type, PerspectiveMapPtr > cv::cudev::warpPerspectivePtr (const SrcPtr &src, Size dstSize, const GpuMat_< float > &warpMat)  template<typename P0 , typename P1 , typename P2 , typename P3 , typename P4 , typename P5 , typename P6 , typename P7 , typename P8 , typename P9 , typename R0 , typename R1 , typename R2 , typename R3 , typename R4 , typename R5 , typename R6 , typename R7 , typename R8 , typename R9 , class Op0 , class Op1 , class Op2 , class Op3 , class Op4 , class Op5 , class Op6 , class Op7 , class Op8 , class Op9 > __device__ __forceinline__ void cv::cudev::warpReduce (const tuple< P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 > &smem, const tuple< R0, R1, R2, R3, R4, R5, R6, R7, R8, R9 > &val, uint tid, const tuple< Op0, Op1, Op2, Op3, Op4, Op5, Op6, Op7, Op8, Op9 > &op)  template<typename T , class Op > __device__ __forceinline__ void cv::cudev::warpReduce (volatile T *smem, T &val, uint tid, const Op &op)  template<typename KP0 , typename KP1 , typename KP2 , typename KP3 , typename KP4 , typename KP5 , typename KP6 , typename KP7 , typename KP8 , typename KP9 , typename KR0 , typename KR1 , typename KR2 , typename KR3 , typename KR4 , typename KR5 , typename KR6 , typename KR7 , typename KR8 , typename KR9 , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp0 , class Cmp1 , class Cmp2 , class Cmp3 , class Cmp4 , class Cmp5 , class Cmp6 , class Cmp7 , class Cmp8 , class Cmp9 > __device__ __forceinline__ void cv::cudev::warpReduceKeyVal (const tuple< KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9 > &skeys, const tuple< KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9 > &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const tuple< Cmp0, Cmp1, Cmp2, Cmp3, Cmp4, Cmp5, Cmp6, Cmp7, Cmp8, Cmp9 > &cmp)  template<typename K , typename VP0 , typename VP1 , typename VP2 , typename VP3 , typename VP4 , typename VP5 , typename VP6 , typename VP7 , typename VP8 , typename VP9 , typename VR0 , typename VR1 , typename VR2 , typename VR3 , typename VR4 , typename VR5 , typename VR6 , typename VR7 , typename VR8 , typename VR9 , class Cmp > __device__ __forceinline__ void cv::cudev::warpReduceKeyVal (volatile K *skeys, K &key, const tuple< VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9 > &svals, const tuple< VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9 > &val, uint tid, const Cmp &cmp)  template<typename K , typename V , class Cmp > __device__ __forceinline__ void cv::cudev::warpReduceKeyVal (volatile K *skeys, K &key, volatile V *svals, V &val, uint tid, const Cmp &cmp)  template<typename T > __device__ __forceinline__ T cv::cudev::warpScanExclusive (T data, volatile T *smem, uint tid)  template<typename T > __device__ T cv::cudev::warpScanInclusive (T data, volatile T *smem, uint tid)  template<class InIt , class OutIt , class UnOp > __device__ __forceinline__ OutIt cv::cudev::warpTransform (InIt beg, InIt end, OutIt out, const UnOp &op)  template<class InIt1 , class InIt2 , class OutIt , class BinOp > __device__ __forceinline__ OutIt cv::cudev::warpTransform (InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, const BinOp &op)  template<typename OutIt , typename T > __device__ __forceinline__ void cv::cudev::warpYota (OutIt beg, OutIt end, T value)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, XYZ_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::XYZ_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YCrCb_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YCrCb_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV4_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV4_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV4_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV4_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV4_to_RGBA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_BGR_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV_to_BGR_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_BGRA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV_to_BGRA_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_RGB_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV_to_RGB_ (const SrcPtr &src)  template<class SrcPtr > __host__ Expr< UnaryTransformPtrSz< typename PtrTraits< SrcPtr >::ptr_type, YUV_to_RGBA_func< typename VecTraits< typename PtrTraits< SrcPtr >::value_type >::elem_type > > > cv::cudev::YUV_to_RGBA_ (const SrcPtr &src)  template<class Ptr0 , class Ptr1 > __host__ ZipPtrSz< tuple< typename PtrTraits< Ptr0 >::ptr_type, typename PtrTraits< Ptr1 >::ptr_type > > cv::cudev::zipPtr (const Ptr0 &ptr0, const Ptr1 &ptr1)  template<class Ptr0 , class Ptr1 , class Ptr2 > __host__ ZipPtrSz< tuple< typename PtrTraits< Ptr0 >::ptr_type, typename PtrTraits< Ptr1 >::ptr_type, typename PtrTraits< Ptr2 >::ptr_type > > cv::cudev::zipPtr (const Ptr0 &ptr0, const Ptr1 &ptr1, const Ptr2 &ptr2)  template<class Ptr0 , class Ptr1 , class Ptr2 , class Ptr3 > __host__ ZipPtrSz< tuple< typename PtrTraits< Ptr0 >::ptr_type, typename PtrTraits< Ptr1 >::ptr_type, typename PtrTraits< Ptr2 >::ptr_type, typename PtrTraits< Ptr3 >::ptr_type > > cv::cudev::zipPtr (const Ptr0 &ptr0, const Ptr1 &ptr1, const Ptr2 &ptr2, const Ptr3 &ptr3) "
core,"Namespace for all functions is cvv, i.e. cvv::showImage()."
core,Compilation:
core,"For development, i.e. for cvv GUI to show up, compile your code using cvv with g++ -DCVVISUAL_DEBUGMODE*. For release, i.e. cvv calls doing nothing, compile your code without above flag."
core,See cvv tutorial for a commented example application using cvv.
core,Namespaces namespace cvv::impl 
dnn,This class represents high-level API for classification models.
dnn,"ClassificationModel allows to set params for preprocessing input image. ClassificationModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return top-1 prediction."
dnn,Derivatives of this class encapsulates functions of certain backends.
dnn,This interface class allows to build new Layers - are building blocks of networks.
dnn,"Each class, derived from Layer, must implement forward() method to compute outputs. Also before using the new layer into networks you must register your layer by using one of LayerFactory macros."
dnn,This class is presented high-level API for neural networks.
dnn,"Model allows to set params for preprocessing input image. Model creates net from file with trained weights and config, sets preprocessing input and runs forward pass."
dnn,This class represents high-level API for object detection networks.
dnn,"DetectionModel allows to set params for preprocessing input image. DetectionModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return result detections. For DetectionModel SSD, Faster R-CNN, YOLO topologies are supported."
dnn,Layer factory allows to create instances of registered layers.
dnn,"This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64."
dnn,Base class for text detection networks.
dnn,This module contains:
dnn,"API for new layers creation, layers are building bricks of neural networks; set of built-in most-useful Layers; API to construct and modify comprehensive neural networks from layers; functionality for loading serialized networks models from different frameworks."
dnn,Functionality of this module is designed only for forward pass computations (i.e. network testing). A network training is in principle not supported.
dnn,"Classes class cv::dnn::BackendNode  Derivatives of this class encapsulates functions of certain backends. More...  class cv::dnn::BackendWrapper  Derivatives of this class wraps cv::Mat for different backends and targets. More...  class cv::dnn::ClassificationModel  This class represents high-level API for classification models. More...  class cv::dnn::DetectionModel  This class represents high-level API for object detection networks. More...  class cv::dnn::Dict  This class implements name-value dictionary, values are instances of DictValue. More...  struct cv::dnn::DictValue  This struct stores the scalar value (or array) of one of the following type: double, cv::String or int64. More...  struct cv::dnn::Image2BlobParams  Processing params of image to blob. More...  class cv::dnn::KeypointsModel  This class represents high-level API for keypoints models. More...  class cv::dnn::Layer  This interface class allows to build new Layers - are building blocks of networks. More...  class cv::dnn::LayerParams  This class provides all data needed to initialize layer. More...  class cv::dnn::Model  This class is presented high-level API for neural networks. More...  class cv::dnn::Net  This class allows to create and manipulate comprehensive artificial neural networks. More...  class cv::dnn::SegmentationModel  This class represents high-level API for segmentation models. More...  class cv::dnn::TextDetectionModel  Base class for text detection networks. More...  class cv::dnn::TextDetectionModel_DB  This class represents high-level API for text detection DL networks compatible with DB model. More...  class cv::dnn::TextDetectionModel_EAST  This class represents high-level API for text detection DL networks compatible with EAST model. More...  class cv::dnn::TextRecognitionModel  This class represents high-level API for text recognition networks. More... "
dnn,"Functions Mat cv::dnn::blobFromImage (InputArray image, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.  void cv::dnn::blobFromImage (InputArray image, OutputArray blob, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from image.  Mat cv::dnn::blobFromImages (InputArrayOfArrays images, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from series of images. Optionally resizes and crops images from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.  void cv::dnn::blobFromImages (InputArrayOfArrays images, OutputArray blob, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from series of images.  Mat cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, const Image2BlobParams &param=Image2BlobParams())  Creates 4-dimensional blob from series of images with given params.  void cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())  Mat cv::dnn::blobFromImageWithParams (InputArray image, const Image2BlobParams &param=Image2BlobParams())  Creates 4-dimensional blob from image with given params.  void cv::dnn::blobFromImageWithParams (InputArray image, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())  void cv::dnn::enableModelDiagnostics (bool isDiagnosticsMode)  Enables detailed logging of the DNN model loading with CV DNN API.  std::vector< std::pair< Backend, Target > > cv::dnn::getAvailableBackends ()  std::vector< Target > cv::dnn::getAvailableTargets (dnn::Backend be)  LayerFactory_Impl & cv::dnn::getLayerFactoryImpl ()  Mutex & cv::dnn::getLayerFactoryMutex ()  Get the mutex guarding LayerFactory_Impl, see getLayerFactoryImpl() function.  void cv::dnn::imagesFromBlob (const cv::Mat &blob_, OutputArrayOfArrays images_)  Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector<cv::Mat>).  void cv::dnn::NMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Performs non maximum suppression given boxes and corresponding scores.  void cv::dnn::NMSBoxes (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  void cv::dnn::NMSBoxes (const std::vector< RotatedRect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  void cv::dnn::NMSBoxesBatched (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Performs batched non maximum suppression on given boxes and corresponding scores across different classes.  void cv::dnn::NMSBoxesBatched (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Net cv::dnn::readNet (const String &framework, const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())  Read deep learning network represented in one of the supported formats.  Net cv::dnn::readNet (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config="""", const String &framework="""")  Read deep learning network represented in one of the supported formats.  Net cv::dnn::readNetFromCaffe (const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)  Reads a network model stored in Caffe model in memory.  Net cv::dnn::readNetFromCaffe (const std::vector< uchar > &bufferProto, const std::vector< uchar > &bufferModel=std::vector< uchar >())  Reads a network model stored in Caffe model in memory.  Net cv::dnn::readNetFromCaffe (CV_WRAP_FILE_PATH const String &prototxt, CV_WRAP_FILE_PATH const String &caffeModel=String())  Reads a network model stored in Caffe framework's format.  Net cv::dnn::readNetFromDarknet (const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromDarknet (const std::vector< uchar > &bufferCfg, const std::vector< uchar > &bufferModel=std::vector< uchar >())  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromDarknet (CV_WRAP_FILE_PATH const String &cfgFile, CV_WRAP_FILE_PATH const String &darknetModel=String())  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromModelOptimizer (const std::vector< uchar > &bufferModelConfig, const std::vector< uchar > &bufferWeights)  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromModelOptimizer (const uchar *bufferModelConfigPtr, size_t bufferModelConfigSize, const uchar *bufferWeightsPtr, size_t bufferWeightsSize)  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromModelOptimizer (CV_WRAP_FILE_PATH const String &xml, CV_WRAP_FILE_PATH const String &bin="""")  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromONNX (const char *buffer, size_t sizeBuffer)  Reads a network model from ONNX in-memory buffer.  Net cv::dnn::readNetFromONNX (const std::vector< uchar > &buffer)  Reads a network model from ONNX in-memory buffer.  Net cv::dnn::readNetFromONNX (CV_WRAP_FILE_PATH const String &onnxFile)  Reads a network model ONNX.  Net cv::dnn::readNetFromTensorflow (const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTensorflow (const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTensorflow (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config=String())  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTFLite (const char *bufferModel, size_t lenModel)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTFLite (const std::vector< uchar > &bufferModel)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTFLite (CV_WRAP_FILE_PATH const String &model)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTorch (CV_WRAP_FILE_PATH const String &model, bool isBinary=true, bool evaluate=true)  Reads a network model stored in Torch7 framework's format.  Mat cv::dnn::readTensorFromONNX (CV_WRAP_FILE_PATH const String &path)  Creates blob from .pb file.  Mat cv::dnn::readTorchBlob (const String &filename, bool isBinary=true)  Loads blob which was serialized as torch.Tensor object of Torch7 framework.  void cv::dnn::shrinkCaffeModel (CV_WRAP_FILE_PATH const String &src, CV_WRAP_FILE_PATH const String &dst, const std::vector< String > &layersTypes=std::vector< String >())  Convert all weights of Caffe network to half precision floating point.  void cv::dnn::softNMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, std::vector< float > &updated_scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, size_t top_k=0, const float sigma=0.5, SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN)  Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503.  void cv::dnn::writeTextGraph (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &output)  Create a text representation for a binary network stored in protocol buffer format. "
dnn,This subsection of dnn module contains information about built-in layers and their descriptions.
dnn,"Classes listed here, in fact, provides C++ API for creating instances of built-in layers. In addition to this way of layers instantiation, there is a more common factory API (see Utilities for New Layers Registration), it allows to create layers dynamically (by name) and register new ones. You can use both API, but factory API is less convenient for native C++ programming and basically designed for use inside importers (see readNetFromCaffe(), readNetFromTorch(), readNetFromTensorflow())."
dnn,"Built-in layers partially reproduce functionality of corresponding Caffe and Torch7 layers. In particular, the following layers and Caffe importer were tested to reproduce Caffe functionality:"
dnn,"Convolution Deconvolution Pooling InnerProduct TanH, ReLU, Sigmoid, BNLL, Power, AbsVal Softmax Reshape, Flatten, Slice, Split LRN MVN Dropout (since it does nothing on forward pass -))"
dnn,Classes class cv::dnn::AbsLayer  class cv::dnn::AccumLayer  class cv::dnn::AcoshLayer  class cv::dnn::AcosLayer  class cv::dnn::ActivationLayer  class cv::dnn::ActivationLayerInt8  class cv::dnn::ArgLayer  ArgMax/ArgMin layer. More...  class cv::dnn::AsinhLayer  class cv::dnn::AsinLayer  class cv::dnn::AtanhLayer  class cv::dnn::AtanLayer  class cv::dnn::AttentionLayer  class cv::dnn::BaseConvolutionLayer  class cv::dnn::BatchNormLayer  class cv::dnn::BatchNormLayerInt8  class cv::dnn::BlankLayer  class cv::dnn::BNLLLayer  class cv::dnn::CeilLayer  class cv::dnn::CeluLayer  class cv::dnn::ChannelsPReLULayer  class cv::dnn::CompareLayer  class cv::dnn::ConcatLayer  class cv::dnn::ConstLayer  class cv::dnn::ConvolutionLayer  class cv::dnn::ConvolutionLayerInt8  class cv::dnn::CorrelationLayer  class cv::dnn::CoshLayer  class cv::dnn::CosLayer  class cv::dnn::CropAndResizeLayer  class cv::dnn::CropLayer  class cv::dnn::CumSumLayer  class cv::dnn::DataAugmentationLayer  class cv::dnn::DeconvolutionLayer  class cv::dnn::DepthToSpaceLayer  class cv::dnn::DequantizeLayer  class cv::dnn::DetectionOutputLayer  Detection output layer. More...  class cv::dnn::EinsumLayer  This function performs array summation based on the Einstein summation convention. The function allows for concise expressions of various mathematical operations using subscripts. More...  class cv::dnn::EltwiseLayer  Element wise operation on inputs. More...  class cv::dnn::EltwiseLayerInt8  class cv::dnn::ELULayer  class cv::dnn::ErfLayer  class cv::dnn::ExpandLayer  class cv::dnn::ExpLayer  class cv::dnn::FlattenLayer  class cv::dnn::FloorLayer  class cv::dnn::FlowWarpLayer  class cv::dnn::GatherElementsLayer  GatherElements layer GatherElements takes two inputs data and indices of the same rank r >= 1 and an optional attribute axis and works such that: output[i][j][k] = data[index[i][j][k]][j][k] if axis = 0 and r = 3 output[i][j][k] = data[i][index[i][j][k]][k] if axis = 1 and r = 3 output[i][j][k] = data[i][j][index[i][j][k]] if axis = 2 and r = 3. More...  class cv::dnn::GatherLayer  Gather layer. More...  class cv::dnn::GeluApproximationLayer  class cv::dnn::GeluLayer  class cv::dnn::GemmLayer  class cv::dnn::GroupNormLayer  class cv::dnn::GRULayer  GRU recurrent one-layer. More...  class cv::dnn::HardSigmoidLayer  class cv::dnn::HardSwishLayer  class cv::dnn::InnerProductLayer  class cv::dnn::InnerProductLayerInt8  class cv::dnn::InstanceNormLayer  class cv::dnn::InterpLayer  Bilinear resize layer from https://github.com/cdmh/deeplab-public-ver2. More...  class cv::dnn::LayerNormLayer  class cv::dnn::LogLayer  class cv::dnn::LRNLayer  class cv::dnn::LSTMLayer  LSTM recurrent layer. More...  class cv::dnn::MatMulLayer  class cv::dnn::MaxUnpoolLayer  class cv::dnn::MishLayer  class cv::dnn::MVNLayer  class cv::dnn::NaryEltwiseLayer  class cv::dnn::NormalizeBBoxLayer  \( L_p \) - normalization layer. More...  class cv::dnn::NotLayer  class cv::dnn::PaddingLayer  Adds extra values for specific axes. More...  class cv::dnn::PermuteLayer  class cv::dnn::PoolingLayer  class cv::dnn::PoolingLayerInt8  class cv::dnn::PowerLayer  class cv::dnn::PriorBoxLayer  class cv::dnn::ProposalLayer  class cv::dnn::QuantizeLayer  class cv::dnn::ReciprocalLayer  class cv::dnn::ReduceLayer  class cv::dnn::RegionLayer  class cv::dnn::ReLU6Layer  class cv::dnn::ReLULayer  class cv::dnn::ReorgLayer  class cv::dnn::RequantizeLayer  class cv::dnn::ReshapeLayer  class cv::dnn::ResizeLayer  Resize input 4-dimensional blob by nearest neighbor or bilinear strategy. More...  class cv::dnn::RNNLayer  Classical recurrent layer. More...  class cv::dnn::RoundLayer  class cv::dnn::ScaleLayer  class cv::dnn::ScaleLayerInt8  class cv::dnn::ScatterLayer  class cv::dnn::ScatterNDLayer  class cv::dnn::SeluLayer  class cv::dnn::ShiftLayer  class cv::dnn::ShiftLayerInt8  class cv::dnn::ShrinkLayer  class cv::dnn::ShuffleChannelLayer  class cv::dnn::SigmoidLayer  class cv::dnn::SignLayer  class cv::dnn::SinhLayer  class cv::dnn::SinLayer  class cv::dnn::SliceLayer  class cv::dnn::SoftmaxLayer  class cv::dnn::SoftmaxLayerInt8  class cv::dnn::SoftplusLayer  class cv::dnn::SoftsignLayer  class cv::dnn::SpaceToDepthLayer  class cv::dnn::SplitLayer  class cv::dnn::SqrtLayer  class cv::dnn::SwishLayer  class cv::dnn::TanHLayer  class cv::dnn::TanLayer  class cv::dnn::ThresholdedReluLayer  class cv::dnn::TileLayer  class cv::dnn::TopKLayer 
dnn,This class represents high-level API for text detection DL networks compatible with EAST model.
dnn,Configurable parameters:
dnn,"(float) confThreshold - used to filter boxes by confidences, default: 0.5f (float) nmsThreshold - used in non maximum suppression, default: 0.0f"
dnn,"This class implements name-value dictionary, values are instances of DictValue."
dnn,Processing params of image to blob.
dnn,It includes all possible image processing operations and corresponding parameters.
dnn,This class represents high-level API for segmentation models.
dnn,"SegmentationModel allows to set params for preprocessing input image. SegmentationModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and returns the class prediction for each pixel."
dnn,This class represents high-level API for text detection DL networks compatible with DB model.
dnn,"Related publications: [167] Paper: https://arxiv.org/abs/1911.08947 For more information about the hyper-parameters setting, please refer to https://github.com/MhLiao/DB"
dnn,Configurable parameters:
dnn,"(float) binaryThreshold - The threshold of the binary map. It is usually set to 0.3. (float) polygonThreshold - The threshold of text polygons. It is usually set to 0.5, 0.6, and 0.7. Default is 0.5f (double) unclipRatio - The unclip ratio of the detected text region, which determines the output size. It is usually set to 2.0. (int) maxCandidates - The max number of the output results."
dnn,This class allows to create and manipulate comprehensive artificial neural networks.
dnn,"Neural network is presented as directed acyclic graph (DAG), where vertices are Layer instances, and edges specify relationships between layers inputs and outputs."
dnn,Each network layer has unique integer id and unique string name inside its network. LayerId can store either layer name or layer id.
dnn,"This class supports reference counting of its instances, i. e. copies point to the same instance."
dnn,This class provides all data needed to initialize layer.
dnn,"It includes dictionary with scalar params (which can be read by using Dict interface), blob params blobs and optional meta information: name and type of layer instance."
dnn,"Functions Mat cv::dnn::blobFromImage (InputArray image, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.  void cv::dnn::blobFromImage (InputArray image, OutputArray blob, double scalefactor=1.0, const Size &size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from image.  Mat cv::dnn::blobFromImages (InputArrayOfArrays images, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from series of images. Optionally resizes and crops images from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.  void cv::dnn::blobFromImages (InputArrayOfArrays images, OutputArray blob, double scalefactor=1.0, Size size=Size(), const Scalar &mean=Scalar(), bool swapRB=false, bool crop=false, int ddepth=CV_32F)  Creates 4-dimensional blob from series of images.  Mat cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, const Image2BlobParams &param=Image2BlobParams())  Creates 4-dimensional blob from series of images with given params.  void cv::dnn::blobFromImagesWithParams (InputArrayOfArrays images, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())  Mat cv::dnn::blobFromImageWithParams (InputArray image, const Image2BlobParams &param=Image2BlobParams())  Creates 4-dimensional blob from image with given params.  void cv::dnn::blobFromImageWithParams (InputArray image, OutputArray blob, const Image2BlobParams &param=Image2BlobParams())  void cv::dnn::enableModelDiagnostics (bool isDiagnosticsMode)  Enables detailed logging of the DNN model loading with CV DNN API.  std::vector< std::pair< Backend, Target > > cv::dnn::getAvailableBackends ()  std::vector< Target > cv::dnn::getAvailableTargets (dnn::Backend be)  void cv::dnn::imagesFromBlob (const cv::Mat &blob_, OutputArrayOfArrays images_)  Parse a 4D blob and output the images it contains as 2D arrays through a simpler data structure (std::vector<cv::Mat>).  void cv::dnn::NMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Performs non maximum suppression given boxes and corresponding scores.  void cv::dnn::NMSBoxes (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  void cv::dnn::NMSBoxes (const std::vector< RotatedRect > &bboxes, const std::vector< float > &scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  void cv::dnn::NMSBoxesBatched (const std::vector< Rect > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Performs batched non maximum suppression on given boxes and corresponding scores across different classes.  void cv::dnn::NMSBoxesBatched (const std::vector< Rect2d > &bboxes, const std::vector< float > &scores, const std::vector< int > &class_ids, const float score_threshold, const float nms_threshold, std::vector< int > &indices, const float eta=1.f, const int top_k=0)  Net cv::dnn::readNet (const String &framework, const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())  Read deep learning network represented in one of the supported formats.  Net cv::dnn::readNet (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config="""", const String &framework="""")  Read deep learning network represented in one of the supported formats.  Net cv::dnn::readNetFromCaffe (const char *bufferProto, size_t lenProto, const char *bufferModel=NULL, size_t lenModel=0)  Reads a network model stored in Caffe model in memory.  Net cv::dnn::readNetFromCaffe (const std::vector< uchar > &bufferProto, const std::vector< uchar > &bufferModel=std::vector< uchar >())  Reads a network model stored in Caffe model in memory.  Net cv::dnn::readNetFromCaffe (CV_WRAP_FILE_PATH const String &prototxt, CV_WRAP_FILE_PATH const String &caffeModel=String())  Reads a network model stored in Caffe framework's format.  Net cv::dnn::readNetFromDarknet (const char *bufferCfg, size_t lenCfg, const char *bufferModel=NULL, size_t lenModel=0)  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromDarknet (const std::vector< uchar > &bufferCfg, const std::vector< uchar > &bufferModel=std::vector< uchar >())  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromDarknet (CV_WRAP_FILE_PATH const String &cfgFile, CV_WRAP_FILE_PATH const String &darknetModel=String())  Reads a network model stored in Darknet model files.  Net cv::dnn::readNetFromModelOptimizer (const std::vector< uchar > &bufferModelConfig, const std::vector< uchar > &bufferWeights)  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromModelOptimizer (const uchar *bufferModelConfigPtr, size_t bufferModelConfigSize, const uchar *bufferWeightsPtr, size_t bufferWeightsSize)  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromModelOptimizer (CV_WRAP_FILE_PATH const String &xml, CV_WRAP_FILE_PATH const String &bin="""")  Load a network from Intel's Model Optimizer intermediate representation.  Net cv::dnn::readNetFromONNX (const char *buffer, size_t sizeBuffer)  Reads a network model from ONNX in-memory buffer.  Net cv::dnn::readNetFromONNX (const std::vector< uchar > &buffer)  Reads a network model from ONNX in-memory buffer.  Net cv::dnn::readNetFromONNX (CV_WRAP_FILE_PATH const String &onnxFile)  Reads a network model ONNX.  Net cv::dnn::readNetFromTensorflow (const char *bufferModel, size_t lenModel, const char *bufferConfig=NULL, size_t lenConfig=0)  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTensorflow (const std::vector< uchar > &bufferModel, const std::vector< uchar > &bufferConfig=std::vector< uchar >())  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTensorflow (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &config=String())  Reads a network model stored in TensorFlow framework's format.  Net cv::dnn::readNetFromTFLite (const char *bufferModel, size_t lenModel)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTFLite (const std::vector< uchar > &bufferModel)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTFLite (CV_WRAP_FILE_PATH const String &model)  Reads a network model stored in TFLite framework's format.  Net cv::dnn::readNetFromTorch (CV_WRAP_FILE_PATH const String &model, bool isBinary=true, bool evaluate=true)  Reads a network model stored in Torch7 framework's format.  Mat cv::dnn::readTensorFromONNX (CV_WRAP_FILE_PATH const String &path)  Creates blob from .pb file.  Mat cv::dnn::readTorchBlob (const String &filename, bool isBinary=true)  Loads blob which was serialized as torch.Tensor object of Torch7 framework.  void cv::dnn::shrinkCaffeModel (CV_WRAP_FILE_PATH const String &src, CV_WRAP_FILE_PATH const String &dst, const std::vector< String > &layersTypes=std::vector< String >())  Convert all weights of Caffe network to half precision floating point.  void cv::dnn::softNMSBoxes (const std::vector< Rect > &bboxes, const std::vector< float > &scores, std::vector< float > &updated_scores, const float score_threshold, const float nms_threshold, std::vector< int > &indices, size_t top_k=0, const float sigma=0.5, SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN)  Performs soft non maximum suppression given boxes and corresponding scores. Reference: https://arxiv.org/abs/1704.04503.  void cv::dnn::writeTextGraph (CV_WRAP_FILE_PATH const String &model, CV_WRAP_FILE_PATH const String &output)  Create a text representation for a binary network stored in protocol buffer format. "
dnn,This class represents high-level API for keypoints models.
dnn,"KeypointsModel allows to set params for preprocessing input image. KeypointsModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and returns the x and y coordinates of each detected keypoint"
dnn,This class represents high-level API for text recognition networks.
dnn,"TextRecognitionModel allows to set params for preprocessing input image. TextRecognitionModel creates net from file with trained weights and config, sets preprocessing input, runs forward pass and return recognition result. For TextRecognitionModel, CRNN-CTC is supported."
dnn,Derivatives of this class wraps cv::Mat for different backends and targets.
dnn,Classes class cv::dnn::LayerFactory  Layer factory allows to create instances of registered layers. More... 
features2d,"Enumerations enum struct cv::DrawMatchesFlags { cv::DrawMatchesFlags::DEFAULT = 0 , cv::DrawMatchesFlags::DRAW_OVER_OUTIMG = 1 , cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS = 2 , cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS = 4 } "
features2d,"Functions void cv::drawKeypoints (InputArray image, const std::vector< KeyPoint > &keypoints, InputOutputArray outImage, const Scalar &color=Scalar::all(-1), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)  Draws keypoints.  void cv::drawMatches (InputArray img1, const std::vector< KeyPoint > &keypoints1, InputArray img2, const std::vector< KeyPoint > &keypoints2, const std::vector< DMatch > &matches1to2, InputOutputArray outImg, const int matchesThickness, const Scalar &matchColor=Scalar::all(-1), const Scalar &singlePointColor=Scalar::all(-1), const std::vector< char > &matchesMask=std::vector< char >(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)  void cv::drawMatches (InputArray img1, const std::vector< KeyPoint > &keypoints1, InputArray img2, const std::vector< KeyPoint > &keypoints2, const std::vector< DMatch > &matches1to2, InputOutputArray outImg, const Scalar &matchColor=Scalar::all(-1), const Scalar &singlePointColor=Scalar::all(-1), const std::vector< char > &matchesMask=std::vector< char >(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT)  Draws the found matches of keypoints from two images.  void cv::drawMatches (InputArray img1, const std::vector< KeyPoint > &keypoints1, InputArray img2, const std::vector< KeyPoint > &keypoints2, const std::vector< std::vector< DMatch > > &matches1to2, InputOutputArray outImg, const Scalar &matchColor=Scalar::all(-1), const Scalar &singlePointColor=Scalar::all(-1), const std::vector< std::vector< char > > &matchesMask=std::vector< std::vector< char > >(), DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT) "
features2d,"Classes struct cv::Accumulator< T >  struct cv::Accumulator< char >  struct cv::Accumulator< short >  struct cv::Accumulator< unsigned char >  struct cv::Accumulator< unsigned short >  class cv::AffineFeature  Class for implementing the wrapper which makes detectors and extractors to be affine invariant, described as ASIFT in [312] . More...  class cv::AgastFeatureDetector  Wrapping class for feature detection using the AGAST method. : More...  class cv::AKAZE  Class implementing the AKAZE keypoint detector and descriptor extractor, described in [10]. More...  class cv::BRISK  Class implementing the BRISK keypoint detector and descriptor extractor, described in [159] . More...  class cv::FastFeatureDetector  Wrapping class for feature detection using the FAST method. : More...  class cv::Feature2D  Abstract base class for 2D image feature detectors and descriptor extractors. More...  class cv::GFTTDetector  Wrapping class for feature detection using the goodFeaturesToTrack function. : More...  class cv::KAZE  Class implementing the KAZE keypoint detector and descriptor extractor, described in [9] . More...  class cv::KeyPointsFilter  A class filters a vector of keypoints. More...  struct cv::L1< T >  struct cv::L2< T >  class cv::MSER  Maximally stable extremal region extractor. More...  class cv::ORB  Class implementing the ORB (oriented BRIEF) keypoint detector and descriptor extractor. More...  class cv::SIFT  Class for extracting keypoints and computing descriptors using the Scale Invariant Feature Transform (SIFT) algorithm by D. Lowe [174] . More...  class cv::SimpleBlobDetector  Class for extracting blobs from an image. : More...  struct cv::SL2< T > "
features2d,Matchers of keypoint descriptors in OpenCV have wrappers with a common interface that enables you to easily switch between different algorithms solving the same problem. This section is devoted to matching descriptors that are represented as vectors in a multidimensional space. All objects that implement vector descriptor matchers inherit the DescriptorMatcher interface.
features2d,Classes class cv::BFMatcher  Brute-force descriptor matcher. More...  class cv::DescriptorMatcher  Abstract base class for matching keypoint descriptors. More...  class cv::FlannBasedMatcher  Flann-based descriptor matcher. More... 
features2d,This section describes approaches based on local 2D features and used to categorize objects.
features2d,Classes class cv::BOWImgDescriptorExtractor  Class to compute an image descriptor using the bag of visual words. More...  class cv::BOWKMeansTrainer  kmeans -based class to train visual vocabulary using the bag of visual words approach. : More...  class cv::BOWTrainer  Abstract base class for training the bag of visual words vocabulary from a set of descriptors. More... 
flann,The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built.
flann,Distance functor specifies the metric to be used to calculate the distance between two points. There are several Distance functors that are readily available:
flann,"cv::cvflann::L2_Simple - Squared Euclidean distance functor. This is the simpler, unrolled version. This is preferable for very low dimensionality data (eg 3D points)"
flann,"cv::flann::L2 - Squared Euclidean distance functor, optimized version."
flann,"cv::flann::L1 - Manhattan distance functor, optimized version."
flann,cv::flann::MinkowskiDistance - The Minkowski distance functor. This is highly optimised with loop unrolling. The computation of squared root at the end is omitted for efficiency.
flann,"cv::flann::MaxDistance - The max distance functor. It computes the maximum distance between two vectors. This distance is not a valid kdtree distance, it's not dimensionwise additive."
flann,cv::flann::HammingLUT - Hamming distance functor. It counts the bit differences between two strings using a lookup table implementation.
flann,"cv::flann::Hamming - Hamming distance functor. Population count is performed using library calls, if available. Lookup table implementation is used as a fallback."
flann,cv::flann::Hamming2 - Hamming distance functor. Population count is implemented in 12 arithmetic operations (one of which is multiplication).
flann,"cv::flann::DNAmmingLUT - Adaptation of the Hamming distance functor to DNA comparison. As the four bases A, C, G, T of the DNA (or A, G, C, U for RNA) can be coded on 2 bits, it counts the bits pairs differences between two sequences using a lookup table implementation."
flann,cv::flann::DNAmming2 - Adaptation of the Hamming distance functor to DNA comparison. Bases differences count are vectorised thanks to arithmetic operations using standard registers (AVX2 and AVX-512 should come in a near future).
flann,cv::flann::HistIntersectionDistance - The histogram intersection distance functor.
flann,cv::flann::HellingerDistance - The Hellinger distance functor.
flann,cv::flann::ChiSquareDistance - The chi-square distance functor.
flann,cv::flann::KL_Divergence - The Kullback-Leibler divergence functor.
flann,"Although the provided implementations cover a vast range of cases, it is also possible to use a custom implementation. The distance functor is a class whose operator() computes the distance between two features. If the distance is also a kd-tree compatible distance, it should also provide an accum_dist() method that computes the distance between individual feature dimensions."
flann,"In addition to operator() and accum_dist(), a distance functor should also define the ElementType and the ResultType as the types of the elements it operates on and the type of the result it computes. If a distance functor can be used as a kd-tree distance (meaning that the full distance between a pair of features can be accumulated from the partial distances between the individual dimensions) a typedef is_kdtree_distance should be present inside the distance functor. If the distance is not a kd-tree distance, but it's a distance in a vector space (the individual dimensions of the elements it operates on can be accessed independently) a typedef is_vector_space_distance should be defined inside the functor. If neither typedef is defined, the distance is assumed to be a metric distance and will only be used with indexes operating on generic metric distances."
flann,This section documents OpenCV's interface to the FLANN library. FLANN (Fast Library for Approximate Nearest Neighbors) is a library that contains a collection of algorithms optimized for fast nearest neighbor search in large datasets and for high dimensional features. More information about FLANN can be found in [201] .
flann,Classes struct cv::flann::CvType< T >  struct cv::flann::CvType< char >  struct cv::flann::CvType< double >  struct cv::flann::CvType< float >  struct cv::flann::CvType< short >  struct cv::flann::CvType< unsigned char >  struct cv::flann::CvType< unsigned short >  class cv::flann::GenericIndex< Distance >  The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built. More... 
gapi,"Functions GMat cv::gapi::BackgroundSubtractor (const GMat &src, const cv::gapi::video::BackgroundSubtractorParams &bsParams)  Gaussian Mixture-based or K-nearest neighbours-based Background/Foreground Segmentation Algorithm. The operation generates a foreground mask.  std::tuple< GArray< GMat >, GScalar > cv::gapi::buildOpticalFlowPyramid (const GMat &img, const Size &winSize, const GScalar &maxLevel, bool withDerivatives=true, int pyrBorder=BORDER_REFLECT_101, int derivBorder=BORDER_CONSTANT, bool tryReuseInputImage=true)  Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.  std::tuple< GArray< Point2f >, GArray< uchar >, GArray< float > > cv::gapi::calcOpticalFlowPyrLK (const GArray< GMat > &prevPyr, const GArray< GMat > &nextPyr, const GArray< Point2f > &prevPts, const GArray< Point2f > &predPts, const Size &winSize=Size(21, 21), const GScalar &maxLevel=3, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT|TermCriteria::EPS, 30, 0.01), int flags=0, double minEigThresh=1e-4)  std::tuple< GArray< Point2f >, GArray< uchar >, GArray< float > > cv::gapi::calcOpticalFlowPyrLK (const GMat &prevImg, const GMat &nextImg, const GArray< Point2f > &prevPts, const GArray< Point2f > &predPts, const Size &winSize=Size(21, 21), const GScalar &maxLevel=3, const TermCriteria &criteria=TermCriteria(TermCriteria::COUNT|TermCriteria::EPS, 30, 0.01), int flags=0, double minEigThresh=1e-4)  Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids.  GMat cv::gapi::KalmanFilter (const GMat &measurement, const GOpaque< bool > &haveMeasurement, const cv::gapi::KalmanParams &kfParams)  GMat cv::gapi::KalmanFilter (const GMat &measurement, const GOpaque< bool > &haveMeasurement, const GMat &control, const cv::gapi::KalmanParams &kfParams)  Standard Kalman filter algorithm http://en.wikipedia.org/wiki/Kalman_filter. "
gapi,"Functions GMat cv::gapi::Canny (const GMat &image, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)  Finds edges in an image using the Canny algorithm.  GArray< Point2f > cv::gapi::goodFeaturesToTrack (const GMat &image, int maxCorners, double qualityLevel, double minDistance, const Mat &mask=Mat(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)  Determines strong corners on an image. "
gapi,gapi_colorconvert
gapi,"Functions GMat cv::gapi::concatHor (const GMat &src1, const GMat &src2)  Applies horizontal concatenation to given matrices.  GMat cv::gapi::concatHor (const std::vector< GMat > &v)  GMat cv::gapi::concatVert (const GMat &src1, const GMat &src2)  Applies vertical concatenation to given matrices.  GMat cv::gapi::concatVert (const std::vector< GMat > &v)  GMat cv::gapi::convertTo (const GMat &src, int rdepth, double alpha=1, double beta=0)  Converts a matrix to another data depth with optional scaling.  GFrame cv::gapi::copy (const GFrame &in)  Makes a copy of the input frame. Note that this copy may be not real (no actual data copied). Use this function to maintain graph contracts, e.g when graph's input needs to be passed directly to output, like in Streaming mode.  GMat cv::gapi::copy (const GMat &in)  Makes a copy of the input image. Note that this copy may be not real (no actual data copied). Use this function to maintain graph contracts, e.g when graph's input needs to be passed directly to output, like in Streaming mode.  GMat cv::gapi::crop (const GMat &src, const Rect &rect)  Crops a 2D matrix.  GMat cv::gapi::flip (const GMat &src, int flipCode)  Flips a 2D matrix around vertical, horizontal, or both axes.  GMat cv::gapi::LUT (const GMat &src, const Mat &lut)  Performs a look-up table transform of a matrix.  GMat cv::gapi::merge3 (const GMat &src1, const GMat &src2, const GMat &src3)  Creates one 3-channel matrix out of 3 single-channel ones.  GMat cv::gapi::merge4 (const GMat &src1, const GMat &src2, const GMat &src3, const GMat &src4)  Creates one 4-channel matrix out of 4 single-channel ones.  GMat cv::gapi::normalize (const GMat &src, double alpha, double beta, int norm_type, int ddepth=-1)  Normalizes the norm or value range of an array.  GMat cv::gapi::remap (const GMat &src, const Mat &map1, const Mat &map2, int interpolation, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())  Applies a generic geometrical transformation to an image.  GMat cv::gapi::resize (const GMat &src, const Size &dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)  Resizes an image.  GMatP cv::gapi::resizeP (const GMatP &src, const Size &dsize, int interpolation=cv::INTER_LINEAR)  Resizes a planar image.  std::tuple< GMat, GMat, GMat > cv::gapi::split3 (const GMat &src)  Divides a 3-channel matrix into 3 single-channel matrices.  std::tuple< GMat, GMat, GMat, GMat > cv::gapi::split4 (const GMat &src)  Divides a 4-channel matrix into 4 single-channel matrices.  GMat cv::gapi::warpAffine (const GMat &src, const Mat &M, const Size &dsize, int flags=cv::INTER_LINEAR, int borderMode=cv::BORDER_CONSTANT, const Scalar &borderValue=Scalar())  Applies an affine transformation to an image.  GMat cv::gapi::warpPerspective (const GMat &src, const Mat &M, const Size &dsize, int flags=cv::INTER_LINEAR, int borderMode=cv::BORDER_CONSTANT, const Scalar &borderValue=Scalar())  Applies a perspective transformation to an image. "
gapi,"Functions GMat cv::gapi::bilateralFilter (const GMat &src, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)  Applies the bilateral filter to an image.  GMat cv::gapi::blur (const GMat &src, const Size &ksize, const Point &anchor=Point(-1,-1), int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Blurs an image using the normalized box filter.  GMat cv::gapi::boxFilter (const GMat &src, int dtype, const Size &ksize, const Point &anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Blurs an image using the box filter.  GMat cv::gapi::dilate (const GMat &src, const Mat &kernel, const Point &anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Dilates an image by using a specific structuring element.  GMat cv::gapi::dilate3x3 (const GMat &src, int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Dilates an image by using 3 by 3 rectangular structuring element.  GMat cv::gapi::erode (const GMat &src, const Mat &kernel, const Point &anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Erodes an image by using a specific structuring element.  GMat cv::gapi::erode3x3 (const GMat &src, int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Erodes an image by using 3 by 3 rectangular structuring element.  GMat cv::gapi::filter2D (const GMat &src, int ddepth, const Mat &kernel, const Point &anchor=Point(-1,-1), const Scalar &delta=Scalar(0), int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Convolves an image with the kernel.  GMat cv::gapi::gaussianBlur (const GMat &src, const Size &ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Blurs an image using a Gaussian filter.  GMat cv::gapi::Laplacian (const GMat &src, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)  Calculates the Laplacian of an image.  GMat cv::gapi::medianBlur (const GMat &src, int ksize)  Blurs an image using the median filter.  GMat cv::gapi::morphologyEx (const GMat &src, const MorphTypes op, const Mat &kernel, const Point &anchor=Point(-1,-1), const int iterations=1, const BorderTypes borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Performs advanced morphological transformations.  GMat cv::gapi::sepFilter (const GMat &src, int ddepth, const Mat &kernelX, const Mat &kernelY, const Point &anchor, const Scalar &delta, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Applies a separable linear filter to a matrix(image).  GMat cv::gapi::Sobel (const GMat &src, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.  std::tuple< GMat, GMat > cv::gapi::SobelXY (const GMat &src, int ddepth, int order, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT, const Scalar &borderValue=Scalar(0))  Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator. "
gapi,"Functions GMat cv::gapi::BayerGR2RGB (const GMat &src_gr)  Converts an image from BayerGR color space to RGB. The function converts an input image from BayerGR color space to RGB. The conventional ranges for G, R, and B channel values are 0 to 255.  GMat cv::gapi::BGR2Gray (const GMat &src)  Converts an image from BGR color space to gray-scaled.  GMat cv::gapi::BGR2I420 (const GMat &src)  Converts an image from BGR color space to I420 color space.  GMat cv::gapi::BGR2LUV (const GMat &src)  Converts an image from BGR color space to LUV color space.  GMat cv::gapi::BGR2RGB (const GMat &src)  Converts an image from BGR color space to RGB color space.  GMat cv::gapi::BGR2YUV (const GMat &src)  Converts an image from BGR color space to YUV color space.  GMat cv::gapi::I4202BGR (const GMat &src)  Converts an image from I420 color space to BGR color space.  GMat cv::gapi::I4202RGB (const GMat &src)  Converts an image from I420 color space to BGR color space.  GMat cv::gapi::LUV2BGR (const GMat &src)  Converts an image from LUV color space to BGR color space.  GMat cv::gapi::NV12toBGR (const GMat &src_y, const GMat &src_uv)  Converts an image from NV12 (YUV420p) color space to BGR. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.  GMatP cv::gapi::NV12toBGRp (const GMat &src_y, const GMat &src_uv)  Converts an image from NV12 (YUV420p) color space to BGR. The function converts an input image from NV12 color space to BGR. The conventional ranges for Y, U, and V channel values are 0 to 255.  GMat cv::gapi::NV12toGray (const GMat &src_y, const GMat &src_uv)  Converts an image from NV12 (YUV420p) color space to gray-scaled. The function converts an input image from NV12 color space to gray-scaled. The conventional ranges for Y, U, and V channel values are 0 to 255.  GMat cv::gapi::NV12toRGB (const GMat &src_y, const GMat &src_uv)  Converts an image from NV12 (YUV420p) color space to RGB. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.  GMatP cv::gapi::NV12toRGBp (const GMat &src_y, const GMat &src_uv)  Converts an image from NV12 (YUV420p) color space to RGB. The function converts an input image from NV12 color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255.  GMat cv::gapi::RGB2Gray (const GMat &src)  Converts an image from RGB color space to gray-scaled.  GMat cv::gapi::RGB2Gray (const GMat &src, float rY, float gY, float bY)  GMat cv::gapi::RGB2HSV (const GMat &src)  Converts an image from RGB color space to HSV. The function converts an input image from RGB color space to HSV. The conventional ranges for R, G, and B channel values are 0 to 255.  GMat cv::gapi::RGB2I420 (const GMat &src)  Converts an image from RGB color space to I420 color space.  GMat cv::gapi::RGB2Lab (const GMat &src)  Converts an image from RGB color space to Lab color space.  GMat cv::gapi::RGB2YUV (const GMat &src)  Converts an image from RGB color space to YUV color space.  GMat cv::gapi::RGB2YUV422 (const GMat &src)  Converts an image from RGB color space to YUV422. The function converts an input image from RGB color space to YUV422. The conventional ranges for R, G, and B channel values are 0 to 255.  GMat cv::gapi::YUV2BGR (const GMat &src)  Converts an image from YUV color space to BGR color space.  GMat cv::gapi::YUV2RGB (const GMat &src)  Converts an image from YUV color space to RGB. The function converts an input image from YUV color space to RGB. The conventional ranges for Y, U, and V channel values are 0 to 255. "
gapi,Functions for in-graph drawing.
gapi,"G-API can do some in-graph drawing with a generic operations and a set of rendering primitives. In contrast with traditional OpenCV, in G-API user need to form a rendering list of primitives to draw. This list can be built manually or generated within a graph. This list is passed to special operations or functions where all primitives are interpreted and applied to the image."
gapi,"For example, in a complex pipeline a list of detected objects can be translated in-graph to a list of cv::gapi::wip::draw::Rect primitives to highlight those with bounding boxes, or a list of detected faces can be translated in-graph to a list of cv::gapi::wip::draw::Mosaic primitives to hide sensitive content or protect privacy."
gapi,"Like any other operations, rendering in G-API can be reimplemented by different backends. Currently only an OpenCV-based backend is available."
gapi,"In addition to the graph-level operations, there are also regular (immediate) OpenCV-like functions are available see cv::gapi::wip::draw::render(). These functions are just wrappers over regular G-API and build the rendering graphs on the fly, so take compilation arguments as parameters."
gapi,"Currently this API is more machine-oriented than human-oriented. The main purpose is to translate a set of domain-specific objects to a list of primitives to draw. For example, in order to generate a picture like this:"
gapi,Rendering list needs to be generated as follows:
highgui,"Enumerations enum cv::MouseEventFlags { cv::EVENT_FLAG_LBUTTON = 1 , cv::EVENT_FLAG_RBUTTON = 2 , cv::EVENT_FLAG_MBUTTON = 4 , cv::EVENT_FLAG_CTRLKEY = 8 , cv::EVENT_FLAG_SHIFTKEY = 16 , cv::EVENT_FLAG_ALTKEY = 32 }  Mouse Event Flags see cv::MouseCallback. More...  enum cv::MouseEventTypes { cv::EVENT_MOUSEMOVE = 0 , cv::EVENT_LBUTTONDOWN = 1 , cv::EVENT_RBUTTONDOWN = 2 , cv::EVENT_MBUTTONDOWN = 3 , cv::EVENT_LBUTTONUP = 4 , cv::EVENT_RBUTTONUP = 5 , cv::EVENT_MBUTTONUP = 6 , cv::EVENT_LBUTTONDBLCLK = 7 , cv::EVENT_RBUTTONDBLCLK = 8 , cv::EVENT_MBUTTONDBLCLK = 9 , cv::EVENT_MOUSEWHEEL = 10 , cv::EVENT_MOUSEHWHEEL = 11 }  Mouse Events see cv::MouseCallback. More...  enum cv::WindowFlags { cv::WINDOW_NORMAL = 0x00000000 , cv::WINDOW_AUTOSIZE = 0x00000001 , cv::WINDOW_OPENGL = 0x00001000 , cv::WINDOW_FULLSCREEN = 1 , cv::WINDOW_FREERATIO = 0x00000100 , cv::WINDOW_KEEPRATIO = 0x00000000 , cv::WINDOW_GUI_EXPANDED =0x00000000 , cv::WINDOW_GUI_NORMAL = 0x00000010 }  Flags for cv::namedWindow. More...  enum cv::WindowPropertyFlags { cv::WND_PROP_FULLSCREEN = 0 , cv::WND_PROP_AUTOSIZE = 1 , cv::WND_PROP_ASPECT_RATIO = 2 , cv::WND_PROP_OPENGL = 3 , cv::WND_PROP_VISIBLE = 4 , cv::WND_PROP_TOPMOST = 5 , cv::WND_PROP_VSYNC = 6 }  Flags for cv::setWindowProperty / cv::getWindowProperty. More... "
highgui,"Functions void cv::addText (const Mat &img, const String &text, Point org, const QtFont &font)  Draws a text on the image.  void cv::addText (const Mat &img, const String &text, Point org, const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)  Draws a text on the image.  int cv::createButton (const String &bar_name, ButtonCallback on_change, void *userdata=0, int type=QT_PUSH_BUTTON, bool initial_button_state=false)  Attaches a button to the control panel.  int cv::createTrackbar (const String &trackbarname, const String &winname, int *value, int count, TrackbarCallback onChange=0, void *userdata=0)  Creates a trackbar and attaches it to the specified window.  const std::string cv::currentUIFramework ()  HighGUI backend used.  void cv::destroyAllWindows ()  Destroys all of the HighGUI windows.  void cv::destroyWindow (const String &winname)  Destroys the specified window.  void cv::displayOverlay (const String &winname, const String &text, int delayms=0)  Displays a text on a window image as an overlay for a specified duration.  void cv::displayStatusBar (const String &winname, const String &text, int delayms=0)  Displays a text on the window statusbar during the specified period of time.  QtFont cv::fontQt (const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)  Creates the font to draw a text on an image.  int cv::getMouseWheelDelta (int flags)  Gets the mouse-wheel motion delta, when handling mouse-wheel events cv::EVENT_MOUSEWHEEL and cv::EVENT_MOUSEHWHEEL.  int cv::getTrackbarPos (const String &trackbarname, const String &winname)  Returns the trackbar position.  Rect cv::getWindowImageRect (const String &winname)  Provides rectangle of image in the window.  double cv::getWindowProperty (const String &winname, int prop_id)  Provides parameters of a window.  void cv::imshow (const String &winname, const ogl::Texture2D &tex)  Displays OpenGL 2D texture in the specified window.  void cv::imshow (const String &winname, InputArray mat)  Displays an image in the specified window.  void cv::loadWindowParameters (const String &windowName)  Loads parameters of the specified window.  void cv::moveWindow (const String &winname, int x, int y)  Moves the window to the specified position.  void cv::namedWindow (const String &winname, int flags=WINDOW_AUTOSIZE)  Creates a window.  int cv::pollKey ()  Polls for a pressed key.  void cv::resizeWindow (const String &winname, const cv::Size &size)  void cv::resizeWindow (const String &winname, int width, int height)  Resizes the window to the specified size.  void cv::saveWindowParameters (const String &windowName)  Saves parameters of the specified window.  Rect cv::selectROI (const String &windowName, InputArray img, bool showCrosshair=true, bool fromCenter=false, bool printNotice=true)  Allows users to select a ROI on the given image.  Rect cv::selectROI (InputArray img, bool showCrosshair=true, bool fromCenter=false, bool printNotice=true)  void cv::selectROIs (const String &windowName, InputArray img, std::vector< Rect > &boundingBoxes, bool showCrosshair=true, bool fromCenter=false, bool printNotice=true)  Allows users to select multiple ROIs on the given image.  void cv::setMouseCallback (const String &winname, MouseCallback onMouse, void *userdata=0)  Sets mouse handler for the specified window.  void cv::setOpenGlContext (const String &winname)  Sets the specified window as current OpenGL context.  void cv::setOpenGlDrawCallback (const String &winname, OpenGlDrawCallback onOpenGlDraw, void *userdata=0)  Sets a callback function to be called to draw on top of displayed image.  void cv::setTrackbarMax (const String &trackbarname, const String &winname, int maxval)  Sets the trackbar maximum position.  void cv::setTrackbarMin (const String &trackbarname, const String &winname, int minval)  Sets the trackbar minimum position.  void cv::setTrackbarPos (const String &trackbarname, const String &winname, int pos)  Sets the trackbar position.  void cv::setWindowProperty (const String &winname, int prop_id, double prop_value)  Changes parameters of a window dynamically.  void cv::setWindowTitle (const String &winname, const String &title)  Updates window title.  int cv::startLoop (int(*pt2Func)(int argc, char *argv[]), int argc, char *argv[])  int cv::startWindowThread ()  void cv::stopLoop ()  void cv::updateWindow (const String &winname)  Force window to redraw its context and call draw callback ( See cv::setOpenGlDrawCallback ).  int cv::waitKey (int delay=0)  Waits for a pressed key.  int cv::waitKeyEx (int delay=0)  Similar to waitKey, but returns full key code. "
highgui,"This figure explains new functionality implemented with WinRT GUI. The new GUI provides an Image control, and a slider panel. Slider panel holds trackbars attached to it."
highgui,Sliders are attached below the image control. Every new slider is added below the previous one.
highgui,See below the example used to generate the figure:
highgui,Functions void cv::winrt_initContainer (::Windows::UI::Xaml::Controls::Panel^ container)  Initializes container component that will be used to hold generated window content. 
highgui,"While OpenCV was designed for use in full-scale applications and can be used within functionally rich UI frameworks (such as Qt*, WinForms*, or Cocoa*) or without any UI at all, sometimes there it is required to try functionality quickly and visualize the results. This is what the HighGUI module has been designed for."
highgui,It provides easy interface to:
highgui,"Create and manipulate windows that can display images and ""remember"" their content (no need to handle repaint events from OS). Add trackbars to the windows, handle simple mouse events as well as keyboard commands."
highgui,"Typedefs typedef void(* cv::ButtonCallback) (int state, void *userdata)  Callback function for a button created by cv::createButton.  typedef void(* cv::MouseCallback) (int event, int x, int y, int flags, void *userdata)  Callback function for mouse events. see cv::setMouseCallback.  typedef void(* cv::OpenGlDrawCallback) (void *userdata)  Callback function defined to be called every frame. See cv::setOpenGlDrawCallback.  typedef void(* cv::TrackbarCallback) (int pos, void *userdata)  Callback function for Trackbar see cv::createTrackbar. "
highgui,"This figure explains new functionality implemented with Qt* GUI. The new GUI provides a statusbar, a toolbar, and a control panel. The control panel can have trackbars and buttonbars attached to it. If you cannot see the control panel, press Ctrl+P or right-click any Qt window and select Display properties window."
highgui,"To attach a trackbar, the window name parameter must be NULL. To attach a buttonbar, a button must be created. If the last bar attached to the control panel is a buttonbar, the new button is added to the right of the last button. If the last bar attached to the control panel is a trackbar, or the control panel is empty, a new buttonbar is created. Then, a new button is attached to it."
highgui,See below the example used to generate the figure:
highgui,Classes struct cv::QtFont  QtFont available only for Qt. See cv::fontQt. More... 
highgui,"Functions void cv::addText (const Mat &img, const String &text, Point org, const QtFont &font)  Draws a text on the image.  void cv::addText (const Mat &img, const String &text, Point org, const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)  Draws a text on the image.  int cv::createButton (const String &bar_name, ButtonCallback on_change, void *userdata=0, int type=QT_PUSH_BUTTON, bool initial_button_state=false)  Attaches a button to the control panel.  void cv::displayOverlay (const String &winname, const String &text, int delayms=0)  Displays a text on a window image as an overlay for a specified duration.  void cv::displayStatusBar (const String &winname, const String &text, int delayms=0)  Displays a text on the window statusbar during the specified period of time.  QtFont cv::fontQt (const String &nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0)  Creates the font to draw a text on an image.  void cv::loadWindowParameters (const String &windowName)  Loads parameters of the specified window.  void cv::saveWindowParameters (const String &windowName)  Saves parameters of the specified window.  int cv::startLoop (int(*pt2Func)(int argc, char *argv[]), int argc, char *argv[])  void cv::stopLoop () "
highgui,"Functions void cv::imshow (const String &winname, const ogl::Texture2D &tex)  Displays OpenGL 2D texture in the specified window.  void cv::setOpenGlContext (const String &winname)  Sets the specified window as current OpenGL context.  void cv::setOpenGlDrawCallback (const String &winname, OpenGlDrawCallback onOpenGlDraw, void *userdata=0)  Sets a callback function to be called to draw on top of displayed image.  void cv::updateWindow (const String &winname)  Force window to redraw its context and call draw callback ( See cv::setOpenGlDrawCallback ). "
imgcodecs,"Functions void CGImageToMat (const CGImageRef image, cv::Mat &m, bool alphaExist=false)  CGImageRef MatToCGImage (const cv::Mat &image) CF_RETURNS_RETAINED  UIImage * MatToUIImage (const cv::Mat &image)  void UIImageToMat (const UIImage *image, cv::Mat &m, bool alphaExist=false) "
imgcodecs,Classes class cv::ImageCollection  To read multi-page images on demand. More... 
imgcodecs,"Functions CV_EXPORTS_W bool cv::haveImageReader (const String &filename)  Checks if the specified image file can be decoded by OpenCV.  CV_EXPORTS_W bool cv::haveImageWriter (const String &filename)  Checks if the specified image file or specified file extension can be encoded by OpenCV.  CV_EXPORTS_W size_t cv::imcount (const String &filename, int flags=IMREAD_ANYCOLOR)  Returns the number of images inside the given file.  CV_EXPORTS_W Mat cv::imdecode (InputArray buf, int flags)  Reads an image from a buffer in memory.  CV_EXPORTS Mat cv::imdecode (InputArray buf, int flags, Mat *dst)  CV_EXPORTS_W bool cv::imdecodemulti (InputArray buf, int flags, CV_OUT std::vector< Mat > &mats, const cv::Range &range=Range::all())  Reads a multi-page image from a buffer in memory.  CV_EXPORTS_W bool cv::imencode (const String &ext, InputArray img, CV_OUT std::vector< uchar > &buf, const std::vector< int > &params=std::vector< int >())  Encodes an image into a memory buffer.  CV_EXPORTS_W Mat cv::imread (const String &filename, int flags=IMREAD_COLOR_BGR)  Loads an image from a file.  CV_EXPORTS_W void cv::imread (const String &filename, OutputArray dst, int flags=IMREAD_COLOR_BGR)  Loads an image from a file.  CV_EXPORTS_W bool cv::imreadmulti (const String &filename, CV_OUT std::vector< Mat > &mats, int flags=IMREAD_ANYCOLOR)  Loads a multi-page image from a file.  CV_EXPORTS_W bool cv::imreadmulti (const String &filename, CV_OUT std::vector< Mat > &mats, int start, int count, int flags=IMREAD_ANYCOLOR)  Loads images of a multi-page image from a file.  CV_EXPORTS_W bool cv::imwrite (const String &filename, InputArray img, const std::vector< int > &params=std::vector< int >())  Saves an image to a specified file.  static CV_WRAP bool cv::imwritemulti (const String &filename, InputArrayOfArrays img, const std::vector< int > &params=std::vector< int >())  multi-image overload for bindings "
imgcodecs,"Enumerations enum cv::ImreadModes { cv::IMREAD_UNCHANGED = -1 , cv::IMREAD_GRAYSCALE = 0 , cv::IMREAD_COLOR_BGR = 1 , cv::IMREAD_COLOR = 1 , cv::IMREAD_ANYDEPTH = 2 , cv::IMREAD_ANYCOLOR = 4 , cv::IMREAD_LOAD_GDAL = 8 , cv::IMREAD_REDUCED_GRAYSCALE_2 = 16 , cv::IMREAD_REDUCED_COLOR_2 = 17 , cv::IMREAD_REDUCED_GRAYSCALE_4 = 32 , cv::IMREAD_REDUCED_COLOR_4 = 33 , cv::IMREAD_REDUCED_GRAYSCALE_8 = 64 , cv::IMREAD_REDUCED_COLOR_8 = 65 , cv::IMREAD_IGNORE_ORIENTATION = 128 , cv::IMREAD_COLOR_RGB = 256 }  Imread flags. More...  enum cv::ImwriteEXRCompressionFlags { cv::IMWRITE_EXR_COMPRESSION_NO = 0 , cv::IMWRITE_EXR_COMPRESSION_RLE = 1 , cv::IMWRITE_EXR_COMPRESSION_ZIPS = 2 , cv::IMWRITE_EXR_COMPRESSION_ZIP = 3 , cv::IMWRITE_EXR_COMPRESSION_PIZ = 4 , cv::IMWRITE_EXR_COMPRESSION_PXR24 = 5 , cv::IMWRITE_EXR_COMPRESSION_B44 = 6 , cv::IMWRITE_EXR_COMPRESSION_B44A = 7 , cv::IMWRITE_EXR_COMPRESSION_DWAA = 8 , cv::IMWRITE_EXR_COMPRESSION_DWAB = 9 }  enum cv::ImwriteEXRTypeFlags { cv::IMWRITE_EXR_TYPE_HALF = 1 , cv::IMWRITE_EXR_TYPE_FLOAT = 2 }  enum cv::ImwriteFlags { cv::IMWRITE_JPEG_QUALITY = 1 , cv::IMWRITE_JPEG_PROGRESSIVE = 2 , cv::IMWRITE_JPEG_OPTIMIZE = 3 , cv::IMWRITE_JPEG_RST_INTERVAL = 4 , cv::IMWRITE_JPEG_LUMA_QUALITY = 5 , cv::IMWRITE_JPEG_CHROMA_QUALITY = 6 , cv::IMWRITE_JPEG_SAMPLING_FACTOR = 7 , cv::IMWRITE_PNG_COMPRESSION = 16 , cv::IMWRITE_PNG_STRATEGY = 17 , cv::IMWRITE_PNG_BILEVEL = 18 , cv::IMWRITE_PXM_BINARY = 32 , cv::IMWRITE_EXR_TYPE = (3 << 4) + 0 , cv::IMWRITE_EXR_COMPRESSION = (3 << 4) + 1 , cv::IMWRITE_EXR_DWA_COMPRESSION_LEVEL = (3 << 4) + 2 , cv::IMWRITE_WEBP_QUALITY = 64 , cv::IMWRITE_HDR_COMPRESSION = (5 << 4) + 0 , cv::IMWRITE_PAM_TUPLETYPE = 128 , cv::IMWRITE_TIFF_RESUNIT = 256 , cv::IMWRITE_TIFF_XDPI = 257 , cv::IMWRITE_TIFF_YDPI = 258 , cv::IMWRITE_TIFF_COMPRESSION = 259 , cv::IMWRITE_TIFF_ROWSPERSTRIP = 278 , cv::IMWRITE_TIFF_PREDICTOR = 317 , cv::IMWRITE_JPEG2000_COMPRESSION_X1000 = 272 , cv::IMWRITE_AVIF_QUALITY = 512 , cv::IMWRITE_AVIF_DEPTH = 513 , cv::IMWRITE_AVIF_SPEED = 514 }  Imwrite flags. More...  enum cv::ImwriteHDRCompressionFlags { cv::IMWRITE_HDR_COMPRESSION_NONE = 0 , cv::IMWRITE_HDR_COMPRESSION_RLE = 1 }  Imwrite HDR specific values for IMWRITE_HDR_COMPRESSION parameter key. More...  enum cv::ImwriteJPEGSamplingFactorParams { cv::IMWRITE_JPEG_SAMPLING_FACTOR_411 = 0x411111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_420 = 0x221111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_422 = 0x211111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_440 = 0x121111 , cv::IMWRITE_JPEG_SAMPLING_FACTOR_444 = 0x111111 }  enum cv::ImwritePAMFlags { cv::IMWRITE_PAM_FORMAT_NULL = 0 , cv::IMWRITE_PAM_FORMAT_BLACKANDWHITE = 1 , cv::IMWRITE_PAM_FORMAT_GRAYSCALE = 2 , cv::IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = 3 , cv::IMWRITE_PAM_FORMAT_RGB = 4 , cv::IMWRITE_PAM_FORMAT_RGB_ALPHA = 5 }  Imwrite PAM specific tupletype flags used to define the 'TUPLETYPE' field of a PAM file. More...  enum cv::ImwritePNGFlags { cv::IMWRITE_PNG_STRATEGY_DEFAULT = 0 , cv::IMWRITE_PNG_STRATEGY_FILTERED = 1 , cv::IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = 2 , cv::IMWRITE_PNG_STRATEGY_RLE = 3 , cv::IMWRITE_PNG_STRATEGY_FIXED = 4 }  Imwrite PNG specific flags used to tune the compression algorithm. More...  enum cv::ImwriteTiffCompressionFlags { cv::IMWRITE_TIFF_COMPRESSION_NONE = 1 , cv::IMWRITE_TIFF_COMPRESSION_CCITTRLE = 2 , cv::IMWRITE_TIFF_COMPRESSION_CCITTFAX3 = 3 , cv::IMWRITE_TIFF_COMPRESSION_CCITT_T4 = 3 , cv::IMWRITE_TIFF_COMPRESSION_CCITTFAX4 = 4 , cv::IMWRITE_TIFF_COMPRESSION_CCITT_T6 = 4 , cv::IMWRITE_TIFF_COMPRESSION_LZW = 5 , cv::IMWRITE_TIFF_COMPRESSION_OJPEG = 6 , cv::IMWRITE_TIFF_COMPRESSION_JPEG = 7 , cv::IMWRITE_TIFF_COMPRESSION_T85 = 9 , cv::IMWRITE_TIFF_COMPRESSION_T43 = 10 , cv::IMWRITE_TIFF_COMPRESSION_NEXT = 32766 , cv::IMWRITE_TIFF_COMPRESSION_CCITTRLEW = 32771 , cv::IMWRITE_TIFF_COMPRESSION_PACKBITS = 32773 , cv::IMWRITE_TIFF_COMPRESSION_THUNDERSCAN = 32809 , cv::IMWRITE_TIFF_COMPRESSION_IT8CTPAD = 32895 , cv::IMWRITE_TIFF_COMPRESSION_IT8LW = 32896 , cv::IMWRITE_TIFF_COMPRESSION_IT8MP = 32897 , cv::IMWRITE_TIFF_COMPRESSION_IT8BL = 32898 , cv::IMWRITE_TIFF_COMPRESSION_PIXARFILM = 32908 , cv::IMWRITE_TIFF_COMPRESSION_PIXARLOG = 32909 , cv::IMWRITE_TIFF_COMPRESSION_DEFLATE = 32946 , cv::IMWRITE_TIFF_COMPRESSION_ADOBE_DEFLATE = 8 , cv::IMWRITE_TIFF_COMPRESSION_DCS = 32947 , cv::IMWRITE_TIFF_COMPRESSION_JBIG = 34661 , cv::IMWRITE_TIFF_COMPRESSION_SGILOG = 34676 , cv::IMWRITE_TIFF_COMPRESSION_SGILOG24 = 34677 , cv::IMWRITE_TIFF_COMPRESSION_JP2000 = 34712 , cv::IMWRITE_TIFF_COMPRESSION_LERC = 34887 , cv::IMWRITE_TIFF_COMPRESSION_LZMA = 34925 , cv::IMWRITE_TIFF_COMPRESSION_ZSTD = 50000 , cv::IMWRITE_TIFF_COMPRESSION_WEBP = 50001 , cv::IMWRITE_TIFF_COMPRESSION_JXL = 50002 }  enum cv::ImwriteTiffPredictorFlags { cv::IMWRITE_TIFF_PREDICTOR_NONE = 1 , cv::IMWRITE_TIFF_PREDICTOR_HORIZONTAL = 2 , cv::IMWRITE_TIFF_PREDICTOR_FLOATINGPOINT = 3 } "
imgcodecs,"Functions void CGImageToMat (const CGImageRef image, cv::Mat &m, bool alphaExist=false)  CGImageRef MatToCGImage (const cv::Mat &image) CF_RETURNS_RETAINED  NSImage * MatToNSImage (const cv::Mat &image)  void NSImageToMat (const NSImage *image, cv::Mat &m, bool alphaExist=false) "
imgproc,Classes class cv::segmentation::IntelligentScissorsMB  Intelligent Scissors image segmentation. More... 
imgproc,"The human perception isn't built for observing fine changes in grayscale images. Human eyes are more sensitive to observing changes between colors, so you often need to recolor your grayscale images to get a clue about them. OpenCV now comes with various colormaps to enhance the visualization in your computer vision application."
imgproc,"In OpenCV you only need applyColorMap to apply a colormap on a given image. The following sample code reads the path to an image from command line, applies a Jet colormap on it and shows the result:"
imgproc,"Enumerations enum cv::ColormapTypes { cv::COLORMAP_AUTUMN = 0 , cv::COLORMAP_BONE = 1 , cv::COLORMAP_JET = 2 , cv::COLORMAP_WINTER = 3 , cv::COLORMAP_RAINBOW = 4 , cv::COLORMAP_OCEAN = 5 , cv::COLORMAP_SUMMER = 6 , cv::COLORMAP_SPRING = 7 , cv::COLORMAP_COOL = 8 , cv::COLORMAP_HSV = 9 , cv::COLORMAP_PINK = 10 , cv::COLORMAP_HOT = 11 , cv::COLORMAP_PARULA = 12 , cv::COLORMAP_MAGMA = 13 , cv::COLORMAP_INFERNO = 14 , cv::COLORMAP_PLASMA = 15 , cv::COLORMAP_VIRIDIS = 16 , cv::COLORMAP_CIVIDIS = 17 , cv::COLORMAP_TWILIGHT = 18 , cv::COLORMAP_TWILIGHT_SHIFTED = 19 , cv::COLORMAP_TURBO = 20 , cv::COLORMAP_DEEPGREEN = 21 }  GNU Octave/MATLAB equivalent colormaps. More... "
imgproc,"Functions void cv::applyColorMap (InputArray src, OutputArray dst, InputArray userColor)  Applies a user colormap on a given image.  void cv::applyColorMap (InputArray src, OutputArray dst, int colormap)  Applies a GNU Octave/MATLAB equivalent colormap on a given image. "
imgproc,Namespaces namespace cv::traits 
imgproc,"Functions void cv::approxPolyDP (InputArray curve, OutputArray approxCurve, double epsilon, bool closed)  Approximates a polygonal curve(s) with the specified precision.  void cv::approxPolyN (InputArray curve, OutputArray approxCurve, int nsides, float epsilon_percentage=-1.0, bool ensure_convex=true)  Approximates a polygon with a convex hull with a specified accuracy and number of sides.  double cv::arcLength (InputArray curve, bool closed)  Calculates a contour perimeter or a curve length.  Rect cv::boundingRect (InputArray array)  Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.  void cv::boxPoints (RotatedRect box, OutputArray points)  Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.  int cv::connectedComponents (InputArray image, OutputArray labels, int connectivity, int ltype, int ccltype)  computes the connected components labeled image of boolean image  int cv::connectedComponents (InputArray image, OutputArray labels, int connectivity=8, int ltype=CV_32S)  int cv::connectedComponentsWithStats (InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, int connectivity, int ltype, int ccltype)  computes the connected components labeled image of boolean image and also produces a statistics output for each label  int cv::connectedComponentsWithStats (InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, int connectivity=8, int ltype=CV_32S)  double cv::contourArea (InputArray contour, bool oriented=false)  Calculates a contour area.  void cv::convexHull (InputArray points, OutputArray hull, bool clockwise=false, bool returnPoints=true)  Finds the convex hull of a point set.  void cv::convexityDefects (InputArray contour, InputArray convexhull, OutputArray convexityDefects)  Finds the convexity defects of a contour.  Ptr< GeneralizedHoughBallard > cv::createGeneralizedHoughBallard ()  Creates a smart pointer to a cv::GeneralizedHoughBallard class and initializes it.  Ptr< GeneralizedHoughGuil > cv::createGeneralizedHoughGuil ()  Creates a smart pointer to a cv::GeneralizedHoughGuil class and initializes it.  void cv::findContours (InputArray image, OutputArrayOfArrays contours, int mode, int method, Point offset=Point())  void cv::findContours (InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset=Point())  Finds contours in a binary image.  void cv::findContoursLinkRuns (InputArray image, OutputArrayOfArrays contours)  This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.  void cv::findContoursLinkRuns (InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy)  Find contours using link runs algorithm.  RotatedRect cv::fitEllipse (InputArray points)  Fits an ellipse around a set of 2D points.  RotatedRect cv::fitEllipseAMS (InputArray points)  Fits an ellipse around a set of 2D points.  RotatedRect cv::fitEllipseDirect (InputArray points)  Fits an ellipse around a set of 2D points.  void cv::fitLine (InputArray points, OutputArray line, int distType, double param, double reps, double aeps)  Fits a line to a 2D or 3D point set.  void cv::HuMoments (const Moments &m, OutputArray hu)  void cv::HuMoments (const Moments &moments, double hu[7])  Calculates seven Hu invariants.  float cv::intersectConvexConvex (InputArray p1, InputArray p2, OutputArray p12, bool handleNested=true)  Finds intersection of two convex polygons.  bool cv::isContourConvex (InputArray contour)  Tests a contour convexity.  double cv::matchShapes (InputArray contour1, InputArray contour2, int method, double parameter)  Compares two shapes.  RotatedRect cv::minAreaRect (InputArray points)  Finds a rotated rectangle of the minimum area enclosing the input 2D point set.  void cv::minEnclosingCircle (InputArray points, Point2f &center, float &radius)  Finds a circle of the minimum area enclosing a 2D point set.  double cv::minEnclosingTriangle (InputArray points, OutputArray triangle)  Finds a triangle of minimum area enclosing a 2D point set and returns its area.  Moments cv::moments (InputArray array, bool binaryImage=false)  Calculates all of the moments up to the third order of a polygon or rasterized shape.  double cv::pointPolygonTest (InputArray contour, Point2f pt, bool measureDist)  Performs a point-in-contour test.  int cv::rotatedRectangleIntersection (const RotatedRect &rect1, const RotatedRect &rect2, OutputArray intersectingRegion)  Finds out if there is any intersection between two rotated rectangles. "
imgproc,"Functions and classes described in this section are used to perform various linear or non-linear filtering operations on 2D images (represented as Mat's). It means that for each pixel location \((x,y)\) in the source image (normally, rectangular), its neighborhood is considered and used to compute the response. In case of a linear filter, it is a weighted sum of pixel values. In case of morphological operations, it is the minimum or maximum values, and so on. The computed response is stored in the destination image at the same location \((x,y)\). It means that the output image will be of the same size as the input image. Normally, the functions support multi-channel arrays, in which case every channel is processed independently. Therefore, the output image will also have the same number of channels as the input one."
imgproc,"Another common feature of the functions and classes described in this section is that, unlike simple arithmetic functions, they need to extrapolate values of some non-existing pixels. For example, if you want to smooth an image using a Gaussian \(3 \times 3\) filter, then, when processing the left-most pixels in each row, you need pixels to the left of them, that is, outside of the image. You can let these pixels be the same as the left-most image pixels (""replicated border"" extrapolation method), or assume that all the non-existing pixels are zeros (""constant border"" extrapolation method), and so on. OpenCV enables you to specify the extrapolation method. For details, see BorderTypes"
imgproc,"Functions void cv::bilateralFilter (InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)  Applies the bilateral filter to an image.  void cv::blur (InputArray src, OutputArray dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT)  Blurs an image using the normalized box filter.  void cv::boxFilter (InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT)  Blurs an image using the box filter.  void cv::buildPyramid (InputArray src, OutputArrayOfArrays dst, int maxlevel, int borderType=BORDER_DEFAULT)  Constructs the Gaussian pyramid for an image.  void cv::dilate (InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Dilates an image by using a specific structuring element.  void cv::erode (InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Erodes an image by using a specific structuring element.  void cv::filter2D (InputArray src, OutputArray dst, int ddepth, InputArray kernel, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)  Convolves an image with the kernel.  void cv::GaussianBlur (InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT, AlgorithmHint hint=cv::ALGO_HINT_DEFAULT)  Blurs an image using a Gaussian filter.  void cv::getDerivKernels (OutputArray kx, OutputArray ky, int dx, int dy, int ksize, bool normalize=false, int ktype=CV_32F)  Returns filter coefficients for computing spatial image derivatives.  Mat cv::getGaborKernel (Size ksize, double sigma, double theta, double lambd, double gamma, double psi=CV_PI *0.5, int ktype=CV_64F)  Returns Gabor filter coefficients.  Mat cv::getGaussianKernel (int ksize, double sigma, int ktype=CV_64F)  Returns Gaussian filter coefficients.  Mat cv::getStructuringElement (int shape, Size ksize, Point anchor=Point(-1,-1))  Returns a structuring element of the specified size and shape for morphological operations.  void cv::Laplacian (InputArray src, OutputArray dst, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)  Calculates the Laplacian of an image.  void cv::medianBlur (InputArray src, OutputArray dst, int ksize)  Blurs an image using the median filter.  static Scalar cv::morphologyDefaultBorderValue ()  returns ""magic"" border value for erosion and dilation. It is automatically transformed to Scalar::all(-DBL_MAX) for dilation.  void cv::morphologyEx (InputArray src, OutputArray dst, int op, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())  Performs advanced morphological transformations.  void cv::pyrDown (InputArray src, OutputArray dst, const Size &dstsize=Size(), int borderType=BORDER_DEFAULT)  Blurs an image and downsamples it.  void cv::pyrMeanShiftFiltering (InputArray src, OutputArray dst, double sp, double sr, int maxLevel=1, TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS, 5, 1))  Performs initial step of meanshift segmentation of an image.  void cv::pyrUp (InputArray src, OutputArray dst, const Size &dstsize=Size(), int borderType=BORDER_DEFAULT)  Upsamples an image and then blurs it.  void cv::Scharr (InputArray src, OutputArray dst, int ddepth, int dx, int dy, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)  Calculates the first x- or y- image derivative using Scharr operator.  void cv::sepFilter2D (InputArray src, OutputArray dst, int ddepth, InputArray kernelX, InputArray kernelY, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)  Applies a separable linear filter to an image.  void cv::Sobel (InputArray src, OutputArray dst, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)  Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.  void cv::spatialGradient (InputArray src, OutputArray dx, OutputArray dy, int ksize=3, int borderType=BORDER_DEFAULT)  Calculates the first order image derivative in both x and y using a Sobel operator.  void cv::sqrBoxFilter (InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1, -1), bool normalize=true, int borderType=BORDER_DEFAULT)  Calculates the normalized sum of squares of the pixel values overlapping the filter.  void cv::stackBlur (InputArray src, OutputArray dst, Size ksize)  Blurs an image using the stackBlur. "
imgproc,"Drawing functions work with matrices/images of arbitrary depth. The boundaries of the shapes can be rendered with antialiasing (implemented only for 8-bit images for now). All the functions include the parameter color that uses an RGB value (that may be constructed with the Scalar constructor ) for color images and brightness for grayscale images. For color images, the channel ordering is normally Blue, Green, Red. This is what imshow, imread, and imwrite expect. So, if you form a color using the Scalar constructor, it should look like:"
imgproc,"\[\texttt{Scalar} (blue \_ component, green \_ component, red \_ component[, alpha \_ component])\]"
imgproc,"If you are using your own image rendering and I/O functions, you can use any channel ordering. The drawing functions process each channel independently and do not depend on the channel order or even on the used color space. The whole image can be converted from BGR to RGB or to a different color space using cvtColor ."
imgproc,"If a drawn figure is partially or completely outside the image, the drawing functions clip it. Also, many drawing functions can handle pixel coordinates specified with sub-pixel accuracy. This means that the coordinates can be passed as fixed-point numbers encoded as integers. The number of fractional bits is specified by the shift parameter and the real point coordinates are calculated as \(\texttt{Point}(x,y)\rightarrow\texttt{Point2f}(x*2^{-shift},y*2^{-shift})\) . This feature is especially effective when rendering antialiased shapes."
imgproc,Classes class cv::LineIterator  Class for iterating over all pixels on a raster line segment. More... 
imgproc,"Functions void cv::arrowedLine (InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int line_type=8, int shift=0, double tipLength=0.1)  Draws an arrow segment pointing from the first point to the second one.  void cv::circle (InputOutputArray img, Point center, int radius, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)  Draws a circle.  bool cv::clipLine (Rect imgRect, Point &pt1, Point &pt2)  bool cv::clipLine (Size imgSize, Point &pt1, Point &pt2)  Clips the line against the image rectangle.  bool cv::clipLine (Size2l imgSize, Point2l &pt1, Point2l &pt2)  void cv::drawContours (InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar &color, int thickness=1, int lineType=LINE_8, InputArray hierarchy=noArray(), int maxLevel=INT_MAX, Point offset=Point())  Draws contours outlines or filled contours.  void cv::drawMarker (InputOutputArray img, Point position, const Scalar &color, int markerType=MARKER_CROSS, int markerSize=20, int thickness=1, int line_type=8)  Draws a marker on a predefined position in an image.  void cv::ellipse (InputOutputArray img, const RotatedRect &box, const Scalar &color, int thickness=1, int lineType=LINE_8)  void cv::ellipse (InputOutputArray img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)  Draws a simple or thick elliptic arc or fills an ellipse sector.  void cv::ellipse2Poly (Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, std::vector< Point > &pts)  Approximates an elliptic arc with a polyline.  void cv::ellipse2Poly (Point2d center, Size2d axes, int angle, int arcStart, int arcEnd, int delta, std::vector< Point2d > &pts)  void cv::fillConvexPoly (InputOutputArray img, const Point *pts, int npts, const Scalar &color, int lineType=LINE_8, int shift=0)  void cv::fillConvexPoly (InputOutputArray img, InputArray points, const Scalar &color, int lineType=LINE_8, int shift=0)  Fills a convex polygon.  void cv::fillPoly (InputOutputArray img, const Point **pts, const int *npts, int ncontours, const Scalar &color, int lineType=LINE_8, int shift=0, Point offset=Point())  void cv::fillPoly (InputOutputArray img, InputArrayOfArrays pts, const Scalar &color, int lineType=LINE_8, int shift=0, Point offset=Point())  Fills the area bounded by one or more polygons.  double cv::getFontScaleFromHeight (const int fontFace, const int pixelHeight, const int thickness=1)  Calculates the font-specific size to use to achieve a given height in pixels.  Size cv::getTextSize (const String &text, int fontFace, double fontScale, int thickness, int *baseLine)  Calculates the width and height of a text string.  void cv::line (InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)  Draws a line segment connecting two points.  void cv::polylines (InputOutputArray img, const Point *const *pts, const int *npts, int ncontours, bool isClosed, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)  void cv::polylines (InputOutputArray img, InputArrayOfArrays pts, bool isClosed, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)  Draws several polygonal curves.  void cv::putText (InputOutputArray img, const String &text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=LINE_8, bool bottomLeftOrigin=false)  Draws a text string.  void cv::rectangle (InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)  Draws a simple, thick, or filled up-right rectangle.  void cv::rectangle (InputOutputArray img, Rect rec, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0) "
imgproc,Classes class cv::CLAHE  Base class for Contrast Limited Adaptive Histogram Equalization. More... 
imgproc,"Functions void cv::calcBackProject (const Mat *images, int nimages, const int *channels, const SparseMat &hist, OutputArray backProject, const float **ranges, double scale=1, bool uniform=true)  void cv::calcBackProject (const Mat *images, int nimages, const int *channels, InputArray hist, OutputArray backProject, const float **ranges, double scale=1, bool uniform=true)  Calculates the back projection of a histogram.  void cv::calcBackProject (InputArrayOfArrays images, const std::vector< int > &channels, InputArray hist, OutputArray dst, const std::vector< float > &ranges, double scale)  void cv::calcHist (const Mat *images, int nimages, const int *channels, InputArray mask, OutputArray hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)  Calculates a histogram of a set of arrays.  void cv::calcHist (const Mat *images, int nimages, const int *channels, InputArray mask, SparseMat &hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)  void cv::calcHist (InputArrayOfArrays images, const std::vector< int > &channels, InputArray mask, OutputArray hist, const std::vector< int > &histSize, const std::vector< float > &ranges, bool accumulate=false)  double cv::compareHist (const SparseMat &H1, const SparseMat &H2, int method)  double cv::compareHist (InputArray H1, InputArray H2, int method)  Compares two histograms.  Ptr< CLAHE > cv::createCLAHE (double clipLimit=40.0, Size tileGridSize=Size(8, 8))  Creates a smart pointer to a cv::CLAHE class and initializes it.  float cv::EMD (InputArray signature1, InputArray signature2, int distType, InputArray cost=noArray(), float *lowerBound=0, OutputArray flow=noArray())  Computes the ""minimal work"" distance between two weighted point configurations.  void cv::equalizeHist (InputArray src, OutputArray dst)  Equalizes the histogram of a grayscale image.  float cv::wrapperEMD (InputArray signature1, InputArray signature2, int distType, InputArray cost=noArray(), Ptr< float > lowerBound=Ptr< float >(), OutputArray flow=noArray()) "
imgproc,"Enumerations enum cv::AdaptiveThresholdTypes { cv::ADAPTIVE_THRESH_MEAN_C = 0 , cv::ADAPTIVE_THRESH_GAUSSIAN_C = 1 }  enum cv::DistanceTransformLabelTypes { cv::DIST_LABEL_CCOMP = 0 , cv::DIST_LABEL_PIXEL = 1 }  distanceTransform algorithm flags More...  enum cv::DistanceTransformMasks { cv::DIST_MASK_3 = 3 , cv::DIST_MASK_5 = 5 , cv::DIST_MASK_PRECISE = 0 }  Mask size for distance transform. More...  enum cv::DistanceTypes { cv::DIST_USER = -1 , cv::DIST_L1 = 1 , cv::DIST_L2 = 2 , cv::DIST_C = 3 , cv::DIST_L12 = 4 , cv::DIST_FAIR = 5 , cv::DIST_WELSCH = 6 , cv::DIST_HUBER = 7 }  enum cv::FloodFillFlags { cv::FLOODFILL_FIXED_RANGE = 1 << 16 , cv::FLOODFILL_MASK_ONLY = 1 << 17 }  floodfill algorithm flags More...  enum cv::GrabCutClasses { cv::GC_BGD = 0 , cv::GC_FGD = 1 , cv::GC_PR_BGD = 2 , cv::GC_PR_FGD = 3 }  class of the pixel in GrabCut algorithm More...  enum cv::GrabCutModes { cv::GC_INIT_WITH_RECT = 0 , cv::GC_INIT_WITH_MASK = 1 , cv::GC_EVAL = 2 , cv::GC_EVAL_FREEZE_MODEL = 3 }  GrabCut algorithm flags. More...  enum cv::ThresholdTypes { cv::THRESH_BINARY = 0 , cv::THRESH_BINARY_INV = 1 , cv::THRESH_TRUNC = 2 , cv::THRESH_TOZERO = 3 , cv::THRESH_TOZERO_INV = 4 , cv::THRESH_MASK = 7 , cv::THRESH_OTSU = 8 , cv::THRESH_TRIANGLE = 16 } "
imgproc,"Functions void cv::adaptiveThreshold (InputArray src, OutputArray dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)  Applies an adaptive threshold to an array.  void cv::blendLinear (InputArray src1, InputArray src2, InputArray weights1, InputArray weights2, OutputArray dst)  void cv::distanceTransform (InputArray src, OutputArray dst, int distanceType, int maskSize, int dstType=CV_32F)  void cv::distanceTransform (InputArray src, OutputArray dst, OutputArray labels, int distanceType, int maskSize, int labelType=DIST_LABEL_CCOMP)  Calculates the distance to the closest zero pixel for each pixel of the source image.  int cv::floodFill (InputOutputArray image, InputOutputArray mask, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)  Fills a connected component with the given color.  int cv::floodFill (InputOutputArray image, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)  void cv::integral (InputArray src, OutputArray sum, int sdepth=-1)  void cv::integral (InputArray src, OutputArray sum, OutputArray sqsum, int sdepth=-1, int sqdepth=-1)  void cv::integral (InputArray src, OutputArray sum, OutputArray sqsum, OutputArray tilted, int sdepth=-1, int sqdepth=-1)  Calculates the integral of an image.  double cv::threshold (InputArray src, OutputArray dst, double thresh, double maxval, int type)  Applies a fixed-level threshold to each array element. "
imgproc,This module includes image-processing functions.
imgproc,"Functions void cv::accumulate (InputArray src, InputOutputArray dst, InputArray mask=noArray())  Adds an image to the accumulator image.  void cv::accumulateProduct (InputArray src1, InputArray src2, InputOutputArray dst, InputArray mask=noArray())  Adds the per-element product of two input images to the accumulator image.  void cv::accumulateSquare (InputArray src, InputOutputArray dst, InputArray mask=noArray())  Adds the square of a source image to the accumulator image.  void cv::accumulateWeighted (InputArray src, InputOutputArray dst, double alpha, InputArray mask=noArray())  Updates a running average.  void cv::createHanningWindow (OutputArray dst, Size winSize, int type)  This function computes a Hanning window coefficients in two dimensions.  void cv::divSpectrums (InputArray a, InputArray b, OutputArray c, int flags, bool conjB=false)  Performs the per-element division of the first Fourier spectrum by the second Fourier spectrum.  Point2d cv::phaseCorrelate (InputArray src1, InputArray src2, InputArray window=noArray(), double *response=0)  The function is used to detect translational shifts that occur between two images. "
imgproc,"Enumerations enum cv::ColorConversionCodes { cv::COLOR_BGR2BGRA = 0 , cv::COLOR_RGB2RGBA = COLOR_BGR2BGRA , cv::COLOR_BGRA2BGR = 1 , cv::COLOR_RGBA2RGB = COLOR_BGRA2BGR , cv::COLOR_BGR2RGBA = 2 , cv::COLOR_RGB2BGRA = COLOR_BGR2RGBA , cv::COLOR_RGBA2BGR = 3 , cv::COLOR_BGRA2RGB = COLOR_RGBA2BGR , cv::COLOR_BGR2RGB = 4 , cv::COLOR_RGB2BGR = COLOR_BGR2RGB , cv::COLOR_BGRA2RGBA = 5 , cv::COLOR_RGBA2BGRA = COLOR_BGRA2RGBA , cv::COLOR_BGR2GRAY = 6 , cv::COLOR_RGB2GRAY = 7 , cv::COLOR_GRAY2BGR = 8 , cv::COLOR_GRAY2RGB = COLOR_GRAY2BGR , cv::COLOR_GRAY2BGRA = 9 , cv::COLOR_GRAY2RGBA = COLOR_GRAY2BGRA , cv::COLOR_BGRA2GRAY = 10 , cv::COLOR_RGBA2GRAY = 11 , cv::COLOR_BGR2BGR565 = 12 , cv::COLOR_RGB2BGR565 = 13 , cv::COLOR_BGR5652BGR = 14 , cv::COLOR_BGR5652RGB = 15 , cv::COLOR_BGRA2BGR565 = 16 , cv::COLOR_RGBA2BGR565 = 17 , cv::COLOR_BGR5652BGRA = 18 , cv::COLOR_BGR5652RGBA = 19 , cv::COLOR_GRAY2BGR565 = 20 , cv::COLOR_BGR5652GRAY = 21 , cv::COLOR_BGR2BGR555 = 22 , cv::COLOR_RGB2BGR555 = 23 , cv::COLOR_BGR5552BGR = 24 , cv::COLOR_BGR5552RGB = 25 , cv::COLOR_BGRA2BGR555 = 26 , cv::COLOR_RGBA2BGR555 = 27 , cv::COLOR_BGR5552BGRA = 28 , cv::COLOR_BGR5552RGBA = 29 , cv::COLOR_GRAY2BGR555 = 30 , cv::COLOR_BGR5552GRAY = 31 , cv::COLOR_BGR2XYZ = 32 , cv::COLOR_RGB2XYZ = 33 , cv::COLOR_XYZ2BGR = 34 , cv::COLOR_XYZ2RGB = 35 , cv::COLOR_BGR2YCrCb = 36 , cv::COLOR_RGB2YCrCb = 37 , cv::COLOR_YCrCb2BGR = 38 , cv::COLOR_YCrCb2RGB = 39 , cv::COLOR_BGR2HSV = 40 , cv::COLOR_RGB2HSV = 41 , cv::COLOR_BGR2Lab = 44 , cv::COLOR_RGB2Lab = 45 , cv::COLOR_BGR2Luv = 50 , cv::COLOR_RGB2Luv = 51 , cv::COLOR_BGR2HLS = 52 , cv::COLOR_RGB2HLS = 53 , cv::COLOR_HSV2BGR = 54 , cv::COLOR_HSV2RGB = 55 , cv::COLOR_Lab2BGR = 56 , cv::COLOR_Lab2RGB = 57 , cv::COLOR_Luv2BGR = 58 , cv::COLOR_Luv2RGB = 59 , cv::COLOR_HLS2BGR = 60 , cv::COLOR_HLS2RGB = 61 , cv::COLOR_BGR2HSV_FULL = 66 , cv::COLOR_RGB2HSV_FULL = 67 , cv::COLOR_BGR2HLS_FULL = 68 , cv::COLOR_RGB2HLS_FULL = 69 , cv::COLOR_HSV2BGR_FULL = 70 , cv::COLOR_HSV2RGB_FULL = 71 , cv::COLOR_HLS2BGR_FULL = 72 , cv::COLOR_HLS2RGB_FULL = 73 , cv::COLOR_LBGR2Lab = 74 , cv::COLOR_LRGB2Lab = 75 , cv::COLOR_LBGR2Luv = 76 , cv::COLOR_LRGB2Luv = 77 , cv::COLOR_Lab2LBGR = 78 , cv::COLOR_Lab2LRGB = 79 , cv::COLOR_Luv2LBGR = 80 , cv::COLOR_Luv2LRGB = 81 , cv::COLOR_BGR2YUV = 82 , cv::COLOR_RGB2YUV = 83 , cv::COLOR_YUV2BGR = 84 , cv::COLOR_YUV2RGB = 85 , cv::COLOR_YUV2RGB_NV12 = 90 , cv::COLOR_YUV2BGR_NV12 = 91 , cv::COLOR_YUV2RGB_NV21 = 92 , cv::COLOR_YUV2BGR_NV21 = 93 , cv::COLOR_YUV420sp2RGB = COLOR_YUV2RGB_NV21 , cv::COLOR_YUV420sp2BGR = COLOR_YUV2BGR_NV21 , cv::COLOR_YUV2RGBA_NV12 = 94 , cv::COLOR_YUV2BGRA_NV12 = 95 , cv::COLOR_YUV2RGBA_NV21 = 96 , cv::COLOR_YUV2BGRA_NV21 = 97 , cv::COLOR_YUV420sp2RGBA = COLOR_YUV2RGBA_NV21 , cv::COLOR_YUV420sp2BGRA = COLOR_YUV2BGRA_NV21 , cv::COLOR_YUV2RGB_YV12 = 98 , cv::COLOR_YUV2BGR_YV12 = 99 , cv::COLOR_YUV2RGB_IYUV = 100 , cv::COLOR_YUV2BGR_IYUV = 101 , cv::COLOR_YUV2RGB_I420 = COLOR_YUV2RGB_IYUV , cv::COLOR_YUV2BGR_I420 = COLOR_YUV2BGR_IYUV , cv::COLOR_YUV420p2RGB = COLOR_YUV2RGB_YV12 , cv::COLOR_YUV420p2BGR = COLOR_YUV2BGR_YV12 , cv::COLOR_YUV2RGBA_YV12 = 102 , cv::COLOR_YUV2BGRA_YV12 = 103 , cv::COLOR_YUV2RGBA_IYUV = 104 , cv::COLOR_YUV2BGRA_IYUV = 105 , cv::COLOR_YUV2RGBA_I420 = COLOR_YUV2RGBA_IYUV , cv::COLOR_YUV2BGRA_I420 = COLOR_YUV2BGRA_IYUV , cv::COLOR_YUV420p2RGBA = COLOR_YUV2RGBA_YV12 , cv::COLOR_YUV420p2BGRA = COLOR_YUV2BGRA_YV12 , cv::COLOR_YUV2GRAY_420 = 106 , cv::COLOR_YUV2GRAY_NV21 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_NV12 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_YV12 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_IYUV = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2GRAY_I420 = COLOR_YUV2GRAY_420 , cv::COLOR_YUV420sp2GRAY = COLOR_YUV2GRAY_420 , cv::COLOR_YUV420p2GRAY = COLOR_YUV2GRAY_420 , cv::COLOR_YUV2RGB_UYVY = 107 , cv::COLOR_YUV2BGR_UYVY = 108 , cv::COLOR_YUV2RGB_Y422 = COLOR_YUV2RGB_UYVY , cv::COLOR_YUV2BGR_Y422 = COLOR_YUV2BGR_UYVY , cv::COLOR_YUV2RGB_UYNV = COLOR_YUV2RGB_UYVY , cv::COLOR_YUV2BGR_UYNV = COLOR_YUV2BGR_UYVY , cv::COLOR_YUV2RGBA_UYVY = 111 , cv::COLOR_YUV2BGRA_UYVY = 112 , cv::COLOR_YUV2RGBA_Y422 = COLOR_YUV2RGBA_UYVY , cv::COLOR_YUV2BGRA_Y422 = COLOR_YUV2BGRA_UYVY , cv::COLOR_YUV2RGBA_UYNV = COLOR_YUV2RGBA_UYVY , cv::COLOR_YUV2BGRA_UYNV = COLOR_YUV2BGRA_UYVY , cv::COLOR_YUV2RGB_YUY2 = 115 , cv::COLOR_YUV2BGR_YUY2 = 116 , cv::COLOR_YUV2RGB_YVYU = 117 , cv::COLOR_YUV2BGR_YVYU = 118 , cv::COLOR_YUV2RGB_YUYV = COLOR_YUV2RGB_YUY2 , cv::COLOR_YUV2BGR_YUYV = COLOR_YUV2BGR_YUY2 , cv::COLOR_YUV2RGB_YUNV = COLOR_YUV2RGB_YUY2 , cv::COLOR_YUV2BGR_YUNV = COLOR_YUV2BGR_YUY2 , cv::COLOR_YUV2RGBA_YUY2 = 119 , cv::COLOR_YUV2BGRA_YUY2 = 120 , cv::COLOR_YUV2RGBA_YVYU = 121 , cv::COLOR_YUV2BGRA_YVYU = 122 , cv::COLOR_YUV2RGBA_YUYV = COLOR_YUV2RGBA_YUY2 , cv::COLOR_YUV2BGRA_YUYV = COLOR_YUV2BGRA_YUY2 , cv::COLOR_YUV2RGBA_YUNV = COLOR_YUV2RGBA_YUY2 , cv::COLOR_YUV2BGRA_YUNV = COLOR_YUV2BGRA_YUY2 , cv::COLOR_YUV2GRAY_UYVY = 123 , cv::COLOR_YUV2GRAY_YUY2 = 124 , cv::COLOR_YUV2GRAY_Y422 = COLOR_YUV2GRAY_UYVY , cv::COLOR_YUV2GRAY_UYNV = COLOR_YUV2GRAY_UYVY , cv::COLOR_YUV2GRAY_YVYU = COLOR_YUV2GRAY_YUY2 , cv::COLOR_YUV2GRAY_YUYV = COLOR_YUV2GRAY_YUY2 , cv::COLOR_YUV2GRAY_YUNV = COLOR_YUV2GRAY_YUY2 , cv::COLOR_RGBA2mRGBA = 125 , cv::COLOR_mRGBA2RGBA = 126 , cv::COLOR_RGB2YUV_I420 = 127 , cv::COLOR_BGR2YUV_I420 = 128 , cv::COLOR_RGB2YUV_IYUV = COLOR_RGB2YUV_I420 , cv::COLOR_BGR2YUV_IYUV = COLOR_BGR2YUV_I420 , cv::COLOR_RGBA2YUV_I420 = 129 , cv::COLOR_BGRA2YUV_I420 = 130 , cv::COLOR_RGBA2YUV_IYUV = COLOR_RGBA2YUV_I420 , cv::COLOR_BGRA2YUV_IYUV = COLOR_BGRA2YUV_I420 , cv::COLOR_RGB2YUV_YV12 = 131 , cv::COLOR_BGR2YUV_YV12 = 132 , cv::COLOR_RGBA2YUV_YV12 = 133 , cv::COLOR_BGRA2YUV_YV12 = 134 , cv::COLOR_BayerBG2BGR = 46 , cv::COLOR_BayerGB2BGR = 47 , cv::COLOR_BayerRG2BGR = 48 , cv::COLOR_BayerGR2BGR = 49 , cv::COLOR_BayerRGGB2BGR = COLOR_BayerBG2BGR , cv::COLOR_BayerGRBG2BGR = COLOR_BayerGB2BGR , cv::COLOR_BayerBGGR2BGR = COLOR_BayerRG2BGR , cv::COLOR_BayerGBRG2BGR = COLOR_BayerGR2BGR , cv::COLOR_BayerRGGB2RGB = COLOR_BayerBGGR2BGR , cv::COLOR_BayerGRBG2RGB = COLOR_BayerGBRG2BGR , cv::COLOR_BayerBGGR2RGB = COLOR_BayerRGGB2BGR , cv::COLOR_BayerGBRG2RGB = COLOR_BayerGRBG2BGR , cv::COLOR_BayerBG2RGB = COLOR_BayerRG2BGR , cv::COLOR_BayerGB2RGB = COLOR_BayerGR2BGR , cv::COLOR_BayerRG2RGB = COLOR_BayerBG2BGR , cv::COLOR_BayerGR2RGB = COLOR_BayerGB2BGR , cv::COLOR_BayerBG2GRAY = 86 , cv::COLOR_BayerGB2GRAY = 87 , cv::COLOR_BayerRG2GRAY = 88 , cv::COLOR_BayerGR2GRAY = 89 , cv::COLOR_BayerRGGB2GRAY = COLOR_BayerBG2GRAY , cv::COLOR_BayerGRBG2GRAY = COLOR_BayerGB2GRAY , cv::COLOR_BayerBGGR2GRAY = COLOR_BayerRG2GRAY , cv::COLOR_BayerGBRG2GRAY = COLOR_BayerGR2GRAY , cv::COLOR_BayerBG2BGR_VNG = 62 , cv::COLOR_BayerGB2BGR_VNG = 63 , cv::COLOR_BayerRG2BGR_VNG = 64 , cv::COLOR_BayerGR2BGR_VNG = 65 , cv::COLOR_BayerRGGB2BGR_VNG = COLOR_BayerBG2BGR_VNG , cv::COLOR_BayerGRBG2BGR_VNG = COLOR_BayerGB2BGR_VNG , cv::COLOR_BayerBGGR2BGR_VNG = COLOR_BayerRG2BGR_VNG , cv::COLOR_BayerGBRG2BGR_VNG = COLOR_BayerGR2BGR_VNG , cv::COLOR_BayerRGGB2RGB_VNG = COLOR_BayerBGGR2BGR_VNG , cv::COLOR_BayerGRBG2RGB_VNG = COLOR_BayerGBRG2BGR_VNG , cv::COLOR_BayerBGGR2RGB_VNG = COLOR_BayerRGGB2BGR_VNG , cv::COLOR_BayerGBRG2RGB_VNG = COLOR_BayerGRBG2BGR_VNG , cv::COLOR_BayerBG2RGB_VNG = COLOR_BayerRG2BGR_VNG , cv::COLOR_BayerGB2RGB_VNG = COLOR_BayerGR2BGR_VNG , cv::COLOR_BayerRG2RGB_VNG = COLOR_BayerBG2BGR_VNG , cv::COLOR_BayerGR2RGB_VNG = COLOR_BayerGB2BGR_VNG , cv::COLOR_BayerBG2BGR_EA = 135 , cv::COLOR_BayerGB2BGR_EA = 136 , cv::COLOR_BayerRG2BGR_EA = 137 , cv::COLOR_BayerGR2BGR_EA = 138 , cv::COLOR_BayerRGGB2BGR_EA = COLOR_BayerBG2BGR_EA , cv::COLOR_BayerGRBG2BGR_EA = COLOR_BayerGB2BGR_EA , cv::COLOR_BayerBGGR2BGR_EA = COLOR_BayerRG2BGR_EA , cv::COLOR_BayerGBRG2BGR_EA = COLOR_BayerGR2BGR_EA , cv::COLOR_BayerRGGB2RGB_EA = COLOR_BayerBGGR2BGR_EA , cv::COLOR_BayerGRBG2RGB_EA = COLOR_BayerGBRG2BGR_EA , cv::COLOR_BayerBGGR2RGB_EA = COLOR_BayerRGGB2BGR_EA , cv::COLOR_BayerGBRG2RGB_EA = COLOR_BayerGRBG2BGR_EA , cv::COLOR_BayerBG2RGB_EA = COLOR_BayerRG2BGR_EA , cv::COLOR_BayerGB2RGB_EA = COLOR_BayerGR2BGR_EA , cv::COLOR_BayerRG2RGB_EA = COLOR_BayerBG2BGR_EA , cv::COLOR_BayerGR2RGB_EA = COLOR_BayerGB2BGR_EA , cv::COLOR_BayerBG2BGRA = 139 , cv::COLOR_BayerGB2BGRA = 140 , cv::COLOR_BayerRG2BGRA = 141 , cv::COLOR_BayerGR2BGRA = 142 , cv::COLOR_BayerRGGB2BGRA = COLOR_BayerBG2BGRA , cv::COLOR_BayerGRBG2BGRA = COLOR_BayerGB2BGRA , cv::COLOR_BayerBGGR2BGRA = COLOR_BayerRG2BGRA , cv::COLOR_BayerGBRG2BGRA = COLOR_BayerGR2BGRA , cv::COLOR_BayerRGGB2RGBA = COLOR_BayerBGGR2BGRA , cv::COLOR_BayerGRBG2RGBA = COLOR_BayerGBRG2BGRA , cv::COLOR_BayerBGGR2RGBA = COLOR_BayerRGGB2BGRA , cv::COLOR_BayerGBRG2RGBA = COLOR_BayerGRBG2BGRA , cv::COLOR_BayerBG2RGBA = COLOR_BayerRG2BGRA , cv::COLOR_BayerGB2RGBA = COLOR_BayerGR2BGRA , cv::COLOR_BayerRG2RGBA = COLOR_BayerBG2BGRA , cv::COLOR_BayerGR2RGBA = COLOR_BayerGB2BGRA , cv::COLOR_RGB2YUV_UYVY = 143 , cv::COLOR_BGR2YUV_UYVY = 144 , cv::COLOR_RGB2YUV_Y422 = COLOR_RGB2YUV_UYVY , cv::COLOR_BGR2YUV_Y422 = COLOR_BGR2YUV_UYVY , cv::COLOR_RGB2YUV_UYNV = COLOR_RGB2YUV_UYVY , cv::COLOR_BGR2YUV_UYNV = COLOR_BGR2YUV_UYVY , cv::COLOR_RGBA2YUV_UYVY = 145 , cv::COLOR_BGRA2YUV_UYVY = 146 , cv::COLOR_RGBA2YUV_Y422 = COLOR_RGBA2YUV_UYVY , cv::COLOR_BGRA2YUV_Y422 = COLOR_BGRA2YUV_UYVY , cv::COLOR_RGBA2YUV_UYNV = COLOR_RGBA2YUV_UYVY , cv::COLOR_BGRA2YUV_UYNV = COLOR_BGRA2YUV_UYVY , cv::COLOR_RGB2YUV_YUY2 = 147 , cv::COLOR_BGR2YUV_YUY2 = 148 , cv::COLOR_RGB2YUV_YVYU = 149 , cv::COLOR_BGR2YUV_YVYU = 150 , cv::COLOR_RGB2YUV_YUYV = COLOR_RGB2YUV_YUY2 , cv::COLOR_BGR2YUV_YUYV = COLOR_BGR2YUV_YUY2 , cv::COLOR_RGB2YUV_YUNV = COLOR_RGB2YUV_YUY2 , cv::COLOR_BGR2YUV_YUNV = COLOR_BGR2YUV_YUY2 , cv::COLOR_RGBA2YUV_YUY2 = 151 , cv::COLOR_BGRA2YUV_YUY2 = 152 , cv::COLOR_RGBA2YUV_YVYU = 153 , cv::COLOR_BGRA2YUV_YVYU = 154 , cv::COLOR_RGBA2YUV_YUYV = COLOR_RGBA2YUV_YUY2 , cv::COLOR_BGRA2YUV_YUYV = COLOR_BGRA2YUV_YUY2 , cv::COLOR_RGBA2YUV_YUNV = COLOR_RGBA2YUV_YUY2 , cv::COLOR_BGRA2YUV_YUNV = COLOR_BGRA2YUV_YUY2 , cv::COLOR_COLORCVT_MAX = 155 } "
imgproc,"Functions void cv::cvtColor (InputArray src, OutputArray dst, int code, int dstCn=0, AlgorithmHint hint=cv::ALGO_HINT_DEFAULT)  Converts an image from one color space to another.  void cv::cvtColorTwoPlane (InputArray src1, InputArray src2, OutputArray dst, int code, AlgorithmHint hint=cv::ALGO_HINT_DEFAULT)  Converts an image from one color space to another where the source image is stored in two planes.  void cv::demosaicing (InputArray src, OutputArray dst, int code, int dstCn=0)  main function for all demosaicing processes "
imgproc,"The functions in this section perform various geometrical transformations of 2D images. They do not change the image content but deform the pixel grid and map this deformed grid to the destination image. In fact, to avoid sampling artifacts, the mapping is done in the reverse order, from destination to the source. That is, for each pixel \((x, y)\) of the destination image, the functions compute coordinates of the corresponding ""donor"" pixel in the source image and copy the pixel value:"
imgproc,"\[\texttt{dst} (x,y)= \texttt{src} (f_x(x,y), f_y(x,y))\]"
imgproc,"In case when you specify the forward mapping \(\left<g_x, g_y\right>: \texttt{src} \rightarrow \texttt{dst}\), the OpenCV functions first compute the corresponding inverse mapping \(\left<f_x, f_y\right>: \texttt{dst} \rightarrow \texttt{src}\) and then use the above formula."
imgproc,"The actual implementations of the geometrical transformations, from the most generic remap and to the simplest and the fastest resize, need to solve two main problems with the above formula:"
imgproc,"Extrapolation of non-existing pixels. Similarly to the filtering functions described in the previous section, for some \((x,y)\), either one of \(f_x(x,y)\), or \(f_y(x,y)\), or both of them may fall outside of the image. In this case, an extrapolation method needs to be used. OpenCV provides the same selection of extrapolation methods as in the filtering functions. In addition, it provides the method BORDER_TRANSPARENT. This means that the corresponding pixels in the destination image will not be modified at all. Interpolation of pixel values. Usually \(f_x(x,y)\) and \(f_y(x,y)\) are floating-point numbers. This means that \(\left<f_x, f_y\right>\) can be either an affine or perspective transformation, or radial lens distortion correction, and so on. So, a pixel value at fractional coordinates needs to be retrieved. In the simplest case, the coordinates can be just rounded to the nearest integer coordinates and the corresponding pixel can be used. This is called a nearest-neighbor interpolation. However, a better result can be achieved by using more sophisticated interpolation methods , where a polynomial function is fit into some neighborhood of the computed pixel \((f_x(x,y), f_y(x,y))\), and then the value of the polynomial at \((f_x(x,y), f_y(x,y))\) is taken as the interpolated pixel value. In OpenCV, you can choose between several interpolation methods. See resize for details."
imgproc,"Enumerations enum cv::InterpolationFlags { cv::INTER_NEAREST = 0 , cv::INTER_LINEAR = 1 , cv::INTER_CUBIC = 2 , cv::INTER_AREA = 3 , cv::INTER_LANCZOS4 = 4 , cv::INTER_LINEAR_EXACT = 5 , cv::INTER_NEAREST_EXACT = 6 , cv::INTER_MAX = 7 , cv::WARP_FILL_OUTLIERS = 8 , cv::WARP_INVERSE_MAP = 16 , cv::WARP_RELATIVE_MAP = 32 }  interpolation algorithm More...  enum cv::InterpolationMasks { cv::INTER_BITS = 5 , cv::INTER_BITS2 = INTER_BITS * 2 , cv::INTER_TAB_SIZE = 1 << INTER_BITS , cv::INTER_TAB_SIZE2 = INTER_TAB_SIZE * INTER_TAB_SIZE }  enum cv::WarpPolarMode { cv::WARP_POLAR_LINEAR = 0 , cv::WARP_POLAR_LOG = 256 }  Specify the polar mapping mode. More... "
imgproc,"Functions void cv::convertMaps (InputArray map1, InputArray map2, OutputArray dstmap1, OutputArray dstmap2, int dstmap1type, bool nninterpolation=false)  Converts image transformation maps from one representation to another.  Mat cv::getAffineTransform (const Point2f src[], const Point2f dst[])  Calculates an affine transform from three pairs of the corresponding points.  Mat cv::getAffineTransform (InputArray src, InputArray dst)  Mat cv::getPerspectiveTransform (const Point2f src[], const Point2f dst[], int solveMethod=DECOMP_LU)  Mat cv::getPerspectiveTransform (InputArray src, InputArray dst, int solveMethod=DECOMP_LU)  Calculates a perspective transform from four pairs of the corresponding points.  void cv::getRectSubPix (InputArray image, Size patchSize, Point2f center, OutputArray patch, int patchType=-1)  Retrieves a pixel rectangle from an image with sub-pixel accuracy.  Mat cv::getRotationMatrix2D (Point2f center, double angle, double scale)  Calculates an affine matrix of 2D rotation.  Matx23d cv::getRotationMatrix2D_ (Point2f center, double angle, double scale)  void cv::invertAffineTransform (InputArray M, OutputArray iM)  Inverts an affine transformation.  void cv::linearPolar (InputArray src, OutputArray dst, Point2f center, double maxRadius, int flags)  Remaps an image to polar coordinates space.  void cv::logPolar (InputArray src, OutputArray dst, Point2f center, double M, int flags)  Remaps an image to semilog-polar coordinates space.  void cv::remap (InputArray src, OutputArray dst, InputArray map1, InputArray map2, int interpolation, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())  Applies a generic geometrical transformation to an image.  void cv::resize (InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)  Resizes an image.  void cv::warpAffine (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())  Applies an affine transformation to an image.  void cv::warpPerspective (InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &borderValue=Scalar())  Applies a perspective transformation to an image.  void cv::warpPolar (InputArray src, OutputArray dst, Size dsize, Point2f center, double maxRadius, int flags)  Remaps an image to polar or semilog-polar coordinates space. "
imgproc,Classes class cv::LineSegmentDetector  Line segment detector class. More... 
imgproc,"Functions void cv::Canny (InputArray dx, InputArray dy, OutputArray edges, double threshold1, double threshold2, bool L2gradient=false)  void cv::Canny (InputArray image, OutputArray edges, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)  Finds edges in an image using the Canny algorithm [48] .  void cv::cornerEigenValsAndVecs (InputArray src, OutputArray dst, int blockSize, int ksize, int borderType=BORDER_DEFAULT)  Calculates eigenvalues and eigenvectors of image blocks for corner detection.  void cv::cornerHarris (InputArray src, OutputArray dst, int blockSize, int ksize, double k, int borderType=BORDER_DEFAULT)  Harris corner detector.  void cv::cornerMinEigenVal (InputArray src, OutputArray dst, int blockSize, int ksize=3, int borderType=BORDER_DEFAULT)  Calculates the minimal eigenvalue of gradient matrices for corner detection.  void cv::cornerSubPix (InputArray image, InputOutputArray corners, Size winSize, Size zeroZone, TermCriteria criteria)  Refines the corner locations.  Ptr< LineSegmentDetector > cv::createLineSegmentDetector (int refine=LSD_REFINE_STD, double scale=0.8, double sigma_scale=0.6, double quant=2.0, double ang_th=22.5, double log_eps=0, double density_th=0.7, int n_bins=1024)  Creates a smart pointer to a LineSegmentDetector object and initializes it.  void cv::goodFeaturesToTrack (InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, int blockSize, int gradientSize, bool useHarrisDetector=false, double k=0.04)  void cv::goodFeaturesToTrack (InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, OutputArray cornersQuality, int blockSize=3, int gradientSize=3, bool useHarrisDetector=false, double k=0.04)  Same as above, but returns also quality measure of the detected corners.  void cv::goodFeaturesToTrack (InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask=noArray(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)  Determines strong corners on an image.  void cv::HoughCircles (InputArray image, OutputArray circles, int method, double dp, double minDist, double param1=100, double param2=100, int minRadius=0, int maxRadius=0)  Finds circles in a grayscale image using the Hough transform.  void cv::HoughLines (InputArray image, OutputArray lines, double rho, double theta, int threshold, double srn=0, double stn=0, double min_theta=0, double max_theta=CV_PI)  Finds lines in a binary image using the standard Hough transform.  void cv::HoughLinesP (InputArray image, OutputArray lines, double rho, double theta, int threshold, double minLineLength=0, double maxLineGap=0)  Finds line segments in a binary image using the probabilistic Hough transform.  void cv::HoughLinesPointSet (InputArray point, OutputArray lines, int lines_max, int threshold, double min_rho, double max_rho, double rho_step, double min_theta, double max_theta, double theta_step)  Finds lines in a set of points using the standard Hough transform.  void cv::preCornerDetect (InputArray src, OutputArray dst, int ksize, int borderType=BORDER_DEFAULT)  Calculates a feature map for corner detection. "
imgproc,"The Subdiv2D class described in this section is used to perform various planar subdivision on a set of 2D points (represented as vector of Point2f). OpenCV subdivides a plane into triangles using the Delaunay's algorithm, which corresponds to the dual graph of the Voronoi diagram. In the figure below, the Delaunay's triangulation is marked with black lines and the Voronoi diagram with red lines."
imgproc,"The subdivisions can be used for the 3D piece-wise transformation of a plane, morphing, fast location of points on the plane, building special graphs (such as NNG,RNG), and so forth."
imgproc,Classes class cv::Subdiv2D 
imgproc,"Enumerations enum cv::TemplateMatchModes { cv::TM_SQDIFF = 0 , cv::TM_SQDIFF_NORMED = 1 , cv::TM_CCORR = 2 , cv::TM_CCORR_NORMED = 3 , cv::TM_CCOEFF = 4 , cv::TM_CCOEFF_NORMED = 5 }  type of the template matching operation More... "
imgproc,"Functions void cv::matchTemplate (InputArray image, InputArray templ, OutputArray result, int method, InputArray mask=noArray())  Compares a template against overlapped image regions. "
ml,The class implements the random forest predictor.
ml,Artificial Neural Networks - Multi-Layer Perceptrons.
ml,"Unlike many other models in ML that are constructed and trained at once, in the MLP model these steps are separated. First, a network with the specified topology is created using the non-default constructor or the method ANN_MLP::create. All the weights are set to zeros. Then, the network is trained using a set of input and output vectors. The training procedure can be repeated more than once, that is, the weights can be adjusted based on the new training data."
ml,Additional flags for StatModel::train are available: ANN_MLP::TrainFlags.
ml,Support Vector Machines.
ml,Random Number Generator.
ml,"Random number generator. It encapsulates the state (currently, a 64-bit integer) and has methods to return scalar random values and to fill arrays with random values. Currently it supports uniform and Gaussian (normal) distributions. The generator uses Multiply-With-Carry algorithm, introduced by G. Marsaglia ( http://en.wikipedia.org/wiki/Multiply-with-carry ). Gaussian-distribution random numbers are generated using the Ziggurat algorithm ( http://en.wikipedia.org/wiki/Ziggurat_algorithm ), introduced by G. Marsaglia and W. W. Tsang."
ml,The class implements the Expectation Maximization algorithm.
ml,Classes class cv::LDA  Linear Discriminant Analysis. More...  class cv::PCA  Principal Component Analysis. More...  class cv::RNG  Random Number Generator. More...  class cv::RNG_MT19937  Mersenne Twister random number generator. More...  class cv::SVD  Singular Value Decomposition. More... 
ml,"Functions void cv::absdiff (InputArray src1, InputArray src2, OutputArray dst)  Calculates the per-element absolute difference between two arrays or between an array and a scalar.  void cv::add (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray(), int dtype=-1)  Calculates the per-element sum of two arrays or an array and a scalar.  void cv::addWeighted (InputArray src1, double alpha, InputArray src2, double beta, double gamma, OutputArray dst, int dtype=-1)  Calculates the weighted sum of two arrays.  void cv::batchDistance (InputArray src1, InputArray src2, OutputArray dist, int dtype, OutputArray nidx, int normType=NORM_L2, int K=0, InputArray mask=noArray(), int update=0, bool crosscheck=false)  naive nearest neighbor finder  void cv::bitwise_and (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())  computes bitwise conjunction of the two arrays (dst = src1 & src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.  void cv::bitwise_not (InputArray src, OutputArray dst, InputArray mask=noArray())  Inverts every bit of an array.  void cv::bitwise_or (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())  Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar.  void cv::bitwise_xor (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray())  Calculates the per-element bit-wise ""exclusive or"" operation on two arrays or an array and a scalar.  int cv::borderInterpolate (int p, int len, int borderType)  Computes the source location of an extrapolated pixel.  void cv::broadcast (InputArray src, InputArray shape, OutputArray dst)  Broadcast the given Mat to the given shape.  void cv::calcCovarMatrix (const Mat *samples, int nsamples, Mat &covar, Mat &mean, int flags, int ctype=CV_64F)  Calculates the covariance matrix of a set of vectors.  void cv::calcCovarMatrix (InputArray samples, OutputArray covar, InputOutputArray mean, int flags, int ctype=CV_64F)  void cv::cartToPolar (InputArray x, InputArray y, OutputArray magnitude, OutputArray angle, bool angleInDegrees=false)  Calculates the magnitude and angle of 2D vectors.  bool cv::checkRange (InputArray a, bool quiet=true, Point *pos=0, double minVal=-DBL_MAX, double maxVal=DBL_MAX)  Checks every element of an input array for invalid values.  void cv::compare (InputArray src1, InputArray src2, OutputArray dst, int cmpop)  Performs the per-element comparison of two arrays or an array and scalar value.  void cv::completeSymm (InputOutputArray m, bool lowerToUpper=false)  Copies the lower or the upper half of a square matrix to its another half.  void cv::convertFp16 (InputArray src, OutputArray dst)  Converts an array to half precision floating number.  void cv::convertScaleAbs (InputArray src, OutputArray dst, double alpha=1, double beta=0)  Scales, calculates absolute values, and converts the result to 8-bit.  void cv::copyMakeBorder (InputArray src, OutputArray dst, int top, int bottom, int left, int right, int borderType, const Scalar &value=Scalar())  Forms a border around an image.  void cv::copyTo (InputArray src, OutputArray dst, InputArray mask)  This is an overloaded member function, provided for convenience (python) Copies the matrix to another one. When the operation mask is specified, if the Mat::create call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.  int cv::countNonZero (InputArray src)  Counts non-zero array elements.  void cv::dct (InputArray src, OutputArray dst, int flags=0)  Performs a forward or inverse discrete Cosine transform of 1D or 2D array.  double cv::determinant (InputArray mtx)  Returns the determinant of a square floating-point matrix.  void cv::dft (InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)  Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.  void cv::divide (double scale, InputArray src2, OutputArray dst, int dtype=-1)  void cv::divide (InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1)  Performs per-element division of two arrays or a scalar by an array.  bool cv::eigen (InputArray src, OutputArray eigenvalues, OutputArray eigenvectors=noArray())  Calculates eigenvalues and eigenvectors of a symmetric matrix.  void cv::eigenNonSymmetric (InputArray src, OutputArray eigenvalues, OutputArray eigenvectors)  Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).  void cv::exp (InputArray src, OutputArray dst)  Calculates the exponent of every array element.  void cv::extractChannel (InputArray src, OutputArray dst, int coi)  Extracts a single channel from src (coi is 0-based index)  void cv::findNonZero (InputArray src, OutputArray idx)  Returns the list of locations of non-zero pixels.  void cv::flip (InputArray src, OutputArray dst, int flipCode)  Flips a 2D array around vertical, horizontal, or both axes.  void cv::flipND (InputArray src, OutputArray dst, int axis)  Flips a n-dimensional at given axis.  void cv::gemm (InputArray src1, InputArray src2, double alpha, InputArray src3, double beta, OutputArray dst, int flags=0)  Performs generalized matrix multiplication.  int cv::getOptimalDFTSize (int vecsize)  Returns the optimal DFT size for a given vector size.  bool cv::hasNonZero (InputArray src)  Checks for the presence of at least one non-zero array element.  void cv::hconcat (const Mat *src, size_t nsrc, OutputArray dst)  Applies horizontal concatenation to given matrices.  void cv::hconcat (InputArray src1, InputArray src2, OutputArray dst)  void cv::hconcat (InputArrayOfArrays src, OutputArray dst)  void cv::idct (InputArray src, OutputArray dst, int flags=0)  Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.  void cv::idft (InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)  Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.  void cv::inRange (InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)  Checks if array elements lie between the elements of two other arrays.  void cv::insertChannel (InputArray src, InputOutputArray dst, int coi)  Inserts a single channel to dst (coi is 0-based index)  double cv::invert (InputArray src, OutputArray dst, int flags=DECOMP_LU)  Finds the inverse or pseudo-inverse of a matrix.  void cv::log (InputArray src, OutputArray dst)  Calculates the natural logarithm of every array element.  void cv::LUT (InputArray src, InputArray lut, OutputArray dst)  Performs a look-up table transform of an array.  void cv::magnitude (InputArray x, InputArray y, OutputArray magnitude)  Calculates the magnitude of 2D vectors.  double cv::Mahalanobis (InputArray v1, InputArray v2, InputArray icovar)  Calculates the Mahalanobis distance between two vectors.  void cv::max (const Mat &src1, const Mat &src2, Mat &dst)  void cv::max (const UMat &src1, const UMat &src2, UMat &dst)  void cv::max (InputArray src1, InputArray src2, OutputArray dst)  Calculates per-element maximum of two arrays or an array and a scalar.  Scalar cv::mean (InputArray src, InputArray mask=noArray())  Calculates an average (mean) of array elements.  void cv::meanStdDev (InputArray src, OutputArray mean, OutputArray stddev, InputArray mask=noArray())  void cv::merge (const Mat *mv, size_t count, OutputArray dst)  Creates one multi-channel array out of several single-channel ones.  void cv::merge (InputArrayOfArrays mv, OutputArray dst)  void cv::min (const Mat &src1, const Mat &src2, Mat &dst)  void cv::min (const UMat &src1, const UMat &src2, UMat &dst)  void cv::min (InputArray src1, InputArray src2, OutputArray dst)  Calculates per-element minimum of two arrays or an array and a scalar.  void cv::minMaxIdx (InputArray src, double *minVal, double *maxVal=0, int *minIdx=0, int *maxIdx=0, InputArray mask=noArray())  Finds the global minimum and maximum in an array.  void cv::minMaxLoc (const SparseMat &a, double *minVal, double *maxVal, int *minIdx=0, int *maxIdx=0)  void cv::minMaxLoc (InputArray src, double *minVal, double *maxVal=0, Point *minLoc=0, Point *maxLoc=0, InputArray mask=noArray())  Finds the global minimum and maximum in an array.  void cv::mixChannels (const Mat *src, size_t nsrcs, Mat *dst, size_t ndsts, const int *fromTo, size_t npairs)  Copies specified channels from input arrays to the specified channels of output arrays.  void cv::mixChannels (InputArrayOfArrays src, InputOutputArrayOfArrays dst, const int *fromTo, size_t npairs)  void cv::mixChannels (InputArrayOfArrays src, InputOutputArrayOfArrays dst, const std::vector< int > &fromTo)  void cv::mulSpectrums (InputArray a, InputArray b, OutputArray c, int flags, bool conjB=false)  Performs the per-element multiplication of two Fourier spectrums.  void cv::multiply (InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1)  Calculates the per-element scaled product of two arrays.  void cv::mulTransposed (InputArray src, OutputArray dst, bool aTa, InputArray delta=noArray(), double scale=1, int dtype=-1)  Calculates the product of a matrix and its transposition.  double cv::norm (const SparseMat &src, int normType)  double cv::norm (InputArray src1, InputArray src2, int normType=NORM_L2, InputArray mask=noArray())  Calculates an absolute difference norm or a relative difference norm.  double cv::norm (InputArray src1, int normType=NORM_L2, InputArray mask=noArray())  Calculates the absolute norm of an array.  void cv::normalize (const SparseMat &src, SparseMat &dst, double alpha, int normType)  void cv::normalize (InputArray src, InputOutputArray dst, double alpha=1, double beta=0, int norm_type=NORM_L2, int dtype=-1, InputArray mask=noArray())  Normalizes the norm or value range of an array.  void cv::patchNaNs (InputOutputArray a, double val=0)  Replaces NaNs by given number.  void cv::PCABackProject (InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)  void cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, double retainedVariance)  void cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, int maxComponents=0)  void cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, OutputArray eigenvalues, double retainedVariance)  void cv::PCACompute (InputArray data, InputOutputArray mean, OutputArray eigenvectors, OutputArray eigenvalues, int maxComponents=0)  void cv::PCAProject (InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)  void cv::perspectiveTransform (InputArray src, OutputArray dst, InputArray m)  Performs the perspective matrix transformation of vectors.  void cv::phase (InputArray x, InputArray y, OutputArray angle, bool angleInDegrees=false)  Calculates the rotation angle of 2D vectors.  void cv::polarToCart (InputArray magnitude, InputArray angle, OutputArray x, OutputArray y, bool angleInDegrees=false)  Calculates x and y coordinates of 2D vectors from their magnitude and angle.  void cv::pow (InputArray src, double power, OutputArray dst)  Raises every array element to a power.  double cv::PSNR (InputArray src1, InputArray src2, double R=255.)  Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.  void cv::randn (InputOutputArray dst, InputArray mean, InputArray stddev)  Fills the array with normally distributed random numbers.  void cv::randShuffle (InputOutputArray dst, double iterFactor=1., RNG *rng=0)  Shuffles the array elements randomly.  void cv::randu (InputOutputArray dst, InputArray low, InputArray high)  Generates a single uniformly-distributed random number or an array of random numbers.  void cv::reduce (InputArray src, OutputArray dst, int dim, int rtype, int dtype=-1)  Reduces a matrix to a vector.  void cv::reduceArgMax (InputArray src, OutputArray dst, int axis, bool lastIndex=false)  Finds indices of max elements along provided axis.  void cv::reduceArgMin (InputArray src, OutputArray dst, int axis, bool lastIndex=false)  Finds indices of min elements along provided axis.  Mat cv::repeat (const Mat &src, int ny, int nx)  void cv::repeat (InputArray src, int ny, int nx, OutputArray dst)  Fills the output array with repeated copies of the input array.  void cv::rotate (InputArray src, OutputArray dst, int rotateCode)  Rotates a 2D array in multiples of 90 degrees. The function cv::rotate rotates the array in one of three different ways: Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE). Rotate by 180 degrees clockwise (rotateCode = ROTATE_180). Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).  void cv::scaleAdd (InputArray src1, double alpha, InputArray src2, OutputArray dst)  Calculates the sum of a scaled array and another array.  void cv::setIdentity (InputOutputArray mtx, const Scalar &s=Scalar(1))  Initializes a scaled identity matrix.  void cv::setRNGSeed (int seed)  Sets state of default random number generator.  bool cv::solve (InputArray src1, InputArray src2, OutputArray dst, int flags=DECOMP_LU)  Solves one or more linear systems or least-squares problems.  int cv::solveCubic (InputArray coeffs, OutputArray roots)  Finds the real roots of a cubic equation.  double cv::solvePoly (InputArray coeffs, OutputArray roots, int maxIters=300)  Finds the real or complex roots of a polynomial equation.  void cv::sort (InputArray src, OutputArray dst, int flags)  Sorts each row or each column of a matrix.  void cv::sortIdx (InputArray src, OutputArray dst, int flags)  Sorts each row or each column of a matrix.  void cv::split (const Mat &src, Mat *mvbegin)  Divides a multi-channel array into several single-channel arrays.  void cv::split (InputArray m, OutputArrayOfArrays mv)  void cv::sqrt (InputArray src, OutputArray dst)  Calculates a square root of array elements.  void cv::subtract (InputArray src1, InputArray src2, OutputArray dst, InputArray mask=noArray(), int dtype=-1)  Calculates the per-element difference between two arrays or array and a scalar.  Scalar cv::sum (InputArray src)  Calculates the sum of array elements.  void cv::SVBackSubst (InputArray w, InputArray u, InputArray vt, InputArray rhs, OutputArray dst)  void cv::SVDecomp (InputArray src, OutputArray w, OutputArray u, OutputArray vt, int flags=0)  RNG & cv::theRNG ()  Returns the default random number generator.  Scalar cv::trace (InputArray mtx)  Returns the trace of a matrix.  void cv::transform (InputArray src, OutputArray dst, InputArray m)  Performs the matrix transformation of every array element.  void cv::transpose (InputArray src, OutputArray dst)  Transposes a matrix.  void cv::transposeND (InputArray src, const std::vector< int > &order, OutputArray dst)  Transpose for n-dimensional matrices.  void cv::vconcat (const Mat *src, size_t nsrc, OutputArray dst)  Applies vertical concatenation to given matrices.  void cv::vconcat (InputArray src1, InputArray src2, OutputArray dst)  void cv::vconcat (InputArrayOfArrays src, OutputArray dst) "
ml,"Functions void cv::ml::createConcentricSpheresTestSet (int nsamples, int nfeatures, int nclasses, OutputArray samples, OutputArray responses)  Creates test set.  void cv::ml::randMVNormal (InputArray mean, InputArray cov, int nsamples, OutputArray samples)  Generates sample from multivariate normal distribution.  template<class SimulatedAnnealingSolverSystem > int cv::ml::simulatedAnnealingSolver (SimulatedAnnealingSolverSystem &solverSystem, double initialTemperature, double finalTemperature, double coolingRatio, size_t iterationsPerStep, double *lastTemperature=NULL, cv::RNG &rngEnergy=cv::theRNG())  The class implements simulated annealing for optimization. "
ml,Bayes classifier for normally distributed data.
ml,Boosted tree classifier derived from DTrees.
ml,The structure represents the logarithmic grid range of statmodel parameters.
ml,"It is used for optimizing statmodel accuracy by varying model parameters, the accuracy estimate being computed by cross-validation."
ml,Implements Logistic Regression classifier.
ml,The class represents a single decision tree or a collection of decision trees.
ml,"The current public interface of the class allows user to train only a single decision tree, however the class is capable of storing multiple decision trees and using them for prediction (by summing responses or using a voting schemes), and the derived from DTrees classes (such as RTrees and Boost) use this capability to implement decision tree ensembles."
ml,Base class for statistical models in OpenCV ML.
ml,Class encapsulating training data.
ml,"Please note that the class only specifies the interface of training data, but not implementation. All the statistical model classes in ml module accepts Ptr<TrainData> as parameter. In other words, you can create your own class derived from TrainData and pass smart pointer to the instance of this class into StatModel::train."
ml,Namespaces namespace cv::traits 
ml,"Functions template<typename _Tp , int m> static double cv::determinant (const Matx< _Tp, m, m > &a)  template<typename _Tp , typename ... A1> static Ptr< _Tp > cv::makePtr (const A1 &... a1)  InputOutputArray cv::noArray ()  template<typename _Tp , int m, int n> static double cv::norm (const Matx< _Tp, m, n > &M)  template<typename _Tp , int m, int n> static double cv::norm (const Matx< _Tp, m, n > &M, int normType)  template<typename _Tp , int cn> Vec< _Tp, cn > cv::normalize (const Vec< _Tp, cn > &v)  template<typename _Tp , int m, int n> static bool cv::operator!= (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)  template<typename _Tp , int m, int n, int l> static Matx< _Tp, m, n > cv::operator* (const Matx< _Tp, m, l > &a, const Matx< _Tp, l, n > &b)  template<typename _Tp , int m, int n> static Vec< _Tp, m > cv::operator* (const Matx< _Tp, m, n > &a, const Vec< _Tp, n > &b)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator* (const Matx< _Tp, m, n > &a, double alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator* (const Matx< _Tp, m, n > &a, float alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator* (const Matx< _Tp, m, n > &a, int alpha)  template<typename _Tp > Vec< _Tp, 4 > cv::operator* (const Vec< _Tp, 4 > &v1, const Vec< _Tp, 4 > &v2)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator* (const Vec< _Tp, cn > &a, double alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator* (const Vec< _Tp, cn > &a, float alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator* (const Vec< _Tp, cn > &a, int alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator* (double alpha, const Matx< _Tp, m, n > &a)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator* (double alpha, const Vec< _Tp, cn > &a)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator* (float alpha, const Matx< _Tp, m, n > &a)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator* (float alpha, const Vec< _Tp, cn > &a)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator* (int alpha, const Matx< _Tp, m, n > &a)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator* (int alpha, const Vec< _Tp, cn > &a)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > & cv::operator*= (Matx< _Tp, m, n > &a, double alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > & cv::operator*= (Matx< _Tp, m, n > &a, float alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > & cv::operator*= (Matx< _Tp, m, n > &a, int alpha)  template<typename _Tp > Vec< _Tp, 4 > & cv::operator*= (Vec< _Tp, 4 > &v1, const Vec< _Tp, 4 > &v2)  template<typename _Tp , int cn> static Vec< _Tp, cn > & cv::operator*= (Vec< _Tp, cn > &a, double alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > & cv::operator*= (Vec< _Tp, cn > &a, float alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > & cv::operator*= (Vec< _Tp, cn > &a, int alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator+ (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator+ (const Vec< _Tp, cn > &a, const Vec< _Tp, cn > &b)  template<typename _Tp1 , typename _Tp2 , int m, int n> static Matx< _Tp1, m, n > & cv::operator+= (Matx< _Tp1, m, n > &a, const Matx< _Tp2, m, n > &b)  template<typename _Tp1 , typename _Tp2 , int cn> static Vec< _Tp1, cn > & cv::operator+= (Vec< _Tp1, cn > &a, const Vec< _Tp2, cn > &b)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator- (const Matx< _Tp, m, n > &a)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator- (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator- (const Vec< _Tp, cn > &a)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator- (const Vec< _Tp, cn > &a, const Vec< _Tp, cn > &b)  template<typename _Tp1 , typename _Tp2 , int m, int n> static Matx< _Tp1, m, n > & cv::operator-= (Matx< _Tp1, m, n > &a, const Matx< _Tp2, m, n > &b)  template<typename _Tp1 , typename _Tp2 , int cn> static Vec< _Tp1, cn > & cv::operator-= (Vec< _Tp1, cn > &a, const Vec< _Tp2, cn > &b)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator/ (const Matx< _Tp, m, n > &a, double alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > cv::operator/ (const Matx< _Tp, m, n > &a, float alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator/ (const Vec< _Tp, cn > &a, double alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator/ (const Vec< _Tp, cn > &a, float alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > cv::operator/ (const Vec< _Tp, cn > &a, int alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > & cv::operator/= (Matx< _Tp, m, n > &a, double alpha)  template<typename _Tp , int m, int n> static Matx< _Tp, m, n > & cv::operator/= (Matx< _Tp, m, n > &a, float alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > & cv::operator/= (Vec< _Tp, cn > &a, double alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > & cv::operator/= (Vec< _Tp, cn > &a, float alpha)  template<typename _Tp , int cn> static Vec< _Tp, cn > & cv::operator/= (Vec< _Tp, cn > &a, int alpha)  static String & cv::operator<< (String &out, const Mat &mtx)  static String & cv::operator<< (String &out, Ptr< Formatted > fmtd)  template<typename _Tp , int m, int n> static bool cv::operator== (const Matx< _Tp, m, n > &a, const Matx< _Tp, m, n > &b)  template<typename _Tp > static _InputArray cv::rawIn (_Tp &v)  template<typename _Tp > static _InputOutputArray cv::rawInOut (_Tp &v)  template<typename _Tp > static _OutputArray cv::rawOut (_Tp &v)  static std::string cv::toLowerCase (const std::string &str)  static std::string cv::toUpperCase (const std::string &str)  template<typename _Tp , int m, int n> static double cv::trace (const Matx< _Tp, m, n > &a) "
ml,This class declares example interface for system state used in simulated annealing optimization algorithm.
ml,The class implements K-Nearest Neighbors model.
ml,"The Machine Learning Library (MLL) is a set of classes and functions for statistical classification, regression, and clustering of data."
ml,"Most of the classification and regression algorithms are implemented as C++ classes. As the algorithms have different sets of features (like an ability to handle missing measurements or categorical input variables), there is a little common ground between the classes. This common ground is defined by the class cv::ml::StatModel that all the other ML classes are derived from."
ml,See detailed overview here: Machine Learning Overview.
ml,Classes class cv::ml::ANN_MLP  Artificial Neural Networks - Multi-Layer Perceptrons. More...  class cv::ml::Boost  Boosted tree classifier derived from DTrees. More...  class cv::ml::DTrees  The class represents a single decision tree or a collection of decision trees. More...  class cv::ml::EM  The class implements the Expectation Maximization algorithm. More...  class cv::ml::KNearest  The class implements K-Nearest Neighbors model. More...  class cv::ml::LogisticRegression  Implements Logistic Regression classifier. More...  class cv::ml::NormalBayesClassifier  Bayes classifier for normally distributed data. More...  class cv::ml::ParamGrid  The structure represents the logarithmic grid range of statmodel parameters. More...  class cv::ml::RTrees  The class implements the random forest predictor. More...  struct cv::ml::SimulatedAnnealingSolverSystem  This class declares example interface for system state used in simulated annealing optimization algorithm. More...  class cv::ml::StatModel  Base class for statistical models in OpenCV ML. More...  class cv::ml::SVM  Support Vector Machines. More...  class cv::ml::SVMSGD  Stochastic Gradient Descent SVM classifier. More...  class cv::ml::TrainData  Class encapsulating training data. More... 
ml,"Functions void cv::ml::createConcentricSpheresTestSet (int nsamples, int nfeatures, int nclasses, OutputArray samples, OutputArray responses)  Creates test set.  void cv::ml::randMVNormal (InputArray mean, InputArray cov, int nsamples, OutputArray samples)  Generates sample from multivariate normal distribution.  template<class SimulatedAnnealingSolverSystem > int cv::ml::simulatedAnnealingSolver (SimulatedAnnealingSolverSystem &solverSystem, double initialTemperature, double finalTemperature, double coolingRatio, size_t iterationsPerStep, double *lastTemperature=NULL, cv::RNG &rngEnergy=cv::theRNG())  The class implements simulated annealing for optimization. "
ml,Stochastic Gradient Descent SVM classifier.
ml,"SVMSGD provides a fast and easy-to-use implementation of the SVM classifier using the Stochastic Gradient Descent approach, as presented in [35]."
ml,The classifier has following parameters:
ml,"model type, margin type, margin regularization ( \(\lambda\)), initial step size ( \(\gamma_0\)), step decreasing power ( \(c\)), and termination criteria."
ml,The model type may have one of the following values: SGD and ASGD.
ml,"SGD is the classic version of SVMSGD classifier: every next step is calculated by the formula \[w_{t+1} = w_t - \gamma(t) \frac{dQ_i}{dw} |_{w = w_t}\] where \(w_t\) is the weights vector for decision function at step \(t\), \(\gamma(t)\) is the step size of model parameters at the iteration \(t\), it is decreased on each step by the formula \(\gamma(t) = \gamma_0 (1 + \lambda \gamma_0 t) ^ {-c}\) \(Q_i\) is the target functional from SVM task for sample with number \(i\), this sample is chosen stochastically on each step of the algorithm. \(w_t\) is the weights vector for decision function at step \(t\), \(\gamma(t)\) is the step size of model parameters at the iteration \(t\), it is decreased on each step by the formula \(\gamma(t) = \gamma_0 (1 + \lambda \gamma_0 t) ^ {-c}\) \(Q_i\) is the target functional from SVM task for sample with number \(i\), this sample is chosen stochastically on each step of the algorithm. ASGD is Average Stochastic Gradient Descent SVM Classifier. ASGD classifier averages weights vector on each step of algorithm by the formula \(\widehat{w}_{t+1} = \frac{t}{1+t}\widehat{w}_{t} + \frac{1}{1+t}w_{t+1}\)"
ml,\[w_{t+1} = w_t - \gamma(t) \frac{dQ_i}{dw} |_{w = w_t}\]
ml,"\(w_t\) is the weights vector for decision function at step \(t\), \(\gamma(t)\) is the step size of model parameters at the iteration \(t\), it is decreased on each step by the formula \(\gamma(t) = \gamma_0 (1 + \lambda \gamma_0 t) ^ {-c}\) \(Q_i\) is the target functional from SVM task for sample with number \(i\), this sample is chosen stochastically on each step of the algorithm."
ml,The recommended model type is ASGD (following [35]).
ml,The margin type may have one of the following values: SOFT_MARGIN or HARD_MARGIN.
ml,"You should use HARD_MARGIN type, if you have linearly separable sets. You should use SOFT_MARGIN type, if you have non-linearly separable sets or sets with outliers. In the general case (if you know nothing about linear separability of your sets), use SOFT_MARGIN."
ml,The other parameters may be described as follows:
ml,"Margin regularization parameter is responsible for weights decreasing at each step and for the strength of restrictions on outliers (the less the parameter, the less probability that an outlier will be ignored). Recommended value for SGD model is 0.0001, for ASGD model is 0.00001. Initial step size parameter is the initial value for the step size \(\gamma(t)\). You will have to find the best initial step for your problem. Step decreasing power is the power parameter for \(\gamma(t)\) decreasing by the formula, mentioned above. Recommended value for SGD model is 1, for ASGD model is 0.75. Termination criteria can be TermCriteria::COUNT, TermCriteria::EPS or TermCriteria::COUNT + TermCriteria::EPS. You will have to find the best termination criteria for your problem."
ml,"Note that the parameters margin regularization, initial step size, and step decreasing power should be positive."
ml,To use SVMSGD algorithm do as follows:
ml,"first, create the SVMSGD object. The algorithm will set optimal parameters by default, but you can set your own parameters via functions setSvmsgdType(), setMarginType(), setMarginRegularization(), setInitialStepSize(), and setStepDecreasingPower(). then the SVM model can be trained using the train features and the correspondent labels by the method train(). after that, the label of a new feature vector can be predicted using the method predict()."
objdetect,Classes struct cv::DetectionROI  struct for detection region of interest (ROI) More...  struct cv::HOGDescriptor  Implementation of HOG (Histogram of Oriented Gradients) descriptor and object detector. More... 
objdetect,Classes class cv::barcode::BarcodeDetector 
objdetect,Check the corresponding tutorial for more details.
objdetect,Classes class cv::FaceDetectorYN  DNN-based face detector. More...  class cv::FaceRecognizerSF  DNN-based face recognizer. More... 
objdetect,The object detector described below has been initially proposed by Paul Viola [285] and improved by Rainer Lienhart [168] .
objdetect,"First, a classifier (namely a cascade of boosted classifiers working with haar-like features) is trained with a few hundred sample views of a particular object (i.e., a face or a car), called positive examples, that are scaled to the same size (say, 20x20), and negative examples - arbitrary images of the same size."
objdetect,"After a classifier is trained, it can be applied to a region of interest (of the same size as used during the training) in an input image. The classifier outputs a ""1"" if the region is likely to show the object (i.e., face/car), and ""0"" otherwise. To search for the object in the whole image one can move the search window across the image and check every location using the classifier. The classifier is designed so that it can be easily ""resized"" in order to be able to find the objects of interest at different sizes, which is more efficient than resizing the image itself. So, to find an object of an unknown size in the image the scan procedure should be done several times at different scales."
objdetect,"The word ""cascade"" in the classifier name means that the resultant classifier consists of several simpler classifiers (stages) that are applied subsequently to a region of interest until at some stage the candidate is rejected or all the stages are passed. The word ""boosted"" means that the classifiers at every stage of the cascade are complex themselves and they are built out of basic classifiers using one of four different boosting techniques (weighted voting). Currently Discrete Adaboost, Real Adaboost, Gentle Adaboost and Logitboost are supported. The basic classifiers are decision-tree classifiers with at least 2 leaves. Haar-like features are the input to the basic classifiers, and are calculated as described below. The current algorithm uses the following Haar-like features:"
objdetect,"The feature used in a particular classifier is specified by its shape (1a, 2b etc.), position within the region of interest and the scale (this scale is not the same as the scale used at the detection stage, though these two scales are multiplied). For example, in the case of the third line feature (2c) the response is calculated as the difference between the sum of image pixels under the rectangle covering the whole feature (including the two white stripes and the black stripe in the middle) and the sum of the image pixels under the black stripe multiplied by 3 in order to compensate for the differences in the size of areas. The sums of pixel values over a rectangular regions are calculated rapidly using integral images (see below and the integral description)."
objdetect,Check the corresponding tutorial for more details.
objdetect,The following reference is for the detection part only. There is a separate application called opencv_traincascade that can train a cascade of boosted classifiers from a set of samples.
objdetect,Classes class cv::BaseCascadeClassifier  class cv::CascadeClassifier  Cascade classifier class for object detection. More...  struct cv::DefaultDeleter< CvHaarClassifierCascade >  class cv::DetectionBasedTracker 
objdetect,Functions Ptr< BaseCascadeClassifier::MaskGenerator > cv::createFaceDetectionMaskGenerator () 
objdetect,"ArUco Marker Detection Square fiducial markers (also known as Augmented Reality Markers) are useful for easy, fast and robust camera pose estimation."
objdetect,"The main functionality of ArucoDetector class is detection of markers in an image. If the markers are grouped as a board, then you can try to recover the missing markers with ArucoDetector::refineDetectedMarkers(). ArUco markers can also be used for advanced chessboard corner finding. To do this, group the markers in the CharucoBoard and find the corners of the chessboard with the CharucoDetector::detectBoard()."
objdetect,The implementation is based on the ArUco Library by R. Muoz-Salinas and S. Garrido-Jurado [99].
objdetect,Markers can also be detected based on the AprilTag 2 [292] fiducial detection method.
objdetect,Classes class cv::aruco::ArucoDetector  The main functionality of ArucoDetector class is detection of markers in an image with detectMarkers() method. More...  class cv::aruco::Board  Board of ArUco markers. More...  class cv::aruco::CharucoBoard  ChArUco board is a planar chessboard where the markers are placed inside the white squares of a chessboard. More...  class cv::aruco::CharucoDetector  struct cv::aruco::CharucoParameters  struct cv::aruco::DetectorParameters  struct DetectorParameters is used by ArucoDetector More...  class cv::aruco::Dictionary  Dictionary is a set of unique ArUco markers of the same size. More...  class cv::aruco::GridBoard  Planar board with grid arrangement of markers. More...  struct cv::aruco::RefineParameters  struct RefineParameters is used by ArucoDetector More... 
objdetect,"Functions void cv::aruco::drawDetectedCornersCharuco (InputOutputArray image, InputArray charucoCorners, InputArray charucoIds=noArray(), Scalar cornerColor=Scalar(255, 0, 0))  Draws a set of Charuco corners.  void cv::aruco::drawDetectedDiamonds (InputOutputArray image, InputArrayOfArrays diamondCorners, InputArray diamondIds=noArray(), Scalar borderColor=Scalar(0, 0, 255))  Draw a set of detected ChArUco Diamond markers.  void cv::aruco::drawDetectedMarkers (InputOutputArray image, InputArrayOfArrays corners, InputArray ids=noArray(), Scalar borderColor=Scalar(0, 255, 0))  Draw detected markers in image.  Dictionary cv::aruco::extendDictionary (int nMarkers, int markerSize, const Dictionary &baseDictionary=Dictionary(), int randomSeed=0)  Extend base dictionary by new nMarkers.  void cv::aruco::generateImageMarker (const Dictionary &dictionary, int id, int sidePixels, OutputArray img, int borderBits=1)  Generate a canonical marker image.  Dictionary cv::aruco::getPredefinedDictionary (int dict)  Returns one of the predefined dictionaries referenced by DICT_*.  Dictionary cv::aruco::getPredefinedDictionary (PredefinedDictionaryType name)  Returns one of the predefined dictionaries defined in PredefinedDictionaryType. "
objdetect,"Classes class cv::GraphicalCodeDetector  class cv::SimilarRects  This class is used for grouping object candidates detected by Cascade Classifier, HOG etc. More... "
objdetect,Classes class cv::QRCodeDetector  class cv::QRCodeDetectorAruco  class cv::QRCodeEncoder 
photo,This module includes photo processing algorithms
photo,"Functions void cv::denoise_TVL1 (const std::vector< Mat > &observations, Mat &result, double lambda=1.0, int niters=30)  Primal-dual algorithm is an algorithm for solving special types of variational problems (that is, finding a function to minimize some functional). As the image denoising, in particular, may be seen as the variational problem, primal-dual algorithm then can be used to perform denoising and this is exactly what is implemented.  void cv::cuda::fastNlMeansDenoising (const GpuMat &src, GpuMat &dst, float h, int search_window=21, int block_size=7, Stream &stream=Stream::Null())  void cv::fastNlMeansDenoising (InputArray src, OutputArray dst, const std::vector< float > &h, int templateWindowSize=7, int searchWindowSize=21, int normType=NORM_L2)  Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/ with several computational optimizations. Noise expected to be a gaussian white noise.  void cv::cuda::fastNlMeansDenoising (InputArray src, OutputArray dst, float h, int search_window=21, int block_size=7, Stream &stream=Stream::Null())  Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising with several computational optimizations. Noise expected to be a gaussian white noise.  void cv::fastNlMeansDenoising (InputArray src, OutputArray dst, float h=3, int templateWindowSize=7, int searchWindowSize=21)  Perform image denoising using Non-local Means Denoising algorithm http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/ with several computational optimizations. Noise expected to be a gaussian white noise.  void cv::cuda::fastNlMeansDenoisingColored (const GpuMat &src, GpuMat &dst, float h_luminance, float photo_render, int search_window=21, int block_size=7, Stream &stream=Stream::Null())  void cv::fastNlMeansDenoisingColored (InputArray src, OutputArray dst, float h=3, float hColor=3, int templateWindowSize=7, int searchWindowSize=21)  Modification of fastNlMeansDenoising function for colored images.  void cv::cuda::fastNlMeansDenoisingColored (InputArray src, OutputArray dst, float h_luminance, float photo_render, int search_window=21, int block_size=7, Stream &stream=Stream::Null())  Modification of fastNlMeansDenoising function for colored images.  void cv::fastNlMeansDenoisingColoredMulti (InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h=3, float hColor=3, int templateWindowSize=7, int searchWindowSize=21)  Modification of fastNlMeansDenoisingMulti function for colored images sequences.  void cv::fastNlMeansDenoisingMulti (InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, const std::vector< float > &h, int templateWindowSize=7, int searchWindowSize=21, int normType=NORM_L2)  Modification of fastNlMeansDenoising function for images sequence where consecutive images have been captured in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces. See [44] for more details (open access here).  void cv::fastNlMeansDenoisingMulti (InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h=3, int templateWindowSize=7, int searchWindowSize=21)  Modification of fastNlMeansDenoising function for images sequence where consecutive images have been captured in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces. See [44] for more details (open access here).  void cv::cuda::nonLocalMeans (const GpuMat &src, GpuMat &dst, float h, int search_window=21, int block_size=7, int borderMode=BORDER_DEFAULT, Stream &stream=Stream::Null())  void cv::cuda::nonLocalMeans (InputArray src, OutputArray dst, float h, int search_window=21, int block_size=7, int borderMode=BORDER_DEFAULT, Stream &stream=Stream::Null())  Performs pure non local means denoising without any simplification, and thus it is not fast. "
photo,Useful links:
photo,http://www.cse.cuhk.edu.hk/leojia/projects/color2gray/index.html
photo,"Functions void cv::decolor (InputArray src, OutputArray grayscale, OutputArray color_boost)  Transforms a color image to a grayscale image. It is a basic tool in digital printing, stylized black-and-white photograph rendering, and in many single channel image processing applications [176] . "
photo,"This section describes high dynamic range imaging algorithms namely tonemapping, exposure alignment, camera calibration with multiple exposures and exposure fusion."
photo,"Classes class cv::AlignExposures  The base class for algorithms that align images of the same scene with different exposures. More...  class cv::AlignMTB  This algorithm converts images to median threshold bitmaps (1 for pixels brighter than median luminance and 0 otherwise) and than aligns the resulting bitmaps using bit operations. More...  class cv::CalibrateCRF  The base class for camera response calibration algorithms. More...  class cv::CalibrateDebevec  Inverse camera response function is extracted for each brightness value by minimizing an objective function as linear system. Objective function is constructed using pixel values on the same position in all images, extra term is added to make the result smoother. More...  class cv::CalibrateRobertson  Inverse camera response function is extracted for each brightness value by minimizing an objective function as linear system. This algorithm uses all image pixels. More...  class cv::MergeDebevec  The resulting HDR image is calculated as weighted average of the exposures considering exposure values and camera response. More...  class cv::MergeExposures  The base class algorithms that can merge exposure sequence to a single image. More...  class cv::MergeMertens  Pixels are weighted using contrast, saturation and well-exposedness measures, than images are combined using laplacian pyramids. More...  class cv::MergeRobertson  The resulting HDR image is calculated as weighted average of the exposures considering exposure values and camera response. More...  class cv::Tonemap  Base class for tonemapping algorithms - tools that are used to map HDR image to 8-bit range. More...  class cv::TonemapDrago  Adaptive logarithmic mapping is a fast global tonemapping algorithm that scales the image in logarithmic domain. More...  class cv::TonemapMantiuk  This algorithm transforms image to contrast using gradients on all levels of gaussian pyramid, transforms contrast values to HVS response and scales the response. After this the image is reconstructed from new contrast values. More...  class cv::TonemapReinhard  This is a global tonemapping operator that models human visual system. More... "
photo,"Functions Ptr< AlignMTB > cv::createAlignMTB (int max_bits=6, int exclude_range=4, bool cut=true)  Creates AlignMTB object.  Ptr< CalibrateDebevec > cv::createCalibrateDebevec (int samples=70, float lambda=10.0f, bool random=false)  Creates CalibrateDebevec object.  Ptr< CalibrateRobertson > cv::createCalibrateRobertson (int max_iter=30, float threshold=0.01f)  Creates CalibrateRobertson object.  Ptr< MergeDebevec > cv::createMergeDebevec ()  Creates MergeDebevec object.  Ptr< MergeMertens > cv::createMergeMertens (float contrast_weight=1.0f, float saturation_weight=1.0f, float exposure_weight=0.0f)  Creates MergeMertens object.  Ptr< MergeRobertson > cv::createMergeRobertson ()  Creates MergeRobertson object.  Ptr< Tonemap > cv::createTonemap (float gamma=1.0f)  Creates simple linear mapper with gamma correction.  Ptr< TonemapDrago > cv::createTonemapDrago (float gamma=1.0f, float saturation=1.0f, float bias=0.85f)  Creates TonemapDrago object.  Ptr< TonemapMantiuk > cv::createTonemapMantiuk (float gamma=1.0f, float scale=0.7f, float saturation=1.0f)  Creates TonemapMantiuk object.  Ptr< TonemapReinhard > cv::createTonemapReinhard (float gamma=1.0f, float intensity=0.0f, float light_adapt=1.0f, float color_adapt=0.0f)  Creates TonemapReinhard object. "
photo,the inpainting algorithm
photo,"Enumerations enum { cv::INPAINT_NS = 0 , cv::INPAINT_TELEA = 1 } "
photo,"Functions void cv::inpaint (InputArray src, InputArray inpaintMask, OutputArray dst, double inpaintRadius, int flags)  Restores the selected region in an image using the region neighborhood. "
photo,Useful links:
photo,https://www.learnopencv.com/seamless-cloning-using-opencv-python-cpp
photo,"Enumerations enum { cv::NORMAL_CLONE = 1 , cv::MIXED_CLONE = 2 , cv::MONOCHROME_TRANSFER = 3 }  seamlessClone algorithm flags More... "
photo,"Functions void cv::colorChange (InputArray src, InputArray mask, OutputArray dst, float red_mul=1.0f, float green_mul=1.0f, float blue_mul=1.0f)  Given an original color image, two differently colored versions of this image can be mixed seamlessly.  void cv::illuminationChange (InputArray src, InputArray mask, OutputArray dst, float alpha=0.2f, float beta=0.4f)  Applying an appropriate non-linear transformation to the gradient field inside the selection and then integrating back with a Poisson solver, modifies locally the apparent illumination of an image.  void cv::seamlessClone (InputArray src, InputArray dst, InputArray mask, Point p, OutputArray blend, int flags)  Image editing tasks concern either global changes (color/intensity corrections, filters, deformations) or local changes concerned to a selection. Here we are interested in achieving local changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless manner. The extent of the changes ranges from slight distortions to complete replacement by novel content [215] .  void cv::textureFlattening (InputArray src, InputArray mask, OutputArray dst, float low_threshold=30, float high_threshold=45, int kernel_size=3)  By retaining only the gradients at edge locations, before integrating with the Poisson solver, one washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge Detector is used. "
photo,Useful links:
photo,http://www.inf.ufrgs.br/~eslgastal/DomainTransform
photo,https://www.learnopencv.com/non-photorealistic-rendering-using-opencv-python-c/
photo,"Enumerations enum { cv::RECURS_FILTER = 1 , cv::NORMCONV_FILTER = 2 }  Edge preserving filters. More... "
photo,"Functions void cv::detailEnhance (InputArray src, OutputArray dst, float sigma_s=10, float sigma_r=0.15f)  This filter enhances the details of a particular image.  void cv::edgePreservingFilter (InputArray src, OutputArray dst, int flags=1, float sigma_s=60, float sigma_r=0.4f)  Filtering is the fundamental operation in image and video processing. Edge-preserving smoothing filters are used in many different applications [100] .  void cv::pencilSketch (InputArray src, OutputArray dst1, OutputArray dst2, float sigma_s=60, float sigma_r=0.07f, float shade_factor=0.02f)  Pencil-like non-photorealistic line drawing.  void cv::stylization (InputArray src, OutputArray dst, float sigma_s=60, float sigma_r=0.45f)  Stylization aims to produce digital imagery with a wide variety of effects not focused on photorealism. Edge-aware filters are ideal for stylization, as they can abstract regions of low contrast while preserving, or enhancing, high-contrast features. "
stitching,Classes class cv::detail::AffineWarper  Affine warper that uses rotations and translations. More...  class cv::AffineWarper  Affine warper factory class. More...  struct cv::detail::CompressedRectilinearPortraitProjector  class cv::CompressedRectilinearPortraitWarper  class cv::detail::CompressedRectilinearPortraitWarper  struct cv::detail::CompressedRectilinearProjector  class cv::CompressedRectilinearWarper  class cv::detail::CompressedRectilinearWarper  struct cv::detail::CylindricalPortraitProjector  class cv::detail::CylindricalPortraitWarper  struct cv::detail::CylindricalProjector  class cv::detail::CylindricalWarper  Warper that maps an image onto the x*x + z*z = 1 cylinder. More...  class cv::CylindricalWarper  Cylindrical warper factory class. More...  class cv::detail::CylindricalWarperGpu  struct cv::detail::FisheyeProjector  class cv::detail::FisheyeWarper  class cv::FisheyeWarper  struct cv::detail::MercatorProjector  class cv::detail::MercatorWarper  class cv::MercatorWarper  struct cv::detail::PaniniPortraitProjector  class cv::PaniniPortraitWarper  class cv::detail::PaniniPortraitWarper  struct cv::detail::PaniniProjector  class cv::PaniniWarper  class cv::detail::PaniniWarper  struct cv::detail::PlanePortraitProjector  class cv::detail::PlanePortraitWarper  struct cv::detail::PlaneProjector  class cv::PlaneWarper  Plane warper factory class. More...  class cv::detail::PlaneWarper  Warper that maps an image onto the z = 1 plane. More...  class cv::detail::PlaneWarperGpu  struct cv::detail::ProjectorBase  Base class for warping logic implementation. More...  class cv::detail::RotationWarper  Rotation-only model image warper interface. More...  class cv::detail::RotationWarperBase< P >  Base class for rotation-based warper using a detail::ProjectorBase_ derived class. More...  struct cv::detail::SphericalPortraitProjector  class cv::detail::SphericalPortraitWarper  struct cv::detail::SphericalProjector  class cv::detail::SphericalWarper  Warper that maps an image onto the unit sphere located at the origin. More...  class cv::SphericalWarper  Spherical warper factory class. More...  class cv::detail::SphericalWarperGpu  struct cv::detail::StereographicProjector  class cv::StereographicWarper  class cv::detail::StereographicWarper  struct cv::detail::TransverseMercatorProjector  class cv::detail::TransverseMercatorWarper  class cv::TransverseMercatorWarper  class cv::WarperCreator  Image warper factories base class. More... 
stitching,"This figure illustrates the stitching module pipeline implemented in the Stitcher class. Using that class it's possible to configure/remove some steps, i.e. adjust the stitching pipeline according to the particular needs. All building blocks from the pipeline are available in the detail namespace, one can combine and use them separately."
stitching,The implemented stitching pipeline is very similar to the one proposed in [41] .
stitching,"Functions bool cv::detail::calibrateRotatingCamera (const std::vector< Mat > &Hs, Mat &K)  void cv::detail::estimateFocal (const std::vector< ImageFeatures > &features, const std::vector< MatchesInfo > &pairwise_matches, std::vector< double > &focals)  Estimates focal lengths for each given camera.  void cv::detail::focalsFromHomography (const Mat &H, double &f0, double &f1, bool &f0_ok, bool &f1_ok)  Tries to estimate focal lengths from the given homography under the assumption that the camera undergoes rotations around its centre only. "
stitching,Classes class cv::detail::AffineBasedEstimator  Affine transformation based estimator. More...  class cv::detail::BundleAdjusterAffine  Bundle adjuster that expects affine transformation represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares. More...  class cv::detail::BundleAdjusterAffinePartial  Bundle adjuster that expects affine transformation with 4 DOF represented in homogeneous coordinates in R for each camera param. Implements camera parameters refinement algorithm which minimizes sum of the reprojection error squares. More...  class cv::detail::BundleAdjusterBase  Base class for all camera parameters refinement methods. More...  class cv::detail::BundleAdjusterRay  Implementation of the camera parameters refinement algorithm which minimizes sum of the distances between the rays passing through the camera center and a feature. : More...  class cv::detail::BundleAdjusterReproj  Implementation of the camera parameters refinement algorithm which minimizes sum of the reprojection error squares. More...  class cv::detail::Estimator  Rotation estimator base class. More...  class cv::detail::HomographyBasedEstimator  Homography based rotation estimator. More...  class cv::detail::NoBundleAdjuster  Stub bundle adjuster that does nothing. More... 
stitching,"Functions WaveCorrectKind cv::detail::autoDetectWaveCorrectKind (const std::vector< Mat > &rmats)  Tries to detect the wave correction kind depending on whether a panorama spans horizontally or vertically.  void cv::detail::findMaxSpanningTree (int num_images, const std::vector< MatchesInfo > &pairwise_matches, Graph &span_tree, std::vector< int > &centers)  std::vector< int > cv::detail::leaveBiggestComponent (std::vector< ImageFeatures > &features, std::vector< MatchesInfo > &pairwise_matches, float conf_threshold)  String cv::detail::matchesGraphAsString (std::vector< String > &paths, std::vector< MatchesInfo > &pairwise_matches, float conf_threshold)  void cv::detail::waveCorrect (std::vector< Mat > &rmats, WaveCorrectKind kind)  Tries to make panorama more horizontal (or vertical). "
stitching,Classes class cv::detail::DpSeamFinder  class cv::detail::GraphCutSeamFinder  Minimum graph cut-based seam estimator. See details in [153] . More...  class cv::detail::GraphCutSeamFinderBase  Base class for all minimum graph-cut-based seam estimators. More...  class cv::detail::NoSeamFinder  Stub seam estimator which does nothing. More...  class cv::detail::PairwiseSeamFinder  Base class for all pairwise seam estimators. More...  class cv::detail::SeamFinder  Base class for a seam estimator. More...  class cv::detail::VoronoiSeamFinder  Voronoi diagram-based seam estimator. More... 
stitching,Classes class cv::detail::Blender  Base class for all blenders. More...  class cv::detail::FeatherBlender  Simple blender which mixes images at its borders. More...  class cv::detail::MultiBandBlender  Blender which uses multi-band blending algorithm (see [45]). More... 
stitching,"Classes class cv::detail::BlocksChannelsCompensator  Exposure compensator which tries to remove exposure related artifacts by adjusting image block on each channel. More...  class cv::detail::BlocksCompensator  Exposure compensator which tries to remove exposure related artifacts by adjusting image blocks. More...  class cv::detail::BlocksGainCompensator  Exposure compensator which tries to remove exposure related artifacts by adjusting image block intensities, see [279] for details. More...  class cv::detail::ChannelsCompensator  Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities on each channel independently. More...  class cv::detail::ExposureCompensator  Base class for all exposure compensators. More...  class cv::detail::GainCompensator  Exposure compensator which tries to remove exposure related artifacts by adjusting image intensities, see [41] and [305] for details. More...  class cv::detail::NoExposureCompensator  Stub exposure compensator which does nothing. More... "
stitching,Classes class cv::detail::AffineBestOf2NearestMatcher  Features matcher similar to cv::detail::BestOf2NearestMatcher which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf. More...  class cv::detail::BestOf2NearestMatcher  Features matcher which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf. More...  class cv::detail::BestOf2NearestRangeMatcher  class cv::detail::FeaturesMatcher  Feature matchers base class. More...  struct cv::detail::ImageFeatures  Structure containing image keypoints and descriptors. More...  struct cv::detail::MatchesInfo  Structure containing information about matches between two images. More... 
video,Classes class cv::DenseOpticalFlow  class cv::DISOpticalFlow  DIS optical flow algorithm. More...  class cv::FarnebackOpticalFlow  Class computing a dense optical flow using the Gunnar Farneback's algorithm. More...  class cv::KalmanFilter  Kalman filter class. More...  class cv::SparseOpticalFlow  Base interface for sparse optical flow algorithms. More...  class cv::SparsePyrLKOpticalFlow  Class used for calculating a sparse optical flow. More...  class cv::Tracker  Base abstract class for the long-term tracker. More...  class cv::TrackerDaSiamRPN  class cv::TrackerGOTURN  the GOTURN (Generic Object Tracking Using Regression Networks) tracker More...  class cv::TrackerMIL  The MIL algorithm trains a classifier in an online manner to separate the object from the background. More...  class cv::TrackerNano  the Nano tracker is a super lightweight dnn-based general object tracking. More...  class cv::TrackerVit  the VIT tracker is a super lightweight dnn-based general object tracking. More...  class cv::VariationalRefinement  Variational optical flow refinement. More... 
video,"Functions int cv::buildOpticalFlowPyramid (InputArray img, OutputArrayOfArrays pyramid, Size winSize, int maxLevel, bool withDerivatives=true, int pyrBorder=BORDER_REFLECT_101, int derivBorder=BORDER_CONSTANT, bool tryReuseInputImage=true)  Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.  void cv::calcOpticalFlowFarneback (InputArray prev, InputArray next, InputOutputArray flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)  Computes a dense optical flow using the Gunnar Farneback's algorithm.  void cv::calcOpticalFlowPyrLK (InputArray prevImg, InputArray nextImg, InputArray prevPts, InputOutputArray nextPts, OutputArray status, OutputArray err, Size winSize=Size(21, 21), int maxLevel=3, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), int flags=0, double minEigThreshold=1e-4)  Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids.  RotatedRect cv::CamShift (InputArray probImage, Rect &window, TermCriteria criteria)  Finds an object center, size, and orientation.  double cv::computeECC (InputArray templateImage, InputArray inputImage, InputArray inputMask=noArray())  Computes the Enhanced Correlation Coefficient value between two images [80] .  Mat cv::estimateRigidTransform (InputArray src, InputArray dst, bool fullAffine)  Computes an optimal affine transformation between two 2D point sets.  double cv::findTransformECC (InputArray templateImage, InputArray inputImage, InputOutputArray warpMatrix, int motionType, TermCriteria criteria, InputArray inputMask, int gaussFiltSize)  Finds the geometric transform (warp) between two images in terms of the ECC criterion [80] .  double cv::findTransformECC (InputArray templateImage, InputArray inputImage, InputOutputArray warpMatrix, int motionType=MOTION_AFFINE, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001), InputArray inputMask=noArray())  int cv::meanShift (InputArray probImage, Rect &window, TermCriteria criteria)  Finds an object on a back projection image.  Mat cv::readOpticalFlow (const String &path)  Read a .flo file.  bool cv::writeOpticalFlow (const String &path, InputArray flow)  Write a .flo to disk. "
video,Classes class cv::BackgroundSubtractor  Base class for background/foreground segmentation. : More...  class cv::BackgroundSubtractorKNN  K-nearest neighbours - based Background/Foreground Segmentation Algorithm. More...  class cv::BackgroundSubtractorMOG2  Gaussian Mixture-based Background/Foreground Segmentation Algorithm. More... 
videoio,"Enumerations enum cv::VideoCaptureAPIs { cv::CAP_ANY = 0 , cv::CAP_VFW = 200 , cv::CAP_V4L = 200 , cv::CAP_V4L2 = CAP_V4L , cv::CAP_FIREWIRE = 300 , cv::CAP_FIREWARE = CAP_FIREWIRE , cv::CAP_IEEE1394 = CAP_FIREWIRE , cv::CAP_DC1394 = CAP_FIREWIRE , cv::CAP_CMU1394 = CAP_FIREWIRE , cv::CAP_QT = 500 , cv::CAP_UNICAP = 600 , cv::CAP_DSHOW = 700 , cv::CAP_PVAPI = 800 , cv::CAP_OPENNI = 900 , cv::CAP_OPENNI_ASUS = 910 , cv::CAP_ANDROID = 1000 , cv::CAP_XIAPI = 1100 , cv::CAP_AVFOUNDATION = 1200 , cv::CAP_GIGANETIX = 1300 , cv::CAP_MSMF = 1400 , cv::CAP_WINRT = 1410 , cv::CAP_INTELPERC = 1500 , cv::CAP_REALSENSE = 1500 , cv::CAP_OPENNI2 = 1600 , cv::CAP_OPENNI2_ASUS = 1610 , cv::CAP_OPENNI2_ASTRA = 1620 , cv::CAP_GPHOTO2 = 1700 , cv::CAP_GSTREAMER = 1800 , cv::CAP_FFMPEG = 1900 , cv::CAP_IMAGES = 2000 , cv::CAP_ARAVIS = 2100 , cv::CAP_OPENCV_MJPEG = 2200 , cv::CAP_INTEL_MFX = 2300 , cv::CAP_XINE = 2400 , cv::CAP_UEYE = 2500 , cv::CAP_OBSENSOR = 2600 }  cv::VideoCapture API backends identifier. More...  enum cv::VideoCaptureProperties { cv::CAP_PROP_POS_MSEC =0 , cv::CAP_PROP_POS_FRAMES =1 , cv::CAP_PROP_POS_AVI_RATIO =2 , cv::CAP_PROP_FRAME_WIDTH =3 , cv::CAP_PROP_FRAME_HEIGHT =4 , cv::CAP_PROP_FPS =5 , cv::CAP_PROP_FOURCC =6 , cv::CAP_PROP_FRAME_COUNT =7 , cv::CAP_PROP_FORMAT =8 , cv::CAP_PROP_MODE =9 , cv::CAP_PROP_BRIGHTNESS =10 , cv::CAP_PROP_CONTRAST =11 , cv::CAP_PROP_SATURATION =12 , cv::CAP_PROP_HUE =13 , cv::CAP_PROP_GAIN =14 , cv::CAP_PROP_EXPOSURE =15 , cv::CAP_PROP_CONVERT_RGB =16 , cv::CAP_PROP_WHITE_BALANCE_BLUE_U =17 , cv::CAP_PROP_RECTIFICATION =18 , cv::CAP_PROP_MONOCHROME =19 , cv::CAP_PROP_SHARPNESS =20 , cv::CAP_PROP_AUTO_EXPOSURE =21 , cv::CAP_PROP_GAMMA =22 , cv::CAP_PROP_TEMPERATURE =23 , cv::CAP_PROP_TRIGGER =24 , cv::CAP_PROP_TRIGGER_DELAY =25 , cv::CAP_PROP_WHITE_BALANCE_RED_V =26 , cv::CAP_PROP_ZOOM =27 , cv::CAP_PROP_FOCUS =28 , cv::CAP_PROP_GUID =29 , cv::CAP_PROP_ISO_SPEED =30 , cv::CAP_PROP_BACKLIGHT =32 , cv::CAP_PROP_PAN =33 , cv::CAP_PROP_TILT =34 , cv::CAP_PROP_ROLL =35 , cv::CAP_PROP_IRIS =36 , cv::CAP_PROP_SETTINGS =37 , cv::CAP_PROP_BUFFERSIZE =38 , cv::CAP_PROP_AUTOFOCUS =39 , cv::CAP_PROP_SAR_NUM =40 , cv::CAP_PROP_SAR_DEN =41 , cv::CAP_PROP_BACKEND =42 , cv::CAP_PROP_CHANNEL =43 , cv::CAP_PROP_AUTO_WB =44 , cv::CAP_PROP_WB_TEMPERATURE =45 , cv::CAP_PROP_CODEC_PIXEL_FORMAT =46 , cv::CAP_PROP_BITRATE =47 , cv::CAP_PROP_ORIENTATION_META =48 , cv::CAP_PROP_ORIENTATION_AUTO =49 , cv::CAP_PROP_HW_ACCELERATION =50 , cv::CAP_PROP_HW_DEVICE =51 , cv::CAP_PROP_HW_ACCELERATION_USE_OPENCL =52 , cv::CAP_PROP_OPEN_TIMEOUT_MSEC =53 , cv::CAP_PROP_READ_TIMEOUT_MSEC =54 , cv::CAP_PROP_STREAM_OPEN_TIME_USEC =55 , cv::CAP_PROP_VIDEO_TOTAL_CHANNELS = 56 , cv::CAP_PROP_VIDEO_STREAM = 57 , cv::CAP_PROP_AUDIO_STREAM = 58 , cv::CAP_PROP_AUDIO_POS = 59 , cv::CAP_PROP_AUDIO_SHIFT_NSEC = 60 , cv::CAP_PROP_AUDIO_DATA_DEPTH = 61 , cv::CAP_PROP_AUDIO_SAMPLES_PER_SECOND = 62 , cv::CAP_PROP_AUDIO_BASE_INDEX = 63 , cv::CAP_PROP_AUDIO_TOTAL_CHANNELS = 64 , cv::CAP_PROP_AUDIO_TOTAL_STREAMS = 65 , cv::CAP_PROP_AUDIO_SYNCHRONIZE = 66 , cv::CAP_PROP_LRF_HAS_KEY_FRAME = 67 , cv::CAP_PROP_CODEC_EXTRADATA_INDEX = 68 , cv::CAP_PROP_FRAME_TYPE = 69 , cv::CAP_PROP_N_THREADS = 70 , cv::CAP_PROP_PTS = 71 , cv::CAP_PROP_DTS_DELAY = 72 }  cv::VideoCapture generic properties identifier. More...  enum cv::VideoWriterProperties { cv::VIDEOWRITER_PROP_QUALITY = 1 , cv::VIDEOWRITER_PROP_FRAMEBYTES = 2 , cv::VIDEOWRITER_PROP_NSTRIPES = 3 , cv::VIDEOWRITER_PROP_IS_COLOR = 4 , cv::VIDEOWRITER_PROP_DEPTH = 5 , cv::VIDEOWRITER_PROP_HW_ACCELERATION = 6 , cv::VIDEOWRITER_PROP_HW_DEVICE = 7 , cv::VIDEOWRITER_PROP_HW_ACCELERATION_USE_OPENCL = 8 , cv::VIDEOWRITER_PROP_RAW_VIDEO = 9 , cv::VIDEOWRITER_PROP_KEY_INTERVAL = 10 , cv::VIDEOWRITER_PROP_KEY_FLAG = 11 , cv::VIDEOWRITER_PROP_PTS = 12 , cv::VIDEOWRITER_PROP_DTS_DELAY = 13 }  cv::VideoWriter generic properties identifier. More... "
videoio,Classes class CvAbstractCamera  class CvPhotoCamera  protocol <CvPhotoCameraDelegate>  class CvVideoCamera  protocol <CvVideoCameraDelegate> 
videoio,"Hardware acceleration support enum cv::VideoAccelerationType { cv::VIDEO_ACCELERATION_NONE = 0 , cv::VIDEO_ACCELERATION_ANY = 1 , cv::VIDEO_ACCELERATION_D3D11 = 2 , cv::VIDEO_ACCELERATION_VAAPI = 3 , cv::VIDEO_ACCELERATION_MFX = 4 }  Video Acceleration type. More... "
videoio,"Enumerations enum { cv::OPEN_CAMERA = 300 , cv::CLOSE_CAMERA , cv::UPDATE_IMAGE_ELEMENT , cv::SHOW_TRACKBAR } "
videoio,"Functions void cv::winrt_imshow ()  void cv::winrt_onVisibilityChanged (bool visible)  void cv::winrt_setFrameContainer (::Windows::UI::Xaml::Controls::Image^ image)  template<typename ... Args> void cv::winrt_startMessageLoop (std::function< void(Args...)> &&callback, Args... args)  template<typename ... Args> void cv::winrt_startMessageLoop (void callback(Args...), Args... args)  template void cv::winrt_startMessageLoop (void callback(void)) "
videoio,Read and write video or images sequence with OpenCV.
videoio,This section contains API description how to query/configure available Video I/O backends.
videoio,Runtime configuration options:
videoio,"enable debug mode: OPENCV_VIDEOIO_DEBUG=1 change backend priority: OPENCV_VIDEOIO_PRIORITY_<backend>=9999 disable backend: OPENCV_VIDEOIO_PRIORITY_<backend>=0 specify list of backends with high priority (>100000): OPENCV_VIDEOIO_PRIORITY_LIST=FFMPEG,GSTREAMER"
videoio,"Functions cv::String cv::videoio_registry::getBackendName (VideoCaptureAPIs api)  Returns backend API name or ""UnknownVideoAPI(xxx)"".  std::vector< VideoCaptureAPIs > cv::videoio_registry::getBackends ()  Returns list of all available backends.  std::string cv::videoio_registry::getCameraBackendPluginVersion (VideoCaptureAPIs api, int &version_ABI, int &version_API)  Returns description and ABI/API version of videoio plugin's camera interface.  std::vector< VideoCaptureAPIs > cv::videoio_registry::getCameraBackends ()  Returns list of available backends which works via cv::VideoCapture(int index)  std::string cv::videoio_registry::getStreamBackendPluginVersion (VideoCaptureAPIs api, int &version_ABI, int &version_API)  Returns description and ABI/API version of videoio plugin's stream capture interface.  std::vector< VideoCaptureAPIs > cv::videoio_registry::getStreamBackends ()  Returns list of available backends which works via cv::VideoCapture(filename)  std::string cv::videoio_registry::getWriterBackendPluginVersion (VideoCaptureAPIs api, int &version_ABI, int &version_API)  Returns description and ABI/API version of videoio plugin's writer interface.  std::vector< VideoCaptureAPIs > cv::videoio_registry::getWriterBackends ()  Returns list of available backends which works via cv::VideoWriter()  bool cv::videoio_registry::hasBackend (VideoCaptureAPIs api)  Returns true if backend is available.  bool cv::videoio_registry::isBackendBuiltIn (VideoCaptureAPIs api)  Returns true if backend is built in (false if backend is used as plugin) "
