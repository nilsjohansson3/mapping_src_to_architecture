Module,Text
calib3d,Additional Inherited Members
calib3d,Public Types inherited from cv::_OutputArray
calib3d,enum
calib3d,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
calib3d,Public Types inherited from cv::_InputArray
calib3d,enum
calib3d,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
calib3d,Protected Member Functions inherited from cv::_InputArray
calib3d,void
calib3d,"init (int _flags, const void *_obj)"
calib3d,void
calib3d,"init (int _flags, const void *_obj, Size _sz)"
calib3d,Protected Attributes inherited from cv::_InputArray
calib3d,int
calib3d,flags
calib3d,void *
calib3d,obj
calib3d,Size
calib3d,sz
calib3d,Public Attributes
calib3d,Allocator *
calib3d,allocator
calib3d,allocator
calib3d,int
calib3d,cols
calib3d,uchar *
calib3d,data
calib3d,pointer to the data
calib3d,const uchar *
calib3d,dataend
calib3d,uchar *
calib3d,datastart
calib3d,helper fields used in locateROI and adjustROI
calib3d,int
calib3d,flags
calib3d,int *
calib3d,refcount
calib3d,int
calib3d,rows
calib3d,the number of rows and columns
calib3d,size_t
calib3d,step
calib3d,a distance between successive rows in bytes; includes the gap if any
calib3d,Public Attributes
calib3d,Mat
calib3d,a
calib3d,double
calib3d,alpha
calib3d,Mat
calib3d,b
calib3d,double
calib3d,beta
calib3d,Mat
calib3d,c
calib3d,int
calib3d,flags
calib3d,const MatOp *
calib3d,op
calib3d,Scalar
calib3d,s
calib3d,Public Attributes
calib3d,Impl *
calib3d,p
calib3d,Additional Inherited Members
calib3d,"Public Types inherited from cv::Vec< _Tp, 4 >"
calib3d,enum
calib3d,typedef _Tp
calib3d,value_type
calib3d,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
calib3d,enum
calib3d,"typedef Matx< _Tp, shortdim, 1 >"
calib3d,diag_type
calib3d,"typedef Matx< _Tp, m, n >"
calib3d,mat_type
calib3d,typedef _Tp
calib3d,value_type
calib3d,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
calib3d,_Tp
calib3d,val [m *n]
calib3d,matrix elements
calib3d,Public Attributes
calib3d,uint64
calib3d,state
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::MatConstIterator
calib3d,size_t
calib3d,elemSize
calib3d,const Mat *
calib3d,m
calib3d,const uchar *
calib3d,ptr
calib3d,const uchar *
calib3d,sliceEnd
calib3d,const uchar *
calib3d,sliceStart
calib3d,Public Attributes
calib3d,float
calib3d,angle
calib3d,int
calib3d,class_id
calib3d,object class (if the keypoints need to be clustered by an object they belong to)
calib3d,int
calib3d,octave
calib3d,octave (pyramid layer) from which the keypoint has been extracted
calib3d,Point2f
calib3d,pt
calib3d,coordinates of the keypoints
calib3d,float
calib3d,response
calib3d,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
calib3d,float
calib3d,size
calib3d,diameter of the meaningful keypoint neighborhood
calib3d,Public Attributes
calib3d,_Tp
calib3d,height
calib3d,height of the rectangle
calib3d,_Tp
calib3d,width
calib3d,width of the rectangle
calib3d,_Tp
calib3d,x
calib3d,x coordinate of the top-left corner
calib3d,_Tp
calib3d,y
calib3d,y coordinate of the top-left corner
calib3d,Additional Inherited Members
calib3d,Protected Member Functions inherited from cv::_InputArray
calib3d,void
calib3d,"init (int _flags, const void *_obj)"
calib3d,void
calib3d,"init (int _flags, const void *_obj, Size _sz)"
calib3d,Protected Attributes inherited from cv::_InputArray
calib3d,int
calib3d,flags
calib3d,void *
calib3d,obj
calib3d,Size
calib3d,sz
calib3d,Public Attributes
calib3d,float
calib3d,convexHullFactor
calib3d,cv::Size2f
calib3d,densityNeighborhoodSize
calib3d,float
calib3d,edgeGain
calib3d,float
calib3d,edgePenalty
calib3d,float
calib3d,existingVertexGain
calib3d,GridType
calib3d,gridType
calib3d,int
calib3d,keypointScale
calib3d,int
calib3d,kmeansAttempts
calib3d,float
calib3d,maxRectifiedDistance
calib3d,Max deviation from prediction. Used by CALIB_CB_CLUSTERING.
calib3d,float
calib3d,minDensity
calib3d,int
calib3d,minDistanceToAddKeypoint
calib3d,float
calib3d,minGraphConfidence
calib3d,float
calib3d,minRNGEdgeSwitchDist
calib3d,float
calib3d,squareSize
calib3d,Distance between two adjacent points. Used by CALIB_CB_CLUSTERING.
calib3d,float
calib3d,vertexGain
calib3d,float
calib3d,vertexPenalty
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::SparseMatConstIterator
calib3d,size_t
calib3d,hashidx
calib3d,const SparseMat *
calib3d,m
calib3d,uchar *
calib3d,ptr
calib3d,Static Public Attributes
calib3d,static const NormTypes
calib3d,normType = NORM_HAMMING
calib3d,Public Attributes
calib3d,MatAllocator *
calib3d,allocator
calib3d,custom allocator
calib3d,int
calib3d,cols
calib3d,uchar *
calib3d,data
calib3d,pointer to the data
calib3d,const uchar *
calib3d,dataend
calib3d,const uchar *
calib3d,datalimit
calib3d,const uchar *
calib3d,datastart
calib3d,helper fields used in locateROI and adjustROI
calib3d,int
calib3d,dims
calib3d,"the matrix dimensionality, >= 2"
calib3d,int
calib3d,flags
calib3d,int
calib3d,rows
calib3d,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
calib3d,MatSize
calib3d,size
calib3d,MatStep
calib3d,step
calib3d,UMatData *
calib3d,u
calib3d,interaction with UMat
calib3d,Public Attributes
calib3d,Mat
calib3d,eigenvalues
calib3d,eigenvalues of the covariation matrix
calib3d,Mat
calib3d,eigenvectors
calib3d,eigenvectors of the covariation matrix
calib3d,Mat
calib3d,mean
calib3d,mean value subtracted before the projection and added after the back projection
calib3d,Public Attributes
calib3d,size_t
calib3d,buf [2]
calib3d,size_t *
calib3d,p
calib3d,Static Public Attributes
calib3d,static const NormTypes
calib3d,normType = NORM_L1
calib3d,Public Attributes
calib3d,float
calib3d,distance
calib3d,int
calib3d,imgIdx
calib3d,train image index
calib3d,int
calib3d,queryIdx
calib3d,query descriptor index
calib3d,int
calib3d,trainIdx
calib3d,train descriptor index
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::MatConstIterator
calib3d,size_t
calib3d,elemSize
calib3d,const Mat *
calib3d,m
calib3d,const uchar *
calib3d,ptr
calib3d,const uchar *
calib3d,sliceEnd
calib3d,const uchar *
calib3d,sliceStart
calib3d,Static Public Attributes
calib3d,static const NormTypes
calib3d,normType = NORM_L2SQR
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::SparseMatConstIterator
calib3d,size_t
calib3d,hashidx
calib3d,const SparseMat *
calib3d,m
calib3d,uchar *
calib3d,ptr
calib3d,Public Attributes
calib3d,const Mat **
calib3d,arrays
calib3d,the iterated arrays
calib3d,int
calib3d,narrays
calib3d,the number of arrays
calib3d,size_t
calib3d,nplanes
calib3d,the number of hyper-planes that the iterator steps through
calib3d,Mat *
calib3d,planes
calib3d,the current planes
calib3d,uchar **
calib3d,ptrs
calib3d,data pointers
calib3d,size_t
calib3d,size
calib3d,the size of each segment (in elements)
calib3d,Public Attributes
calib3d,_Tp
calib3d,height
calib3d,the height
calib3d,_Tp
calib3d,width
calib3d,the width
calib3d,Protected Attributes
calib3d,MatIterator_< _Tp >
calib3d,it
calib3d,Additional Inherited Members
calib3d,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
calib3d,_Tp
calib3d,val [m *n]
calib3d,matrix elements
calib3d,Public Attributes
calib3d,double
calib3d,confidence
calib3d,PolishingMethod
calib3d,final_polisher
calib3d,int
calib3d,final_polisher_iterations
calib3d,bool
calib3d,isParallel
calib3d,int
calib3d,loIterations
calib3d,LocalOptimMethod
calib3d,loMethod
calib3d,int
calib3d,loSampleSize
calib3d,int
calib3d,maxIterations
calib3d,NeighborSearchMethod
calib3d,neighborsSearch
calib3d,int
calib3d,randomGeneratorState
calib3d,SamplingMethod
calib3d,sampler
calib3d,ScoreMethod
calib3d,score
calib3d,double
calib3d,threshold
calib3d,Public Attributes
calib3d,MatAllocator *
calib3d,allocator
calib3d,custom allocator
calib3d,int
calib3d,cols
calib3d,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
calib3d,int
calib3d,dims
calib3d,"the matrix dimensionality, >= 2"
calib3d,int
calib3d,flags
calib3d,size_t
calib3d,offset
calib3d,offset of the submatrix (or 0)
calib3d,int
calib3d,rows
calib3d,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
calib3d,MatSize
calib3d,size
calib3d,dimensional size of the matrix; accessible in various formats
calib3d,MatStep
calib3d,step
calib3d,number of bytes each matrix element/row/plane/dimension occupies
calib3d,UMatData *
calib3d,u
calib3d,black-box container of UMat data
calib3d,UMatUsageFlags
calib3d,usageFlags
calib3d,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::SparseMat
calib3d,int
calib3d,flags
calib3d,Hdr *
calib3d,hdr
calib3d,Public Attributes
calib3d,size_t
calib3d,elemSize
calib3d,const Mat *
calib3d,m
calib3d,const uchar *
calib3d,ptr
calib3d,const uchar *
calib3d,sliceEnd
calib3d,const uchar *
calib3d,sliceStart
calib3d,Public Attributes
calib3d,uchar
calib3d,blobColor
calib3d,bool
calib3d,collectContours
calib3d,bool
calib3d,filterByArea
calib3d,bool
calib3d,filterByCircularity
calib3d,bool
calib3d,filterByColor
calib3d,bool
calib3d,filterByConvexity
calib3d,bool
calib3d,filterByInertia
calib3d,float
calib3d,maxArea
calib3d,float
calib3d,maxCircularity
calib3d,float
calib3d,maxConvexity
calib3d,float
calib3d,maxInertiaRatio
calib3d,float
calib3d,maxThreshold
calib3d,float
calib3d,minArea
calib3d,float
calib3d,minCircularity
calib3d,float
calib3d,minConvexity
calib3d,float
calib3d,minDistBetweenBlobs
calib3d,float
calib3d,minInertiaRatio
calib3d,size_t
calib3d,minRepeatability
calib3d,float
calib3d,minThreshold
calib3d,float
calib3d,thresholdStep
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::SparseMatConstIterator
calib3d,size_t
calib3d,hashidx
calib3d,const SparseMat *
calib3d,m
calib3d,uchar *
calib3d,ptr
calib3d,Public Attributes
calib3d,double
calib3d,epsilon
calib3d,the desired accuracy
calib3d,int
calib3d,maxCount
calib3d,the maximum number of iterations/elements
calib3d,int
calib3d,type
calib3d,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
calib3d,Public Attributes
calib3d,int
calib3d,end
calib3d,int
calib3d,start
calib3d,Public Attributes
calib3d,std::string
calib3d,elname
calib3d,Ptr< Impl >
calib3d,p
calib3d,int
calib3d,state
calib3d,Public Attributes
calib3d,_Tp
calib3d,im
calib3d,the real and the imaginary parts
calib3d,_Tp
calib3d,re
calib3d,Public Attributes
calib3d,_Tp
calib3d,x
calib3d,x coordinate of the point
calib3d,_Tp
calib3d,y
calib3d,y coordinate of the point
calib3d,Public Attributes
calib3d,std::shared_ptr< void >
calib3d,allocatorContext
calib3d,int
calib3d,allocatorFlags_
calib3d,const MatAllocator *
calib3d,currAllocator
calib3d,uchar *
calib3d,data
calib3d,UMatData::MemoryFlag
calib3d,flags
calib3d,void *
calib3d,handle
calib3d,int
calib3d,mapcount
calib3d,uchar *
calib3d,origdata
calib3d,UMatData *
calib3d,originalUMatData
calib3d,const MatAllocator *
calib3d,prevAllocator
calib3d,int
calib3d,refcount
calib3d,size_t
calib3d,size
calib3d,int
calib3d,urefcount
calib3d,void *
calib3d,userdata
calib3d,Static Public Attributes
calib3d,static const int
calib3d,kBytes = 32
calib3d,Public Attributes
calib3d,float
calib3d,angle
calib3d,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
calib3d,Point2f
calib3d,center
calib3d,returns the rectangle mass center
calib3d,Size2f
calib3d,size
calib3d,returns width and height of the rectangle
calib3d,Static Public Attributes
calib3d,static const NormTypes
calib3d,normType = NORM_L2
calib3d,Public Attributes
calib3d,int
calib3d,flags
calib3d,Hdr *
calib3d,hdr
calib3d,Public Attributes
calib3d,size_t
calib3d,blockIdx
calib3d,FileStorage::Impl *
calib3d,fs
calib3d,size_t
calib3d,ofs
calib3d,Public Attributes
calib3d,_Tp
calib3d,val [m *n]
calib3d,matrix elements
calib3d,Public Attributes
calib3d,int *
calib3d,p
calib3d,Public Attributes
calib3d,_Tp
calib3d,x
calib3d,x coordinate of the 3D point
calib3d,_Tp
calib3d,y
calib3d,y coordinate of the 3D point
calib3d,_Tp
calib3d,z
calib3d,z coordinate of the 3D point
calib3d,Public Attributes
calib3d,size_t
calib3d,hashidx
calib3d,const SparseMat *
calib3d,m
calib3d,uchar *
calib3d,ptr
calib3d,Public Attributes
calib3d,Mat
calib3d,u
calib3d,Mat
calib3d,vt
calib3d,Mat
calib3d,w
calib3d,Additional Inherited Members
calib3d,Public Attributes inherited from cv::Mat
calib3d,MatAllocator *
calib3d,allocator
calib3d,custom allocator
calib3d,int
calib3d,cols
calib3d,uchar *
calib3d,data
calib3d,pointer to the data
calib3d,const uchar *
calib3d,dataend
calib3d,const uchar *
calib3d,datalimit
calib3d,const uchar *
calib3d,datastart
calib3d,helper fields used in locateROI and adjustROI
calib3d,int
calib3d,dims
calib3d,"the matrix dimensionality, >= 2"
calib3d,int
calib3d,flags
calib3d,int
calib3d,rows
calib3d,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
calib3d,MatSize
calib3d,size
calib3d,MatStep
calib3d,step
calib3d,UMatData *
calib3d,u
calib3d,interaction with UMat
calib3d,Protected Member Functions inherited from cv::Mat
calib3d,"template<typename _Tp , typename Functor >"
calib3d,void
calib3d,forEach_impl (const Functor &operation)
core,Additional Inherited Members
core,Public Types inherited from cv::_OutputArray
core,enum
core,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
core,Public Types inherited from cv::_InputArray
core,enum
core,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
core,Protected Member Functions inherited from cv::_InputArray
core,void
core,"init (int _flags, const void *_obj)"
core,void
core,"init (int _flags, const void *_obj, Size _sz)"
core,Protected Attributes inherited from cv::_InputArray
core,int
core,flags
core,void *
core,obj
core,Size
core,sz
core,Protected Attributes
core,Impl *
core,p
core,Protected Attributes
core,Impl *
core,p
core,Public Attributes
core,Mat
core,a
core,double
core,alpha
core,Mat
core,b
core,double
core,beta
core,Mat
core,c
core,int
core,flags
core,const MatOp *
core,op
core,Scalar
core,s
core,Public Attributes
core,Impl *
core,p
core,Additional Inherited Members
core,"Public Types inherited from cv::Vec< _Tp, 4 >"
core,enum
core,typedef _Tp
core,value_type
core,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
core,enum
core,"typedef Matx< _Tp, shortdim, 1 >"
core,diag_type
core,"typedef Matx< _Tp, m, n >"
core,mat_type
core,typedef _Tp
core,value_type
core,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
core,_Tp
core,val [m *n]
core,matrix elements
core,Public Attributes
core,uint64
core,state
core,Additional Inherited Members
core,Public Attributes inherited from cv::MatConstIterator
core,size_t
core,elemSize
core,const Mat *
core,m
core,const uchar *
core,ptr
core,const uchar *
core,sliceEnd
core,const uchar *
core,sliceStart
core,Public Attributes
core,int
core,code
core,error code
core,String
core,err
core,error description
core,String
core,file
core,source file name where the error has occurred
core,String
core,func
core,function name. Available only when the compiler supports getting it
core,int
core,line
core,line number in the source file where the error has occurred
core,String
core,msg
core,the formatted error message
core,Public Attributes
core,float
core,angle
core,int
core,class_id
core,object class (if the keypoints need to be clustered by an object they belong to)
core,int
core,octave
core,octave (pyramid layer) from which the keypoint has been extracted
core,Point2f
core,pt
core,coordinates of the keypoints
core,float
core,response
core,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
core,float
core,size
core,diameter of the meaningful keypoint neighborhood
core,Public Attributes
core,_Tp
core,height
core,height of the rectangle
core,_Tp
core,width
core,width of the rectangle
core,_Tp
core,x
core,x coordinate of the top-left corner
core,_Tp
core,y
core,y coordinate of the top-left corner
core,Protected Attributes
core,Impl *
core,p
core,Additional Inherited Members
core,Protected Member Functions inherited from cv::_InputArray
core,void
core,"init (int _flags, const void *_obj)"
core,void
core,"init (int _flags, const void *_obj, Size _sz)"
core,Protected Attributes inherited from cv::_InputArray
core,int
core,flags
core,void *
core,obj
core,Size
core,sz
core,Public Attributes
core,int
core,flags
core,int
core,iwscale
core,UMat *
core,m
core,const void *
core,obj
core,size_t
core,sz
core,int
core,wscale
core,Additional Inherited Members
core,Public Attributes inherited from cv::SparseMatConstIterator
core,size_t
core,hashidx
core,const SparseMat *
core,m
core,uchar *
core,ptr
core,Static Public Attributes
core,static const NormTypes
core,normType = NORM_HAMMING
core,Public Attributes
core,MatAllocator *
core,allocator
core,custom allocator
core,int
core,cols
core,uchar *
core,data
core,pointer to the data
core,const uchar *
core,dataend
core,const uchar *
core,datalimit
core,const uchar *
core,datastart
core,helper fields used in locateROI and adjustROI
core,int
core,dims
core,"the matrix dimensionality, >= 2"
core,int
core,flags
core,int
core,rows
core,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
core,MatSize
core,size
core,MatStep
core,step
core,UMatData *
core,u
core,interaction with UMat
core,Public Attributes
core,Mat
core,eigenvalues
core,eigenvalues of the covariation matrix
core,Mat
core,eigenvectors
core,eigenvectors of the covariation matrix
core,Mat
core,mean
core,mean value subtracted before the projection and added after the back projection
core,Public Attributes
core,std::vector< Node< OBJECT > * >
core,m_childs
core,OBJECT
core,m_payload
core,Node< OBJECT > *
core,m_pParent
core,Protected Attributes
core,Impl *
core,p
core,Public Attributes
core,size_t
core,buf [2]
core,size_t *
core,p
core,Protected Attributes
core,ushort
core,w
core,Public Attributes
core,_Tp
core,w
core,_Tp
core,w_
core,_Tp
core,x
core,_Tp
core,x_
core,_Tp
core,y
core,_Tp
core,y_
core,_Tp
core,z
core,_Tp
core,z_
core,Public Attributes
core,float
core,distance
core,int
core,imgIdx
core,train image index
core,int
core,queryIdx
core,query descriptor index
core,int
core,trainIdx
core,train descriptor index
core,Additional Inherited Members
core,Public Attributes inherited from cv::MatConstIterator
core,size_t
core,elemSize
core,const Mat *
core,m
core,const uchar *
core,ptr
core,const uchar *
core,sliceEnd
core,const uchar *
core,sliceStart
core,Additional Inherited Members
core,Public Attributes inherited from cv::SparseMatConstIterator
core,size_t
core,hashidx
core,const SparseMat *
core,m
core,uchar *
core,ptr
core,Public Attributes
core,const Mat **
core,arrays
core,the iterated arrays
core,int
core,narrays
core,the number of arrays
core,size_t
core,nplanes
core,the number of hyper-planes that the iterator steps through
core,Mat *
core,planes
core,the current planes
core,uchar **
core,ptrs
core,data pointers
core,size_t
core,size
core,the size of each segment (in elements)
core,Protected Attributes
core,Impl *
core,p
core,Public Attributes
core,_Tp
core,height
core,the height
core,_Tp
core,width
core,the width
core,Protected Attributes
core,Impl *
core,p
core,Protected Attributes
core,MatIterator_< _Tp >
core,it
core,Additional Inherited Members
core,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
core,_Tp
core,val [m *n]
core,matrix elements
core,Public Attributes
core,MatAllocator *
core,allocator
core,custom allocator
core,int
core,cols
core,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
core,int
core,dims
core,"the matrix dimensionality, >= 2"
core,int
core,flags
core,size_t
core,offset
core,offset of the submatrix (or 0)
core,int
core,rows
core,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
core,MatSize
core,size
core,dimensional size of the matrix; accessible in various formats
core,MatStep
core,step
core,number of bytes each matrix element/row/plane/dimension occupies
core,UMatData *
core,u
core,black-box container of UMat data
core,UMatUsageFlags
core,usageFlags
core,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
core,Protected Attributes
core,size_t
core,blockIdx
core,size_t
core,blockSize
core,FileStorage::Impl *
core,fs
core,size_t
core,idx
core,size_t
core,nodeNElems
core,size_t
core,ofs
core,Protected Attributes
core,std::shared_ptr< Impl >
core,p
core,Additional Inherited Members
core,Public Attributes inherited from cv::SparseMat
core,int
core,flags
core,Hdr *
core,hdr
core,Protected Attributes
core,Impl *
core,p
core,Public Attributes
core,size_t
core,elemSize
core,const Mat *
core,m
core,const uchar *
core,ptr
core,const uchar *
core,sliceEnd
core,const uchar *
core,sliceStart
core,Protected Attributes
core,Impl *
core,p
core,Protected Attributes
core,_Tp
core,buf [(fixed_size > 0) ? fixed_size :1]
core,pre-allocated buffer. At least 1 element to confirm C++ standard requirements
core,_Tp *
core,ptr
core,"pointer to the real buffer, can point to buf if the buffer is small enough"
core,size_t
core,sz
core,size of the real buffer
core,Additional Inherited Members
core,Public Attributes inherited from cv::SparseMatConstIterator
core,size_t
core,hashidx
core,const SparseMat *
core,m
core,uchar *
core,ptr
core,Public Attributes
core,double
core,epsilon
core,the desired accuracy
core,int
core,maxCount
core,the maximum number of iterations/elements
core,int
core,type
core,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
core,Public Attributes
core,int
core,end
core,int
core,start
core,Public Attributes
core,_Tp
core,w
core,_Tp
core,x
core,_Tp
core,y
core,_Tp
core,z
core,Public Attributes
core,std::string
core,elname
core,Ptr< Impl >
core,p
core,int
core,state
core,Public Attributes
core,_Tp
core,im
core,the real and the imaginary parts
core,_Tp
core,re
core,Public Attributes
core,_Tp
core,x
core,x coordinate of the point
core,_Tp
core,y
core,y coordinate of the point
core,Public Attributes
core,std::shared_ptr< void >
core,allocatorContext
core,int
core,allocatorFlags_
core,const MatAllocator *
core,currAllocator
core,uchar *
core,data
core,UMatData::MemoryFlag
core,flags
core,void *
core,handle
core,int
core,mapcount
core,uchar *
core,origdata
core,UMatData *
core,originalUMatData
core,const MatAllocator *
core,prevAllocator
core,int
core,refcount
core,size_t
core,size
core,int
core,urefcount
core,void *
core,userdata
core,Public Attributes
core,float
core,angle
core,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
core,Point2f
core,center
core,returns the rectangle mass center
core,Size2f
core,size
core,returns width and height of the rectangle
core,Public Attributes
core,Mat4
core,matrix
core,Public Attributes
core,int
core,flags
core,Hdr *
core,hdr
core,Protected Attributes
core,Impl *
core,p
core,Public Attributes
core,size_t
core,blockIdx
core,FileStorage::Impl *
core,fs
core,size_t
core,ofs
core,Public Attributes
core,_Tp
core,val [m *n]
core,matrix elements
core,Protected Attributes
core,Impl *const
core,p
core,Public Attributes
core,int *
core,p
core,Public Attributes
core,_Tp
core,x
core,x coordinate of the 3D point
core,_Tp
core,y
core,y coordinate of the 3D point
core,_Tp
core,z
core,z coordinate of the 3D point
core,Public Attributes
core,size_t
core,hashidx
core,const SparseMat *
core,m
core,uchar *
core,ptr
core,Public Attributes
core,Mat
core,u
core,Mat
core,vt
core,Mat
core,w
core,Additional Inherited Members
core,Public Attributes inherited from cv::Mat
core,MatAllocator *
core,allocator
core,custom allocator
core,int
core,cols
core,uchar *
core,data
core,pointer to the data
core,const uchar *
core,dataend
core,const uchar *
core,datalimit
core,const uchar *
core,datastart
core,helper fields used in locateROI and adjustROI
core,int
core,dims
core,"the matrix dimensionality, >= 2"
core,int
core,flags
core,int
core,rows
core,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
core,MatSize
core,size
core,MatStep
core,step
core,UMatData *
core,u
core,interaction with UMat
core,Protected Member Functions inherited from cv::Mat
core,"template<typename _Tp , typename Functor >"
core,void
core,forEach_impl (const Functor &operation)
dnn,Additional Inherited Members
dnn,Public Types inherited from cv::_OutputArray
dnn,enum
dnn,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
dnn,Public Types inherited from cv::_InputArray
dnn,enum
dnn,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
dnn,Protected Member Functions inherited from cv::_InputArray
dnn,void
dnn,"init (int _flags, const void *_obj)"
dnn,void
dnn,"init (int _flags, const void *_obj, Size _sz)"
dnn,Protected Attributes inherited from cv::_InputArray
dnn,int
dnn,flags
dnn,void *
dnn,obj
dnn,Size
dnn,sz
dnn,Public Attributes
dnn,std::vector< float >
dnn,scales
dnn,std::vector< int >
dnn,zeropoints
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,Allocator *
dnn,allocator
dnn,allocator
dnn,int
dnn,cols
dnn,uchar *
dnn,data
dnn,pointer to the data
dnn,const uchar *
dnn,dataend
dnn,uchar *
dnn,datastart
dnn,helper fields used in locateROI and adjustROI
dnn,int
dnn,flags
dnn,int *
dnn,refcount
dnn,int
dnn,rows
dnn,the number of rows and columns
dnn,size_t
dnn,step
dnn,a distance between successive rows in bytes; includes the gap if any
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int
dnn,axis
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Public Attributes
dnn,float
dnn,input_sc
dnn,int
dnn,input_zp
dnn,float
dnn,output_sc
dnn,int
dnn,output_zp
dnn,bool
dnn,per_channel
dnn,Public Attributes inherited from cv::dnn::InnerProductLayer
dnn,int
dnn,axis
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,Mat
dnn,a
dnn,double
dnn,alpha
dnn,Mat
dnn,b
dnn,double
dnn,beta
dnn,Mat
dnn,c
dnn,int
dnn,flags
dnn,const MatOp *
dnn,op
dnn,Scalar
dnn,s
dnn,Public Attributes
dnn,float
dnn,nmsThreshold
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,Impl *
dnn,p
dnn,Public Attributes
dnn,Size
dnn,poolKernel
dnn,Size
dnn,poolPad
dnn,Size
dnn,poolStride
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,float
dnn,gamma
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,"Public Types inherited from cv::Vec< _Tp, 4 >"
dnn,enum
dnn,typedef _Tp
dnn,value_type
dnn,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
dnn,enum
dnn,"typedef Matx< _Tp, shortdim, 1 >"
dnn,diag_type
dnn,"typedef Matx< _Tp, m, n >"
dnn,mat_type
dnn,typedef _Tp
dnn,value_type
dnn,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
dnn,_Tp
dnn,val [m *n]
dnn,matrix elements
dnn,Public Attributes
dnn,int
dnn,exclusive
dnn,int
dnn,reverse
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,uint64
dnn,state
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::MatConstIterator
dnn,size_t
dnn,elemSize
dnn,const Mat *
dnn,m
dnn,const uchar *
dnn,ptr
dnn,const uchar *
dnn,sliceEnd
dnn,const uchar *
dnn,sliceStart
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int
dnn,code
dnn,error code
dnn,String
dnn,err
dnn,error description
dnn,String
dnn,file
dnn,source file name where the error has occurred
dnn,String
dnn,func
dnn,function name. Available only when the compiler supports getting it
dnn,int
dnn,line
dnn,line number in the source file where the error has occurred
dnn,String
dnn,msg
dnn,the formatted error message
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,angle
dnn,int
dnn,class_id
dnn,object class (if the keypoints need to be clustered by an object they belong to)
dnn,int
dnn,octave
dnn,octave (pyramid layer) from which the keypoint has been extracted
dnn,Point2f
dnn,pt
dnn,coordinates of the keypoints
dnn,float
dnn,response
dnn,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
dnn,float
dnn,size
dnn,diameter of the meaningful keypoint neighborhood
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,_Tp
dnn,height
dnn,height of the rectangle
dnn,_Tp
dnn,width
dnn,width of the rectangle
dnn,_Tp
dnn,x
dnn,x coordinate of the top-left corner
dnn,_Tp
dnn,y
dnn,y coordinate of the top-left corner
dnn,Additional Inherited Members
dnn,Protected Member Functions inherited from cv::_InputArray
dnn,void
dnn,"init (int _flags, const void *_obj)"
dnn,void
dnn,"init (int _flags, const void *_obj, Size _sz)"
dnn,Protected Attributes inherited from cv::_InputArray
dnn,int
dnn,flags
dnn,void *
dnn,obj
dnn,Size
dnn,sz
dnn,Public Attributes
dnn,float
dnn,power
dnn,float
dnn,scale
dnn,float
dnn,shift
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,int
dnn,backendId
dnn,Backend identifier.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::SparseMatConstIterator
dnn,size_t
dnn,hashidx
dnn,const SparseMat *
dnn,m
dnn,uchar *
dnn,ptr
dnn,Static Public Attributes
dnn,static const NormTypes
dnn,normType = NORM_HAMMING
dnn,Public Attributes
dnn,MatAllocator *
dnn,allocator
dnn,custom allocator
dnn,int
dnn,cols
dnn,uchar *
dnn,data
dnn,pointer to the data
dnn,const uchar *
dnn,dataend
dnn,const uchar *
dnn,datalimit
dnn,const uchar *
dnn,datastart
dnn,helper fields used in locateROI and adjustROI
dnn,int
dnn,dims
dnn,"the matrix dimensionality, >= 2"
dnn,int
dnn,flags
dnn,int
dnn,rows
dnn,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
dnn,MatSize
dnn,size
dnn,MatStep
dnn,step
dnn,UMatData *
dnn,u
dnn,interaction with UMat
dnn,Public Attributes
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,Mat
dnn,eigenvalues
dnn,eigenvalues of the covariation matrix
dnn,Mat
dnn,eigenvectors
dnn,eigenvectors of the covariation matrix
dnn,Mat
dnn,mean
dnn,mean value subtracted before the projection and added after the back projection
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Protected Attributes
dnn,Ptr< Impl >
dnn,impl
dnn,Additional Inherited Members
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Protected Attributes
dnn,Impl *
dnn,p
dnn,Public Attributes
dnn,size_t
dnn,buf [2]
dnn,size_t *
dnn,p
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Protected Attributes
dnn,ushort
dnn,w
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,output_sc
dnn,int
dnn,output_zp
dnn,Public Attributes inherited from cv::dnn::ScaleLayer
dnn,int
dnn,axis
dnn,bool
dnn,hasBias
dnn,String
dnn,mode
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,bool
dnn,acrossChannels
dnn,float
dnn,eps
dnn,bool
dnn,normVariance
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,epsilon
dnn,bool
dnn,hasBias
dnn,bool
dnn,hasWeights
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,distance
dnn,int
dnn,imgIdx
dnn,train image index
dnn,int
dnn,queryIdx
dnn,query descriptor index
dnn,int
dnn,trainIdx
dnn,train descriptor index
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::MatConstIterator
dnn,size_t
dnn,elemSize
dnn,const Mat *
dnn,m
dnn,const uchar *
dnn,ptr
dnn,const uchar *
dnn,sliceEnd
dnn,const uchar *
dnn,sliceStart
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,std::vector< float >
dnn,scales
dnn,std::vector< int >
dnn,zeropoints
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::SparseMatConstIterator
dnn,size_t
dnn,hashidx
dnn,const SparseMat *
dnn,m
dnn,uchar *
dnn,ptr
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,bool
dnn,fusedActivation = false
dnn,bool
dnn,fusedAdd = false
dnn,bool
dnn,useWinograd = true
dnn,Public Attributes inherited from cv::dnn::BaseConvolutionLayer
dnn,std::vector< size_t >
dnn,adjust_pads
dnn,Size
dnn,adjustPad
dnn,Size
dnn,dilation
dnn,std::vector< size_t >
dnn,dilations
dnn,Size
dnn,kernel
dnn,std::vector< size_t >
dnn,kernel_size
dnn,int
dnn,numOutput
dnn,Size
dnn,pad
dnn,String
dnn,padMode
dnn,std::vector< size_t >
dnn,pads_begin
dnn,std::vector< size_t >
dnn,pads_end
dnn,Size
dnn,stride
dnn,std::vector< size_t >
dnn,strides
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,const Mat **
dnn,arrays
dnn,the iterated arrays
dnn,int
dnn,narrays
dnn,the number of arrays
dnn,size_t
dnn,nplanes
dnn,the number of hyper-planes that the iterator steps through
dnn,Mat *
dnn,planes
dnn,the current planes
dnn,uchar **
dnn,ptrs
dnn,data pointers
dnn,size_t
dnn,size
dnn,the size of each segment (in elements)
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,_Tp
dnn,height
dnn,the height
dnn,_Tp
dnn,width
dnn,the width
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Protected Attributes
dnn,MatIterator_< _Tp >
dnn,it
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
dnn,_Tp
dnn,val [m *n]
dnn,matrix elements
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,MatAllocator *
dnn,allocator
dnn,custom allocator
dnn,int
dnn,cols
dnn,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
dnn,int
dnn,dims
dnn,"the matrix dimensionality, >= 2"
dnn,int
dnn,flags
dnn,size_t
dnn,offset
dnn,offset of the submatrix (or 0)
dnn,int
dnn,rows
dnn,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
dnn,MatSize
dnn,size
dnn,dimensional size of the matrix; accessible in various formats
dnn,MatStep
dnn,step
dnn,number of bytes each matrix element/row/plane/dimension occupies
dnn,UMatData *
dnn,u
dnn,black-box container of UMat data
dnn,UMatUsageFlags
dnn,usageFlags
dnn,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::SparseMat
dnn,int
dnn,flags
dnn,Hdr *
dnn,hdr
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,size_t
dnn,elemSize
dnn,const Mat *
dnn,m
dnn,const uchar *
dnn,ptr
dnn,const uchar *
dnn,sliceEnd
dnn,const uchar *
dnn,sliceStart
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,bool
dnn,logSoftMax
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,float
dnn,beta
dnn,float
dnn,bias
dnn,bool
dnn,normBySize
dnn,int
dnn,size
dnn,int
dnn,type
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,input_sc
dnn,int
dnn,input_zp
dnn,float
dnn,output_sc
dnn,int
dnn,output_zp
dnn,Public Attributes inherited from cv::dnn::BatchNormLayer
dnn,float
dnn,epsilon
dnn,bool
dnn,hasBias
dnn,bool
dnn,hasWeights
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Attributes
dnn,_Tp
dnn,buf [(fixed_size > 0) ? fixed_size :1]
dnn,pre-allocated buffer. At least 1 element to confirm C++ standard requirements
dnn,_Tp *
dnn,ptr
dnn,"pointer to the real buffer, can point to buf if the buffer is small enough"
dnn,size_t
dnn,sz
dnn,size of the real buffer
dnn,Additional Inherited Members
dnn,Protected Member Functions inherited from cv::dnn::TextDetectionModel
dnn,TextDetectionModel ()
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::SparseMatConstIterator
dnn,size_t
dnn,hashidx
dnn,const SparseMat *
dnn,m
dnn,uchar *
dnn,ptr
dnn,Public Attributes
dnn,Scalar
dnn,borderValue
dnn,Value used in padding mode for padding.
dnn,DataLayout
dnn,datalayout
dnn,Order of output dimensions. Choose DNN_LAYOUT_NCHW or DNN_LAYOUT_NHWC.
dnn,int
dnn,ddepth
dnn,Depth of output blob. Choose CV_32F or CV_8U.
dnn,Scalar
dnn,mean
dnn,Scalar with mean values which are subtracted from channels.
dnn,ImagePaddingMode
dnn,paddingmode
dnn,Image padding mode.
dnn,Scalar
dnn,scalefactor
dnn,scalefactor multiplier for input image values.
dnn,Size
dnn,size
dnn,Spatial size for output image.
dnn,bool
dnn,swapRB
dnn,Flag which indicates that swap first and last channels.
dnn,Public Attributes
dnn,double
dnn,epsilon
dnn,the desired accuracy
dnn,int
dnn,maxCount
dnn,the maximum number of iterations/elements
dnn,int
dnn,type
dnn,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,scale
dnn,float
dnn,shift
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,int
dnn,end
dnn,int
dnn,start
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,std::string
dnn,elname
dnn,Ptr< Impl >
dnn,p
dnn,int
dnn,state
dnn,Public Attributes
dnn,int
dnn,axis
dnn,bool
dnn,padding
dnn,Add zero padding in case of concatenation of blobs with different spatial sizes.
dnn,int
dnn,paddingValue
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Public Attributes
dnn,_Tp
dnn,im
dnn,the real and the imaginary parts
dnn,_Tp
dnn,re
dnn,Additional Inherited Members
dnn,Protected Member Functions inherited from cv::dnn::TextDetectionModel
dnn,TextDetectionModel ()
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Public Attributes
dnn,MatShape
dnn,newShapeDesc
dnn,Range
dnn,newShapeRange
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Attributes
dnn,Ptr< Impl >
dnn,impl
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,_Tp
dnn,x
dnn,x coordinate of the point
dnn,_Tp
dnn,y
dnn,y coordinate of the point
dnn,Public Attributes
dnn,std::shared_ptr< void >
dnn,allocatorContext
dnn,int
dnn,allocatorFlags_
dnn,const MatAllocator *
dnn,currAllocator
dnn,uchar *
dnn,data
dnn,UMatData::MemoryFlag
dnn,flags
dnn,void *
dnn,handle
dnn,int
dnn,mapcount
dnn,uchar *
dnn,origdata
dnn,UMatData *
dnn,originalUMatData
dnn,const MatAllocator *
dnn,prevAllocator
dnn,int
dnn,refcount
dnn,size_t
dnn,size
dnn,int
dnn,urefcount
dnn,void *
dnn,userdata
dnn,Public Attributes
dnn,float
dnn,input_sc
dnn,int
dnn,input_zp
dnn,float
dnn,output_sc
dnn,int
dnn,output_zp
dnn,bool
dnn,per_channel
dnn,bool
dnn,useWinograd = false
dnn,Public Attributes inherited from cv::dnn::BaseConvolutionLayer
dnn,std::vector< size_t >
dnn,adjust_pads
dnn,Size
dnn,adjustPad
dnn,Size
dnn,dilation
dnn,std::vector< size_t >
dnn,dilations
dnn,Size
dnn,kernel
dnn,std::vector< size_t >
dnn,kernel_size
dnn,int
dnn,numOutput
dnn,Size
dnn,pad
dnn,String
dnn,padMode
dnn,std::vector< size_t >
dnn,pads_begin
dnn,std::vector< size_t >
dnn,pads_end
dnn,Size
dnn,stride
dnn,std::vector< size_t >
dnn,strides
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,angle
dnn,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
dnn,Point2f
dnn,center
dnn,returns the rectangle mass center
dnn,Size2f
dnn,size
dnn,returns width and height of the rectangle
dnn,Additional Inherited Members
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,bias
dnn,float
dnn,lambd
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,output_sc
dnn,int
dnn,output_zp
dnn,Public Attributes inherited from cv::dnn::SoftmaxLayer
dnn,bool
dnn,logSoftMax
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,float
dnn,beta
dnn,bool
dnn,trans_a
dnn,bool
dnn,trans_b
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Static Public Member Functions inherited from cv::Algorithm
dnn,template<typename _Tp >
dnn,static Ptr< _Tp >
dnn,"load (const String &filename, const String &objname=String())"
dnn,Loads algorithm from the file.
dnn,template<typename _Tp >
dnn,static Ptr< _Tp >
dnn,"loadFromString (const String &strModel, const String &objname=String())"
dnn,Loads algorithm from a String.
dnn,template<typename _Tp >
dnn,static Ptr< _Tp >
dnn,read (const FileNode &fn)
dnn,Reads algorithm from the file node.
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,maxValue
dnn,float
dnn,minValue
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,bool
dnn,acrossSpatial
dnn,float
dnn,epsilon
dnn,float
dnn,pnorm
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::BaseConvolutionLayer
dnn,std::vector< size_t >
dnn,adjust_pads
dnn,Size
dnn,adjustPad
dnn,Size
dnn,dilation
dnn,std::vector< size_t >
dnn,dilations
dnn,Size
dnn,kernel
dnn,std::vector< size_t >
dnn,kernel_size
dnn,int
dnn,numOutput
dnn,Size
dnn,pad
dnn,String
dnn,padMode
dnn,std::vector< size_t >
dnn,pads_begin
dnn,std::vector< size_t >
dnn,pads_end
dnn,Size
dnn,stride
dnn,std::vector< size_t >
dnn,strides
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,epsilon
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int
dnn,flags
dnn,Hdr *
dnn,hdr
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,float
dnn,beta
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,int
dnn,axis
dnn,float
dnn,epsilon
dnn,bool
dnn,hasBias
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,int
dnn,axis
dnn,bool
dnn,hasBias
dnn,String
dnn,mode
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,negativeSlope
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,int
dnn,outputsCount
dnn,Number of copies that will be produced (is ignored when negative).
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int
dnn,group
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int
dnn,axis
dnn,int
dnn,num_split
dnn,std::vector< std::vector< Range > >
dnn,sliceRanges
dnn,Vector of slice ranges.
dnn,std::vector< std::vector< int > >
dnn,sliceSteps
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,bool
dnn,avePoolPaddedArea
dnn,bool
dnn,ceilMode
dnn,bool
dnn,computeMaxIdx
dnn,bool
dnn,globalPooling
dnn,Flag is true if at least one of the axes is global pooled.
dnn,std::vector< bool >
dnn,isGlobalPooling
dnn,std::vector< size_t >
dnn,kernel_size
dnn,String
dnn,padMode
dnn,std::vector< size_t >
dnn,pads_begin
dnn,std::vector< size_t >
dnn,pads_end
dnn,Size
dnn,pooledSize
dnn,int
dnn,psRoiOutChannels
dnn,float
dnn,spatialScale
dnn,std::vector< size_t >
dnn,strides
dnn,int
dnn,type
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,float
dnn,base
dnn,float
dnn,scale
dnn,float
dnn,shift
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,size_t
dnn,blockIdx
dnn,FileStorage::Impl *
dnn,fs
dnn,size_t
dnn,ofs
dnn,Public Attributes
dnn,_Tp
dnn,val [m *n]
dnn,matrix elements
dnn,Additional Inherited Members
dnn,Protected Attributes inherited from cv::dnn::Model
dnn,Ptr< Impl >
dnn,impl
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int *
dnn,p
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,_Tp
dnn,x
dnn,x coordinate of the 3D point
dnn,_Tp
dnn,y
dnn,y coordinate of the 3D point
dnn,_Tp
dnn,z
dnn,z coordinate of the 3D point
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,int
dnn,backendId
dnn,Backend identifier.
dnn,int
dnn,targetId
dnn,Target identifier.
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::ActivationLayer
dnn,virtual void
dnn,"forwardSlice (const float *src, float *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int *src, const int *lut, int *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,virtual void
dnn,"forwardSlice (const int8_t *src, const int8_t *lut, int8_t *dst, int len, size_t outPlaneSize, int cn0, int cn1) const"
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Public Attributes
dnn,float
dnn,alpha
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,size_t
dnn,hashidx
dnn,const SparseMat *
dnn,m
dnn,uchar *
dnn,ptr
dnn,Public Attributes
dnn,float
dnn,input_sc
dnn,int
dnn,input_zp
dnn,float
dnn,output_sc
dnn,int
dnn,output_zp
dnn,Public Attributes inherited from cv::dnn::PoolingLayer
dnn,bool
dnn,avePoolPaddedArea
dnn,bool
dnn,ceilMode
dnn,bool
dnn,computeMaxIdx
dnn,bool
dnn,globalPooling
dnn,Flag is true if at least one of the axes is global pooled.
dnn,std::vector< bool >
dnn,isGlobalPooling
dnn,std::vector< size_t >
dnn,kernel_size
dnn,String
dnn,padMode
dnn,std::vector< size_t >
dnn,pads_begin
dnn,std::vector< size_t >
dnn,pads_end
dnn,Size
dnn,pooledSize
dnn,int
dnn,psRoiOutChannels
dnn,float
dnn,spatialScale
dnn,std::vector< size_t >
dnn,strides
dnn,int
dnn,type
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Public Attributes
dnn,Mat
dnn,u
dnn,Mat
dnn,vt
dnn,Mat
dnn,w
dnn,Additional Inherited Members
dnn,Public Member Functions inherited from cv::dnn::Layer
dnn,Layer ()
dnn,Layer (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual
dnn,~Layer ()
dnn,virtual void
dnn,"applyHalideScheduler (Ptr< BackendNode > &node, const std::vector< Mat * > &inputs, const std::vector< Mat > &outputs, int targetId) const"
dnn,Automatic Halide scheduling based on layer hyper-parameters.
dnn,virtual void
dnn,"finalize (const std::vector< Mat * > &input, std::vector< Mat > &output)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,std::vector< Mat >
dnn,finalize (const std::vector< Mat > &inputs)
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,void
dnn,"finalize (const std::vector< Mat > &inputs, std::vector< Mat > &outputs)"
dnn,"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts."
dnn,virtual void
dnn,"finalize (InputArrayOfArrays inputs, OutputArrayOfArrays outputs)"
dnn,"Computes and sets internal parameters according to inputs, outputs and blobs."
dnn,virtual void
dnn,"forward (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual void
dnn,"forward (std::vector< Mat * > &input, std::vector< Mat > &output, std::vector< Mat > &internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,void
dnn,"forward_fallback (InputArrayOfArrays inputs, OutputArrayOfArrays outputs, OutputArrayOfArrays internals)"
dnn,"Given the input blobs, computes the output blobs."
dnn,virtual int64
dnn,"getFLOPS (const std::vector< MatShape > &inputs, const std::vector< MatShape > &outputs) const"
dnn,virtual bool
dnn,"getMemoryShapes (const std::vector< MatShape > &inputs, const int requiredOutputs, std::vector< MatShape > &outputs, std::vector< MatShape > &internals) const"
dnn,virtual void
dnn,"getScaleShift (Mat &scale, Mat &shift) const"
dnn,Returns parameters of layers with channel-wise multiplication and addition.
dnn,virtual void
dnn,"getScaleZeropoint (float &scale, int &zeropoint) const"
dnn,Returns scale and zeropoint of layers.
dnn,virtual Ptr< BackendNode >
dnn,"initCann (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,Returns a CANN backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initCUDA (void *context, const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,Returns a CUDA backend node.
dnn,virtual Ptr< BackendNode >
dnn,initHalide (const std::vector< Ptr< BackendWrapper > > &inputs)
dnn,Returns Halide backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initNgraph (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual Ptr< BackendNode >
dnn,"initTimVX (void *timVxInfo, const std::vector< Ptr< BackendWrapper > > &inputsWrapper, const std::vector< Ptr< BackendWrapper > > &outputsWrapper, bool isLast)"
dnn,Returns a TimVX backend node.
dnn,virtual Ptr< BackendNode >
dnn,"initVkCom (const std::vector< Ptr< BackendWrapper > > &inputs, std::vector< Ptr< BackendWrapper > > &outputs)"
dnn,virtual Ptr< BackendNode >
dnn,"initWebnn (const std::vector< Ptr< BackendWrapper > > &inputs, const std::vector< Ptr< BackendNode > > &nodes)"
dnn,virtual int
dnn,inputNameToIndex (String inputName)
dnn,Returns index of input blob into the input array.
dnn,virtual int
dnn,outputNameToIndex (const String &outputName)
dnn,Returns index of output blob in output array.
dnn,void
dnn,"run (const std::vector< Mat > &inputs, std::vector< Mat > &outputs, std::vector< Mat > &internals)"
dnn,Allocates layer and computes output.
dnn,virtual bool
dnn,setActivation (const Ptr< ActivationLayer > &layer)
dnn,"Tries to attach to the layer the subsequent activation layer, i.e. do the layer fusion in a partial case."
dnn,void
dnn,setParamsFrom (const LayerParams &params)
dnn,"Initializes only name, type and blobs fields."
dnn,virtual bool
dnn,supportBackend (int backendId)
dnn,Ask layer if it support specific backend for doing computations.
dnn,virtual Ptr< BackendNode >
dnn,tryAttach (const Ptr< BackendNode > &node)
dnn,Implement layers fusing.
dnn,virtual bool
dnn,tryFuse (Ptr< Layer > &top)
dnn,Try to fuse current layer with a next one.
dnn,virtual bool
dnn,"tryQuantize (const std::vector< std::vector< float > > &scales, const std::vector< std::vector< int > > &zeropoints, LayerParams &params)"
dnn,Tries to quantize the given layer and compute the quantization parameters required for fixed point implementation.
dnn,virtual void
dnn,unsetAttached ()
dnn,"""Detaches"" all the layers, attached to particular layer."
dnn,virtual bool
dnn,updateMemoryShapes (const std::vector< MatShape > &inputs)
dnn,Public Member Functions inherited from cv::Algorithm
dnn,Algorithm ()
dnn,virtual
dnn,~Algorithm ()
dnn,virtual void
dnn,clear ()
dnn,Clears the algorithm state.
dnn,virtual bool
dnn,empty () const
dnn,Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read.
dnn,virtual String
dnn,getDefaultName () const
dnn,virtual void
dnn,read (const FileNode &fn)
dnn,Reads algorithm parameters from a file storage.
dnn,virtual void
dnn,save (const String &filename) const
dnn,void
dnn,"write (const Ptr< FileStorage > &fs, const String &name=String()) const"
dnn,virtual void
dnn,write (FileStorage &fs) const
dnn,Stores algorithm parameters in a file storage.
dnn,void
dnn,"write (FileStorage &fs, const String &name) const"
dnn,Public Attributes inherited from cv::dnn::Layer
dnn,std::vector< Mat >
dnn,blobs
dnn,List of learned parameters must be stored here to allow read them by using Net::getParam().
dnn,String
dnn,name
dnn,"Name of the layer instance, can be used for logging or other internal purposes."
dnn,int
dnn,preferableTarget
dnn,prefer target for layer forwarding
dnn,String
dnn,type
dnn,Type name which was used for creating layer by layer factory.
dnn,Protected Member Functions inherited from cv::Algorithm
dnn,void
dnn,writeFormat (FileStorage &fs) const
dnn,Additional Inherited Members
dnn,Public Attributes inherited from cv::Mat
dnn,MatAllocator *
dnn,allocator
dnn,custom allocator
dnn,int
dnn,cols
dnn,uchar *
dnn,data
dnn,pointer to the data
dnn,const uchar *
dnn,dataend
dnn,const uchar *
dnn,datalimit
dnn,const uchar *
dnn,datastart
dnn,helper fields used in locateROI and adjustROI
dnn,int
dnn,dims
dnn,"the matrix dimensionality, >= 2"
dnn,int
dnn,flags
dnn,int
dnn,rows
dnn,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
dnn,MatSize
dnn,size
dnn,MatStep
dnn,step
dnn,UMatData *
dnn,u
dnn,interaction with UMat
dnn,Protected Member Functions inherited from cv::Mat
dnn,"template<typename _Tp , typename Functor >"
dnn,void
dnn,forEach_impl (const Functor &operation)
features2d,Additional Inherited Members
features2d,"Public Types inherited from cv::Vec< _Tp, 4 >"
features2d,enum
features2d,typedef _Tp
features2d,value_type
features2d,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
features2d,enum
features2d,"typedef Matx< _Tp, shortdim, 1 >"
features2d,diag_type
features2d,"typedef Matx< _Tp, m, n >"
features2d,mat_type
features2d,typedef _Tp
features2d,value_type
features2d,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
features2d,_Tp
features2d,val [m *n]
features2d,matrix elements
features2d,Public Attributes
features2d,float
features2d,angle
features2d,int
features2d,class_id
features2d,object class (if the keypoints need to be clustered by an object they belong to)
features2d,int
features2d,octave
features2d,octave (pyramid layer) from which the keypoint has been extracted
features2d,Point2f
features2d,pt
features2d,coordinates of the keypoints
features2d,float
features2d,response
features2d,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
features2d,float
features2d,size
features2d,diameter of the meaningful keypoint neighborhood
features2d,Protected Attributes
features2d,Ptr< DescriptorExtractor >
features2d,dextractor
features2d,Ptr< DescriptorMatcher >
features2d,dmatcher
features2d,Mat
features2d,vocabulary
features2d,Public Attributes
features2d,MatAllocator *
features2d,allocator
features2d,custom allocator
features2d,int
features2d,cols
features2d,uchar *
features2d,data
features2d,pointer to the data
features2d,const uchar *
features2d,dataend
features2d,const uchar *
features2d,datalimit
features2d,const uchar *
features2d,datastart
features2d,helper fields used in locateROI and adjustROI
features2d,int
features2d,dims
features2d,"the matrix dimensionality, >= 2"
features2d,int
features2d,flags
features2d,int
features2d,rows
features2d,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
features2d,MatSize
features2d,size
features2d,MatStep
features2d,step
features2d,UMatData *
features2d,u
features2d,interaction with UMat
features2d,Protected Attributes
features2d,int
features2d,attempts
features2d,int
features2d,clusterCount
features2d,int
features2d,flags
features2d,TermCriteria
features2d,termcrit
features2d,Protected Attributes inherited from cv::BOWTrainer
features2d,std::vector< Mat >
features2d,descriptors
features2d,int
features2d,size
features2d,Static Public Attributes
features2d,static const NormTypes
features2d,normType = NORM_L1
features2d,Public Attributes
features2d,float
features2d,distance
features2d,int
features2d,imgIdx
features2d,train image index
features2d,int
features2d,queryIdx
features2d,query descriptor index
features2d,int
features2d,trainIdx
features2d,train descriptor index
features2d,Protected Attributes
features2d,std::vector< Mat >
features2d,descriptors
features2d,int
features2d,size
features2d,Static Public Attributes
features2d,static const NormTypes
features2d,normType = NORM_L2SQR
features2d,Static Public Attributes
features2d,static const int
features2d,kBytes = 32
features2d,Static Public Attributes
features2d,static const NormTypes
features2d,normType = NORM_L2
flann,Public Attributes
flann,Allocator *
flann,allocator
flann,allocator
flann,int
flann,cols
flann,uchar *
flann,data
flann,pointer to the data
flann,const uchar *
flann,dataend
flann,uchar *
flann,datastart
flann,helper fields used in locateROI and adjustROI
flann,int
flann,flags
flann,int *
flann,refcount
flann,int
flann,rows
flann,the number of rows and columns
flann,size_t
flann,step
flann,a distance between successive rows in bytes; includes the gap if any
flann,Public Attributes
flann,Mat
flann,a
flann,double
flann,alpha
flann,Mat
flann,b
flann,double
flann,beta
flann,Mat
flann,c
flann,int
flann,flags
flann,const MatOp *
flann,op
flann,Scalar
flann,s
flann,Additional Inherited Members
flann,"Public Types inherited from cv::Vec< _Tp, 4 >"
flann,enum
flann,typedef _Tp
flann,value_type
flann,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
flann,enum
flann,"typedef Matx< _Tp, shortdim, 1 >"
flann,diag_type
flann,"typedef Matx< _Tp, m, n >"
flann,mat_type
flann,typedef _Tp
flann,value_type
flann,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
flann,_Tp
flann,val [m *n]
flann,matrix elements
flann,Additional Inherited Members
flann,Public Attributes inherited from cv::MatConstIterator
flann,size_t
flann,elemSize
flann,const Mat *
flann,m
flann,const uchar *
flann,ptr
flann,const uchar *
flann,sliceEnd
flann,const uchar *
flann,sliceStart
flann,Static Public Attributes
flann,static const NormTypes
flann,normType = NORM_HAMMING
flann,Public Attributes
flann,MatAllocator *
flann,allocator
flann,custom allocator
flann,int
flann,cols
flann,uchar *
flann,data
flann,pointer to the data
flann,const uchar *
flann,dataend
flann,const uchar *
flann,datalimit
flann,const uchar *
flann,datastart
flann,helper fields used in locateROI and adjustROI
flann,int
flann,dims
flann,"the matrix dimensionality, >= 2"
flann,int
flann,flags
flann,int
flann,rows
flann,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
flann,MatSize
flann,size
flann,MatStep
flann,step
flann,UMatData *
flann,u
flann,interaction with UMat
flann,Public Attributes
flann,size_t
flann,buf [2]
flann,size_t *
flann,p
flann,Additional Inherited Members
flann,Public Attributes inherited from cv::MatConstIterator
flann,size_t
flann,elemSize
flann,const Mat *
flann,m
flann,const uchar *
flann,ptr
flann,const uchar *
flann,sliceEnd
flann,const uchar *
flann,sliceStart
flann,Public Attributes
flann,_Tp
flann,height
flann,the height
flann,_Tp
flann,width
flann,the width
flann,Protected Attributes
flann,MatIterator_< _Tp >
flann,it
flann,Additional Inherited Members
flann,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
flann,_Tp
flann,val [m *n]
flann,matrix elements
flann,Public Attributes
flann,MatAllocator *
flann,allocator
flann,custom allocator
flann,int
flann,cols
flann,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
flann,int
flann,dims
flann,"the matrix dimensionality, >= 2"
flann,int
flann,flags
flann,size_t
flann,offset
flann,offset of the submatrix (or 0)
flann,int
flann,rows
flann,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
flann,MatSize
flann,size
flann,dimensional size of the matrix; accessible in various formats
flann,MatStep
flann,step
flann,number of bytes each matrix element/row/plane/dimension occupies
flann,UMatData *
flann,u
flann,black-box container of UMat data
flann,UMatUsageFlags
flann,usageFlags
flann,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
flann,Public Attributes
flann,int
flann,end
flann,int
flann,start
flann,Public Attributes
flann,_Tp
flann,x
flann,x coordinate of the point
flann,_Tp
flann,y
flann,y coordinate of the point
flann,Public Attributes
flann,std::shared_ptr< void >
flann,allocatorContext
flann,int
flann,allocatorFlags_
flann,const MatAllocator *
flann,currAllocator
flann,uchar *
flann,data
flann,UMatData::MemoryFlag
flann,flags
flann,void *
flann,handle
flann,int
flann,mapcount
flann,uchar *
flann,origdata
flann,UMatData *
flann,originalUMatData
flann,const MatAllocator *
flann,prevAllocator
flann,int
flann,refcount
flann,size_t
flann,size
flann,int
flann,urefcount
flann,void *
flann,userdata
flann,Public Attributes
flann,int
flann,flags
flann,Hdr *
flann,hdr
flann,Public Attributes
flann,_Tp
flann,val [m *n]
flann,matrix elements
flann,Public Attributes
flann,int *
flann,p
flann,Public Attributes
flann,_Tp
flann,x
flann,x coordinate of the 3D point
flann,_Tp
flann,y
flann,y coordinate of the 3D point
flann,_Tp
flann,z
flann,z coordinate of the 3D point
flann,Additional Inherited Members
flann,Public Attributes inherited from cv::Mat
flann,MatAllocator *
flann,allocator
flann,custom allocator
flann,int
flann,cols
flann,uchar *
flann,data
flann,pointer to the data
flann,const uchar *
flann,dataend
flann,const uchar *
flann,datalimit
flann,const uchar *
flann,datastart
flann,helper fields used in locateROI and adjustROI
flann,int
flann,dims
flann,"the matrix dimensionality, >= 2"
flann,int
flann,flags
flann,int
flann,rows
flann,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
flann,MatSize
flann,size
flann,MatStep
flann,step
flann,UMatData *
flann,u
flann,interaction with UMat
flann,Protected Member Functions inherited from cv::Mat
flann,"template<typename _Tp , typename Functor >"
flann,void
flann,forEach_impl (const Functor &operation)
gapi,Public Attributes
gapi,GAPI_PROP_RW int
gapi,cellSz
gapi,"Cell size (same for X, Y)"
gapi,GAPI_PROP_RW int
gapi,decim
gapi,Decimation (0 stands for no decimation)
gapi,GAPI_PROP_RW cv::Rect
gapi,mos
gapi,Coordinates of the mosaic.
gapi,Public Attributes
gapi,Allocator *
gapi,allocator
gapi,allocator
gapi,int
gapi,cols
gapi,uchar *
gapi,data
gapi,pointer to the data
gapi,const uchar *
gapi,dataend
gapi,uchar *
gapi,datastart
gapi,helper fields used in locateROI and adjustROI
gapi,int
gapi,flags
gapi,int *
gapi,refcount
gapi,int
gapi,rows
gapi,the number of rows and columns
gapi,size_t
gapi,step
gapi,a distance between successive rows in bytes; includes the gap if any
gapi,Public Attributes
gapi,GAPI_PROP int
gapi,chan
gapi,GAPI_PROP int
gapi,depth
gapi,GAPI_PROP std::vector< int >
gapi,dims
gapi,GAPI_PROP bool
gapi,planar
gapi,GAPI_PROP cv::Size
gapi,size
gapi,Public Attributes
gapi,Mat
gapi,a
gapi,double
gapi,alpha
gapi,Mat
gapi,b
gapi,double
gapi,beta
gapi,Mat
gapi,c
gapi,int
gapi,flags
gapi,const MatOp *
gapi,op
gapi,Scalar
gapi,s
gapi,Additional Inherited Members
gapi,"Public Types inherited from cv::Vec< _Tp, 4 >"
gapi,enum
gapi,typedef _Tp
gapi,value_type
gapi,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
gapi,enum
gapi,"typedef Matx< _Tp, shortdim, 1 >"
gapi,diag_type
gapi,"typedef Matx< _Tp, m, n >"
gapi,mat_type
gapi,typedef _Tp
gapi,value_type
gapi,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
gapi,_Tp
gapi,val [m *n]
gapi,matrix elements
gapi,Public Attributes
gapi,uint64
gapi,state
gapi,Additional Inherited Members
gapi,Public Attributes inherited from cv::MatConstIterator
gapi,size_t
gapi,elemSize
gapi,const Mat *
gapi,m
gapi,const uchar *
gapi,ptr
gapi,const uchar *
gapi,sliceEnd
gapi,const uchar *
gapi,sliceStart
gapi,Public Attributes
gapi,int
gapi,code
gapi,error code
gapi,String
gapi,err
gapi,error description
gapi,String
gapi,file
gapi,source file name where the error has occurred
gapi,String
gapi,func
gapi,function name. Available only when the compiler supports getting it
gapi,int
gapi,line
gapi,line number in the source file where the error has occurred
gapi,String
gapi,msg
gapi,the formatted error message
gapi,Static Public Attributes
gapi,static const NormTypes
gapi,normType = NORM_HAMMING
gapi,Public Attributes
gapi,MatAllocator *
gapi,allocator
gapi,custom allocator
gapi,int
gapi,cols
gapi,uchar *
gapi,data
gapi,pointer to the data
gapi,const uchar *
gapi,dataend
gapi,const uchar *
gapi,datalimit
gapi,const uchar *
gapi,datastart
gapi,helper fields used in locateROI and adjustROI
gapi,int
gapi,dims
gapi,"the matrix dimensionality, >= 2"
gapi,int
gapi,flags
gapi,int
gapi,rows
gapi,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
gapi,MatSize
gapi,size
gapi,MatStep
gapi,step
gapi,UMatData *
gapi,u
gapi,interaction with UMat
gapi,Public Attributes
gapi,size_t
gapi,buf [2]
gapi,size_t *
gapi,p
gapi,Protected Attributes
gapi,ushort
gapi,w
gapi,Public Attributes
gapi,bool
gapi,detectShadows = true
gapi,"If true, the algorithm will detect shadows and mark them."
gapi,int
gapi,history = 500
gapi,Length of the history.
gapi,double
gapi,learningRate = -1
gapi,BackgroundSubtractorType
gapi,operation = TYPE_BS_MOG2
gapi,Type of the Background Subtractor operation.
gapi,double
gapi,threshold = 16
gapi,Static Public Attributes
gapi,static const NormTypes
gapi,normType = NORM_L1
gapi,Additional Inherited Members
gapi,Public Attributes inherited from cv::MatConstIterator
gapi,size_t
gapi,elemSize
gapi,const Mat *
gapi,m
gapi,const uchar *
gapi,ptr
gapi,const uchar *
gapi,sliceEnd
gapi,const uchar *
gapi,sliceStart
gapi,Public Attributes
gapi,GAPI_PROP_RW cv::Scalar
gapi,color
gapi,The rectangle color or brightness (grayscale image)
gapi,GAPI_PROP_RW int
gapi,lt
gapi,The type of the line. See LineTypes.
gapi,GAPI_PROP_RW cv::Rect
gapi,rect
gapi,Coordinates of the rectangle.
gapi,GAPI_PROP_RW int
gapi,shift
gapi,The number of fractional bits in the point coordinates.
gapi,GAPI_PROP_RW int
gapi,thick
gapi,"The thickness of lines that make up the rectangle. Negative values, like FILLED, mean that the function has to draw a filled rectangle."
gapi,Public Attributes
gapi,_Tp
gapi,height
gapi,the height
gapi,_Tp
gapi,width
gapi,the width
gapi,Protected Attributes
gapi,MatIterator_< _Tp >
gapi,it
gapi,Additional Inherited Members
gapi,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
gapi,_Tp
gapi,val [m *n]
gapi,matrix elements
gapi,Public Attributes
gapi,MatAllocator *
gapi,allocator
gapi,custom allocator
gapi,int
gapi,cols
gapi,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
gapi,int
gapi,dims
gapi,"the matrix dimensionality, >= 2"
gapi,int
gapi,flags
gapi,size_t
gapi,offset
gapi,offset of the submatrix (or 0)
gapi,int
gapi,rows
gapi,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
gapi,MatSize
gapi,size
gapi,dimensional size of the matrix; accessible in various formats
gapi,MatStep
gapi,step
gapi,number of bytes each matrix element/row/plane/dimension occupies
gapi,UMatData *
gapi,u
gapi,black-box container of UMat data
gapi,UMatUsageFlags
gapi,usageFlags
gapi,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
gapi,Protected Attributes
gapi,_Tp
gapi,buf [(fixed_size > 0) ? fixed_size :1]
gapi,pre-allocated buffer. At least 1 element to confirm C++ standard requirements
gapi,_Tp *
gapi,ptr
gapi,"pointer to the real buffer, can point to buf if the buffer is small enough"
gapi,size_t
gapi,sz
gapi,size of the real buffer
gapi,Protected Attributes
gapi,Ptr< CvCapture >
gapi,cap
gapi,Ptr< IVideoCapture >
gapi,icap
gapi,bool
gapi,throwOnFail
gapi,Public Attributes
gapi,double
gapi,epsilon
gapi,the desired accuracy
gapi,int
gapi,maxCount
gapi,the maximum number of iterations/elements
gapi,int
gapi,type
gapi,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
gapi,Public Attributes
gapi,int
gapi,end
gapi,int
gapi,start
gapi,Public Attributes
gapi,_Tp
gapi,x
gapi,x coordinate of the point
gapi,_Tp
gapi,y
gapi,y coordinate of the point
gapi,Public Attributes
gapi,std::shared_ptr< void >
gapi,allocatorContext
gapi,int
gapi,allocatorFlags_
gapi,const MatAllocator *
gapi,currAllocator
gapi,uchar *
gapi,data
gapi,UMatData::MemoryFlag
gapi,flags
gapi,void *
gapi,handle
gapi,int
gapi,mapcount
gapi,uchar *
gapi,origdata
gapi,UMatData *
gapi,originalUMatData
gapi,const MatAllocator *
gapi,prevAllocator
gapi,int
gapi,refcount
gapi,size_t
gapi,size
gapi,int
gapi,urefcount
gapi,void *
gapi,userdata
gapi,Public Attributes
gapi,float
gapi,angle
gapi,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
gapi,Point2f
gapi,center
gapi,returns the rectangle mass center
gapi,Size2f
gapi,size
gapi,returns width and height of the rectangle
gapi,Static Public Attributes
gapi,static const NormTypes
gapi,normType = NORM_L2
gapi,Public Attributes
gapi,Mat
gapi,controlMatrix
gapi,control matrix (B) (not used if there is no control)
gapi,Mat
gapi,errorCovPost
gapi,posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)
gapi,Mat
gapi,errorCovPre
gapi,priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*/
gapi,Mat
gapi,gain
gapi,Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)
gapi,Mat
gapi,measurementMatrix
gapi,measurement matrix (H)
gapi,Mat
gapi,measurementNoiseCov
gapi,measurement noise covariance matrix (R)
gapi,Mat
gapi,processNoiseCov
gapi,process noise covariance matrix (Q)
gapi,Mat
gapi,statePost
gapi,corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))
gapi,Mat
gapi,statePre
gapi,predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)
gapi,Mat
gapi,temp1
gapi,Mat
gapi,temp2
gapi,Mat
gapi,temp3
gapi,Mat
gapi,temp4
gapi,Mat
gapi,temp5
gapi,Mat
gapi,transitionMatrix
gapi,state transition matrix (A)
gapi,Public Attributes
gapi,int
gapi,flags
gapi,Hdr *
gapi,hdr
gapi,Public Attributes
gapi,_Tp
gapi,val [m *n]
gapi,matrix elements
gapi,Public Attributes
gapi,int *
gapi,p
gapi,Public Attributes
gapi,_Tp
gapi,x
gapi,x coordinate of the 3D point
gapi,_Tp
gapi,y
gapi,y coordinate of the 3D point
gapi,_Tp
gapi,z
gapi,z coordinate of the 3D point
gapi,Additional Inherited Members
gapi,Public Attributes inherited from cv::Mat
gapi,MatAllocator *
gapi,allocator
gapi,custom allocator
gapi,int
gapi,cols
gapi,uchar *
gapi,data
gapi,pointer to the data
gapi,const uchar *
gapi,dataend
gapi,const uchar *
gapi,datalimit
gapi,const uchar *
gapi,datastart
gapi,helper fields used in locateROI and adjustROI
gapi,int
gapi,dims
gapi,"the matrix dimensionality, >= 2"
gapi,int
gapi,flags
gapi,int
gapi,rows
gapi,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
gapi,MatSize
gapi,size
gapi,MatStep
gapi,step
gapi,UMatData *
gapi,u
gapi,interaction with UMat
gapi,Protected Member Functions inherited from cv::Mat
gapi,"template<typename _Tp , typename Functor >"
gapi,void
gapi,forEach_impl (const Functor &operation)
highgui,Public Attributes
highgui,AllocType
highgui,alloc_type
highgui,int
highgui,cols
highgui,uchar *
highgui,data
highgui,const uchar *
highgui,dataend
highgui,uchar *
highgui,datastart
highgui,int
highgui,flags
highgui,int *
highgui,refcount
highgui,int
highgui,rows
highgui,size_t
highgui,step
highgui,Additional Inherited Members
highgui,Public Types inherited from cv::_OutputArray
highgui,enum
highgui,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
highgui,Public Types inherited from cv::_InputArray
highgui,enum
highgui,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
highgui,Protected Member Functions inherited from cv::_InputArray
highgui,void
highgui,"init (int _flags, const void *_obj)"
highgui,void
highgui,"init (int _flags, const void *_obj, Size _sz)"
highgui,Protected Attributes inherited from cv::_InputArray
highgui,int
highgui,flags
highgui,void *
highgui,obj
highgui,Size
highgui,sz
highgui,Public Attributes
highgui,Allocator *
highgui,allocator
highgui,allocator
highgui,int
highgui,cols
highgui,uchar *
highgui,data
highgui,pointer to the data
highgui,const uchar *
highgui,dataend
highgui,uchar *
highgui,datastart
highgui,helper fields used in locateROI and adjustROI
highgui,int
highgui,flags
highgui,int *
highgui,refcount
highgui,int
highgui,rows
highgui,the number of rows and columns
highgui,size_t
highgui,step
highgui,a distance between successive rows in bytes; includes the gap if any
highgui,Public Attributes
highgui,Mat
highgui,a
highgui,double
highgui,alpha
highgui,Mat
highgui,b
highgui,double
highgui,beta
highgui,Mat
highgui,c
highgui,int
highgui,flags
highgui,const MatOp *
highgui,op
highgui,Scalar
highgui,s
highgui,Public Attributes
highgui,Impl *
highgui,p
highgui,Additional Inherited Members
highgui,"Public Types inherited from cv::Vec< _Tp, 4 >"
highgui,enum
highgui,typedef _Tp
highgui,value_type
highgui,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
highgui,enum
highgui,"typedef Matx< _Tp, shortdim, 1 >"
highgui,diag_type
highgui,"typedef Matx< _Tp, m, n >"
highgui,mat_type
highgui,typedef _Tp
highgui,value_type
highgui,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
highgui,_Tp
highgui,val [m *n]
highgui,matrix elements
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::MatConstIterator
highgui,size_t
highgui,elemSize
highgui,const Mat *
highgui,m
highgui,const uchar *
highgui,ptr
highgui,const uchar *
highgui,sliceEnd
highgui,const uchar *
highgui,sliceStart
highgui,Public Attributes
highgui,float
highgui,angle
highgui,int
highgui,class_id
highgui,object class (if the keypoints need to be clustered by an object they belong to)
highgui,int
highgui,octave
highgui,octave (pyramid layer) from which the keypoint has been extracted
highgui,Point2f
highgui,pt
highgui,coordinates of the keypoints
highgui,float
highgui,response
highgui,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
highgui,float
highgui,size
highgui,diameter of the meaningful keypoint neighborhood
highgui,Public Attributes
highgui,_Tp
highgui,height
highgui,height of the rectangle
highgui,_Tp
highgui,width
highgui,width of the rectangle
highgui,_Tp
highgui,x
highgui,x coordinate of the top-left corner
highgui,_Tp
highgui,y
highgui,y coordinate of the top-left corner
highgui,Additional Inherited Members
highgui,Protected Member Functions inherited from cv::_InputArray
highgui,void
highgui,"init (int _flags, const void *_obj)"
highgui,void
highgui,"init (int _flags, const void *_obj, Size _sz)"
highgui,Protected Attributes inherited from cv::_InputArray
highgui,int
highgui,flags
highgui,void *
highgui,obj
highgui,Size
highgui,sz
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::SparseMatConstIterator
highgui,size_t
highgui,hashidx
highgui,const SparseMat *
highgui,m
highgui,uchar *
highgui,ptr
highgui,Public Attributes
highgui,MatAllocator *
highgui,allocator
highgui,custom allocator
highgui,int
highgui,cols
highgui,uchar *
highgui,data
highgui,pointer to the data
highgui,const uchar *
highgui,dataend
highgui,const uchar *
highgui,datalimit
highgui,const uchar *
highgui,datastart
highgui,helper fields used in locateROI and adjustROI
highgui,int
highgui,dims
highgui,"the matrix dimensionality, >= 2"
highgui,int
highgui,flags
highgui,int
highgui,rows
highgui,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
highgui,MatSize
highgui,size
highgui,MatStep
highgui,step
highgui,UMatData *
highgui,u
highgui,interaction with UMat
highgui,Public Attributes
highgui,size_t
highgui,buf [2]
highgui,size_t *
highgui,p
highgui,Public Attributes
highgui,float
highgui,distance
highgui,int
highgui,imgIdx
highgui,train image index
highgui,int
highgui,queryIdx
highgui,query descriptor index
highgui,int
highgui,trainIdx
highgui,train descriptor index
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::MatConstIterator
highgui,size_t
highgui,elemSize
highgui,const Mat *
highgui,m
highgui,const uchar *
highgui,ptr
highgui,const uchar *
highgui,sliceEnd
highgui,const uchar *
highgui,sliceStart
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::SparseMatConstIterator
highgui,size_t
highgui,hashidx
highgui,const SparseMat *
highgui,m
highgui,uchar *
highgui,ptr
highgui,Public Attributes
highgui,const Mat **
highgui,arrays
highgui,the iterated arrays
highgui,int
highgui,narrays
highgui,the number of arrays
highgui,size_t
highgui,nplanes
highgui,the number of hyper-planes that the iterator steps through
highgui,Mat *
highgui,planes
highgui,the current planes
highgui,uchar **
highgui,ptrs
highgui,data pointers
highgui,size_t
highgui,size
highgui,the size of each segment (in elements)
highgui,Public Attributes
highgui,_Tp
highgui,height
highgui,the height
highgui,_Tp
highgui,width
highgui,the width
highgui,Protected Attributes
highgui,MatIterator_< _Tp >
highgui,it
highgui,Additional Inherited Members
highgui,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
highgui,_Tp
highgui,val [m *n]
highgui,matrix elements
highgui,Public Attributes
highgui,MatAllocator *
highgui,allocator
highgui,custom allocator
highgui,int
highgui,cols
highgui,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
highgui,int
highgui,dims
highgui,"the matrix dimensionality, >= 2"
highgui,int
highgui,flags
highgui,size_t
highgui,offset
highgui,offset of the submatrix (or 0)
highgui,int
highgui,rows
highgui,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
highgui,MatSize
highgui,size
highgui,dimensional size of the matrix; accessible in various formats
highgui,MatStep
highgui,step
highgui,number of bytes each matrix element/row/plane/dimension occupies
highgui,UMatData *
highgui,u
highgui,black-box container of UMat data
highgui,UMatUsageFlags
highgui,usageFlags
highgui,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::SparseMat
highgui,int
highgui,flags
highgui,Hdr *
highgui,hdr
highgui,Public Attributes
highgui,size_t
highgui,elemSize
highgui,const Mat *
highgui,m
highgui,const uchar *
highgui,ptr
highgui,const uchar *
highgui,sliceEnd
highgui,const uchar *
highgui,sliceStart
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::SparseMatConstIterator
highgui,size_t
highgui,hashidx
highgui,const SparseMat *
highgui,m
highgui,uchar *
highgui,ptr
highgui,Public Attributes
highgui,double
highgui,epsilon
highgui,the desired accuracy
highgui,int
highgui,maxCount
highgui,the maximum number of iterations/elements
highgui,int
highgui,type
highgui,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
highgui,Public Attributes
highgui,int
highgui,end
highgui,int
highgui,start
highgui,Public Attributes
highgui,_Tp
highgui,im
highgui,the real and the imaginary parts
highgui,_Tp
highgui,re
highgui,Public Attributes
highgui,_Tp
highgui,x
highgui,x coordinate of the point
highgui,_Tp
highgui,y
highgui,y coordinate of the point
highgui,Public Attributes
highgui,std::shared_ptr< void >
highgui,allocatorContext
highgui,int
highgui,allocatorFlags_
highgui,const MatAllocator *
highgui,currAllocator
highgui,uchar *
highgui,data
highgui,UMatData::MemoryFlag
highgui,flags
highgui,void *
highgui,handle
highgui,int
highgui,mapcount
highgui,uchar *
highgui,origdata
highgui,UMatData *
highgui,originalUMatData
highgui,const MatAllocator *
highgui,prevAllocator
highgui,int
highgui,refcount
highgui,size_t
highgui,size
highgui,int
highgui,urefcount
highgui,void *
highgui,userdata
highgui,Public Attributes
highgui,float
highgui,angle
highgui,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
highgui,Point2f
highgui,center
highgui,returns the rectangle mass center
highgui,Size2f
highgui,size
highgui,returns width and height of the rectangle
highgui,Public Attributes
highgui,int
highgui,flags
highgui,Hdr *
highgui,hdr
highgui,Public Attributes
highgui,_Tp
highgui,val [m *n]
highgui,matrix elements
highgui,Public Attributes
highgui,int *
highgui,p
highgui,Public Attributes
highgui,_Tp
highgui,x
highgui,x coordinate of the 3D point
highgui,_Tp
highgui,y
highgui,y coordinate of the 3D point
highgui,_Tp
highgui,z
highgui,z coordinate of the 3D point
highgui,Public Attributes
highgui,size_t
highgui,hashidx
highgui,const SparseMat *
highgui,m
highgui,uchar *
highgui,ptr
highgui,Additional Inherited Members
highgui,Public Attributes inherited from cv::Mat
highgui,MatAllocator *
highgui,allocator
highgui,custom allocator
highgui,int
highgui,cols
highgui,uchar *
highgui,data
highgui,pointer to the data
highgui,const uchar *
highgui,dataend
highgui,const uchar *
highgui,datalimit
highgui,const uchar *
highgui,datastart
highgui,helper fields used in locateROI and adjustROI
highgui,int
highgui,dims
highgui,"the matrix dimensionality, >= 2"
highgui,int
highgui,flags
highgui,int
highgui,rows
highgui,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
highgui,MatSize
highgui,size
highgui,MatStep
highgui,step
highgui,UMatData *
highgui,u
highgui,interaction with UMat
highgui,Protected Member Functions inherited from cv::Mat
highgui,"template<typename _Tp , typename Functor >"
highgui,void
highgui,forEach_impl (const Functor &operation)
imgcodecs,Additional Inherited Members
imgcodecs,Public Types inherited from cv::_OutputArray
imgcodecs,enum
imgcodecs,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
imgcodecs,Public Types inherited from cv::_InputArray
imgcodecs,enum
imgcodecs,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
imgcodecs,Protected Member Functions inherited from cv::_InputArray
imgcodecs,void
imgcodecs,"init (int _flags, const void *_obj)"
imgcodecs,void
imgcodecs,"init (int _flags, const void *_obj, Size _sz)"
imgcodecs,Protected Attributes inherited from cv::_InputArray
imgcodecs,int
imgcodecs,flags
imgcodecs,void *
imgcodecs,obj
imgcodecs,Size
imgcodecs,sz
imgcodecs,Public Attributes
imgcodecs,Allocator *
imgcodecs,allocator
imgcodecs,allocator
imgcodecs,int
imgcodecs,cols
imgcodecs,uchar *
imgcodecs,data
imgcodecs,pointer to the data
imgcodecs,const uchar *
imgcodecs,dataend
imgcodecs,uchar *
imgcodecs,datastart
imgcodecs,helper fields used in locateROI and adjustROI
imgcodecs,int
imgcodecs,flags
imgcodecs,int *
imgcodecs,refcount
imgcodecs,int
imgcodecs,rows
imgcodecs,the number of rows and columns
imgcodecs,size_t
imgcodecs,step
imgcodecs,a distance between successive rows in bytes; includes the gap if any
imgcodecs,Protected Attributes
imgcodecs,Impl *
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,GAPI_PROP int
imgcodecs,chan
imgcodecs,GAPI_PROP int
imgcodecs,depth
imgcodecs,GAPI_PROP std::vector< int >
imgcodecs,dims
imgcodecs,GAPI_PROP bool
imgcodecs,planar
imgcodecs,GAPI_PROP cv::Size
imgcodecs,size
imgcodecs,Public Attributes
imgcodecs,const B
imgcodecs,m_b
imgcodecs,const F
imgcodecs,m_f
imgcodecs,const GW
imgcodecs,m_gw
imgcodecs,const IS
imgcodecs,m_is
imgcodecs,Kind
imgcodecs,m_kind
imgcodecs,const int
imgcodecs,m_lpi = -1
imgcodecs,const RS
imgcodecs,m_rs
imgcodecs,const bool
imgcodecs,m_scratch = false
imgcodecs,Public Attributes
imgcodecs,Mat
imgcodecs,a
imgcodecs,double
imgcodecs,alpha
imgcodecs,Mat
imgcodecs,b
imgcodecs,double
imgcodecs,beta
imgcodecs,Mat
imgcodecs,c
imgcodecs,int
imgcodecs,flags
imgcodecs,const MatOp *
imgcodecs,op
imgcodecs,Scalar
imgcodecs,s
imgcodecs,Additional Inherited Members
imgcodecs,Public Types inherited from cv::gapi::own::detail::MatHeader
imgcodecs,enum
imgcodecs,{ AUTO_STEP = 0 }
imgcodecs,enum
imgcodecs,{ TYPE_MASK = 0x00000FFF }
imgcodecs,Public Attributes inherited from cv::gapi::own::detail::MatHeader
imgcodecs,int
imgcodecs,cols = 0
imgcodecs,uchar *
imgcodecs,data = nullptr
imgcodecs,pointer to the data
imgcodecs,std::vector< int >
imgcodecs,dims
imgcodecs,dimensions (ND-case)
imgcodecs,int
imgcodecs,flags = 0
imgcodecs,int
imgcodecs,rows = 0
imgcodecs,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
imgcodecs,size_t
imgcodecs,step = 0
imgcodecs,Public Attributes
imgcodecs,Impl *
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,double
imgcodecs,eps
imgcodecs,Additional Inherited Members
imgcodecs,"Public Types inherited from cv::Vec< _Tp, 4 >"
imgcodecs,enum
imgcodecs,typedef _Tp
imgcodecs,value_type
imgcodecs,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
imgcodecs,enum
imgcodecs,"typedef Matx< _Tp, shortdim, 1 >"
imgcodecs,diag_type
imgcodecs,"typedef Matx< _Tp, m, n >"
imgcodecs,mat_type
imgcodecs,typedef _Tp
imgcodecs,value_type
imgcodecs,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
imgcodecs,_Tp
imgcodecs,val [m *n]
imgcodecs,matrix elements
imgcodecs,Public Attributes
imgcodecs,uint64
imgcodecs,state
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::MatConstIterator
imgcodecs,size_t
imgcodecs,elemSize
imgcodecs,const Mat *
imgcodecs,m
imgcodecs,const uchar *
imgcodecs,ptr
imgcodecs,const uchar *
imgcodecs,sliceEnd
imgcodecs,const uchar *
imgcodecs,sliceStart
imgcodecs,Public Attributes
imgcodecs,Ptr< BaseCascadeClassifier >
imgcodecs,cc
imgcodecs,Public Attributes
imgcodecs,int
imgcodecs,code
imgcodecs,error code
imgcodecs,String
imgcodecs,err
imgcodecs,error description
imgcodecs,String
imgcodecs,file
imgcodecs,source file name where the error has occurred
imgcodecs,String
imgcodecs,func
imgcodecs,function name. Available only when the compiler supports getting it
imgcodecs,int
imgcodecs,line
imgcodecs,line number in the source file where the error has occurred
imgcodecs,String
imgcodecs,msg
imgcodecs,the formatted error message
imgcodecs,Public Attributes
imgcodecs,float
imgcodecs,angle
imgcodecs,int
imgcodecs,class_id
imgcodecs,object class (if the keypoints need to be clustered by an object they belong to)
imgcodecs,int
imgcodecs,octave
imgcodecs,octave (pyramid layer) from which the keypoint has been extracted
imgcodecs,Point2f
imgcodecs,pt
imgcodecs,coordinates of the keypoints
imgcodecs,float
imgcodecs,response
imgcodecs,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
imgcodecs,float
imgcodecs,size
imgcodecs,diameter of the meaningful keypoint neighborhood
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,height
imgcodecs,height of the rectangle
imgcodecs,_Tp
imgcodecs,width
imgcodecs,width of the rectangle
imgcodecs,_Tp
imgcodecs,x
imgcodecs,x coordinate of the top-left corner
imgcodecs,_Tp
imgcodecs,y
imgcodecs,y coordinate of the top-left corner
imgcodecs,Protected Attributes
imgcodecs,Ptr< DescriptorExtractor >
imgcodecs,dextractor
imgcodecs,Ptr< DescriptorMatcher >
imgcodecs,dmatcher
imgcodecs,Mat
imgcodecs,vocabulary
imgcodecs,Public Attributes
imgcodecs,"Vec< double, GPCPatchDescriptor::nFeatures >"
imgcodecs,coef
imgcodecs,Hyperplane coefficients.
imgcodecs,unsigned
imgcodecs,left
imgcodecs,double
imgcodecs,rhs
imgcodecs,Bias term of the hyperplane.
imgcodecs,unsigned
imgcodecs,right
imgcodecs,Static Public Attributes
imgcodecs,static const double
imgcodecs,ORIG_RESOL
imgcodecs,Additional Inherited Members
imgcodecs,Protected Member Functions inherited from cv::_InputArray
imgcodecs,void
imgcodecs,"init (int _flags, const void *_obj)"
imgcodecs,void
imgcodecs,"init (int _flags, const void *_obj, Size _sz)"
imgcodecs,Protected Attributes inherited from cv::_InputArray
imgcodecs,int
imgcodecs,flags
imgcodecs,void *
imgcodecs,obj
imgcodecs,Size
imgcodecs,sz
imgcodecs,Public Attributes
imgcodecs,float
imgcodecs,convexHullFactor
imgcodecs,cv::Size2f
imgcodecs,densityNeighborhoodSize
imgcodecs,float
imgcodecs,edgeGain
imgcodecs,float
imgcodecs,edgePenalty
imgcodecs,float
imgcodecs,existingVertexGain
imgcodecs,GridType
imgcodecs,gridType
imgcodecs,int
imgcodecs,keypointScale
imgcodecs,int
imgcodecs,kmeansAttempts
imgcodecs,float
imgcodecs,maxRectifiedDistance
imgcodecs,Max deviation from prediction. Used by CALIB_CB_CLUSTERING.
imgcodecs,float
imgcodecs,minDensity
imgcodecs,int
imgcodecs,minDistanceToAddKeypoint
imgcodecs,float
imgcodecs,minGraphConfidence
imgcodecs,float
imgcodecs,minRNGEdgeSwitchDist
imgcodecs,float
imgcodecs,squareSize
imgcodecs,Distance between two adjacent points. Used by CALIB_CB_CLUSTERING.
imgcodecs,float
imgcodecs,vertexGain
imgcodecs,float
imgcodecs,vertexPenalty
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::SparseMatConstIterator
imgcodecs,size_t
imgcodecs,hashidx
imgcodecs,const SparseMat *
imgcodecs,m
imgcodecs,uchar *
imgcodecs,ptr
imgcodecs,Static Public Attributes
imgcodecs,static const NormTypes
imgcodecs,normType = NORM_HAMMING
imgcodecs,Public Attributes
imgcodecs,MatAllocator *
imgcodecs,allocator
imgcodecs,custom allocator
imgcodecs,int
imgcodecs,cols
imgcodecs,uchar *
imgcodecs,data
imgcodecs,pointer to the data
imgcodecs,const uchar *
imgcodecs,dataend
imgcodecs,const uchar *
imgcodecs,datalimit
imgcodecs,const uchar *
imgcodecs,datastart
imgcodecs,helper fields used in locateROI and adjustROI
imgcodecs,int
imgcodecs,dims
imgcodecs,"the matrix dimensionality, >= 2"
imgcodecs,int
imgcodecs,flags
imgcodecs,int
imgcodecs,rows
imgcodecs,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
imgcodecs,MatSize
imgcodecs,size
imgcodecs,MatStep
imgcodecs,step
imgcodecs,UMatData *
imgcodecs,u
imgcodecs,interaction with UMat
imgcodecs,Public Attributes
imgcodecs,Meta
imgcodecs,meta
imgcodecs,Public Attributes
imgcodecs,Mat
imgcodecs,eigenvalues
imgcodecs,eigenvalues of the covariation matrix
imgcodecs,Mat
imgcodecs,eigenvectors
imgcodecs,eigenvectors of the covariation matrix
imgcodecs,Mat
imgcodecs,mean
imgcodecs,mean value subtracted before the projection and added after the back projection
imgcodecs,Additional Inherited Members
imgcodecs,Protected Attributes inherited from cv::GraphicalCodeDetector
imgcodecs,Ptr< Impl >
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,std::vector< Node< OBJECT > * >
imgcodecs,m_childs
imgcodecs,OBJECT
imgcodecs,m_payload
imgcodecs,Node< OBJECT > *
imgcodecs,m_pParent
imgcodecs,Protected Attributes
imgcodecs,Impl *
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,size_t
imgcodecs,buf [2]
imgcodecs,size_t *
imgcodecs,p
imgcodecs,Protected Attributes
imgcodecs,ushort
imgcodecs,w
imgcodecs,Protected Attributes
imgcodecs,int
imgcodecs,attempts
imgcodecs,int
imgcodecs,clusterCount
imgcodecs,int
imgcodecs,flags
imgcodecs,TermCriteria
imgcodecs,termcrit
imgcodecs,Protected Attributes inherited from cv::BOWTrainer
imgcodecs,std::vector< Mat >
imgcodecs,descriptors
imgcodecs,int
imgcodecs,size
imgcodecs,Static Public Attributes
imgcodecs,static const NormTypes
imgcodecs,normType = NORM_L1
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,w
imgcodecs,_Tp
imgcodecs,w_
imgcodecs,_Tp
imgcodecs,x
imgcodecs,_Tp
imgcodecs,x_
imgcodecs,_Tp
imgcodecs,y
imgcodecs,_Tp
imgcodecs,y_
imgcodecs,_Tp
imgcodecs,z
imgcodecs,_Tp
imgcodecs,z_
imgcodecs,Public Attributes
imgcodecs,float
imgcodecs,distance
imgcodecs,int
imgcodecs,imgIdx
imgcodecs,train image index
imgcodecs,int
imgcodecs,queryIdx
imgcodecs,query descriptor index
imgcodecs,int
imgcodecs,trainIdx
imgcodecs,train descriptor index
imgcodecs,Public Attributes
imgcodecs,std::string
imgcodecs,tag
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::MatConstIterator
imgcodecs,size_t
imgcodecs,elemSize
imgcodecs,const Mat *
imgcodecs,m
imgcodecs,const uchar *
imgcodecs,ptr
imgcodecs,const uchar *
imgcodecs,sliceEnd
imgcodecs,const uchar *
imgcodecs,sliceStart
imgcodecs,Protected Attributes
imgcodecs,std::vector< Mat >
imgcodecs,descriptors
imgcodecs,int
imgcodecs,size
imgcodecs,Public Attributes
imgcodecs,Size
imgcodecs,blockSize
imgcodecs,"Block size in pixels. Align to cell size. Default value is Size(16,16)."
imgcodecs,Size
imgcodecs,blockStride
imgcodecs,"Block stride. It must be a multiple of cell size. Default value is Size(8,8)."
imgcodecs,Size
imgcodecs,cellSize
imgcodecs,"Cell size. Default value is Size(8,8)."
imgcodecs,int
imgcodecs,derivAperture
imgcodecs,not documented
imgcodecs,float
imgcodecs,free_coef
imgcodecs,not documented
imgcodecs,bool
imgcodecs,gammaCorrection
imgcodecs,Flag to specify whether the gamma correction preprocessing is required or not.
imgcodecs,HOGDescriptor::HistogramNormType
imgcodecs,histogramNormType
imgcodecs,histogramNormType
imgcodecs,double
imgcodecs,L2HysThreshold
imgcodecs,L2-Hys normalization method shrinkage.
imgcodecs,int
imgcodecs,nbins
imgcodecs,Number of bins used in the calculation of histogram of gradients. Default value is 9.
imgcodecs,int
imgcodecs,nlevels
imgcodecs,Maximum number of detection window increases. Default value is 64.
imgcodecs,UMat
imgcodecs,oclSvmDetector
imgcodecs,coefficients for the linear SVM classifier used when OpenCL is enabled
imgcodecs,bool
imgcodecs,signedGradient
imgcodecs,Indicates signed gradient will be used or not.
imgcodecs,std::vector< float >
imgcodecs,svmDetector
imgcodecs,coefficients for the linear SVM classifier.
imgcodecs,double
imgcodecs,winSigma
imgcodecs,Gaussian smoothing window parameter.
imgcodecs,Size
imgcodecs,winSize
imgcodecs,"Detection window size. Align to block size and block stride. Default value is Size(64,128)."
imgcodecs,Static Public Attributes
imgcodecs,static const NormTypes
imgcodecs,normType = NORM_L2SQR
imgcodecs,Protected Attributes
imgcodecs,F
imgcodecs,m_f
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::SparseMatConstIterator
imgcodecs,size_t
imgcodecs,hashidx
imgcodecs,const SparseMat *
imgcodecs,m
imgcodecs,uchar *
imgcodecs,ptr
imgcodecs,Public Attributes
imgcodecs,const Mat **
imgcodecs,arrays
imgcodecs,the iterated arrays
imgcodecs,int
imgcodecs,narrays
imgcodecs,the number of arrays
imgcodecs,size_t
imgcodecs,nplanes
imgcodecs,the number of hyper-planes that the iterator steps through
imgcodecs,Mat *
imgcodecs,planes
imgcodecs,the current planes
imgcodecs,uchar **
imgcodecs,ptrs
imgcodecs,data pointers
imgcodecs,size_t
imgcodecs,size
imgcodecs,the size of each segment (in elements)
imgcodecs,Public Attributes
imgcodecs,uint32_t
imgcodecs,num_threads
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,height
imgcodecs,the height
imgcodecs,_Tp
imgcodecs,width
imgcodecs,the width
imgcodecs,Public Attributes
imgcodecs,GProtoArgs
imgcodecs,m_args
imgcodecs,Protected Attributes
imgcodecs,MatIterator_< _Tp >
imgcodecs,it
imgcodecs,Additional Inherited Members
imgcodecs,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
imgcodecs,_Tp
imgcodecs,val [m *n]
imgcodecs,matrix elements
imgcodecs,Public Attributes
imgcodecs,double
imgcodecs,confidence
imgcodecs,PolishingMethod
imgcodecs,final_polisher
imgcodecs,int
imgcodecs,final_polisher_iterations
imgcodecs,bool
imgcodecs,isParallel
imgcodecs,int
imgcodecs,loIterations
imgcodecs,LocalOptimMethod
imgcodecs,loMethod
imgcodecs,int
imgcodecs,loSampleSize
imgcodecs,int
imgcodecs,maxIterations
imgcodecs,NeighborSearchMethod
imgcodecs,neighborsSearch
imgcodecs,int
imgcodecs,randomGeneratorState
imgcodecs,SamplingMethod
imgcodecs,sampler
imgcodecs,ScoreMethod
imgcodecs,score
imgcodecs,double
imgcodecs,threshold
imgcodecs,Public Attributes
imgcodecs,uint32_t
imgcodecs,v
imgcodecs,Public Attributes
imgcodecs,MatAllocator *
imgcodecs,allocator
imgcodecs,custom allocator
imgcodecs,int
imgcodecs,cols
imgcodecs,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
imgcodecs,int
imgcodecs,dims
imgcodecs,"the matrix dimensionality, >= 2"
imgcodecs,int
imgcodecs,flags
imgcodecs,size_t
imgcodecs,offset
imgcodecs,offset of the submatrix (or 0)
imgcodecs,int
imgcodecs,rows
imgcodecs,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
imgcodecs,MatSize
imgcodecs,size
imgcodecs,dimensional size of the matrix; accessible in various formats
imgcodecs,MatStep
imgcodecs,step
imgcodecs,number of bytes each matrix element/row/plane/dimension occupies
imgcodecs,UMatData *
imgcodecs,u
imgcodecs,black-box container of UMat data
imgcodecs,UMatUsageFlags
imgcodecs,usageFlags
imgcodecs,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
imgcodecs,Protected Attributes
imgcodecs,size_t
imgcodecs,blockIdx
imgcodecs,size_t
imgcodecs,blockSize
imgcodecs,FileStorage::Impl *
imgcodecs,fs
imgcodecs,size_t
imgcodecs,idx
imgcodecs,size_t
imgcodecs,nodeNElems
imgcodecs,size_t
imgcodecs,ofs
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::SparseMat
imgcodecs,int
imgcodecs,flags
imgcodecs,Hdr *
imgcodecs,hdr
imgcodecs,Protected Attributes
imgcodecs,Ptr< Impl >
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,size_t
imgcodecs,elemSize
imgcodecs,const Mat *
imgcodecs,m
imgcodecs,const uchar *
imgcodecs,ptr
imgcodecs,const uchar *
imgcodecs,sliceEnd
imgcodecs,const uchar *
imgcodecs,sliceStart
imgcodecs,Public Attributes
imgcodecs,detail::ArgKind
imgcodecs,kind = detail::ArgKind::OPAQUE_VAL
imgcodecs,detail::OpaqueKind
imgcodecs,opaque_kind = detail::OpaqueKind::CV_UNKNOWN
imgcodecs,Public Attributes
imgcodecs,spatial moments
imgcodecs,double
imgcodecs,m00
imgcodecs,double
imgcodecs,m10
imgcodecs,double
imgcodecs,m01
imgcodecs,double
imgcodecs,m20
imgcodecs,double
imgcodecs,m11
imgcodecs,double
imgcodecs,m02
imgcodecs,double
imgcodecs,m30
imgcodecs,double
imgcodecs,m21
imgcodecs,double
imgcodecs,m12
imgcodecs,double
imgcodecs,m03
imgcodecs,central moments
imgcodecs,double
imgcodecs,mu20
imgcodecs,double
imgcodecs,mu11
imgcodecs,double
imgcodecs,mu02
imgcodecs,double
imgcodecs,mu30
imgcodecs,double
imgcodecs,mu21
imgcodecs,double
imgcodecs,mu12
imgcodecs,double
imgcodecs,mu03
imgcodecs,central normalized moments
imgcodecs,double
imgcodecs,nu20
imgcodecs,double
imgcodecs,nu11
imgcodecs,double
imgcodecs,nu02
imgcodecs,double
imgcodecs,nu30
imgcodecs,double
imgcodecs,nu21
imgcodecs,double
imgcodecs,nu12
imgcodecs,double
imgcodecs,nu03
imgcodecs,Protected Attributes
imgcodecs,_Tp
imgcodecs,buf [(fixed_size > 0) ? fixed_size :1]
imgcodecs,pre-allocated buffer. At least 1 element to confirm C++ standard requirements
imgcodecs,_Tp *
imgcodecs,ptr
imgcodecs,"pointer to the real buffer, can point to buf if the buffer is small enough"
imgcodecs,size_t
imgcodecs,sz
imgcodecs,size of the real buffer
imgcodecs,Protected Attributes
imgcodecs,Ptr< CvCapture >
imgcodecs,cap
imgcodecs,Ptr< IVideoCapture >
imgcodecs,icap
imgcodecs,bool
imgcodecs,throwOnFail
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::SparseMatConstIterator
imgcodecs,size_t
imgcodecs,hashidx
imgcodecs,const SparseMat *
imgcodecs,m
imgcodecs,uchar *
imgcodecs,ptr
imgcodecs,Public Attributes
imgcodecs,double
imgcodecs,epsilon
imgcodecs,the desired accuracy
imgcodecs,int
imgcodecs,maxCount
imgcodecs,the maximum number of iterations/elements
imgcodecs,int
imgcodecs,type
imgcodecs,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
imgcodecs,Public Attributes
imgcodecs,int
imgcodecs,end
imgcodecs,int
imgcodecs,start
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,w
imgcodecs,_Tp
imgcodecs,x
imgcodecs,_Tp
imgcodecs,y
imgcodecs,_Tp
imgcodecs,z
imgcodecs,Public Attributes
imgcodecs,std::string
imgcodecs,elname
imgcodecs,Ptr< Impl >
imgcodecs,p
imgcodecs,int
imgcodecs,state
imgcodecs,Protected Attributes
imgcodecs,Ptr< Impl >
imgcodecs,pImpl
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,im
imgcodecs,the real and the imaginary parts
imgcodecs,_Tp
imgcodecs,re
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,x
imgcodecs,x coordinate of the point
imgcodecs,_Tp
imgcodecs,y
imgcodecs,y coordinate of the point
imgcodecs,Public Attributes
imgcodecs,std::shared_ptr< void >
imgcodecs,allocatorContext
imgcodecs,int
imgcodecs,allocatorFlags_
imgcodecs,const MatAllocator *
imgcodecs,currAllocator
imgcodecs,uchar *
imgcodecs,data
imgcodecs,UMatData::MemoryFlag
imgcodecs,flags
imgcodecs,void *
imgcodecs,handle
imgcodecs,int
imgcodecs,mapcount
imgcodecs,uchar *
imgcodecs,origdata
imgcodecs,UMatData *
imgcodecs,originalUMatData
imgcodecs,const MatAllocator *
imgcodecs,prevAllocator
imgcodecs,int
imgcodecs,refcount
imgcodecs,size_t
imgcodecs,size
imgcodecs,int
imgcodecs,urefcount
imgcodecs,void *
imgcodecs,userdata
imgcodecs,Static Public Attributes
imgcodecs,static const int
imgcodecs,kBytes = 32
imgcodecs,Public Attributes
imgcodecs,float
imgcodecs,angle
imgcodecs,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
imgcodecs,Point2f
imgcodecs,center
imgcodecs,returns the rectangle mass center
imgcodecs,Size2f
imgcodecs,size
imgcodecs,returns width and height of the rectangle
imgcodecs,Protected Attributes
imgcodecs,Memory
imgcodecs,memory
imgcodecs,Static Public Attributes
imgcodecs,static const NormTypes
imgcodecs,normType = NORM_L2
imgcodecs,Public Attributes
imgcodecs,int
imgcodecs,count
imgcodecs,int
imgcodecs,elemSize
imgcodecs,int
imgcodecs,err
imgcodecs,int
imgcodecs,minusDelta
imgcodecs,int
imgcodecs,minusShift
imgcodecs,int
imgcodecs,minusStep
imgcodecs,Point
imgcodecs,p
imgcodecs,int
imgcodecs,plusDelta
imgcodecs,int
imgcodecs,plusShift
imgcodecs,int
imgcodecs,plusStep
imgcodecs,bool
imgcodecs,ptmode
imgcodecs,uchar *
imgcodecs,ptr
imgcodecs,const uchar *
imgcodecs,ptr0
imgcodecs,int
imgcodecs,step
imgcodecs,Public Attributes
imgcodecs,Mat
imgcodecs,controlMatrix
imgcodecs,control matrix (B) (not used if there is no control)
imgcodecs,Mat
imgcodecs,errorCovPost
imgcodecs,posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)
imgcodecs,Mat
imgcodecs,errorCovPre
imgcodecs,priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*/
imgcodecs,Mat
imgcodecs,gain
imgcodecs,Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)
imgcodecs,Mat
imgcodecs,measurementMatrix
imgcodecs,measurement matrix (H)
imgcodecs,Mat
imgcodecs,measurementNoiseCov
imgcodecs,measurement noise covariance matrix (R)
imgcodecs,Mat
imgcodecs,processNoiseCov
imgcodecs,process noise covariance matrix (Q)
imgcodecs,Mat
imgcodecs,statePost
imgcodecs,corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))
imgcodecs,Mat
imgcodecs,statePre
imgcodecs,predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)
imgcodecs,Mat
imgcodecs,temp1
imgcodecs,Mat
imgcodecs,temp2
imgcodecs,Mat
imgcodecs,temp3
imgcodecs,Mat
imgcodecs,temp4
imgcodecs,Mat
imgcodecs,temp5
imgcodecs,Mat
imgcodecs,transitionMatrix
imgcodecs,state transition matrix (A)
imgcodecs,Public Attributes
imgcodecs,Mat4
imgcodecs,matrix
imgcodecs,Public Attributes
imgcodecs,int
imgcodecs,flags
imgcodecs,Hdr *
imgcodecs,hdr
imgcodecs,Public Attributes
imgcodecs,std::string
imgcodecs,description
imgcodecs,F
imgcodecs,pattern
imgcodecs,F
imgcodecs,substitute
imgcodecs,Public Attributes
imgcodecs,std::vector< GArg >
imgcodecs,m_args
imgcodecs,"std::unordered_map< std::size_t, GArg >"
imgcodecs,m_results
imgcodecs,Additional Inherited Members
imgcodecs,Protected Attributes inherited from cv::GraphicalCodeDetector
imgcodecs,Ptr< Impl >
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,size_t
imgcodecs,blockIdx
imgcodecs,FileStorage::Impl *
imgcodecs,fs
imgcodecs,size_t
imgcodecs,ofs
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,val [m *n]
imgcodecs,matrix elements
imgcodecs,Public Attributes
imgcodecs,uint64_t
imgcodecs,v
imgcodecs,Public Attributes
imgcodecs,bool
imgcodecs,m_isStateful = false
imgcodecs,RunF
imgcodecs,m_runF = nullptr
imgcodecs,SetupF
imgcodecs,m_setupF = nullptr
imgcodecs,Public Attributes
imgcodecs,int *
imgcodecs,p
imgcodecs,Public Attributes
imgcodecs,_Tp
imgcodecs,x
imgcodecs,x coordinate of the 3D point
imgcodecs,_Tp
imgcodecs,y
imgcodecs,y coordinate of the 3D point
imgcodecs,_Tp
imgcodecs,z
imgcodecs,z coordinate of the 3D point
imgcodecs,Protected Attributes
imgcodecs,F
imgcodecs,m_f
imgcodecs,Public Attributes
imgcodecs,size_t
imgcodecs,hashidx
imgcodecs,const SparseMat *
imgcodecs,m
imgcodecs,uchar *
imgcodecs,ptr
imgcodecs,Public Attributes
imgcodecs,MediaFormat
imgcodecs,fmt
imgcodecs,cv::Size
imgcodecs,size
imgcodecs,Public Attributes
imgcodecs,Mat
imgcodecs,u
imgcodecs,Mat
imgcodecs,vt
imgcodecs,Mat
imgcodecs,w
imgcodecs,Additional Inherited Members
imgcodecs,Public Attributes inherited from cv::Mat
imgcodecs,MatAllocator *
imgcodecs,allocator
imgcodecs,custom allocator
imgcodecs,int
imgcodecs,cols
imgcodecs,uchar *
imgcodecs,data
imgcodecs,pointer to the data
imgcodecs,const uchar *
imgcodecs,dataend
imgcodecs,const uchar *
imgcodecs,datalimit
imgcodecs,const uchar *
imgcodecs,datastart
imgcodecs,helper fields used in locateROI and adjustROI
imgcodecs,int
imgcodecs,dims
imgcodecs,"the matrix dimensionality, >= 2"
imgcodecs,int
imgcodecs,flags
imgcodecs,int
imgcodecs,rows
imgcodecs,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
imgcodecs,MatSize
imgcodecs,size
imgcodecs,MatStep
imgcodecs,step
imgcodecs,UMatData *
imgcodecs,u
imgcodecs,interaction with UMat
imgcodecs,Protected Member Functions inherited from cv::Mat
imgcodecs,"template<typename _Tp , typename Functor >"
imgcodecs,void
imgcodecs,forEach_impl (const Functor &operation)
imgproc,Additional Inherited Members
imgproc,"Public Types inherited from cv::Vec< _Tp, 4 >"
imgproc,enum
imgproc,typedef _Tp
imgproc,value_type
imgproc,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
imgproc,enum
imgproc,"typedef Matx< _Tp, shortdim, 1 >"
imgproc,diag_type
imgproc,"typedef Matx< _Tp, m, n >"
imgproc,mat_type
imgproc,typedef _Tp
imgproc,value_type
imgproc,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
imgproc,_Tp
imgproc,val [m *n]
imgproc,matrix elements
imgproc,Public Attributes
imgproc,uint64
imgproc,state
imgproc,Public Attributes
imgproc,MatAllocator *
imgproc,allocator
imgproc,custom allocator
imgproc,int
imgproc,cols
imgproc,uchar *
imgproc,data
imgproc,pointer to the data
imgproc,const uchar *
imgproc,dataend
imgproc,const uchar *
imgproc,datalimit
imgproc,const uchar *
imgproc,datastart
imgproc,helper fields used in locateROI and adjustROI
imgproc,int
imgproc,dims
imgproc,"the matrix dimensionality, >= 2"
imgproc,int
imgproc,flags
imgproc,int
imgproc,rows
imgproc,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
imgproc,MatSize
imgproc,size
imgproc,MatStep
imgproc,step
imgproc,UMatData *
imgproc,u
imgproc,interaction with UMat
imgproc,Public Attributes
imgproc,_Tp
imgproc,height
imgproc,the height
imgproc,_Tp
imgproc,width
imgproc,the width
imgproc,Public Attributes
imgproc,spatial moments
imgproc,double
imgproc,m00
imgproc,double
imgproc,m10
imgproc,double
imgproc,m01
imgproc,double
imgproc,m20
imgproc,double
imgproc,m11
imgproc,double
imgproc,m02
imgproc,double
imgproc,m30
imgproc,double
imgproc,m21
imgproc,double
imgproc,m12
imgproc,double
imgproc,m03
imgproc,central moments
imgproc,double
imgproc,mu20
imgproc,double
imgproc,mu11
imgproc,double
imgproc,mu02
imgproc,double
imgproc,mu30
imgproc,double
imgproc,mu21
imgproc,double
imgproc,mu12
imgproc,double
imgproc,mu03
imgproc,central normalized moments
imgproc,double
imgproc,nu20
imgproc,double
imgproc,nu11
imgproc,double
imgproc,nu02
imgproc,double
imgproc,nu30
imgproc,double
imgproc,nu21
imgproc,double
imgproc,nu12
imgproc,double
imgproc,nu03
imgproc,Public Attributes
imgproc,double
imgproc,epsilon
imgproc,the desired accuracy
imgproc,int
imgproc,maxCount
imgproc,the maximum number of iterations/elements
imgproc,int
imgproc,type
imgproc,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
imgproc,Public Attributes
imgproc,int
imgproc,end
imgproc,int
imgproc,start
imgproc,Public Attributes
imgproc,_Tp
imgproc,x
imgproc,x coordinate of the point
imgproc,_Tp
imgproc,y
imgproc,y coordinate of the point
imgproc,Public Attributes
imgproc,float
imgproc,angle
imgproc,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
imgproc,Point2f
imgproc,center
imgproc,returns the rectangle mass center
imgproc,Size2f
imgproc,size
imgproc,returns width and height of the rectangle
imgproc,Public Attributes
imgproc,int
imgproc,count
imgproc,int
imgproc,elemSize
imgproc,int
imgproc,err
imgproc,int
imgproc,minusDelta
imgproc,int
imgproc,minusShift
imgproc,int
imgproc,minusStep
imgproc,Point
imgproc,p
imgproc,int
imgproc,plusDelta
imgproc,int
imgproc,plusShift
imgproc,int
imgproc,plusStep
imgproc,bool
imgproc,ptmode
imgproc,uchar *
imgproc,ptr
imgproc,const uchar *
imgproc,ptr0
imgproc,int
imgproc,step
imgproc,Public Attributes
imgproc,int
imgproc,flags
imgproc,Hdr *
imgproc,hdr
ml,Additional Inherited Members
ml,Public Types inherited from cv::_OutputArray
ml,enum
ml,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
ml,Public Types inherited from cv::_InputArray
ml,enum
ml,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
ml,Protected Member Functions inherited from cv::_InputArray
ml,void
ml,"init (int _flags, const void *_obj)"
ml,void
ml,"init (int _flags, const void *_obj, Size _sz)"
ml,Protected Attributes inherited from cv::_InputArray
ml,int
ml,flags
ml,void *
ml,obj
ml,Size
ml,sz
ml,Public Attributes
ml,Mat
ml,a
ml,double
ml,alpha
ml,Mat
ml,b
ml,double
ml,beta
ml,Mat
ml,c
ml,int
ml,flags
ml,const MatOp *
ml,op
ml,Scalar
ml,s
ml,Public Attributes
ml,Impl *
ml,p
ml,Additional Inherited Members
ml,"Public Types inherited from cv::Vec< _Tp, 4 >"
ml,enum
ml,typedef _Tp
ml,value_type
ml,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
ml,enum
ml,"typedef Matx< _Tp, shortdim, 1 >"
ml,diag_type
ml,"typedef Matx< _Tp, m, n >"
ml,mat_type
ml,typedef _Tp
ml,value_type
ml,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
ml,_Tp
ml,val [m *n]
ml,matrix elements
ml,Public Attributes
ml,uint64
ml,state
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::MatConstIterator
ml,size_t
ml,elemSize
ml,const Mat *
ml,m
ml,const uchar *
ml,ptr
ml,const uchar *
ml,sliceEnd
ml,const uchar *
ml,sliceStart
ml,Public Attributes
ml,float
ml,angle
ml,int
ml,class_id
ml,object class (if the keypoints need to be clustered by an object they belong to)
ml,int
ml,octave
ml,octave (pyramid layer) from which the keypoint has been extracted
ml,Point2f
ml,pt
ml,coordinates of the keypoints
ml,float
ml,response
ml,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
ml,float
ml,size
ml,diameter of the meaningful keypoint neighborhood
ml,Public Attributes
ml,_Tp
ml,height
ml,height of the rectangle
ml,_Tp
ml,width
ml,width of the rectangle
ml,_Tp
ml,x
ml,x coordinate of the top-left corner
ml,_Tp
ml,y
ml,y coordinate of the top-left corner
ml,Additional Inherited Members
ml,Protected Member Functions inherited from cv::_InputArray
ml,void
ml,"init (int _flags, const void *_obj)"
ml,void
ml,"init (int _flags, const void *_obj, Size _sz)"
ml,Protected Attributes inherited from cv::_InputArray
ml,int
ml,flags
ml,void *
ml,obj
ml,Size
ml,sz
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::SparseMatConstIterator
ml,size_t
ml,hashidx
ml,const SparseMat *
ml,m
ml,uchar *
ml,ptr
ml,Static Public Attributes
ml,static const NormTypes
ml,normType = NORM_HAMMING
ml,Public Attributes
ml,MatAllocator *
ml,allocator
ml,custom allocator
ml,int
ml,cols
ml,uchar *
ml,data
ml,pointer to the data
ml,const uchar *
ml,dataend
ml,const uchar *
ml,datalimit
ml,const uchar *
ml,datastart
ml,helper fields used in locateROI and adjustROI
ml,int
ml,dims
ml,"the matrix dimensionality, >= 2"
ml,int
ml,flags
ml,int
ml,rows
ml,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
ml,MatSize
ml,size
ml,MatStep
ml,step
ml,UMatData *
ml,u
ml,interaction with UMat
ml,Public Attributes
ml,Mat
ml,eigenvalues
ml,eigenvalues of the covariation matrix
ml,Mat
ml,eigenvectors
ml,eigenvectors of the covariation matrix
ml,Mat
ml,mean
ml,mean value subtracted before the projection and added after the back projection
ml,Public Attributes
ml,size_t
ml,buf [2]
ml,size_t *
ml,p
ml,Public Attributes
ml,int
ml,classIdx
ml,int
ml,defaultDir
ml,int
ml,left
ml,Index of the left child node.
ml,int
ml,parent
ml,Index of the parent node.
ml,int
ml,right
ml,Index of right child node.
ml,int
ml,split
ml,Index of the first split.
ml,double
ml,value
ml,Public Attributes
ml,float
ml,distance
ml,int
ml,imgIdx
ml,train image index
ml,int
ml,queryIdx
ml,query descriptor index
ml,int
ml,trainIdx
ml,train descriptor index
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::MatConstIterator
ml,size_t
ml,elemSize
ml,const Mat *
ml,m
ml,const uchar *
ml,ptr
ml,const uchar *
ml,sliceEnd
ml,const uchar *
ml,sliceStart
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::SparseMatConstIterator
ml,size_t
ml,hashidx
ml,const SparseMat *
ml,m
ml,uchar *
ml,ptr
ml,Public Attributes
ml,const Mat **
ml,arrays
ml,the iterated arrays
ml,int
ml,narrays
ml,the number of arrays
ml,size_t
ml,nplanes
ml,the number of hyper-planes that the iterator steps through
ml,Mat *
ml,planes
ml,the current planes
ml,uchar **
ml,ptrs
ml,data pointers
ml,size_t
ml,size
ml,the size of each segment (in elements)
ml,Public Attributes
ml,_Tp
ml,height
ml,the height
ml,_Tp
ml,width
ml,the width
ml,Protected Attributes
ml,MatIterator_< _Tp >
ml,it
ml,Public Attributes
ml,double
ml,logStep
ml,Logarithmic step for iterating the statmodel parameter.
ml,double
ml,maxVal
ml,Maximum value of the statmodel parameter. Default value is 0.
ml,double
ml,minVal
ml,Minimum value of the statmodel parameter. Default value is 0.
ml,Additional Inherited Members
ml,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
ml,_Tp
ml,val [m *n]
ml,matrix elements
ml,Public Attributes
ml,MatAllocator *
ml,allocator
ml,custom allocator
ml,int
ml,cols
ml,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
ml,int
ml,dims
ml,"the matrix dimensionality, >= 2"
ml,int
ml,flags
ml,size_t
ml,offset
ml,offset of the submatrix (or 0)
ml,int
ml,rows
ml,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
ml,MatSize
ml,size
ml,dimensional size of the matrix; accessible in various formats
ml,MatStep
ml,step
ml,number of bytes each matrix element/row/plane/dimension occupies
ml,UMatData *
ml,u
ml,black-box container of UMat data
ml,UMatUsageFlags
ml,usageFlags
ml,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::SparseMat
ml,int
ml,flags
ml,Hdr *
ml,hdr
ml,Public Attributes
ml,size_t
ml,elemSize
ml,const Mat *
ml,m
ml,const uchar *
ml,ptr
ml,const uchar *
ml,sliceEnd
ml,const uchar *
ml,sliceStart
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::SparseMatConstIterator
ml,size_t
ml,hashidx
ml,const SparseMat *
ml,m
ml,uchar *
ml,ptr
ml,Public Attributes
ml,float
ml,c
ml,bool
ml,inversed
ml,int
ml,next
ml,Index of the next split in the list of splits for the node.
ml,float
ml,quality
ml,"The split quality, a positive number. It is used to choose the best split."
ml,int
ml,subsetOfs
ml,int
ml,varIdx
ml,Index of variable on which the split is created.
ml,Public Attributes
ml,double
ml,epsilon
ml,the desired accuracy
ml,int
ml,maxCount
ml,the maximum number of iterations/elements
ml,int
ml,type
ml,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
ml,Public Attributes
ml,int
ml,end
ml,int
ml,start
ml,Public Attributes
ml,std::string
ml,elname
ml,Ptr< Impl >
ml,p
ml,int
ml,state
ml,Public Attributes
ml,_Tp
ml,im
ml,the real and the imaginary parts
ml,_Tp
ml,re
ml,Public Attributes
ml,_Tp
ml,x
ml,x coordinate of the point
ml,_Tp
ml,y
ml,y coordinate of the point
ml,Public Attributes
ml,std::shared_ptr< void >
ml,allocatorContext
ml,int
ml,allocatorFlags_
ml,const MatAllocator *
ml,currAllocator
ml,uchar *
ml,data
ml,UMatData::MemoryFlag
ml,flags
ml,void *
ml,handle
ml,int
ml,mapcount
ml,uchar *
ml,origdata
ml,UMatData *
ml,originalUMatData
ml,const MatAllocator *
ml,prevAllocator
ml,int
ml,refcount
ml,size_t
ml,size
ml,int
ml,urefcount
ml,void *
ml,userdata
ml,Public Attributes
ml,float
ml,angle
ml,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
ml,Point2f
ml,center
ml,returns the rectangle mass center
ml,Size2f
ml,size
ml,returns width and height of the rectangle
ml,Public Attributes
ml,int
ml,flags
ml,Hdr *
ml,hdr
ml,Public Attributes
ml,size_t
ml,blockIdx
ml,FileStorage::Impl *
ml,fs
ml,size_t
ml,ofs
ml,Public Attributes
ml,_Tp
ml,val [m *n]
ml,matrix elements
ml,Public Attributes
ml,int *
ml,p
ml,Public Attributes
ml,_Tp
ml,x
ml,x coordinate of the 3D point
ml,_Tp
ml,y
ml,y coordinate of the 3D point
ml,_Tp
ml,z
ml,z coordinate of the 3D point
ml,Public Attributes
ml,size_t
ml,hashidx
ml,const SparseMat *
ml,m
ml,uchar *
ml,ptr
ml,Public Attributes
ml,Mat
ml,u
ml,Mat
ml,vt
ml,Mat
ml,w
ml,Additional Inherited Members
ml,Public Attributes inherited from cv::Mat
ml,MatAllocator *
ml,allocator
ml,custom allocator
ml,int
ml,cols
ml,uchar *
ml,data
ml,pointer to the data
ml,const uchar *
ml,dataend
ml,const uchar *
ml,datalimit
ml,const uchar *
ml,datastart
ml,helper fields used in locateROI and adjustROI
ml,int
ml,dims
ml,"the matrix dimensionality, >= 2"
ml,int
ml,flags
ml,int
ml,rows
ml,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
ml,MatSize
ml,size
ml,MatStep
ml,step
ml,UMatData *
ml,u
ml,interaction with UMat
ml,Protected Member Functions inherited from cv::Mat
ml,"template<typename _Tp , typename Functor >"
ml,void
ml,forEach_impl (const Functor &operation)
objdetect,Additional Inherited Members
objdetect,Protected Member Functions inherited from cv::aruco::Board
objdetect,Board (const Ptr< Impl > &impl)
objdetect,Protected Attributes inherited from cv::aruco::Board
objdetect,Ptr< Impl >
objdetect,impl
objdetect,Public Attributes
objdetect,double
objdetect,eps
objdetect,Public Attributes
objdetect,double
objdetect,adaptiveThreshConstant
objdetect,constant for adaptive thresholding before finding contours (default 7)
objdetect,int
objdetect,adaptiveThreshWinSizeMax
objdetect,maximum window size for adaptive thresholding before finding contours (default 23).
objdetect,int
objdetect,adaptiveThreshWinSizeMin
objdetect,minimum window size for adaptive thresholding before finding contours (default 3).
objdetect,int
objdetect,adaptiveThreshWinSizeStep
objdetect,increments from adaptiveThreshWinSizeMin to adaptiveThreshWinSizeMax during the thresholding (default 10).
objdetect,float
objdetect,aprilTagCriticalRad
objdetect,reject quads where pairs of edges have angles that are close to straight or close to 180 degrees.
objdetect,int
objdetect,aprilTagDeglitch
objdetect,should the thresholded image be deglitched? Only useful for very noisy images (default 0).
objdetect,float
objdetect,aprilTagMaxLineFitMse
objdetect,"when fitting lines to the contours, what is the maximum mean squared error"
objdetect,int
objdetect,aprilTagMaxNmaxima
objdetect,how many corner candidates to consider when segmenting a group of pixels into a quad (default 10).
objdetect,int
objdetect,aprilTagMinClusterPixels
objdetect,reject quads containing too few pixels (default 5).
objdetect,int
objdetect,aprilTagMinWhiteBlackDiff
objdetect,add an extra check that the white model must be (overall) brighter than the black model.
objdetect,float
objdetect,aprilTagQuadDecimate
objdetect,April :: User-configurable parameters.
objdetect,float
objdetect,aprilTagQuadSigma
objdetect,what Gaussian blur should be applied to the segmented image (used for quad detection?)
objdetect,int
objdetect,cornerRefinementMaxIterations
objdetect,maximum number of iterations for stop criteria of the corner refinement process (default 30).
objdetect,int
objdetect,cornerRefinementMethod
objdetect,default value CORNER_REFINE_NONE
objdetect,double
objdetect,cornerRefinementMinAccuracy
objdetect,minimum error for the stop cristeria of the corner refinement process (default: 0.1)
objdetect,int
objdetect,cornerRefinementWinSize
objdetect,maximum window size for the corner refinement process (in pixels) (default 5).
objdetect,bool
objdetect,detectInvertedMarker
objdetect,to check if there is a white marker.
objdetect,double
objdetect,errorCorrectionRate
objdetect,error correction rate respect to the maximun error correction capability for each dictionary (default 0.6).
objdetect,int
objdetect,markerBorderBits
objdetect,"number of bits of the marker border, i.e. marker border width (default 1)."
objdetect,double
objdetect,maxErroneousBitsInBorderRate
objdetect,maximum number of accepted erroneous bits in the border (i.e. number of allowed white bits in the border).
objdetect,double
objdetect,maxMarkerPerimeterRate
objdetect,determine maximum perimeter for marker contour to be detected.
objdetect,double
objdetect,minCornerDistanceRate
objdetect,minimum distance between corners for detected markers relative to its perimeter (default 0.05)
objdetect,int
objdetect,minDistanceToBorder
objdetect,minimum distance of any corner to the image border for detected markers (in pixels) (default 3)
objdetect,float
objdetect,minGroupDistance = 0.21f
objdetect,minimum average distance between the corners of the two markers in group to add them to the list of candidates
objdetect,double
objdetect,minMarkerDistanceRate
objdetect,minimum average distance between the corners of the two markers to be grouped (default 0.125).
objdetect,float
objdetect,minMarkerLengthRatioOriginalImg
objdetect,"range [0,1], eq (2) from paper. The parameter tau_i has a direct influence on the processing speed."
objdetect,double
objdetect,minMarkerPerimeterRate
objdetect,determine minimum perimeter for marker contour to be detected.
objdetect,double
objdetect,minOtsuStdDev
objdetect,"minimun standard deviation in pixels values during the decodification step to apply Otsu thresholding (otherwise, all the bits are set to 0 or 1 depending on mean higher than 128 or not) (default 5.0)"
objdetect,int
objdetect,minSideLengthCanonicalImg
objdetect,minimum side length of a marker in the canonical image. Latter is the binarized image in which contours are searched.
objdetect,double
objdetect,perspectiveRemoveIgnoredMarginPerCell
objdetect,width of the margin of pixels on each cell not considered for the determination of the cell bit.
objdetect,int
objdetect,perspectiveRemovePixelPerCell
objdetect,number of bits (per dimension) for each cell of the marker when removing the perspective (default 4).
objdetect,double
objdetect,polygonalApproxAccuracyRate
objdetect,minimum accuracy during the polygonal approximation process to determine which contours are squares. (default 0.03)
objdetect,float
objdetect,relativeCornerRefinmentWinSize
objdetect,Dynamic window size for corner refinement relative to Aruco module size (default 0.3).
objdetect,bool
objdetect,useAruco3Detection
objdetect,enable the new and faster Aruco detection strategy.
objdetect,Public Attributes
objdetect,Ptr< BaseCascadeClassifier >
objdetect,cc
objdetect,Protected Attributes
objdetect,Ptr< ArucoDetectorImpl >
objdetect,arucoDetectorImpl
objdetect,Additional Inherited Members
objdetect,Protected Attributes inherited from cv::GraphicalCodeDetector
objdetect,Ptr< Impl >
objdetect,p
objdetect,Public Attributes
objdetect,bool
objdetect,checkAllOrders
objdetect,checkAllOrders consider the four posible corner orders in the rejectedCorners array.
objdetect,float
objdetect,errorCorrectionRate
objdetect,errorCorrectionRate rate of allowed erroneous bits respect to the error correction capability of the used dictionary.
objdetect,float
objdetect,minRepDistance
objdetect,minRepDistance minimum distance between the corners of the rejected candidate and the reprojected marker in order to consider it as a correspondence.
objdetect,Public Attributes
objdetect,Mat
objdetect,bytesList
objdetect,marker code information. See class description for more details
objdetect,int
objdetect,markerSize
objdetect,number of bits per dimension
objdetect,int
objdetect,maxCorrectionBits
objdetect,maximum number of bits that can be corrected
objdetect,Public Attributes
objdetect,Size
objdetect,blockSize
objdetect,"Block size in pixels. Align to cell size. Default value is Size(16,16)."
objdetect,Size
objdetect,blockStride
objdetect,"Block stride. It must be a multiple of cell size. Default value is Size(8,8)."
objdetect,Size
objdetect,cellSize
objdetect,"Cell size. Default value is Size(8,8)."
objdetect,int
objdetect,derivAperture
objdetect,not documented
objdetect,float
objdetect,free_coef
objdetect,not documented
objdetect,bool
objdetect,gammaCorrection
objdetect,Flag to specify whether the gamma correction preprocessing is required or not.
objdetect,HOGDescriptor::HistogramNormType
objdetect,histogramNormType
objdetect,histogramNormType
objdetect,double
objdetect,L2HysThreshold
objdetect,L2-Hys normalization method shrinkage.
objdetect,int
objdetect,nbins
objdetect,Number of bins used in the calculation of histogram of gradients. Default value is 9.
objdetect,int
objdetect,nlevels
objdetect,Maximum number of detection window increases. Default value is 64.
objdetect,UMat
objdetect,oclSvmDetector
objdetect,coefficients for the linear SVM classifier used when OpenCL is enabled
objdetect,bool
objdetect,signedGradient
objdetect,Indicates signed gradient will be used or not.
objdetect,std::vector< float >
objdetect,svmDetector
objdetect,coefficients for the linear SVM classifier.
objdetect,double
objdetect,winSigma
objdetect,Gaussian smoothing window parameter.
objdetect,Size
objdetect,winSize
objdetect,"Detection window size. Align to block size and block stride. Default value is Size(64,128)."
objdetect,Protected Attributes
objdetect,Ptr< Impl >
objdetect,p
objdetect,Protected Attributes
objdetect,Ptr< CharucoDetectorImpl >
objdetect,charucoDetectorImpl
objdetect,Additional Inherited Members
objdetect,Protected Attributes inherited from cv::GraphicalCodeDetector
objdetect,Ptr< Impl >
objdetect,p
objdetect,Additional Inherited Members
objdetect,Protected Member Functions inherited from cv::aruco::Board
objdetect,Board (const Ptr< Impl > &impl)
objdetect,Protected Attributes inherited from cv::aruco::Board
objdetect,Ptr< Impl >
objdetect,impl
objdetect,Additional Inherited Members
objdetect,Protected Attributes inherited from cv::GraphicalCodeDetector
objdetect,Ptr< Impl >
objdetect,p
objdetect,Public Attributes
objdetect,Mat
objdetect,cameraMatrix
objdetect,cameraMatrix optional 3x3 floating-point camera matrix
objdetect,Mat
objdetect,distCoeffs
objdetect,distCoeffs optional vector of distortion coefficients
objdetect,int
objdetect,minMarkers
objdetect,"minMarkers number of adjacent markers that must be detected to return a charuco corner, default = 2"
objdetect,bool
objdetect,tryRefineMarkers
objdetect,"try to use refine board, default false"
photo,Public Attributes
photo,Allocator *
photo,allocator
photo,allocator
photo,int
photo,cols
photo,uchar *
photo,data
photo,pointer to the data
photo,const uchar *
photo,dataend
photo,uchar *
photo,datastart
photo,helper fields used in locateROI and adjustROI
photo,int
photo,flags
photo,int *
photo,refcount
photo,int
photo,rows
photo,the number of rows and columns
photo,size_t
photo,step
photo,a distance between successive rows in bytes; includes the gap if any
photo,Public Attributes
photo,MatAllocator *
photo,allocator
photo,custom allocator
photo,int
photo,cols
photo,uchar *
photo,data
photo,pointer to the data
photo,const uchar *
photo,dataend
photo,const uchar *
photo,datalimit
photo,const uchar *
photo,datastart
photo,helper fields used in locateROI and adjustROI
photo,int
photo,dims
photo,"the matrix dimensionality, >= 2"
photo,int
photo,flags
photo,int
photo,rows
photo,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
photo,MatSize
photo,size
photo,MatStep
photo,step
photo,UMatData *
photo,u
photo,interaction with UMat
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::aruco::Board
stitching,Board (const Ptr< Impl > &impl)
stitching,Protected Attributes inherited from cv::aruco::Board
stitching,Ptr< Impl >
stitching,impl
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::_OutputArray
stitching,enum
stitching,"DepthMask { DEPTH_MASK_8U = 1 << CV_8U , DEPTH_MASK_8S = 1 << CV_8S , DEPTH_MASK_16U = 1 << CV_16U , DEPTH_MASK_16S = 1 << CV_16S , DEPTH_MASK_32S = 1 << CV_32S , DEPTH_MASK_32F = 1 << CV_32F , DEPTH_MASK_64F = 1 << CV_64F , DEPTH_MASK_16F = 1 << CV_16F , DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1 , DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S , DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F<<1)-1 , DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F }"
stitching,Public Types inherited from cv::_InputArray
stitching,enum
stitching,"KindFlag { KIND_SHIFT = 16 , FIXED_TYPE = 0x8000 << KIND_SHIFT , FIXED_SIZE = 0x4000 << KIND_SHIFT , KIND_MASK = 31 << KIND_SHIFT , NONE = 0 << KIND_SHIFT , MAT = 1 << KIND_SHIFT , MATX = 2 << KIND_SHIFT , STD_VECTOR = 3 << KIND_SHIFT , STD_VECTOR_VECTOR = 4 << KIND_SHIFT , STD_VECTOR_MAT = 5 << KIND_SHIFT , EXPR = 6 << KIND_SHIFT , OPENGL_BUFFER = 7 << KIND_SHIFT , CUDA_HOST_MEM = 8 << KIND_SHIFT , CUDA_GPU_MAT = 9 << KIND_SHIFT , UMAT =10 << KIND_SHIFT , STD_VECTOR_UMAT =11 << KIND_SHIFT , STD_BOOL_VECTOR =12 << KIND_SHIFT , STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT , STD_ARRAY =14 << KIND_SHIFT , STD_ARRAY_MAT =15 << KIND_SHIFT }"
stitching,Protected Member Functions inherited from cv::_InputArray
stitching,void
stitching,"init (int _flags, const void *_obj)"
stitching,void
stitching,"init (int _flags, const void *_obj, Size _sz)"
stitching,Protected Attributes inherited from cv::_InputArray
stitching,int
stitching,flags
stitching,void *
stitching,obj
stitching,Size
stitching,sz
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::ExposureCompensator
stitching,enum
stitching,"{ NO , GAIN , GAIN_BLOCKS , CHANNELS , CHANNELS_BLOCKS }"
stitching,Static Public Member Functions inherited from cv::detail::ExposureCompensator
stitching,static Ptr< ExposureCompensator >
stitching,createDefault (int type)
stitching,Protected Attributes inherited from cv::detail::ExposureCompensator
stitching,bool
stitching,updateGain
stitching,Public Attributes
stitching,float
stitching,a
stitching,float
stitching,b
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Public Attributes
stitching,Mat
stitching,a
stitching,double
stitching,alpha
stitching,Mat
stitching,b
stitching,double
stitching,beta
stitching,Mat
stitching,c
stitching,int
stitching,flags
stitching,const MatOp *
stitching,op
stitching,Scalar
stitching,s
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< StereographicProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< StereographicProjector >
stitching,StereographicProjector
stitching,projector_
stitching,Public Attributes
stitching,Impl *
stitching,p
stitching,Additional Inherited Members
stitching,"Public Types inherited from cv::Vec< _Tp, 4 >"
stitching,enum
stitching,typedef _Tp
stitching,value_type
stitching,"Public Types inherited from cv::Matx< _Tp, cn, 1 >"
stitching,enum
stitching,"typedef Matx< _Tp, shortdim, 1 >"
stitching,diag_type
stitching,"typedef Matx< _Tp, m, n >"
stitching,mat_type
stitching,typedef _Tp
stitching,value_type
stitching,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
stitching,_Tp
stitching,val [m *n]
stitching,matrix elements
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::MatConstIterator
stitching,size_t
stitching,elemSize
stitching,const Mat *
stitching,m
stitching,const uchar *
stitching,ptr
stitching,const uchar *
stitching,sliceEnd
stitching,const uchar *
stitching,sliceStart
stitching,Public Attributes
stitching,int
stitching,code
stitching,error code
stitching,String
stitching,err
stitching,error description
stitching,String
stitching,file
stitching,source file name where the error has occurred
stitching,String
stitching,func
stitching,function name. Available only when the compiler supports getting it
stitching,int
stitching,line
stitching,line number in the source file where the error has occurred
stitching,String
stitching,msg
stitching,the formatted error message
stitching,Protected Attributes
stitching,Ptr< ArucoDetectorImpl >
stitching,arucoDetectorImpl
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::PlaneWarper
stitching,void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br) CV_OVERRIDE"
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< PlaneProjector >
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< PlaneProjector >
stitching,PlaneProjector
stitching,projector_
stitching,Public Attributes
stitching,float
stitching,angle
stitching,int
stitching,class_id
stitching,object class (if the keypoints need to be clustered by an object they belong to)
stitching,int
stitching,octave
stitching,octave (pyramid layer) from which the keypoint has been extracted
stitching,Point2f
stitching,pt
stitching,coordinates of the keypoints
stitching,float
stitching,response
stitching,the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling
stitching,float
stitching,size
stitching,diameter of the meaningful keypoint neighborhood
stitching,Protected Attributes
stitching,bool
stitching,updateGain
stitching,Public Attributes
stitching,_Tp
stitching,height
stitching,height of the rectangle
stitching,_Tp
stitching,width
stitching,width of the rectangle
stitching,_Tp
stitching,x
stitching,x coordinate of the top-left corner
stitching,_Tp
stitching,y
stitching,y coordinate of the top-left corner
stitching,Static Public Attributes
stitching,static const double
stitching,ORIG_RESOL
stitching,Public Attributes
stitching,double
stitching,confidence
stitching,Confidence two images are from the same panorama.
stitching,int
stitching,dst_img_idx
stitching,Images indices (optional)
stitching,Mat
stitching,H
stitching,Estimated transformation.
stitching,std::vector< uchar >
stitching,inliers_mask
stitching,Geometrically consistent matches mask.
stitching,std::vector< DMatch >
stitching,matches
stitching,int
stitching,num_inliers
stitching,Number of geometrically consistent matches.
stitching,int
stitching,src_img_idx
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::_InputArray
stitching,void
stitching,"init (int _flags, const void *_obj)"
stitching,void
stitching,"init (int _flags, const void *_obj, Size _sz)"
stitching,Protected Attributes inherited from cv::_InputArray
stitching,int
stitching,flags
stitching,void *
stitching,obj
stitching,Size
stitching,sz
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::ExposureCompensator
stitching,enum
stitching,"{ NO , GAIN , GAIN_BLOCKS , CHANNELS , CHANNELS_BLOCKS }"
stitching,Static Public Member Functions inherited from cv::detail::ExposureCompensator
stitching,static Ptr< ExposureCompensator >
stitching,createDefault (int type)
stitching,Protected Attributes inherited from cv::detail::ExposureCompensator
stitching,bool
stitching,updateGain
stitching,Public Attributes
stitching,float
stitching,a
stitching,float
stitching,b
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::SparseMatConstIterator
stitching,size_t
stitching,hashidx
stitching,const SparseMat *
stitching,m
stitching,uchar *
stitching,ptr
stitching,Public Attributes
stitching,MatAllocator *
stitching,allocator
stitching,custom allocator
stitching,int
stitching,cols
stitching,uchar *
stitching,data
stitching,pointer to the data
stitching,const uchar *
stitching,dataend
stitching,const uchar *
stitching,datalimit
stitching,const uchar *
stitching,datastart
stitching,helper fields used in locateROI and adjustROI
stitching,int
stitching,dims
stitching,"the matrix dimensionality, >= 2"
stitching,int
stitching,flags
stitching,int
stitching,rows
stitching,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
stitching,MatSize
stitching,size
stitching,MatStep
stitching,step
stitching,UMatData *
stitching,u
stitching,interaction with UMat
stitching,Public Attributes
stitching,std::vector< Mat >
stitching,blobs
stitching,List of learned parameters must be stored here to allow read them by using Net::getParam().
stitching,String
stitching,name
stitching,"Name of the layer instance, can be used for logging or other internal purposes."
stitching,int
stitching,preferableTarget
stitching,prefer target for layer forwarding
stitching,String
stitching,type
stitching,Type name which was used for creating layer by layer factory.
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::ExposureCompensator
stitching,enum
stitching,"{ NO , GAIN , GAIN_BLOCKS , CHANNELS , CHANNELS_BLOCKS }"
stitching,Static Public Member Functions inherited from cv::detail::ExposureCompensator
stitching,static Ptr< ExposureCompensator >
stitching,createDefault (int type)
stitching,Protected Member Functions inherited from cv::detail::BlocksCompensator
stitching,template<class Compensator >
stitching,void
stitching,"feed (const std::vector< Point > &corners, const std::vector< UMat > &images, const std::vector< std::pair< UMat, uchar > > &masks)"
stitching,Protected Attributes inherited from cv::detail::ExposureCompensator
stitching,bool
stitching,updateGain
stitching,Public Attributes
stitching,float
stitching,a
stitching,float
stitching,b
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Public Attributes
stitching,double
stitching,aspect
stitching,double
stitching,focal
stitching,double
stitching,ppx
stitching,double
stitching,ppy
stitching,Mat
stitching,R
stitching,Mat
stitching,t
stitching,Public Attributes
stitching,size_t
stitching,buf [2]
stitching,size_t *
stitching,p
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::Blender
stitching,enum
stitching,"{ NO , FEATHER , MULTI_BAND }"
stitching,Static Public Member Functions inherited from cv::detail::Blender
stitching,static Ptr< Blender >
stitching,"createDefault (int type, bool try_gpu=false)"
stitching,Protected Attributes inherited from cv::detail::Blender
stitching,UMat
stitching,dst_
stitching,UMat
stitching,dst_mask_
stitching,Rect
stitching,dst_roi_
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< TransverseMercatorProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< TransverseMercatorProjector >
stitching,TransverseMercatorProjector
stitching,projector_
stitching,Public Attributes
stitching,UMat
stitching,descriptors
stitching,int
stitching,img_idx
stitching,Size
stitching,img_size
stitching,std::vector< KeyPoint >
stitching,keypoints
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::BundleAdjusterBase
stitching,"BundleAdjusterBase (int num_params_per_cam, int num_errs_per_measurement)"
stitching,Construct a bundle adjuster base instance.
stitching,virtual bool
stitching,"estimate (const std::vector< ImageFeatures > &features, const std::vector< MatchesInfo > &pairwise_matches, std::vector< CameraParams > &cameras) CV_OVERRIDE"
stitching,This method must implement camera parameters estimation logic in order to make the wrapper detail::Estimator::operator()_ work.
stitching,Protected Attributes inherited from cv::detail::BundleAdjusterBase
stitching,Mat
stitching,cam_params_
stitching,double
stitching,conf_thresh_
stitching,"std::vector< std::pair< int, int > >"
stitching,edges_
stitching,const ImageFeatures *
stitching,features_
stitching,int
stitching,num_errs_per_measurement_
stitching,int
stitching,num_images_
stitching,int
stitching,num_params_per_cam_
stitching,const MatchesInfo *
stitching,pairwise_matches_
stitching,Mat
stitching,refinement_mask_
stitching,TermCriteria
stitching,term_criteria_
stitching,int
stitching,total_num_matches_
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::ExposureCompensator
stitching,enum
stitching,"{ NO , GAIN , GAIN_BLOCKS , CHANNELS , CHANNELS_BLOCKS }"
stitching,Static Public Member Functions inherited from cv::detail::ExposureCompensator
stitching,static Ptr< ExposureCompensator >
stitching,createDefault (int type)
stitching,Protected Attributes inherited from cv::detail::ExposureCompensator
stitching,bool
stitching,updateGain
stitching,Public Attributes
stitching,float
stitching,distance
stitching,int
stitching,imgIdx
stitching,train image index
stitching,int
stitching,queryIdx
stitching,query descriptor index
stitching,int
stitching,trainIdx
stitching,train descriptor index
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::MatConstIterator
stitching,size_t
stitching,elemSize
stitching,const Mat *
stitching,m
stitching,const uchar *
stitching,ptr
stitching,const uchar *
stitching,sliceEnd
stitching,const uchar *
stitching,sliceStart
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::Blender
stitching,enum
stitching,"{ NO , FEATHER , MULTI_BAND }"
stitching,Static Public Member Functions inherited from cv::detail::Blender
stitching,static Ptr< Blender >
stitching,"createDefault (int type, bool try_gpu=false)"
stitching,Protected Attributes inherited from cv::detail::Blender
stitching,UMat
stitching,dst_
stitching,UMat
stitching,dst_mask_
stitching,Rect
stitching,dst_roi_
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::SparseMatConstIterator
stitching,size_t
stitching,hashidx
stitching,const SparseMat *
stitching,m
stitching,uchar *
stitching,ptr
stitching,Public Attributes
stitching,int
stitching,from
stitching,int
stitching,to
stitching,float
stitching,weight
stitching,Public Attributes
stitching,const Mat **
stitching,arrays
stitching,the iterated arrays
stitching,int
stitching,narrays
stitching,the number of arrays
stitching,size_t
stitching,nplanes
stitching,the number of hyper-planes that the iterator steps through
stitching,Mat *
stitching,planes
stitching,the current planes
stitching,uchar **
stitching,ptrs
stitching,data pointers
stitching,size_t
stitching,size
stitching,the size of each segment (in elements)
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Protected Attributes
stitching,UMat
stitching,dst_
stitching,UMat
stitching,dst_mask_
stitching,Rect
stitching,dst_roi_
stitching,Public Attributes
stitching,_Tp
stitching,height
stitching,the height
stitching,_Tp
stitching,width
stitching,the width
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::BundleAdjusterBase
stitching,"BundleAdjusterBase (int num_params_per_cam, int num_errs_per_measurement)"
stitching,Construct a bundle adjuster base instance.
stitching,virtual bool
stitching,"estimate (const std::vector< ImageFeatures > &features, const std::vector< MatchesInfo > &pairwise_matches, std::vector< CameraParams > &cameras) CV_OVERRIDE"
stitching,This method must implement camera parameters estimation logic in order to make the wrapper detail::Estimator::operator()_ work.
stitching,Protected Attributes inherited from cv::detail::BundleAdjusterBase
stitching,Mat
stitching,cam_params_
stitching,double
stitching,conf_thresh_
stitching,"std::vector< std::pair< int, int > >"
stitching,edges_
stitching,const ImageFeatures *
stitching,features_
stitching,int
stitching,num_errs_per_measurement_
stitching,int
stitching,num_images_
stitching,int
stitching,num_params_per_cam_
stitching,const MatchesInfo *
stitching,pairwise_matches_
stitching,Mat
stitching,refinement_mask_
stitching,TermCriteria
stitching,term_criteria_
stitching,int
stitching,total_num_matches_
stitching,Protected Attributes
stitching,MatIterator_< _Tp >
stitching,it
stitching,Additional Inherited Members
stitching,"Public Attributes inherited from cv::Matx< _Tp, cn, 1 >"
stitching,_Tp
stitching,val [m *n]
stitching,matrix elements
stitching,Public Attributes
stitching,MatAllocator *
stitching,allocator
stitching,custom allocator
stitching,int
stitching,cols
stitching,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
stitching,int
stitching,dims
stitching,"the matrix dimensionality, >= 2"
stitching,int
stitching,flags
stitching,size_t
stitching,offset
stitching,offset of the submatrix (or 0)
stitching,int
stitching,rows
stitching,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
stitching,MatSize
stitching,size
stitching,dimensional size of the matrix; accessible in various formats
stitching,MatStep
stitching,step
stitching,number of bytes each matrix element/row/plane/dimension occupies
stitching,UMatData *
stitching,u
stitching,black-box container of UMat data
stitching,UMatUsageFlags
stitching,usageFlags
stitching,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::ExposureCompensator
stitching,enum
stitching,"{ NO , GAIN , GAIN_BLOCKS , CHANNELS , CHANNELS_BLOCKS }"
stitching,Static Public Member Functions inherited from cv::detail::ExposureCompensator
stitching,static Ptr< ExposureCompensator >
stitching,createDefault (int type)
stitching,Protected Attributes inherited from cv::detail::ExposureCompensator
stitching,bool
stitching,updateGain
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::SparseMat
stitching,int
stitching,flags
stitching,Hdr *
stitching,hdr
stitching,Public Attributes
stitching,size_t
stitching,elemSize
stitching,const Mat *
stitching,m
stitching,const uchar *
stitching,ptr
stitching,const uchar *
stitching,sliceEnd
stitching,const uchar *
stitching,sliceStart
stitching,Protected Attributes
stitching,Impl *
stitching,p
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::SparseMatConstIterator
stitching,size_t
stitching,hashidx
stitching,const SparseMat *
stitching,m
stitching,uchar *
stitching,ptr
stitching,Public Attributes
stitching,double
stitching,epsilon
stitching,the desired accuracy
stitching,int
stitching,maxCount
stitching,the maximum number of iterations/elements
stitching,int
stitching,type
stitching,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< FisheyeProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< FisheyeProjector >
stitching,FisheyeProjector
stitching,projector_
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::CylindricalWarper
stitching,void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br) CV_OVERRIDE"
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< CylindricalProjector >
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< CylindricalProjector >
stitching,CylindricalProjector
stitching,projector_
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Protected Attributes
stitching,Ptr< CharucoDetectorImpl >
stitching,charucoDetectorImpl
stitching,Public Attributes
stitching,int
stitching,end
stitching,int
stitching,start
stitching,Public Attributes
stitching,std::string
stitching,elname
stitching,Ptr< Impl >
stitching,p
stitching,int
stitching,state
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::BundleAdjusterBase
stitching,"BundleAdjusterBase (int num_params_per_cam, int num_errs_per_measurement)"
stitching,Construct a bundle adjuster base instance.
stitching,virtual bool
stitching,"estimate (const std::vector< ImageFeatures > &features, const std::vector< MatchesInfo > &pairwise_matches, std::vector< CameraParams > &cameras) CV_OVERRIDE"
stitching,This method must implement camera parameters estimation logic in order to make the wrapper detail::Estimator::operator()_ work.
stitching,Protected Attributes inherited from cv::detail::BundleAdjusterBase
stitching,Mat
stitching,cam_params_
stitching,double
stitching,conf_thresh_
stitching,"std::vector< std::pair< int, int > >"
stitching,edges_
stitching,const ImageFeatures *
stitching,features_
stitching,int
stitching,num_errs_per_measurement_
stitching,int
stitching,num_images_
stitching,int
stitching,num_params_per_cam_
stitching,const MatchesInfo *
stitching,pairwise_matches_
stitching,Mat
stitching,refinement_mask_
stitching,TermCriteria
stitching,term_criteria_
stitching,int
stitching,total_num_matches_
stitching,Public Attributes
stitching,_Tp
stitching,im
stitching,the real and the imaginary parts
stitching,_Tp
stitching,re
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::SphericalWarper
stitching,void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br) CV_OVERRIDE"
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< SphericalProjector >
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< SphericalProjector >
stitching,SphericalProjector
stitching,projector_
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::SeamFinder
stitching,enum
stitching,"{ NO , VORONOI_SEAM , DP_SEAM }"
stitching,Static Public Member Functions inherited from cv::detail::SeamFinder
stitching,static Ptr< SeamFinder >
stitching,createDefault (int type)
stitching,Protected Member Functions inherited from cv::detail::PairwiseSeamFinder
stitching,void
stitching,run ()
stitching,Protected Attributes inherited from cv::detail::PairwiseSeamFinder
stitching,std::vector< Point >
stitching,corners_
stitching,std::vector< UMat >
stitching,images_
stitching,std::vector< UMat >
stitching,masks_
stitching,std::vector< Size >
stitching,sizes_
stitching,Protected Attributes
stitching,Ptr< Impl >
stitching,impl
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::dnn::Layer
stitching,std::vector< Mat >
stitching,blobs
stitching,List of learned parameters must be stored here to allow read them by using Net::getParam().
stitching,String
stitching,name
stitching,"Name of the layer instance, can be used for logging or other internal purposes."
stitching,int
stitching,preferableTarget
stitching,prefer target for layer forwarding
stitching,String
stitching,type
stitching,Type name which was used for creating layer by layer factory.
stitching,Protected Member Functions inherited from cv::Algorithm
stitching,void
stitching,writeFormat (FileStorage &fs) const
stitching,Public Attributes
stitching,_Tp
stitching,x
stitching,x coordinate of the point
stitching,_Tp
stitching,y
stitching,y coordinate of the point
stitching,Public Attributes
stitching,std::shared_ptr< void >
stitching,allocatorContext
stitching,int
stitching,allocatorFlags_
stitching,const MatAllocator *
stitching,currAllocator
stitching,uchar *
stitching,data
stitching,UMatData::MemoryFlag
stitching,flags
stitching,void *
stitching,handle
stitching,int
stitching,mapcount
stitching,uchar *
stitching,origdata
stitching,UMatData *
stitching,originalUMatData
stitching,const MatAllocator *
stitching,prevAllocator
stitching,int
stitching,refcount
stitching,size_t
stitching,size
stitching,int
stitching,urefcount
stitching,void *
stitching,userdata
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< PaniniPortraitProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< PaniniPortraitProjector >
stitching,PaniniPortraitProjector
stitching,projector_
stitching,Public Attributes
stitching,float
stitching,a
stitching,float
stitching,b
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::BundleAdjusterBase
stitching,"BundleAdjusterBase (int num_params_per_cam, int num_errs_per_measurement)"
stitching,Construct a bundle adjuster base instance.
stitching,Protected Attributes inherited from cv::detail::BundleAdjusterBase
stitching,Mat
stitching,cam_params_
stitching,double
stitching,conf_thresh_
stitching,"std::vector< std::pair< int, int > >"
stitching,edges_
stitching,const ImageFeatures *
stitching,features_
stitching,int
stitching,num_errs_per_measurement_
stitching,int
stitching,num_images_
stitching,int
stitching,num_params_per_cam_
stitching,const MatchesInfo *
stitching,pairwise_matches_
stitching,Mat
stitching,refinement_mask_
stitching,TermCriteria
stitching,term_criteria_
stitching,int
stitching,total_num_matches_
stitching,Public Attributes
stitching,float
stitching,angle
stitching,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
stitching,Point2f
stitching,center
stitching,returns the rectangle mass center
stitching,Size2f
stitching,size
stitching,returns width and height of the rectangle
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< PaniniProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< PaniniProjector >
stitching,PaniniProjector
stitching,projector_
stitching,Public Attributes
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Public Attributes
stitching,std::vector< int >
stitching,parent
stitching,std::vector< int >
stitching,size
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::BundleAdjusterBase
stitching,"BundleAdjusterBase (int num_params_per_cam, int num_errs_per_measurement)"
stitching,Construct a bundle adjuster base instance.
stitching,virtual bool
stitching,"estimate (const std::vector< ImageFeatures > &features, const std::vector< MatchesInfo > &pairwise_matches, std::vector< CameraParams > &cameras) CV_OVERRIDE"
stitching,This method must implement camera parameters estimation logic in order to make the wrapper detail::Estimator::operator()_ work.
stitching,Protected Attributes inherited from cv::detail::BundleAdjusterBase
stitching,Mat
stitching,cam_params_
stitching,double
stitching,conf_thresh_
stitching,"std::vector< std::pair< int, int > >"
stitching,edges_
stitching,const ImageFeatures *
stitching,features_
stitching,int
stitching,num_errs_per_measurement_
stitching,int
stitching,num_images_
stitching,int
stitching,num_params_per_cam_
stitching,const MatchesInfo *
stitching,pairwise_matches_
stitching,Mat
stitching,refinement_mask_
stitching,TermCriteria
stitching,term_criteria_
stitching,int
stitching,total_num_matches_
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< MercatorProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< MercatorProjector >
stitching,MercatorProjector
stitching,projector_
stitching,Public Attributes
stitching,PatternPositionType
stitching,pattern
stitching,int
stitching,solvePnPMethod
stitching,bool
stitching,useExtrinsicGuess
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Public Attributes
stitching,int
stitching,flags
stitching,Hdr *
stitching,hdr
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< CompressedRectilinearProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< CompressedRectilinearProjector >
stitching,CompressedRectilinearProjector
stitching,projector_
stitching,Additional Inherited Members
stitching,Protected Member Functions inherited from cv::detail::RotationWarperBase< CompressedRectilinearPortraitProjector >
stitching,virtual void
stitching,"detectResultRoi (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,void
stitching,"detectResultRoiByBorder (Size src_size, Point &dst_tl, Point &dst_br)"
stitching,Protected Attributes inherited from cv::detail::RotationWarperBase< CompressedRectilinearPortraitProjector >
stitching,CompressedRectilinearPortraitProjector
stitching,projector_
stitching,Public Attributes
stitching,size_t
stitching,blockIdx
stitching,FileStorage::Impl *
stitching,fs
stitching,size_t
stitching,ofs
stitching,Public Attributes
stitching,_Tp
stitching,val [m *n]
stitching,matrix elements
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::detail::ProjectorBase
stitching,float
stitching,k [9]
stitching,float
stitching,k_rinv [9]
stitching,float
stitching,r_kinv [9]
stitching,float
stitching,rinv [9]
stitching,float
stitching,scale
stitching,float
stitching,t [3]
stitching,Public Attributes
stitching,int *
stitching,p
stitching,Public Attributes
stitching,_Tp
stitching,x
stitching,x coordinate of the 3D point
stitching,_Tp
stitching,y
stitching,y coordinate of the 3D point
stitching,_Tp
stitching,z
stitching,z coordinate of the 3D point
stitching,Additional Inherited Members
stitching,Public Types inherited from cv::detail::Timelapser
stitching,enum
stitching,"{ AS_IS , CROP }"
stitching,Static Public Member Functions inherited from cv::detail::Timelapser
stitching,static Ptr< Timelapser >
stitching,createDefault (int type)
stitching,Protected Member Functions inherited from cv::detail::Timelapser
stitching,virtual bool
stitching,test_point (Point pt)
stitching,Protected Attributes inherited from cv::detail::Timelapser
stitching,UMat
stitching,dst_
stitching,Rect
stitching,dst_roi_
stitching,Public Attributes
stitching,size_t
stitching,hashidx
stitching,const SparseMat *
stitching,m
stitching,uchar *
stitching,ptr
stitching,Additional Inherited Members
stitching,Public Attributes inherited from cv::Mat
stitching,MatAllocator *
stitching,allocator
stitching,custom allocator
stitching,int
stitching,cols
stitching,uchar *
stitching,data
stitching,pointer to the data
stitching,const uchar *
stitching,dataend
stitching,const uchar *
stitching,datalimit
stitching,const uchar *
stitching,datastart
stitching,helper fields used in locateROI and adjustROI
stitching,int
stitching,dims
stitching,"the matrix dimensionality, >= 2"
stitching,int
stitching,flags
stitching,int
stitching,rows
stitching,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
stitching,MatSize
stitching,size
stitching,MatStep
stitching,step
stitching,UMatData *
stitching,u
stitching,interaction with UMat
stitching,Protected Member Functions inherited from cv::Mat
stitching,"template<typename _Tp , typename Functor >"
stitching,void
stitching,forEach_impl (const Functor &operation)
video,Public Attributes
video,MatAllocator *
video,allocator
video,custom allocator
video,int
video,cols
video,uchar *
video,data
video,pointer to the data
video,const uchar *
video,dataend
video,const uchar *
video,datalimit
video,const uchar *
video,datastart
video,helper fields used in locateROI and adjustROI
video,int
video,dims
video,"the matrix dimensionality, >= 2"
video,int
video,flags
video,int
video,rows
video,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
video,MatSize
video,size
video,MatStep
video,step
video,UMatData *
video,u
video,interaction with UMat
video,Static Public Attributes
video,static const NormTypes
video,normType = NORM_L1
video,Public Attributes
video,double
video,epsilon
video,the desired accuracy
video,int
video,maxCount
video,the maximum number of iterations/elements
video,int
video,type
video,"the type of termination criteria: COUNT, EPS or COUNT + EPS"
video,Public Attributes
video,float
video,angle
video,"returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle."
video,Point2f
video,center
video,returns the rectangle mass center
video,Size2f
video,size
video,returns width and height of the rectangle
video,Public Attributes
video,Mat
video,controlMatrix
video,control matrix (B) (not used if there is no control)
video,Mat
video,errorCovPost
video,posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)
video,Mat
video,errorCovPre
video,priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*/
video,Mat
video,gain
video,Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)
video,Mat
video,measurementMatrix
video,measurement matrix (H)
video,Mat
video,measurementNoiseCov
video,measurement noise covariance matrix (R)
video,Mat
video,processNoiseCov
video,process noise covariance matrix (Q)
video,Mat
video,statePost
video,corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))
video,Mat
video,statePre
video,predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)
video,Mat
video,temp1
video,Mat
video,temp2
video,Mat
video,temp3
video,Mat
video,temp4
video,Mat
video,temp5
video,Mat
video,transitionMatrix
video,state transition matrix (A)
videoio,Public Attributes
videoio,int
videoio,code
videoio,error code
videoio,String
videoio,err
videoio,error description
videoio,String
videoio,file
videoio,source file name where the error has occurred
videoio,String
videoio,func
videoio,function name. Available only when the compiler supports getting it
videoio,int
videoio,line
videoio,line number in the source file where the error has occurred
videoio,String
videoio,msg
videoio,the formatted error message
videoio,Public Attributes
videoio,MatAllocator *
videoio,allocator
videoio,custom allocator
videoio,int
videoio,cols
videoio,uchar *
videoio,data
videoio,pointer to the data
videoio,const uchar *
videoio,dataend
videoio,const uchar *
videoio,datalimit
videoio,const uchar *
videoio,datastart
videoio,helper fields used in locateROI and adjustROI
videoio,int
videoio,dims
videoio,"the matrix dimensionality, >= 2"
videoio,int
videoio,flags
videoio,int
videoio,rows
videoio,"the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions"
videoio,MatSize
videoio,size
videoio,MatStep
videoio,step
videoio,UMatData *
videoio,u
videoio,interaction with UMat
videoio,Public Attributes
videoio,MatAllocator *
videoio,allocator
videoio,custom allocator
videoio,int
videoio,cols
videoio,number of columns in the matrix; -1 when the matrix has more than 2 dimensions
videoio,int
videoio,dims
videoio,"the matrix dimensionality, >= 2"
videoio,int
videoio,flags
videoio,size_t
videoio,offset
videoio,offset of the submatrix (or 0)
videoio,int
videoio,rows
videoio,number of rows in the matrix; -1 when the matrix has more than 2 dimensions
videoio,MatSize
videoio,size
videoio,dimensional size of the matrix; accessible in various formats
videoio,MatStep
videoio,step
videoio,number of bytes each matrix element/row/plane/dimension occupies
videoio,UMatData *
videoio,u
videoio,black-box container of UMat data
videoio,UMatUsageFlags
videoio,usageFlags
videoio,"usage flags for allocator; recommend do not set directly, instead set during construct/create/getUMat"
videoio,Protected Attributes
videoio,Ptr< CvCapture >
videoio,cap
videoio,Ptr< IVideoCapture >
videoio,icap
videoio,bool
videoio,throwOnFail
videoio,Public Attributes
videoio,int
videoio,end
videoio,int
videoio,start
